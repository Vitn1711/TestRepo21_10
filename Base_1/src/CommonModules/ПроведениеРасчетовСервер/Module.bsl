////////////////////////////////////////////////////////////////////////////////
// ПроведениеРасчетов: модуль содержит методы для автоматизации расчетных механизмов
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращет структуру с правилами округления результата указанного вида расчета
//
// Параметры:
//	ВидРасчета - вид расчета начисления/удержания/налог/сбор/отчисление
//	ПериодРегистрации - дата месяца, в котором производится расчет
//
// Возвращаемое значение:
//	Структура с двумя ключами:
//		ПорядокОкругления - значение перечисления ПорядкиОкругления
//		МетодОкругления - значение перечисления МетодыОкругления
//
Функция ПолучитьПравилоОкругленияВидаРасчета(ВидРасчета, ПериодРегистрации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРасчета", ВидРасчета);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИспользоватьОбщееОкругление", ПериодРегистрации < '20220101' ИЛИ НЕ (ВидРасчета = Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование
															ИЛИ ВидРасчета = Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование
															ИЛИ ВидРасчета = Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления));

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ПорядокОкругленияВР.Период,
	|	ПорядокОкругленияВР.ПорядокОкругления,
	|	ПорядокОкругленияВР.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = &ВидРасчета) КАК ПорядокОкругленияВР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ПорядокОкругленияОбщ.Период,
	|	ПорядокОкругленияОбщ.ПорядокОкругления,
	|	ПорядокОкругленияОбщ.МетодОкругления
	|ИЗ
	|	РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
	|		&ПериодРегистрации, 
	|		ВидРасчета = НЕОПРЕДЕЛЕНО
	|		И &ИспользоватьОбщееОкругление) КАК ПорядокОкругленияОбщ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|";

	СтруктураПравила = Новый Структура();
	СтруктураПравила.Вставить("ПорядокОкругления", Перечисления.ПорядкиОкругления.Окр0_01);
	СтруктураПравила.Вставить("МетодОкругления", Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
	СтруктураПравила.Вставить("Период", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПравила.ПорядокОкругления 	= Выборка.ПорядокОкругления;
		СтруктураПравила.МетодОкругления 	= Выборка.МетодОкругления;
		СтруктураПравила.Период 			= Выборка.Период;
		Прервать;
	КонецЦикла;

	Возврат СтруктураПравила;

КонецФункции // ПолучитьПравилоОкругленияВидаРасчета()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокОсновныхВариантовНачисленийОрганизации() Экспорт

	 СписокСпособов = Новый Массив;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокОсновныхВариантовНачисленийОрганизации()

// Возвращает список регламентированных алгоритмов начислений
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокВариантовУдержанийОрганизации() Экспорт

	 СписокСпособов = Новый Массив;
	 
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	 СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);
	 
	 Возврат СписокСпособов

КонецФункции // ПолучитьСписокВариантовУдержанийОрганизации()

// Проверяет правильность заполнения реквизитов вида расчета, 
// выдает сообщение об ошибке
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки
Функция ПроверитьНастройкуВидаРасчета(ВидРасчета, Отказ) Экспорт
		
	СпособРасчета = ВидРасчета.СпособРасчета;
	
	// проверим настройку видов "от обратного"
	Если ЭтоРасчетОтОбратного(СпособРасчета) Тогда
		
		КомпенсироватьИПН = ВидРасчета.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.НайтиСтроки(Новый Структура("ВидРасчета", Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)).Количество() > 0;
		КомпенсироватьОПВ = ВидРасчета.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.НайтиСтроки(Новый Структура("ВидРасчета", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)).Количество() > 0;
		
		Если ВидРасчета.ОблагаетсяИПН = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом И КомпенсироватьИПН Тогда
			ТекстСообщения = НСтр("ru='Вид расчета не облагается ИПН, не нужно включать ИПН в список компенсируемых удержаний!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СпособРасчета, , "Объект", Отказ);
		КонецЕсли;
		
		Если ВидРасчета.ОблагаетсяОПВ = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом И КомпенсироватьОПВ Тогда
			ТекстСообщения = НСтр("ru='Вид расчета не облагается ОПВ, не нужно включать ОПВ в список компенсируемых удержаний!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СпособРасчета, , "Объект", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Для начислений процентом в качестве базовых видов расчета не должны 
	// входит другие виды расчета со способом расчета Процентом, т.к. 
	// расчет % идет от базовых видов в документе только один раз после расчета 
	// базовых видов.
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИсходныйВР", ВидРасчета.Ссылка);
		Запрос.УстановитьПараметр("Процентом", Перечисления.СпособыРасчетаОплатыТруда.Процентом);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПВР.ВидРасчета.Наименование КАК ВРНаименование
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.БазовыеВидыРасчета КАК ПВР
		|ГДЕ
		|	ПВР.Ссылка = &ИсходныйВР И
		|	ПВР.ВидРасчета.СпособРасчета = &Процентом
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru='Вид расчета "+Выборка.ВРНаименование+" рассчитывается процентом, поэтому не может быть назначен в качестве базового вида расчета!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВидРасчета, , "Объект", Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат "";
	КонецЕсли; 
	
КонецФункции // ПроверитьНастройкуВидаРасчета()

// проверка того, что способ расчета относится к расчетам "от обратного"
Функция ЭтоРасчетОтОбратного(СпособРасчета) Экспорт
	
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам;
			
КонецФункции

// Возвращает список способов расчетов фиксированной суммой
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовФиксированнойСуммой() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
									   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного); // данный способ "от обратного" также дается фиксированным размером
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
	
	Возврат СписокСпособов
	
КонецФункции // ПолучитьСписокСпособовРасчетовФиксированнойСуммой()

// Проверка того, что способ расчета относится к расчетам от минимальной зарплаты
//
Функция ЭтоРасчетПоМинимальнойЗаработнойПлате(СпособРасчета) Экспорт
	
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам;
			
КонецФункции

// Проверка того, что способ расчета относится к расчетам фиксированной суммой
Функция ЭтоРасчетФиксированнойСуммой(СпособРасчета) Экспорт
	
	Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой или
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных или 
			СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска;
			
КонецФункции

Функция ПолучитьСписокСпособовРасчетаОтВремени() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам);

	Возврат СписокСпособов
	
КонецФункции

Функция ПолучитьСписокСпособовРасчетаПроцентом() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
	
	Возврат СписокСпособов;
	
КонецФункции

// Возвращает список способов расчетов "от обратного"
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокСпособовРасчетовОтОбратного() Экспорт
	
	СписокСпособов = Новый СписокЗначений;
									   
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням);
	СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам);
	
	Возврат СписокСпособов
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АВТОМАТИЗАЦИИ РАСЧЕТА НАЧИСЛЕНИЙ И УДЕРЖАНИЙ

Процедура РассчитатьДокумент(ИмяПВР,
							 ИмяДокумента,
							 ИмяТЧ,
							 Документ,
							 Сотрудник = Неопределено,
							 КомментироватьРасчет = Ложь) Экспорт
	
	НачатьТранзакцию();
	
	ОсновныеНачисления = (ИмяПВР = "ОсновныеНачисленияОрганизаций");
	НакопленныеДанныеПоДокументу = (ИмяДокумента = "РасчетУдержанийРаботниковОрганизаций");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор", Документ.Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	ПоФизЛицам = (ТипЗнч(Сотрудник) = Тип("СправочникСсылка.ФизическиеЛица"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.Ссылка.ПериодРегистрации,
		|	ТабличнаяЧасть.Ссылка.Организация,
		|	ТабличнаяЧасть.НомерСтроки,
		|	ТабличнаяЧасть.Физлицо,
		|	ТабличнаяЧасть.ВидРасчета,
		|	ТабличнаяЧасть.Размер,
		|	ТабличнаяЧасть.ВидРасчета.СпособРасчета КАК СпособРасчета" + ?(ОсновныеНачисления, ",
		|	ТабличнаяЧасть.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ТабличнаяЧасть.Сотрудник,
		|	ТабличнаяЧасть.ОтработаноДней,
		|	ТабличнаяЧасть.ОтработаноЧасов,
		|	ТабличнаяЧасть.ДатаНачала,
		|	ТабличнаяЧасть.ДатаОкончания,
		|	ТабличнаяЧасть.ДополнительныеДанные", ?(НакопленныеДанныеПоДокументу,",
		|	ТабличнаяЧасть.ДокументОснование", ",
		|	ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка) КАК ДокументОснование")) + "
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ." + ИмяДокумента + "." + ИмяТЧ + " КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &парамРегистратор
		|	" + ?(Сотрудник <> Неопределено, "И ТабличнаяЧасть." + ?(ПоФизЛицам, "ФизЛицо", "Сотрудник") + " В (&Сотрудник)", "") + "";
		
	Запрос.Выполнить();
	ДанныеДокументТекст = "ВТ_ДанныеДокумента";
	
	Если ОсновныеНачисления Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КомпенсируемыеВидыУдержаний.Ссылка КАК ВидРасчета,
			|	ВЫБОР
			|		КОГДА СУММА(ВЫБОР
			|					КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
			|						ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ) <> 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК КомпенсироватьИПН,
			|	ВЫБОР
			|		КОГДА СУММА(ВЫБОР
			|					КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
			|						ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ) <> 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК КомпенсироватьОПВ,
			|	ВЫБОР
			|		КОГДА СУММА(ВЫБОР
			|					КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
			|						ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ) <> 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК КомпенсироватьВОСМС,
			|	ВЫБОР
			|		КОГДА СУММА(ВЫБОР
			|					КОГДА КомпенсируемыеВидыУдержаний.ВидРасчета <> ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
			|							И КомпенсируемыеВидыУдержаний.ВидРасчета <> ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
			|							И КомпенсируемыеВидыУдержаний.ВидРасчета <> ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
			|						ТОГДА 1
			|					ИНАЧЕ 0
			|				КОНЕЦ) <> 0
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК КомпенсироватьУдержания
			|ПОМЕСТИТЬ ВТ_КоменсируемыеУдержания
			|ИЗ
			|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеВидыУдержаний
			|
			|СГРУППИРОВАТЬ ПО
			|	КомпенсируемыеВидыУдержаний.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыРасчета.Приоритет КАК Приоритет,
			|	ЭтапыРасчета.ЭтапРасчета КАК ЭтапРасчета,
			|	ЭтапыРасчета.СпособРасчета,
			|	МАКСИМУМ(ЭтапыРасчета.ЗачетОтработанногоВремени) КАК ЗачетОтработанногоВремени,
			|	МАКСИМУМ(ЭтапыРасчета.КомпенсироватьИПН) КАК КомпенсироватьИПН,
			|	МАКСИМУМ(ЭтапыРасчета.КомпенсироватьОПВ) КАК КомпенсироватьОПВ,
			|	МАКСИМУМ(ЭтапыРасчета.КомпенсироватьВОСМС) КАК КомпенсироватьВОСМС,
			|	МАКСИМУМ(ЭтапыРасчета.КомпенсироватьУдержания) КАК КомпенсироватьУдержания
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		1 КАК Приоритет,
			|		""ОсновныеРасчеты"" КАК ЭтапРасчета,
			|		ДанныеДокумента.СпособРасчета КАК СпособРасчета,
			|		ДанныеДокумента.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
			|		ЛОЖЬ КАК КомпенсироватьИПН,
			|		ЛОЖЬ КАК КомпенсироватьОПВ,
			|		ЛОЖЬ КАК КомпенсироватьВОСМС,
			|		ЛОЖЬ КАК КомпенсироватьУдержания
			|	ИЗ
			|		ВТ_ДанныеДокумента КАК ДанныеДокумента
			|	ГДЕ
			|		НЕ(ДанныеДокумента.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
			|					ИЛИ ДанныеДокумента.СпособРасчета В (&парамСписокСпособовРасчетаПроцентом))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		2,
			|		""РасчетыОтОбратного"",
			|		ДанныеДокумента.СпособРасчета,
			|		ДанныеДокумента.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
			|		ЕСТЬNULL(КоменсируемыеУдержания.КомпенсироватьИПН, ЛОЖЬ),
			|		ЕСТЬNULL(КоменсируемыеУдержания.КомпенсироватьОПВ, ЛОЖЬ),
			|		ЕСТЬNULL(КоменсируемыеУдержания.КомпенсироватьВОСМС, ЛОЖЬ),
			|		ЕСТЬNULL(КоменсируемыеУдержания.КомпенсироватьУдержания, ЛОЖЬ)
			|	ИЗ
			|		ВТ_ДанныеДокумента КАК ДанныеДокумента
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоменсируемыеУдержания КАК КоменсируемыеУдержания
			|			ПО ДанныеДокумента.ВидРасчета = КоменсируемыеУдержания.ВидРасчета
			|	ГДЕ
			|		ДанныеДокумента.СпособРасчета В(&парамСписокСпособовРасчетаОтОбратного)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		3,
			|		""НачисленияПроцентом"",
			|		ДанныеДокумента.СпособРасчета,
			|		ДанныеДокумента.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
			|		ЛОЖЬ,
			|		ЛОЖЬ,
			|		ЛОЖЬ,
			|		ЛОЖЬ
			|	ИЗ
			|		ВТ_ДанныеДокумента КАК ДанныеДокумента
			|	ГДЕ
			|		ДанныеДокумента.СпособРасчета В(&парамСписокСпособовРасчетаПроцентом)) КАК ЭтапыРасчета
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыРасчета.Приоритет,
			|	ЭтапыРасчета.ЭтапРасчета,
			|	ЭтапыРасчета.СпособРасчета
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет
			|ИТОГИ 
			|	МАКСИМУМ(Приоритет)
			|ПО
			|	ЭтапРасчета";
	
			
		Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтВремени",   ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетаОтВремени());
		Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтОбратного", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовОтОбратного());
		Запрос.УстановитьПараметр("парамСписокСпособовРасчетаПроцентом",   ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетаПроцентом());
		
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	1 КАК Приоритет,
			|	""Удержания"" КАК ЭтапРасчета,
			|	ДанныеДокумента.СпособРасчета,
			|	ЛОЖЬ КАК ЗачетОтработанногоВремени,
			|	ЛОЖЬ КАК КомпенсироватьИПН,
			|	ЛОЖЬ КАК КомпенсироватьОПВ,
			|	ЛОЖЬ КАК КомпенсироватьВОСМС,
			|	ЛОЖЬ КАК КомпенсироватьУдержания
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ДанныеДокумента
			|ГДЕ
			|	НЕ ДанныеДокумента.СпособРасчета В (&парамСписокСпособовРасчетаПочтовыйСбор)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2,
			|	""Почтовый сбор"",
			|	ДанныеДокумента.СпособРасчета,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ЛОЖЬ,
			|	ЛОЖЬ
			|ИЗ
			|	ВТ_ДанныеДокумента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.СпособРасчета В(&парамСписокСпособовРасчетаПочтовыйСбор)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет
			|ИТОГИ
			|	МАКСИМУМ(Приоритет)
			|ПО
			|	ЭтапРасчета";
			
		Запрос.УстановитьПараметр("парамСписокСпособовРасчетаПочтовыйСбор", Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор);  
		
	КонецЕсли;
	
	ВыборкаЭтапыРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиТЧ.Ссылка,
		|	СтрокиТЧ.ПериодРегистрации,
		|	СтрокиТЧ.Организация,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.Физлицо,
		|	СтрокиТЧ.ВидРасчета,
		|	СтрокиТЧ.СпособРасчета,
		|	СтрокиТЧ.Размер" + ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", ",
		|	СтрокиТЧ.Сотрудник,
		|   СтрокиТЧ.ЗачетОтработанногоВремени,
		|	СтрокиТЧ.ОтработаноДней,
		|	СтрокиТЧ.ОтработаноЧасов,
		|	СтрокиТЧ.ДатаНачала,
		|	СтрокиТЧ.ДатаОкончания,
		|	СтрокиТЧ.ДополнительныеДанные", ",
		|	СтрокиТЧ.ДокументОснование") + "
		|ИЗ
		|	ВТ_ДанныеДокумента КАК СтрокиТЧ
		|ГДЕ
		|	СтрокиТЧ.СпособРасчета В(&СписокСпособовДляРасчета)";
		
		
	Пока ВыборкаЭтапыРасчета.Следующий() Цикл
		МассивСпособовРасчета = Новый Массив;
		Выборка = ВыборкаЭтапыРасчета.Выбрать();
		КомпенсироватьИПН 		= Ложь;
		КомпенсироватьОПВ 		= Ложь;
		КомпенсироватьВОСМС		= Ложь;
		УчитыватьОПВ 			= Ложь;
		УчитыватьВОСМС 			= Ложь;
		КомпенсироватьУдержания = Ложь;
		ЗачетОтработанногоВремени = Ложь;
		Пока Выборка.Следующий() Цикл
			МассивСпособовРасчета.Добавить(Выборка.СпособРасчета);
			КомпенсироватьИПН 		= КомпенсироватьИПН 	  ИЛИ Выборка.КомпенсироватьИПН;
			КомпенсироватьОПВ 		= КомпенсироватьОПВ 	  ИЛИ Выборка.КомпенсироватьОПВ;
			КомпенсироватьВОСМС		= КомпенсироватьВОСМС 	  ИЛИ Выборка.КомпенсироватьВОСМС;
			УчитыватьОПВ 			= КомпенсироватьИПН 	  ИЛИ КомпенсироватьОПВ;
			УчитыватьВОСМС 			= КомпенсироватьИПН 	  ИЛИ КомпенсироватьВОСМС;
			КомпенсироватьУдержания = КомпенсироватьУдержания ИЛИ Выборка.КомпенсироватьУдержания;
			ЗачетОтработанногоВремени = ЗачетОтработанногоВремени ИЛИ Выборка.ЗачетОтработанногоВремени;
		КонецЦикла;
		
		НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета);
		НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН 		 = НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН 		ИЛИ КомпенсироватьИПН;
		НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ 		 = НеобходимыеДанные.ОтОбратногоКомпенсироватьОПВ 		ИЛИ КомпенсироватьОПВ;
		НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС 	 = НеобходимыеДанные.ОтОбратногоКомпенсироватьВОСМС		ИЛИ КомпенсироватьВОСМС;
		НеобходимыеДанные.ОтОбратногоУчитыватьОПВ 			 = НеобходимыеДанные.ОтОбратногоУчитыватьОПВ 			ИЛИ УчитыватьОПВ;
		НеобходимыеДанные.ОтОбратногоУчитыватьВОСМС			 = НеобходимыеДанные.ОтОбратногоУчитыватьВОСМС 			ИЛИ УчитыватьВОСМС;
		НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания = НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания ИЛИ КомпенсироватьУдержания;
		НеобходимыеДанные.ОтработаноВремени					 = НеобходимыеДанные.ОтработаноВремени  				ИЛИ ЗачетОтработанногоВремени;
		НеобходимыеДанные.НормаВремениЗаМесяц				 = НеобходимыеДанные.НормаВремениЗаМесяц  				ИЛИ ЗачетОтработанногоВремени;
		
		Запрос.УстановитьПараметр("СписокСпособовДляРасчета", МассивСпособовРасчета);
		ТаблицаДанныеДокументаДляРасчета = Запрос.Выполнить().Выгрузить();
		ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяПВР, ИмяДокумента, НеобходимыеДанные, ТаблицаДанныеДокументаДляРасчета, Документ.Организация, Документ.ПериодРегистрации, Документ.Ссылка, Сотрудник, Документ[ИмяТЧ].Выгрузить());
		РассчитатьДанныеДокумента(ИсходныеДанные, ИмяТЧ, Документ,  Документ.ПериодРегистрации, КомментироватьРасчет);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета)
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", 							Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", 							Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоВидуРасчета", 				Ложь);
	НеобходимыеДанные.Вставить("РазмерРегламентированныхРасчетныхПоказателей", 	Ложь);
	НеобходимыеДанные.Вставить("РасчетОтОбратного", 							Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьИПН", 					Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьОПВ", 					Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьВОСМС",				Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоУчитыватьОПВ", 						Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоУчитыватьВОСМС",						Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьУдержания", 			Ложь);
	НеобходимыеДанные.Вставить("ОтОбратногоКомпенсироватьУдержания", 			Ложь);
	НеобходимыеДанные.Вставить("База", 											Ложь);
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", 		Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйИПН", 								Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныйОПВ", 								Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныеВОСМС", 								Ложь);
	НеобходимыеДанные.Вставить("ПочтовыйСбор", 									Ложь);
	
	Для Каждого СпособРасчета ИЗ МассивСпособовРасчета Цикл
		
		Если 	  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
	
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда 
			НеобходимыеДанные.ОтработаноВремени = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
			НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей = Истина;
			
			Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
				НеобходимыеДанные.ОтработаноВремени = Истина;
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
				
			КонецЕсли;
			
			Если  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда
				НеобходимыеДанные.НакопленныеДанныеПоВидуРасчета = Истина;
				
			КонецЕсли;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных ИЛИ 
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
			// Ничего не надо
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
			НеобходимыеДанные.База = Истина;
			
			// Исчисленные ИПН, ОПВ и ВОСМС берем всегда, присоединяться будут только к запросу по регистру расчета УдержанияРаботниковОрганизаций
			// и только для тех людей, у которых есть виды расчета с признаками ВычитатьИзБазыИПН, ВычитатьИзБазыОПВ, ВычитатьИзБазыВОСМС
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням ИЛИ
				  СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
			НеобходимыеДанные.РасчетОтОбратного = Истина;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням ИЛИ
				 СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
				 
				НеобходимыеДанные.ОтработаноВремени = Истина;
				НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			КонецЕсли;
			  
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйИПН = Истина;
			НеобходимыеДанные.ИсчисленныйОПВ = Истина;
			НеобходимыеДанные.ИсчисленныеВОСМС = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;

		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
			НеобходимыеДанные.ПочтовыйСбор = Истина;
			  
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат НеобходимыеДанные;
	
КонецФункции

Процедура РассчитатьДанныеДокумента(ИсходныеДанные, ИмяТЧ, Документ, ПериодРегистрации, КомментироватьРасчет = Ложь)
	
	ТабличнаяЧасть = Документ[ИмяТЧ];
	
	ТаблицаСтавокИПН = Неопределено;

	Пока ИсходныеДанные.Следующий() Цикл
		СтрокаТЧ = ТабличнаяЧасть.Получить(ИсходныеДанные.НомерСтроки - 1);
		РассчитатьЗапись(СтрокаТЧ, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет);
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗапись(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет = Ложь)
	
	РегламентированныеУдержания = (ТипЗнч(ИсходныеДанные.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
	
	Результат = 0;
		
	// Этот Если ... надо будет дополнять при появлении новых способов расчета
	
	// ПоМесячнойТарифнойСтавкеПоДням
	Если ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням Тогда
		
		Результат = ?(ИсходныеДанные.НормаДней <> 0, ИсходныеДанные.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней, 0);

	// ПоМесячнойТарифнойСтавкеПоЧасам
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		
		Результат = ?(ИсходныеДанные.НормаЧасов <> 0, ИсходныеДанные.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 0);
		
	// ПоЧасовойТарифнойСтавке
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке Тогда
		
		Результат = ИсходныеДанные.Размер * ИсходныеДанные.ОтработаноЧасов;

	// ПоМесячномуРасчетномуПоказателюПоДням			
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням Тогда 

		Если ИсходныеДанные.РазмерМРП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер месячного расчетного показателя'");
		КонецЕсли;

		Результат = ?(ИсходныеДанные.НормаДней <> 0, ИсходныеДанные.Размер * ИсходныеДанные.РазмерМРП * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней, 0);

		// чтобы за счет переработки не увеличить сумму регламентированных начислений (например, экологической доплаты)
		Если Результат + ИсходныеДанные.УжеНачисленоВТекущемПериоде > ИсходныеДанные.РазмерМРП * ИсходныеДанные.Размер Тогда
			Результат = ИсходныеДанные.РазмерМРП * ИсходныеДанные.Размер - ИсходныеДанные.УжеНачисленоВТекущемПериоде;
			
		КонецЕсли;

	// ПоМесячномуРасчетномуПоказателюПоЧасам			
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам Тогда 

		Если ИсходныеДанные.РазмерМРП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер месячного расчетного показателя'");
		КонецЕсли;

		Результат = ?(ИсходныеДанные.НормаЧасов <> 0, ИсходныеДанные.Размер * ИсходныеДанные.РазмерМРП * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 0);

		// чтобы за счет переработки не увеличить сумму регламентированных начислений (например, экологической доплаты)
		Если Результат + ИсходныеДанные.УжеНачисленоВТекущемПериоде > ИсходныеДанные.РазмерМРП * ИсходныеДанные.Размер Тогда
			Результат = ИсходныеДанные.РазмерМРП * ИсходныеДанные.Размер - ИсходныеДанные.УжеНачисленоВТекущемПериоде;
			
		КонецЕсли;
		
	// ПоМесячномуРасчетномуПоказателю
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю Тогда
		
		Если ИсходныеДанные.РазмерМРП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер месячного расчетного показателя'");
		КонецЕсли;

		Результат = ИсходныеДанные.Размер * ИсходныеДанные.РазмерМРП;
	
	// ПоМинимальнойЗаработнойПлатеПоДням
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоДням Тогда
		
		Если ИсходныеДанные.РазмерМЗП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер минимальной заработной платы'");
		КонецЕсли;
		
		Результат = ?(ИсходныеДанные.НормаДней <> 0, ИсходныеДанные.Размер * ИсходныеДанные.РазмерМЗП * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней, 0);

	// ПоМинимальнойЗаработнойПлатеПоЧасам
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлатеПоЧасам Тогда
		
		Если ИсходныеДанные.РазмерМЗП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер минимальной заработной платы'");
		КонецЕсли;
	
		Результат = ?(ИсходныеДанные.НормаЧасов <> 0, ИсходныеДанные.Размер * ИсходныеДанные.РазмерМЗП * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов, 0);

	// ПоМинимальнойЗаработнойПлате
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМинимальнойЗаработнойПлате Тогда
		
		Если ИсходныеДанные.РазмерМЗП = 0 Тогда
			ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + ": " + НСтр("ru = 'Не определен размер минимальной заработной платы'");
		КонецЕсли;
	
		Результат = ИсходныеДанные.Размер * ИсходныеДанные.РазмерМЗП;
		
	// ФиксированнойСуммой
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
						
		Результат = ИсходныеДанные.Размер;

	// Процентом
	//
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Тогда
		
		РезультатБаза = ИсходныеДанные.РезультатБаза;

		Если РегламентированныеУдержания Тогда
			Если ИсходныеДанные.ВычитатьИзБазыИПН И ИсходныеДанные.ИсчисленныйНалог <> 0 Тогда
				РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйНалог;
			КонецЕсли;
			
			Если ИсходныеДанные.ВычитатьИзБазыОПВ И ИсходныеДанные.ИсчисленныйВзнос <> 0 Тогда
				РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйВзнос;
			КонецЕсли;
			
			Если ИсходныеДанные.ВычитатьИзБазыВОСМС И ИсходныеДанные.ИсчисленныйВзносОСМС <> 0 Тогда
				РезультатБаза = РезультатБаза - ИсходныеДанные.ИсчисленныйВзносОСМС;
			КонецЕсли;
		КонецЕсли;
		
		Результат = РезультатБаза * ИсходныеДанные.Размер/100;
		
		Если РегламентированныеУдержания Тогда
			Результат = Макс(Результат, 0);
		КонецЕсли;
		
	// ПоСреднемуЗаработкуДляБольничных
	// ПоСреднемуЗаработкуДляОтпуска
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляБольничных ИЛИ 
		ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпуска Тогда
		
		// Не меняем результат вовсе, т.к. способы по среднему заработку необходимо рассчитывать 
		// с помощью обработки РасчетПоСреднемуЗаработку. С версии 1.0.4 Размер содержит коэффициент
		// индексации заработка в течение события (после начала, но до окончания), а результат 
		// сразу записывается в обработке 
		
		
	// ОтОбратного
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратного ИЛИ 
		ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням ИЛИ
		ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		
		Результат = РассчитатьСтрокуОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет);
		
	// ИсполнительныйЛистПроцентом
	//
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Тогда
			
		// Размер - процент удержания
				
		РезультатБаза = ИсходныеДанные.РезультатБаза;
		
		Если ИсходныеДанные.ВычитатьИзБазыИПН Тогда
			РезультатБаза 		= РезультатБаза - ИсходныеДанные.ИсчисленныйНалог;
		КонецЕсли;
		
		Если ИсходныеДанные.ВычитатьИзБазыОПВ Тогда
			РезультатБаза 		= РезультатБаза - ИсходныеДанные.ИсчисленныйВзнос;
		КонецЕсли;
		
		Если ИсходныеДанные.ВычитатьИзБазыВОСМС Тогда
			РезультатБаза 		= РезультатБаза - ИсходныеДанные.ИсчисленныйВзносОСМС;
		КонецЕсли;
		
		УжеНачисленоВТекущемПериоде = ИсходныеДанные.УжеНачисленоВТекущемПериоде;
		Результат = Макс((РезультатБаза * ИсходныеДанные.Размер / 100) - УжеНачисленоВТекущемПериоде, 0);
		
	// УдержаниеФиксированнойСуммой
	//		
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой Тогда
		
		УжеНачисленоВТекущемПериоде = ИсходныеДанные.УжеНачисленоВТекущемПериоде;
		// Размер - сумма удержания 
		// за месяц должно удержаться ровно столько, сколько указано в документе
		Результат = ИсходныеДанные.Размер - УжеНачисленоВТекущемПериоде;

	// ПочтовыйСбор
	//		
	ИначеЕсли ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		
		Если ИсходныеДанные.РазмерПочтовогоПеревода <> 0 Тогда
			Результат = Макс(ИсходныеДанные.ВеличинаСтавкиПочтовогоСбора / 100 * ИсходныеДанные.РазмерПочтовогоПеревода, ИсходныеДанные.МинСуммаПочтовогоСбора);
		КонецЕсли;
		
	// Не найден способ расчета
	Иначе

		ВызватьИсключение ИсходныеДанные.СотрудникНаименование + ", " + ИсходныеДанные.ВидРасчетаНаименование + НСтр("ru = ': вид расчета не предусмотрен'");
	
	КонецЕсли;
	
	// округлим результат
	СтрокаДвижений.Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	// запоминаем отработанное время при необходимости
	Если НЕ РегламентированныеУдержания И ИсходныеДанные.СохранитьОтработанноеВремя Тогда
		
		СтрокаДвижений.ОтработаноДней = ИсходныеДанные.ОтработаноДней;
		СтрокаДвижений.ОтработаноЧасов= ИсходныеДанные.ОтработаноЧасов;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
Функция РассчитатьСтрокуОтОбратного(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет = Ложь)

	Если ПериодРегистрации >= '20210101' Тогда
		// после 2021
		Возврат РассчитатьСтрокуОтОбратногоПосле2021(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		// после 2020
		Возврат РассчитатьСтрокуОтОбратногоПосле2020(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		// после 2019
		Возврат РассчитатьСтрокуОтОбратногоПосле2019(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// после 2018
		Возврат РассчитатьСтрокуОтОбратногоПосле2018(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		// после 2009 - по фиксированной ставке хранится льготируемый доход и разрешенный вычет в регистре
		Возврат РассчитатьСтрокуОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет);
	ИначеЕсли ПериодРегистрации >= '20070101' Тогда
		// после 2007 - по фиксированной ставке
		Возврат РассчитатьСтрокуОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет);
	Иначе
		// до 2007 - по шкале
		Возврат РассчитатьСтрокуОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет);
	КонецЕсли;

КонецФункции 

// Рассчитывает значение ресурса записи строки по ее реквизитам и дополнительным данным для способа расчета "от обратного"
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись 
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//	ПериодРегистрации - месяц, за который производится расчет
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                          ((Х + Бн - ОПВ - Льгот) * Ка - НижПред) * %Н + Фс
//		ИПН = К1н * ( К0н * -------------------------------------------------- - Н)
//                                             Ка 
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * (1 - %ПФ) * (1 - Кл) * %Н
//
//                                                       К1н * К0н                     К1н * К0н 
//				Фн  = К1н * К0н * (Бн - Фв - Фл) * %Н - ------------ * НижПред * %Н + ----------- * Фс - К1н * Н
//                                                           Ка                            Ка
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетИПНБезВозврата	 			| 1, если ИПН рассчитывается по таблице, иначе 0 - возврат ранее исчисленного налога
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода (уже отняты вычеты и ОПВ)
// |   Ка		|	КоэффициентПересчета					| Коэффицент авансового удержания ИПН (в зависимости от месяца налогового периода)
// |   НижПред	|	НижнийПределШкалыИПН					| Нижний (левый) предел строки таблицы ставок ИПН
// |   %Н		|	ПроцентИПН								| Процент ИПН по текущей строке таблицы ставок ИПН
// |   Фс		| СуммаНалогаПредыдущегоПредела				| Сумма налога с предыдущей строки таблицы ставок ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за предыдущие месяца налогового года
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьСтрокуОтОбратногоДо2007(СтрокаДвижений, ИсходныеДанные, ТаблицаСтавокИПН, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
		ОсновноеНачисление = Истина;
	Иначе
		ОсновноеНачисление = Ложь;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);

	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
		
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
		
	КонецЕсли;
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	
	Если ТаблицаСтавокИПН = Неопределено Тогда
		
		// это первый вызов расчета от обратного - выберем сведения о ставках ИПН для периода регистрации
		// и вернем таблицу ставок в вызывающую процедуру через параметр, чтобы в следующий раз не выбирать
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамВидСтавокИПНиСН", Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
		Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	&парамПериодРегистрации КАК Период,
		|	ШкалаСтавокИПН.НомерСтрокиСтавок,
		|	ШкалаСтавокИПН.СуммаДоходаС,
		|	ШкалаСтавокИПН.СуммаДоходаПо,
		|	ШкалаСтавокИПН.Ставка,
		|	ШкалаСтавокИПН.СуммаНалогаПредыдущегоПредела
		|ИЗ
		|	РегистрСведений.СведенияОСтавкахИПНиСН.СрезПоследних(
		|			&парамПериодРегистрации,
		|			ВидСтавокИПНиСН = &парамВидСтавокИПНиСН) КАК ШкалаСтавокИПН
		|УПОРЯДОЧИТЬ ПО
		|	ШкалаСтавокИПН.СуммаДоходаС
		|";
		
		ТаблицаСтавокИПН = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Если ТаблицаСтавокИПН.Количество() = 0 Тогда
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена таблица ставок ИПН ", СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;
	
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПН 				= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		КоэффициентПересчета 				= ИсходныеДанные.КоэффициентПересчета;
		СреднемесячныйРазмерМЗПЗаКвартал 	= ИсходныеДанные.СреднемесячныйРазмерМЗПЗаКвартал;
		ПолученныйДоходЗаКвартал 			= ИсходныеДанные.ПолученныйДоходЗаКвартал;
		РегистрировалсяДоходЗаКвартал 		= Мин(ИсходныеДанные.РегистрировалсяДоходЗаКвартал + 1, Месяц(ПериодРегистрации) - Месяц(НачалоКвартала(ПериодРегистрации)) + 1); // учтем еще и сам месяц начисления "от обратного"
		ПроверятьНаНулевуюСтавку			= ИсходныеДанные.ПрименятьНулевуюСтавку;
		
		Если Месяц(ПериодРегистрации) > 3 Тогда
			// если за предыдущие кварталы среднемесячный доход превышал МЗП, то на нулевую ставку уже не проверяем
			НомерПредыдущегоКвартала = (Месяц(НачалоКвартала(ПериодРегистрации)) - 1) / 3;
			Для НомерКвартала = 1 По НомерПредыдущегоКвартала Цикл
				Если ИсходныеДанные["ПрименятьНулевуюСтавкуКв" + Строка(НомерКвартала)] = 0 Тогда
					ПроверятьНаНулевуюСтавку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПН 				= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		РанееНалогИсчисленный 				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		КоэффициентПересчета 				= 1;
		СреднемесячныйРазмерМЗПЗаКвартал 	= 0;
		ПолученныйДоходЗаКвартал 			= 0;
		РегистрировалсяДоходЗаКвартал		= 1;
		ПроверятьНаНулевуюСтавку			= Ложь;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;
	
	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если (ПризнакИсчисленияИПН * КомпенсироватьИПН = 0)
		  И (ПризнакИсчисленияОПВ * КомпенсироватьОПВ = 0)
		  И КомпенсироватьУдержания = 0 Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Если КомпенсироватьИПН = 0 И КомпенсироватьОПВ = 0 И КомпенсироватьУдержания = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПроцентОПВ = ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
	ПризнакРасчетИПНБезВозврата = 1; // если 0, то нужно вернуть РанееНалогИсчисленный
	МаксСуммаОПВ = ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = КоэффициентПересчета * (БазаДляИсчисленияИПН - ИсчисленныеОПВ - Мин(Макс(ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ, 0), ПрименяемаяЛьготаЗаГод));
		Если ОблагаемаяИПНСумма > 0 Тогда
			Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
				 И ОблагаемаяИПНСумма / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал
				 И ПроверятьНаНулевуюСтавку Тогда
				
				// Возврат ранее исчисленного налога
				ИсчисленныйИПН = - РанееНалогИсчисленный;
				 
			Иначе
				Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
						 
						СтрокаСтавок = ТаблицаСтавокИПН[ИндексСтавки];
						
						ИсчисленныйИПН = (ОблагаемаяИПНСумма - СтрокаСтавок.СуммаДоходаС) * СтрокаСтавок.Ставка / 100 + СтрокаСтавок.СуммаНалогаПредыдущегоПредела;
						ИсчисленныйИПН = Окр(ИсчисленныйИПН / КоэффициентПересчета, 2) - РанееНалогИсчисленный;
						 
						Прервать;
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ИсходныеДанные.ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		КонецЕсли;
	КонецЕсли;
	
	// Определим первоначально строку ставок ИПН 
	ПроцентИПН = ТаблицаСтавокИПН.Итог("Ставка") / ТаблицаСтавокИПН.Количество() / 100; // усредненный процент ИПН для первого приближения
	ОблагаемаяИПНСумма = Макс(ПризнакИсчисленияИПН * (1 + ПроцентИПН - ПризнакИсчисленияОПВ * ПроцентОПВ) * (БазаДляИсчисленияИПН + ИскомаяСуммаНачислений - Макс(ЛьготируемаяБазаДляИсчисленияИПН, 0)) * КоэффициентПересчета, 0);
	
	ИндексСтавки = 0;
	Для ИндексСтавки = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
		Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС 
			 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаПо Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		ПроцентИПН 				 = ТаблицаСтавокИПН[ИндексСтавки].Ставка / 100;
		НижнийПределШкалыИПН	 = ТаблицаСтавокИПН[ИндексСтавки].СуммаДоходаС;
		СуммаНалогаПредыдущегоПредела = ТаблицаСтавокИПН[ИндексСтавки].СуммаНалогаПредыдущегоПредела;
		
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата * (1 - РезультирующийПроцентОПВ) * 
											(1 - ПризнакПримененияЛьготы) * ПроцентИПН;
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетИПНБезВозврата *
								  		( (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) * ПроцентИПН -
								  		   НижнийПределШкалыИПН * ПроцентИПН / КоэффициентПересчета +
								  		   СуммаНалогаПредыдущегоПредела / КоэффициентПересчета
								  		) -  ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы, 0);
				ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН) * КоэффициентПересчета;
				Если ОблагаемаяИПНСумма > 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;
				
				// Размер применяемой льготы
				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
				КонецЕсли;
				
				ОблагаемаяИПНСумма = Макс(ОблагаемаяИПНСумма, 0);
			КонецЕсли;
				
			// Соответствие примененной шкале
			Если РезультатПолучен Тогда
				ВремИндекс = 0;
				Для ВремИндекс = 0 По ТаблицаСтавокИПН.Количество() - 1 Цикл
					Если ОблагаемаяИПНСумма >= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаС
						 И ОблагаемаяИПНСумма <= ТаблицаСтавокИПН[ВремИндекс].СуммаДоходаПо Тогда
						
						Если ВремИндекс <> ИндексСтавки Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ИндексСтавки = ВремИндекс;
						
						Прервать;
						
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;

			// Проверка на применение нулевой ставки
			Если РезультатПолучен И ПроверятьНаНулевуюСтавку Тогда
				Если ОблагаемаяИПНСумма <= 12 * СреднемесячныйРазмерМЗПЗаКвартал
					 И (ПолученныйДоходЗаКвартал + Результат) / РегистрировалсяДоходЗаКвартал  <= СреднемесячныйРазмерМЗПЗаКвартал Тогда
					
					Если ПризнакРасчетИПНБезВозврата <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 0;
					
				Иначе				
					Если ПризнакРасчетИПНБезВозврата <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетИПНБезВозврата = 1;
					
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2007 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К1н * (К0н * (Х + Бн - ОПВ - Льгот) * %Н - Н)
//
//		Льгот = Кл * ЛБ + Кл * Х - Кл * ОПВ + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ -РанееИсчислВзносы) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в - К2в * РанееИсчислВзносы
//
//		Льгот(Х) = Х * %Л + Фл
//
//				%Л  = Кл * (1 - %ПФ)
//
//				Фл  = Кл * (ЛБ - Фв) + (1 - Кл) * ГЛ - РанееПримЛьгота
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К1н * К0н * %Н * (1 - %ПФ - %Л)
//
//				Фн  = К1н * К0н * %Н * (Бн - Фв - Фл) - К1н * Н
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К1н		|	ПризнакИсчисленияИПН					| 1, если с работника удерживается ИПН, 0 иначе (льготник)
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   Н		|	РанееНалогИсчисленный					| Сумма ИПН, исчисленного за текущий месяц др. документами (пока по выборке получается, что всегда = 0!!!)
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Кл		|	ПризнакПримененияЛьготы					| 1, если льгота в пределах льготируемого дохода, иначе 0 - в пределах годовой льготы ГЛ
// |   %Л		|	РезультирующийПроцентЛьготы				|
// |   Фл		|	ФиксЧастьЛьготы							|
// |   ЛБ		|	ЛьготируемаяБазаДляИсчисленияИПН		| База исчисления ИПН, к которой применяется льгота
// |   ГЛ		|	ПрименяемаяЛьготаЗаГод					| Годовой размер льготы
// 
Функция РассчитатьСтрокуОтОбратногоПосле2007(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);

	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": расчет невозможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации! ", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		ПризнакПримененияЛьготы				= ?(ИсходныеДанные.ПризнакПримененияЛьготы > 0, 1, 0);
		ПризнакИсчисленияИПН 				= 1 - ПризнакПримененияЛьготы;
		БазаДляИсчисленияИПНЗаГод			= ИсходныеДанные.ОблагаемыйДоходЗаГод - ИсходныеДанные.НалоговыйВычетЗаГод - ИсходныеДанные.ИсчисленныеВзносыЗаГод;
		ЛьготируемаяБазаДляИсчисленияИПН	= ИсходныеДанные.ЛьготируемаяБазаДляИсчисленияИПН;
		ОблагаемыйИПНДоходЗаМесяц			= ИсходныеДанные.ОблагаемыйДоходЗаМесяц;
		БазаДляИсчисленияИПН				= ИсходныеДанные.ОблагаемыйДоход - ИсходныеДанные.НалоговыйВычетЗаМесяц - ИсходныеДанные.ИсчисленныеВзносыЗаМесяц;
		РанееНалогИсчисленный 				= ИсходныеДанные.РанееНалогИсчисленный;
		РанееПримененнаяЛьгота 				= ИсходныеДанные.РанееПримененнаяЛьгота;
		ПрименяемаяЛьготаЗаГод 				= ИсходныеДанные.ПрименяемаяЛьготаЗаГод;
		ПроцентИПН							= ИсходныеДанные.ПроцентИПН / 100;
		
		Если ПроцентИПН = 0 Тогда
			Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определена ставка ИПН", СтатусСообщения.Важное);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		ПризнакИсчисленияИПН 				= 0;
		ПризнакПримененияЛьготы				= 0;
		БазаДляИсчисленияИПНЗаГод			= 0;
		ЛьготируемаяБазаДляИсчисленияИПН	= 0;
		ОблагаемыйИПНДоходЗаМесяц			= 0;
		БазаДляИсчисленияИПН				= 0;
		РанееНалогИсчисленный 				= 0;
		РанееПримененнаяЛьгота				= 0;
		ПрименяемаяЛьготаЗаГод 				= 0;
		ПроцентИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		РанееВзносыИсчисленные 				= ИсходныеДанные.РанееВзносыИсчисленные;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ					 	= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		РанееВзносыИсчисленные 				= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ					 	= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		// Считать нечего, т.к. либо ничего не компенсируем (что ошибка) либо не положено ничего считать 
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Не определены компенсируемые удержания ", СтатусСообщения.Важное);
		
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
		
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Скорректируем льготу
		Если ПризнакПримененияЛьготы = 0 Тогда
			// льготу вообще не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	
		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		Если ПрименяемаяЛьготаЗаГод = 0 Тогда
			// вообще без льготы
			ОблагаемаяИПНСумма = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
		ИначеЕсли ПрименяемаяЛьготаЗаГод > ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ Тогда
			// еще всю льготу не выбрал
			ОблагаемаяИПНСумма = 0;
		Иначе
			 ОблагаемаяИПНСумма = Мин(БазаДляИсчисленияИПН - ИсчисленныеОПВ, ЛьготируемаяБазаДляИсчисленияИПН - ПризнакПримененияЛьготы * ИсчисленныеОПВ - ПрименяемаяЛьготаЗаГод);
		КонецЕсли;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2) - РанееНалогИсчисленный;
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений - ИсходныеДанные.СуммаВключаемыхНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц;
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц;
		КонецЕсли;
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ) - РанееВзносыИсчисленные;
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				БазаДляИсчисленияИПНЗаГод = БазаДляИсчисленияИПНЗаГод - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакПримененияЛьготы = 1 Тогда
			ЛьготируемаяБазаДляИсчисленияИПН = ЛьготируемаяБазаДляИсчисленияИПН - ОблагаемыйИПНДоходЗаМесяц + ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений;
		Иначе
			// льготу не считаем
			ПрименяемаяЛьготаЗаГод = 0;
			ЛьготируемаяБазаДляИсчисленияИПН = 0;
			РанееПримененнаяЛьгота = 0;
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ - РанееВзносыИсчисленные);
		
														   
		РезультирующийПроцентЛьготы = ПризнакПримененияЛьготы * (1 - РезультирующийПроцентОПВ);
		
		ФиксЧастьЛьготы				= ПризнакПримененияЛьготы * (ЛьготируемаяБазаДляИсчисленияИПН - ФиксЧастьОПВ) + 
										(1 - ПризнакПримененияЛьготы) * ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота;
														   
										
		РезультирующийПроцентИПНиОПВ = ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * 
											(1 - РезультирующийПроцентОПВ - РезультирующийПроцентЛьготы);
											
		ФиксЧастьИПН			= ПризнакИсчисленияИПН * ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ФиксЧастьОПВ - ФиксЧастьЛьготы) -
									ПризнакИсчисленияИПН * РанееНалогИсчисленный;
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		РезультатОПВ = РезультатОПВ - РанееВзносыИсчисленные;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// Льготы по ИПН
			ОблагаемаяИПНСумма = 0;
			Если РезультатПолучен Тогда
				НоваяЛьготируемаяБазаДляИсчисленияИПН = Макс(Результат * РезультирующийПроцентЛьготы + ФиксЧастьЛьготы + РанееПримененнаяЛьгота, 0);
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПНЗаГод + Результат - РезультатОПВ - НоваяЛьготируемаяБазаДляИсчисленияИПН;
				Если ОблагаемаяИПНСумма > 0 Или ПрименяемаяЛьготаЗаГод = 0 Тогда
					Если ПризнакИсчисленияИПН <> 1 Тогда
						// Ранее налог не рассчитывался, теперь же появилась облагаемая база - нужен еще один шаг цикла
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 1;
				Иначе
					Если ПризнакИсчисленияИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакИсчисленияИПН = 0;
				КонецЕсли;

				Если (НоваяЛьготируемаяБазаДляИсчисленияИПН <> 0 ИЛИ ПрименяемаяЛьготаЗаГод <> 0)
						И НоваяЛьготируемаяБазаДляИсчисленияИПН <> ПрименяемаяЛьготаЗаГод Тогда
				
					// Размер применяемой льготы
					Если НоваяЛьготируемаяБазаДляИсчисленияИПН > ПрименяемаяЛьготаЗаГод Тогда
						// необходимо применять льготу в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 0;
					Иначе
						// ранее льгота применялась в размере годовой, надо в пределах льготируемого дохода
						Если ПризнакПримененияЛьготы <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакПримененияЛьготы = 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ;
				Если ПризнакПримененияЛьготы <> 0 Тогда
					ОблагаемаяИПНСумма = ОблагаемаяИПНСумма - (ПрименяемаяЛьготаЗаГод - РанееПримененнаяЛьгота);
				КонецЕсли;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2009 года (фикс. ставка ИПН)
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьСтрокуОтОбратногоПосле2009(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для %1 расчет ""%2"" не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации'"),
							ИсходныеДанные.СотрудникНаименование,
							ИсходныеДанные.ВидРасчетаНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;

		ОстатокЛьготы								= Макс(ИсходныеДанные.ЛьготаПоДоходу - ИсходныеДанные.ПримененнаяЛьготаЗаГод - ИсходныеДанные.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныйВычетЗаГод + ИсходныеДанные.НалоговыйВычетЛичный - ИсходныеДанные.ПримененныйВычетЗаГод, 0);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;		
		
		Если ПроцентИПН = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;

		ОстатокЛьготы								= 0;
		ОстатокВычета								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода		
		ПрочиеДоходыДляОПВ 					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ 					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ОстатокЛьготы - ИсчисленныеОПВ - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		ПрочийВычетПоИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, (БазаДляИсчисленияИПН + ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.ОбщаяСуммаНачислений), 0); //для включения сумм доп.вычетов.
		БазаДляИсчисленияИПН = ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочийВычетПоИПН;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ОстатокЛьготы - ФиксЧастьОПВ - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - РезультатОПВ - ОстатокЛьготы - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным для способа расчета "от обратного"
// по правилам, действующим с 2018 года: 
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  ТаблицаСтавокИПН - таблица значений со ставками ИПН за текущий рассчитываемый период регистрации для расчета "от обратного"
//
// Возвращаемое значение:
//  Число - результат расчета.
//
// Расчет "от обратного" производится на основе решения уравнения:
// 
// 		Х - Кн * ИПН - Кв * ОПВ - Ку * Уд = Р,
// где
//                    
//		ИПН = К0н * (Х + Бн - Льгот - ОПВ - Вычет) * %Н
//
//      ОПВ = ((1- К1в)*(Х + Бв) * %В + К1в * МаксОПВ) * К2в
//      
//      Уд  = Х * %Упр + Фу + (Х - ОПВ) * %Ув + (Х - ИПН) * %Ун + (Х - ОПВ - ИПН) * %Унв
//
// Относительно Х:
//
//      ОПВ(Х) = Х * %ПФ + Фв
//
//				%ПФ = %В * К2в * (1 - К1в)
//           
//				Фв  = Бв * %В * (1 - К1в) * К2в + К1в * МаксОПВ * К2в
//
//		ИПН(Х) = Х * %НВ + Фн
//
//				%НВ = К0н * %Н * (1 - %ПФ)
//
//				Фн  = К0н * %Н * (Бн - Льгот - Фв - Вычет)
//
// Решение уравнения:
//               Р + К'н * Фн + К'в * Фв + Ку * Фу
//		Х	  = -----------------------------------
//               1 - К'н * %НВ - К'в * %ПФ - Ку * %У'
//
// где
//		К'н   = Кн - Ку * %Ун - Ку * %Унв
//		К'в   = Кв - Ку * %Ув - Ку * %Унв
//		%У'   = %Упр + %Ув + %Ун + %Унв
//
//
// Обозначения:
// |В формуле	|	Переменная в программе					| Комментарий
// ---------------------------------------------------------------------------------------------------------------
// |   Х		|	ИскомаяСуммаНачислений					| Сумма, которую хотят получить на руки (за минусом включаемых начислений)
// |   Кн		|	КомпенсироватьИПН						| 1, если компенсируется ИПН, 0 иначе
// |   Кв		|	КомпенсироватьОПВ						| 1, если компенсируются ОПВ, 0 иначе
// |   Ку		|	КомпенсироватьУдержания					| 1, если компенсируются удержания, 0 иначе
// |   К0н		|	ПризнакРасчетаИПН			 			| 1, если ИПН рассчитывается, иначе 0 - налог = 0 (обл база за месяц < 0)
// |   Бн		|   БазаДляИсчисленияИПН					| Сумма облагаемого ИПН дохода за месяц (уже отняты вычеты и ОПВ)
// |   %Н		|	ПроцентИПН								| Процент ИПН
// |   К1в		| ПризнакПрименятьОграничениеПоДоходамОПВ 	| 0, если расчет ОПВ от базы (когда база < 75 МЗП), 1 если ОПВ с 75 МЗП
// |   Бв		|	БазаДляИсчисленияОПВ					| Сумма облагаемого ОПВ дохода за месяц (за счет прочих начислений, не относящихся в Х)
// |   %В		|	ПроцентОПВ								| Процент обязательных пенсионных взносов
// |   МаксОПВ	| 	МаксСуммаОПВ 							| Сумма ОПВ с 75 МЗП
// |   К2в		|	ПризнакИсчисленияОПВ					| 1, если по работнику исчисляются ОПВ, иначе 0 (пенсионер, инвалид 1, 2 гр. и т.д.)
// |   %Упр		|	ПроцентПрочихКомпенсируемыхУдержаний	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых не вычитается ОПВ и ИПН)
// |   %Ун		|	ПроцентКомпенсируемыхУдержанийБезИПН	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН)
// |   %Ув		|	ПроцентКомпенсируемыхУдержанийБезОПВ	| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ОПВ)
// |   %Унв		|	ПроцентКомпенсируемыхУдержанийБезИПНиОПВ| Суммарный процент с Х прочих компенсируемых удержаний (из к-рых вычитается ИПН и ОПВ)
// |   Фу		|	СуммаКомпенсируемыхУдержаний			| Компенсируемые удержания фиксированной суммой
// |   %ПФ		|	РезультирующийПроцентОПВ				|
// |   Фв		|	ФиксЧастьОПВ							|
// |   %НВ		|	РезультирующийПроцентИПНиОПВ			|
// |   Фн		|	ФиксЧастьИПН							|
// |   Льгот	|	ОстатокЛьготы							| Неиспользованная часть льготы, доступна в текущем месяца
// |   Вычет	|	ОстатокВычета							| Неиспользованный вычет с учетом переносимых с начала года, доступный в текущем месяце
// 
Функция РассчитатьСтрокуОтОбратногоПосле2018(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для %1 расчет ""%2"" не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации'"),
							ИсходныеДанные.СотрудникНаименование,
							ИсходныеДанные.ВидРасчетаНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокВычета								= Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0);
		ПроцентИПН									= ИсходныеДанные.ПроцентИПН;
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;		
		Если ПроцентИПН = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
		
		ПредоставлятьВычетОПВ						= 1;
		//ПредоставлятьВычетВОСМС						= ?(ИсходныеДанные.ПредоставлятьВычетВОСМС, 1, 0);
		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПроцентИПН									= 0;
		ПрочиеДоходыДляИПН							= 0;
		ПредоставлятьВычетОПВ						= 0;
		//ПредоставлятьВычетВОСМС						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода		
		ПрочиеДоходыДляОПВ 					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ 					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ПредоставлятьВычетОПВ * ИсчисленныеОПВ - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ОПВ, и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ*ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
	//	
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		ПрочийВычетПоИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, (БазаДляИсчисленияИПН + ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.ОбщаяСуммаНачислений), 0); //для включения сумм доп.вычетов.
		БазаДляИсчисленияИПН = ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочийВычетПоИПН;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - ПредоставлятьВычетОПВ * РезультатОПВ - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

Функция ПолучитьДанныеДляРасчета(ИмяПВР, ИмяДокумента, НеобходимыеДанные, ТаблицаДанныеДокументаДляРасчета, Организация, ПериодРегистрации, Ссылка, Сотрудник, ДанныеТЧ) 
	
	// Запросы выполняем без учета ограничения прав
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеБаза", ДанныеТЧ);
	
	Запрос.УстановитьПараметр("парамРегистратор", Ссылка);
	Запрос.УстановитьПараметр("ДанныеДокумента", ТаблицаДанныеДокументаДляРасчета);
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтВремени",   ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетаОтВремени());
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",   КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокиТЧ.Ссылка,
		|	СтрокиТЧ.ПериодРегистрации,
		|	СтрокиТЧ.Организация,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.Физлицо,
		|	СтрокиТЧ.ВидРасчета,
		|	СтрокиТЧ.СпособРасчета,
		|	СтрокиТЧ.Размер" + ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", ",
		|	СтрокиТЧ.Сотрудник,
		|   СтрокиТЧ.ЗачетОтработанногоВремени,
		|	СтрокиТЧ.ОтработаноДней,
		|	СтрокиТЧ.ОтработаноЧасов,
		|	СтрокиТЧ.ДатаНачала,
		|	СтрокиТЧ.ДатаОкончания,
		|	СтрокиТЧ.ДополнительныеДанные", ",
		|	СтрокиТЧ.ДокументОснование") + "
		|ПОМЕСТИТЬ ВТ_ДанныеДокументаДляРасчета
		|ИЗ
		|	&ДанныеДокумента КАК СтрокиТЧ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&парамРегистратор КАК Ссылка,
		|	СтрокиТЧ.НомерСтроки,
		|	СтрокиТЧ.Физлицо,
		|	СтрокиТЧ.ВидРасчета,
		|	СтрокиТЧ.Результат" + ?(ИмяПВР = "ОсновныеНачисленияОрганизаций", ",
		|	СтрокиТЧ.Сотрудник,
		|	СтрокиТЧ.ДатаНачала,
		|	СтрокиТЧ.ДатаОкончания,
		|	СтрокиТЧ.ДополнительныеДанные", ?(НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию ИЛИ НеобходимыеДанные.ПочтовыйСбор,",
		|	СтрокиТЧ.ДокументОснование", "")) + "
		|ПОМЕСТИТЬ ВТ_ДанныеБазы
		|ИЗ
		|	&ДанныеБаза КАК СтрокиТЧ
		|";
		
	Запрос.Выполнить();
	
	// ОтработанноеВремя
	//	Поля:
	//		НомерСтроки
	//		ОтработаноДней
	ОтработанноеВремяТекст = 
		"ВЫБРАТЬ
		|	СтрокиТЧ.НомерСтроки,
		|	СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ОтработаноДней
		|
		|ПОМЕСТИТЬ ВТ_ОтработанноеВремя
		|ИЗ
		|	ВТ_ДанныеДокументаДляРасчета КАК СтрокиТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ СтрокиТЧ.ДатаНачала И СтрокиТЧ.ДатаОкончания)
		|ГДЕ
		|	СтрокиТЧ.ОтработаноДней = 0
		|		ИЛИ СтрокиТЧ.ОтработаноЧасов = 0
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиТЧ.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтрокиТЧ.НомерСтроки";
	
	// НормаВремени
	//	Поля:
	//		НомерСтроки
	//		ОтработаноДней
	НормаВремениТекст = 
		"ВЫБРАТЬ
		|	СтрокиТЧ.НомерСтроки,
		|	СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормаДней
		|ПОМЕСТИТЬ ВТ_НормаВремени
		|ИЗ
		|	ВТ_ДанныеДокументаДляРасчета КАК СтрокиТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|			И (НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СтрокиТЧ.ДатаНачала, МЕСЯЦ))
		|
		|СГРУППИРОВАТЬ ПО
		|	СтрокиТЧ.НомерСтроки";
		
	// НакопленныеДанные
	// уже начислено по другим регистраторам в данном расчетном периоде
	// применяется для расчета начислений "до предела" (например, экологические выплаты по дням/часам, но не более указанного размера МРП)
	//	Поля:
	//		НомерСтроки
	//		УжеНачисленоВТекущемПериоде
	//
	НакопленныеДанныеНачисленийТекст = 
		"ВЫБРАТЬ
		|	Основной.НомерСтроки,
		|	СУММА(НакопленныеДанные.Результат) КАК УжеНачисленоВТекущемПериоде
		|
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеНачислений
		|ИЗ
		|	ВТ_ДанныеДокументаДляРасчета КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НакопленныеДанные
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизации
		|				ПО НакопленныеДанные.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизации.Организация	
		|		ПО НакопленныеДанные.Сотрудник = Основной.Сотрудник 
		|			И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета 
		|			И НАЧАЛОПЕРИОДА(НакопленныеДанные.ДатаНачала, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ)
		|			И 
		|				ВЫБОР
		|					КОГДА ЕСТЬNULL(УчетнаяПолитикаПоПерсоналуОрганизации.ВестиУчетПоГоловнойОрганизации, ИСТИНА) ТОГДА
		|						 ВЫБОР
		|							КОГДА НакопленныеДанные.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|								ТОГДА НакопленныеДанные.Ссылка.Организация
		|							ИНАЧЕ НакопленныеДанные.Ссылка.Организация.ГоловнаяОрганизация
		|						 КОНЕЦ
		|					ИНАЧЕ НакопленныеДанные.Ссылка.Организация
		|			КОНЕЦ = &парамГоловнаяОрганизация
		|			И НакопленныеДанные.Ссылка <> Основной.Ссылка
		|			И НакопленныеДанные.Ссылка.Проведен
		|
		|ГДЕ
		|	Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоДням),
		|											ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателюПоЧасам))
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Основной.НомерСтроки";
		
	// ИсчисленныйИПН
	//	данные по исчисленному ИПН в текущем периоде регистрации
	//	Поля 
	//		Физлицо
	//		ИсчисленныйНалог
	//
	//	Описание
	//	Суммируем исчисленный ИПН по заданной организации в заданном периоде регистрации
	//	в разрезе физлиц
	
	ИсчисленныйИПНТекст = 
		"ВЫБРАТЬ
		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
		|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
		|
		|ПОМЕСТИТЬ ВТ_ИсчисленныйИПН
		|ИЗ
		|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Удержания.ФизЛицо КАК Физлицо
		|		ИЗ
		|			ВТ_ДанныеДокументаДляРасчета КАК Удержания
		|		
		|		ГДЕ
		|			Удержания.ВидРасчета.ВычитатьИзБазыИПН) КАК РаботникиОрганизации
		|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
		|
		|ГДЕ
		|	ИПНРасчетыСБюджетом.Организация = &парамОрганизация И 
		|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.Период,Месяц) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации,Месяц) И
		|	ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И
		|	ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) И
		|	ИПНРасчетыСБюджетом.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНРасчетыСБюджетом.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНРасчетыСБюджетом.ФизЛицо
		|";
	
	// ИсчисленныйОПВ
	//	данные по исчисленным ОПВ в текущем периоде регистрации
	//	Поля 
	//		Физлицо
	//		ИсчисленныеВзносы
	//
	//	Описание
	//	Суммируем исчисленные ОПВ по заданной организации в заданном периоде регистрации
	//	в разрезе физлиц
	
	ИсчисленныйОПВТекст = 
		"ВЫБРАТЬ
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
		|
		|ПОМЕСТИТЬ ВТ_ИсчисленныйОПВ
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Удержания.ФизЛицо КАК Физлицо
		|		ИЗ
		|			ВТ_ДанныеДокументаДляРасчета КАК Удержания
		|		
		|		ГДЕ
		|			Удержания.ВидРасчета.ВычитатьИзБазыОПВ) КАК РаботникиОрганизации
		|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
		|
		|ГДЕ
		|	ОПВРасчетыСФондами.Организация = &парамОрганизация И
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.Период,Месяц) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации,Месяц) И
		|	ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И
		|	ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) И 
		|	ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) И
		|	ОПВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОПВРасчетыСФондами.ФизЛицо";

	// ИсчисленныеВОСМС
	//	данные по исчисленным ВОСМС в текущем периоде регистрации
	//	Поля 
	//		Физлицо
	//		ИсчисленныеВзносы
	//
	//	Описание
	//	Суммируем исчисленные ВОСМС по заданной организации в заданном периоде регистрации
	//	в разрезе физлиц
	
	ИсчисленныеВОСМСТекст = 
		"ВЫБРАТЬ
		|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
		|ПОМЕСТИТЬ ВТ_ИсчисленныеВОСМС
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			Удержания.ФизЛицо КАК Физлицо
		|		ИЗ
		|			ВТ_ДанныеДокументаДляРасчета КАК Удержания
		|		ГДЕ
		|			Удержания.ВидРасчета.ВычитатьИзБазыВОСМС) КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|ГДЕ
		|	ВОСМСРасчетыСФондами.Организация = &парамОрганизация
		|	И НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ВОСМСРасчетыСФондами.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	// НакопленныеДанные
	// уже начислено по другим регистраторам в данном расчетном периоде
	// применяется для расчета удержаний "нарастающим итогом за месяц"
	//	Поля:
	//		ФизЛицо
	//		ДокументОснование
	//		ВидРасчета
	//		УжеНачисленоВТекущемПериоде
	//	Описание:
	//		суммирует результаты по видам расчета и документам-основаниям
	//
	НакопленныеДанныеТекст = 
		"ВЫБРАТЬ
		|	Основной.НомерСтроки КАК НомерСтроки,
		|	СУММА(ЕСТЬNULL(НакопленныеДанные.Результат, 0)) КАК УжеНачисленоВТекущемПериоде,
		|	НакопленныеДанные.ФизЛицо,
		|	НакопленныеДанные.ВидРасчета,
		|	НакопленныеДанные.ДокументОснование
		|
		|ПОМЕСТИТЬ ВТ_НакопленныеДанные
		|ИЗ
		|	ВТ_ДанныеДокументаДляРасчета КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетУдержанийРаботниковОрганизаций.Удержания КАК НакопленныеДанные
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
		|				ПО НакопленныеДанные.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
		|		ПО НакопленныеДанные.ФизЛицо = Основной.ФизЛицо 
		|		   И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета 
		|		   И НакопленныеДанные.Ссылка.ПериодРегистрации <= Основной.Ссылка.ПериодРегистрации 
		|		   И ВЫБОР // общую сумму удержаний по ИЛ за весь период берем с учетом головной организации       
		|				КОГДА НакопленныеДанные.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) 
		|					ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
		|					ТОГДА НакопленныеДанные.Ссылка.Организация
		|				ИНАЧЕ НакопленныеДанные.Ссылка.Организация.ГоловнаяОрганизация
		|			 КОНЕЦ = &парамГоловнаяОрганизация	
		|		   И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование 
		|		   И НакопленныеДанные.Ссылка <> Основной.Ссылка
		|		   И НакопленныеДанные.Ссылка.ПериодРегистрации = Основной.Ссылка.ПериодРегистрации
		|		   И НакопленныеДанные.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	Основной.НомерСтроки,
		|	НакопленныеДанные.ФизЛицо,
		|	НакопленныеДанные.ВидРасчета,
		|	НакопленныеДанные.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НакопленныеДанные.ФизЛицо,
		|	НакопленныеДанные.ВидРасчета,
		|	НакопленныеДанные.ДокументОснование";

	Если НеобходимыеДанные.РасчетОтОбратного Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УчетнаяПолитикаПоПерсоналуОрганизаций.Организация КАК Организация,
			|	УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации КАК ВедениеУчетаПоГоловнойОрганизации
			|ПОМЕСТИТЬ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
			|ИЗ
			|	РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
			|ГДЕ
			|	УчетнаяПолитикаПоПерсоналуОрганизаций.Организация = &парамОрганизация";
		Запрос.Выполнить();
		
		Запрос.УстановитьПараметр("парамСписокСпособовРасчетаОтОбратного", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовОтОбратного());
		
		СтруктураТекстЗапроса = ПолучитьДанныеДляРасчетаОтОбратного(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник); 
		РасчетОтОбратногоПоляТекст = СтруктураТекстЗапроса.РасчетОтОбратногоПоляТекст; // строка с полями запроса
		РасчетОтОбратногоСоединенияТекст = СтруктураТекстЗапроса.РасчетОтОбратногоСоединенияТекст; // строка с соединениями в запросе		
		
	КонецЕсли;
	
	Если ИмяПВР = "ОсновныеНачисленияОрганизаций" Тогда 
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Основной.Сотрудник.ФизЛицо КАК ФизЛицо,
			|	Основной.Сотрудник.Наименование КАК СотрудникНаименование,
			|	Основной.НомерСтроки,
			|	Основной.Организация,
			|	Основной.ВидРасчета КАК ВидРасчета,
			|	Основной.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
			|	Основной.СпособРасчета КАК СпособРасчета,
			|	Основной.Размер,
			|	Основной.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени, 
			|	ВЫБОР 
			|		КОГДА Основной.ЗачетОтработанногоВремени
			|			  ИЛИ Основной.СпособРасчета В (&парамСписокСпособовРасчетаОтВремени) ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ 
			|	КОНЕЦ КАК СохранитьОтработанноеВремя,
			|	ЕСТЬNULL(ПорядокОкругленияВР.ПорядокОкругления, ПорядокОкругленияОбщ.ПорядокОкругления) КАК ПорядокОкругления,
			|	ЕСТЬNULL(ПорядокОкругленияВР.МетодОкругления, ПорядокОкругленияОбщ.МетодОкругления) КАК МетодОкругления";
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ВЫБОР 
			|		КОГДА Основной.ОтработаноДней = 0 ТОГДА ЕСТЬNULL(ОтработанноеВремя.ОтработаноДней, 0)
			|		ИНАЧЕ Основной.ОтработаноДней
			|	КОНЕЦ КАК ОтработаноДней,
			|	ВЫБОР
			|		КОГДА Основной.ОтработаноЧасов = 0 ТОГДА ЕСТЬNULL(ОтработанноеВремя.ОтработаноДней, 0) * 8
			|		ИНАЧЕ Основной.ОтработаноЧасов 
			|	КОНЕЦ КАК ОтработаноЧасов"
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(НормаВремени.НормаДней, 0) КАК НормаДней,
			|	ЕСТЬNULL(НормаВремени.НормаДней, 0) * 8 КАК НормаЧасов";
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоВидуРасчета Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(НакопленныеДанныеНачислений.УжеНачисленоВТекущемПериоде, 0) КАК УжеНачисленоВТекущемПериоде";
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП";
		КонецЕсли;
		
		Если НеобходимыеДанные.База Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(ДанныеБазы.РезультатБаза, 0) КАК РезультатБаза";			
		КонецЕсли;
		
		Если НеобходимыеДанные.РасчетОтОбратного Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|" + РасчетОтОбратногоПоляТекст;			
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИЗ
		|	ВТ_ДанныеДокументаДляРасчета КАК Основной
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
		|			&парамПериодРегистрации,
		|			ВидРасчета = НЕОПРЕДЕЛЕНО) КАК ПорядокОкругленияОбщ
		|		ПО ИСТИНА
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(&парамПериодРегистрации) КАК ПорядокОкругленияВР
		|		ПО Основной.ВидРасчета = ПорядокОкругленияВР.ВидРасчета
		|";
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			Запрос.Текст = ОтработанноеВремяТекст;
			Запрос.Выполнить();
			ОтработанноеВремяТекст = "ВТ_ОтработанноеВремя";
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОтработанноеВремяТекст + " КАК ОтработанноеВремя
			|		ПО Основной.НомерСтроки = ОтработанноеВремя.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.НормаВремениЗаМесяц Тогда
			Запрос.Текст = НормаВремениТекст;
			Запрос.Выполнить();
			НормаВремениТекст = "ВТ_НормаВремени";
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + НормаВремениТекст + " КАК НормаВремени
			|		ПО Основной.НомерСтроки = НормаВремени.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоВидуРасчета Тогда
			Запрос.Текст = НакопленныеДанныеНачисленийТекст;
			Запрос.Выполнить();
			НакопленныеДанныеНачисленийТекст = "ВТ_НакопленныеДанныеНачислений";
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + НакопленныеДанныеНачисленийТекст + " КАК НакопленныеДанныеНачислений
			|		ПО Основной.НомерСтроки = НакопленныеДанныеНачислений.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&КонецПериодаРегистрации) КАК РасчетныеПоказатели
			|		ПО ИСТИНА
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.База Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СтрокиТЧ.НомерСтроки,
				|	СУММА(ЕСТЬNULL(ДанныеБазы.Результат, 0)) КАК РезультатБаза
				|ПОМЕСТИТЬ ВТ_База
				|ИЗ
				|	ВТ_ДанныеДокументаДляРасчета КАК СтрокиТЧ
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + ".БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|		ПО СтрокиТЧ.ВидРасчета = БазовыеВидыРасчета.Ссылка
				|	
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеБазы КАК ДанныеБазы
				|		ПО СтрокиТЧ.Сотрудник = ДанныеБазы.Сотрудник
				|		   И БазовыеВидыРасчета.ВидРасчета = ДанныеБазы.ВидРасчета
				|		   И СтрокиТЧ.Ссылка = ДанныеБазы.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	СтрокиТЧ.НомерСтроки
				|
				|";

			Запрос.Выполнить();
			БазаТекст = "ВТ_База";
		
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + БазаТекст + " КАК ДанныеБазы
			|		ПО Основной.НомерСтроки = ДанныеБазы.НомерСтроки
			|";
			
		КонецЕсли;
				
		Если НеобходимыеДанные.РасчетОтОбратного Тогда
			ТекстЗапроса = ТекстЗапроса + " 
			|" + РасчетОтОбратногоСоединенияТекст;			
		КонецЕсли;

		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Основной.НомерСтроки
		|";
			
	ИначеЕсли ИмяПВР = "УдержанияОрганизаций" Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Основной.ФизЛицо,
			|	Основной.НомерСтроки,
			|	Основной.Размер,
			|	Основной.ВидРасчета,
			|	Основной.СпособРасчета КАК СпособРасчета,
			|	ЕСТЬNULL(ПорядокОкругленияВР.ПорядокОкругления, ПорядокОкругленияОбщ.ПорядокОкругления) КАК ПорядокОкругления,
			|	ЕСТЬNULL(ПорядокОкругленияВР.МетодОкругления, ПорядокОкругленияОбщ.МетодОкругления) КАК МетодОкругления,
			|	Основной.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
			|	Основной.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
			|	Основной.ВидРасчета.ВычитатьИзБазыВОСМС КАК ВычитатьИзБазыВОСМС";
			
		Если НеобходимыеДанные.База Тогда
			ТекстЗапроса = ТекстЗапроса + ",	
			|	СУММА(ЕСТЬNULL(ДанныеБазы.Результат, 0)) КАК РезультатБаза";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйИПН Тогда
			ТекстЗапроса = ТекстЗапроса + ",	
			|	ЕСТЬNULL(МАКСИМУМ(ИсчисленныйИПН.ИсчисленныйНалог), 0) КАК ИсчисленныйНалог";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйОПВ Тогда
			ТекстЗапроса = ТекстЗапроса + ",	
			|	ЕСТЬNULL(МАКСИМУМ(ИсчисленныйОПВ.ИсчисленныйВзнос), 0) КАК ИсчисленныйВзнос";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВОСМС Тогда
			ТекстЗапроса = ТекстЗапроса + ",	
			|	ЕСТЬNULL(МАКСИМУМ(ИсчисленныеВОСМС.ИсчисленныйВзнос), 0) КАК ИсчисленныйВзносОСМС";
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(МАКСИМУМ(НакопленныеДанные.УжеНачисленоВТекущемПериоде), 0) КАК УжеНачисленоВТекущемПериоде,
			|	Основной.ДокументОснование
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ПочтовыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода, 0) КАК РазмерПочтовогоПеревода,
			|ЕСТЬNULL(ШкалаСтавокПочтовогоСбора.Величина, 0) КАК ВеличинаСтавкиПочтовогоСбора,
			|ЕСТЬNULL(ШкалаСтавокПочтовогоСбора.МинСумма, 0) КАК МинСуммаПочтовогоСбора";
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	ВТ_ДанныеДокументаДляРасчета КАК Основной
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(
			|				&парамПериодРегистрации,
			|				ВидРасчета = НЕОПРЕДЕЛЕНО) КАК ПорядокОкругленияОбщ
			|		ПО ИСТИНА
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокОкругленияРезультатовРасчетаЗарплаты.СрезПоследних(&парамПериодРегистрации) КАК ПорядокОкругленияВР
			|		ПО Основной.ВидРасчета = ПорядокОкругленияВР.ВидРасчета
			|";
			
		Если НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&КонецПериодаРегистрации) КАК РасчетныеПоказатели
			|		ПО ИСТИНА
			|";
		КонецЕсли;
			
		Если НеобходимыеДанные.База Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК ДанныеБазы
			|		ПО ДанныеБазы.Ссылка.Организация = &парамОрганизация 
			|		   И Основной.ФизЛицо = ДанныеБазы.ФизЛицо 
			|		   И ДанныеБазы.Ссылка.ПериодРегистрации = &парамПериодРегистрации
			|		   И БазовыеВидыРасчета.ВидРасчета = ДанныеБазы.ВидРасчета
			|		   И ДанныеБазы.Ссылка.Проведен
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйИПН Тогда
			Запрос.Текст = ИсчисленныйИПНТекст;
			Запрос.Выполнить();
			ИсчисленныйИПНТекст = "ВТ_ИсчисленныйИПН";
			
			ТекстЗапроса = ТекстЗапроса + "	
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИсчисленныйИПНТекст + " КАК ИсчисленныйИПН
			|		ПО Основной.ФизЛицо = ИсчисленныйИПН.ФизЛицо
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйОПВ Тогда
			Запрос.Текст = ИсчисленныйОПВТекст;
			Запрос.Выполнить();
			ИсчисленныйОПВТекст = "ВТ_ИсчисленныйОПВ";
			
			ТекстЗапроса = ТекстЗапроса + "	
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИсчисленныйОПВТекст + " КАК ИсчисленныйОПВ
			|		ПО Основной.ФизЛицо = ИсчисленныйОПВ.ФизЛицо
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВОСМС Тогда
			Запрос.Текст = ИсчисленныеВОСМСТекст;
			Запрос.Выполнить();
			ИсчисленныеВОСМСТекст = "ВТ_ИсчисленныеВОСМС";
			
			ТекстЗапроса = ТекстЗапроса + "	
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИсчисленныеВОСМСТекст + " КАК ИсчисленныеВОСМС
			|		ПО Основной.ФизЛицо = ИсчисленныеВОСМС.ФизЛицо
			|";
		КонецЕсли;
			
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
				
			Запрос.Текст = НакопленныеДанныеТекст;
			Запрос.Выполнить();
			НакопленныеДанныеТекст = "ВТ_НакопленныеДанные";
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + НакопленныеДанныеТекст + " КАК НакопленныеДанные
			|		ПО Основной.ФизЛицо = НакопленныеДанные.ФизЛицо
			|		   И Основной.ДокументОснование = НакопленныеДанные.ДокументОснование
			|		   И Основной.ВидРасчета = НакопленныеДанные.ВидРасчета
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ПочтовыйСбор Тогда
			
			ПочтовыеПереводыТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки,
			|	Основной.ФизЛицо,
			|	Основной.Организация,
			|	Основной.ДокументОснование,
			|	СУММА(Дополнительный.Результат) КАК РазмерПочтовогоПеревода
			|ПОМЕСТИТЬ ВТ_ПочтовыеПереводы
			|ИЗ
			|	ВТ_ДанныеДокументаДляРасчета КАК Основной
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеБазы КАК Дополнительный
			|		ПО Основной.Ссылка = Дополнительный.Ссылка 
			|			И Основной.ФизЛицо = Дополнительный.ФизЛицо 
			|			И Основной.ДокументОснование = Дополнительный.ДокументОснование 
			|			И Дополнительный.ВидРасчета.СпособРасчета В (&парамМассивСпособовУдержанийИЛ)
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки,
			|	Основной.ФизЛицо,
			|	Основной.Организация,
			|	Основной.ПериодРегистрации,
			|	Основной.ДокументОснование";
			
			МассивСпособовУдержанийИЛ = Новый Массив;
			МассивСпособовУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом);
			МассивСпособовУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
			МассивСпособовУдержанийИЛ.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячномуРасчетномуПоказателю);
			
			Запрос.УстановитьПараметр("парамМассивСпособовУдержанийИЛ", МассивСпособовУдержанийИЛ);

			Запрос.Текст = ПочтовыеПереводыТекст;
			Запрос.Выполнить();
			ПочтовыеПереводыТекст = "ВТ_ПочтовыеПереводы";
			
			// присоединяем данные для расчета почтового перевода
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ПочтовыеПереводыТекст + " КАК ПочтовыеПереводы
			|	ПО Основной.НомерСтроки = ПочтовыеПереводы.НомерСтроки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокУдержаний.СрезПоследних(&парамПериодРегистрации, ) КАК ШкалаСтавокПочтовогоСбора
			|	ПО Основной.ВидРасчета = ШкалаСтавокПочтовогоСбора.ВидРасчета
			|		И ШкалаСтавокПочтовогоСбора.НижнийПредел < ПочтовыеПереводы.РазмерПочтовогоПеревода
			|		И ПочтовыеПереводы.РазмерПочтовогоПеревода <= ШкалаСтавокПочтовогоСбора.ВерхнийПредел
			|";

		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "	
			|СГРУППИРОВАТЬ ПО
			|	Основной.ФизЛицо,
			|	Основной.НомерСтроки,
			|	Основной.Размер,
			|	Основной.ВидРасчета,
			|	Основной.СпособРасчета,
			|	ЕСТЬNULL(ПорядокОкругленияВР.ПорядокОкругления, ПорядокОкругленияОбщ.ПорядокОкругления),
			|	ЕСТЬNULL(ПорядокОкругленияВР.МетодОкругления, ПорядокОкругленияОбщ.МетодОкругления)
			|";
			
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Основной.ДокументОснование
			|";
		КонецЕсли;
			
		Если НеобходимыеДанные.ПочтовыйСбор Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода, 0),
			|ЕСТЬNULL(ШкалаСтавокПочтовогоСбора.Величина, 0),
			|ЕСТЬNULL(ШкалаСтавокПочтовогоСбора.МинСумма, 0)
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.РазмерРегламентированныхРасчетныхПоказателей Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0),
			|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	Основной.ФизЛицо
			|";
			
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Основной.ДокументОснование
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Получает данные для расчета "от обратного" 
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратного(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник  = Неопределено)

	Если ПериодРегистрации >= '20200101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОтОбратногоПосле2020(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОтОбратногоПосле2019(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОтОбратногоПосле2018(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОтОбратногоПосле2009(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник);
	Иначе
		Возврат ПолучитьДанныеДляРасчетаОтОбратногоДо2009(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник);
	КонецЕсли;
		
КонецФункции  

// Получает данные для расчета "от обратного" до 2009
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратногоДо2009(НеобходимыеДанные, Организация, ПериодРегистрации, Запрос, Сотрудник = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
    ИмяИсточника = "Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления";
    Условие = "Ссылка = &парамРегистратор";
    ВнешнееУсловие = "Основной.Ссылка = &парамРегистратор";
    Если Сотрудник <> Неопределено Тогда
    	Условие = Условие + " И Физлицо В (&парамФизлица)";
    	ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&парамФизлица)";
    	Запрос.УстановитьПараметр("парамФизлица", Сотрудник.ФизЛицо);
    КонецЕсли;
    
    /////////////////////////////////////////////////////////////////////
    // Далее идут тексты запросов для расчета "от обратного"
    //
    
    РасчетОтОбратногоПоляТекст = ""; // строка с полями запроса
    РасчетОтОбратногоСоединенияТекст = ""; // строка с соединениями в запросе		
    
    ИмяПВР = "ОсновныеНачисленияОрганизаций";
       
    // Поля, необходимые для расчета "от обратного" 
    РасчетОтОбратногоПоляТекст = "
    |ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьИПН,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьУдержания, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьУдержания,
    |Основной.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
    |Основной.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН
    |";
    			
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    	Если ПериодРегистрации >= '20070101' Тогда
    		РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПризнакПримененияЛьготы, 0) КАК ПризнакПримененияЛьготы,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоход, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоход,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоходЗаМесяц, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоходЗаМесяц,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ЛьготируемаяБазаДляИсчисленияИПН, 0) + 
    		|					ВЫБОР
    		|						КОГДА ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПризнакПримененияЛьготы, 0) > 0
    		|							ТОГДА ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0)
    		|						ИНАЧЕ 0
    		|					КОНЕЦ КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоходЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РанееПримененнаяЛьгота, 0) КАК РанееПримененнаяЛьгота,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.НалоговыйВычетЗаМесяц, 0) КАК НалоговыйВычетЗаМесяц,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.НалоговыйВычетЗаГод, 0) КАК НалоговыйВычетЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ИсчисленныеВзносыЗаМесяц, 0) КАК ИсчисленныеВзносыЗаМесяц,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ИсчисленныеВзносыЗаГод, 0) КАК ИсчисленныеВзносыЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РанееНалогИсчисленный, 0) КАК РанееНалогИсчисленный,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименяемаяЛьготаЗаГод, 0) КАК ПрименяемаяЛьготаЗаГод,
    		|ЕСТЬNULL(СведенияОСтавкахИПН.Ставка, 0) КАК ПроцентИПН
    		|";
    	Иначе
    		РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПризнакПримененияЛьготы, 0) КАК ПризнакПримененияЛьготы,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоходЗаМесяц, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоходЗаМесяц,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ЛьготируемаяБазаДляИсчисленияИПН, 0) + 
    		|					ВЫБОР
    		|						КОГДА ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПризнакПримененияЛьготы, 0) > 0
    		|							ТОГДА ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0)
    		|						ИНАЧЕ 0
    		|					КОНЕЦ КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоходЗаГод, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоходЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.НалоговыйВычетЗаГод, 0) КАК НалоговыйВычетЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ИсчисленныеВзносыЗаГод, 0) КАК ИсчисленныеВзносыЗаГод,
    		|ЕСТЬNULL(ИПНРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод, 0) КАК РанееНалогИсчисленный,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименяемаяЛьготаЗаГод, 0) КАК ПрименяемаяЛьготаЗаГод,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.КоэффициентПересчета, 0) КАК КоэффициентПересчета,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.СреднемесячныйРазмерМЗПЗаКвартал, 0) КАК СреднемесячныйРазмерМЗПЗаКвартал,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПолученныйДоходЗаКвартал, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ПолученныйДоходЗаКвартал,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РегистрировалсяДоходЗаКвартал, 0) КАК РегистрировалсяДоходЗаКвартал,
    		|ВЫБОР
    		|	КОГДА СведенияОРаботникахОрганизации.Сотрудник ЕСТЬ NULL
    		|			ИЛИ (СведенияОРаботникахОрганизации.ПричинаИзмененияСостояния = &парамУволен
    		|					И ДОБАВИТЬКДАТЕ(СведенияОРаботникахОрганизации.Период, ДЕНЬ, -1) < &парамПериодРегистрации)
    		|		ТОГДА ЛОЖЬ
    		|	ИНАЧЕ ИСТИНА
    		|КОНЕЦ КАК ПрименятьНулевуюСтавку,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименятьНулевуюСтавкуКв1, 0) КАК ПрименятьНулевуюСтавкуКв1,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименятьНулевуюСтавкуКв2, 0) КАК ПрименятьНулевуюСтавкуКв2,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименятьНулевуюСтавкуКв3, 0) КАК ПрименятьНулевуюСтавкуКв3,
    		|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрименятьНулевуюСтавкуКв4, 0) КАК ПрименятьНулевуюСтавкуКв4
    		|";
    	КонецЕсли;
    КонецЕсли;
    			
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&парамФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&парамФизЛицаБезПраваНаПенсию)
    	|		  ИЛИ Основной.ФизЛицо В (&парамФизЛицаИнвалидыБессрочно) ТОГДА ЛОЖЬ
    	|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияОПВ,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.БазаДляИсчисленияОПВ, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйОПВДоход, 0) КАК БазаДляИсчисленияОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.РанееВзносыИсчисленные, 0) КАК РанееВзносыИсчисленные,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляОПВ,
    	|&парамРазмерОграниченияПоДоходамОПВ КАК РазмерОграниченияПоДоходамОПВ,
    	|&парамСтавкаОПВ КАК ПроцентОПВ
    	|";
    		
    	Запрос.УстановитьПараметр("парамСтавкаОПВ", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний, 0) КАК СуммаКомпенсируемыхУдержаний,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний, 0) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|";
    КонецЕсли;
    			
    РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйИПНДоход, 0) КАК НеОблагаемыйИПНДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйОПВДоход, 0) КАК НеОблагаемыйОПВДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйИПНДоходВключаемыхНачислений, 0) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйОПВДоходВключаемыхНачислений, 0) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОбщаяСуммаНачислений, 0) КАК ОбщаяСуммаНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.СуммаВключаемыхНачислений, 0) КАК СуммаВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ДополнительныеДанные, 0) КАК РасчетОтОбратногоДополнительныеДанные
    |";
    
    // Далее идут тексты запросов по аналогии с функциями ПолучитьДанныеДляРасчетаИПН() и ПолучитьДанныеДляРасчетаОПВ().
    // Отличие по всем текстам в том, что в ПолучитьДанныеДляРасчетаИПН() используется &парамСписокФизЛиц,
    // а в расчете "от обратного" &парамРасчетОтОбратногоСписокФизЛиц.
    // В данном расчете предполагается, что расчет ИПН и ОПВ будет производится с установленным
    // в учетной политике по налоговому учету флажке ОтражениеПоПериодуРегистрации - все данные выбираются по ПериодРегистрации

    Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
    Запрос.УстановитьПараметр("парамГоловнаяОрганизация", 	ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
    
    Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
    	Запрос.УстановитьПараметр("парамНалогоплательщик", 	ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация, 
    																									Организация,
    																									Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
    Иначе
    	Запрос.УстановитьПараметр("парамНалогоплательщик", 	Организация);
    КонецЕсли;
    
    Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",		Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
    // виды налогов/взносов
    Запрос.УстановитьПараметр("парамНалогВзносИПН",				Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог);
    Запрос.УстановитьПараметр("парамНалогВзносОПВ",				Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
    // прочие значения
    Запрос.УстановитьПараметр("парамВнутреннееСовместительство",Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
    Запрос.УстановитьПараметр("парамСпособРасчетаПроцентом", 	Перечисления.СпособыРасчетаОплатыТруда.Процентом);
    Запрос.УстановитьПараметр("парамПустаяОрганизация", 		Справочники.Организации.ПустаяСсылка());
    
    // Список видов расчета "от обратного"
    ВидыРасчетаОтОбратногоТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ВидРасчета
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.Текст = ВидыРасчетаОтОбратногоТекст;
    Запрос.УстановитьПараметр("парамВидыРасчетаОтОбратного", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));

    // Периоды
    // Таблица список периодов-физлиц по которым необходимо выполнить расчет налога или взносов
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ФизЛицо
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |";
    			
    Запрос.Текст = ПериодыТекст;
    Запрос.УстановитьПараметр("парамРасчетОтОбратногоСписокФизЛиц", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
   	
    // Для расчета вычетов составим таблицу периодов-физлиц с начала года
    ПериодыГодаТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
    				   |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
    				   |ПОМЕСТИТЬ ВТ_ПериодыГодаРасчетаОтОбратного
    				   |ИЗ
    				   |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
    				   |ГДЕ
    				   |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
					   |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодРегистрации, ГОД) И &парамПериодРегистрации
    				   |
    				   |ИНДЕКСИРОВАТЬ ПО
    				   |	Период";
    Запрос.Текст = ПериодыГодаТекст;
    Запрос.Выполнить();
    ПериодыГодаТекст = "ВТ_ПериодыГодаРасчетаОтОбратного";
    	
    // Сохраним текст запроса с выборкой периодов года для использования без участия физлиц, чтобы сократить число таблиц в запросе
    ДатыПериодовГодаТекст = ПериодыГодаТекст;
    	
    // ПериодыГода
    // Таблица список периодов-физлиц, по которым необходимо выполнить расчет налога или взноса
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Основной.ФизЛицо,
    |	ПериодыГода.Период КАК Период
    |
    |ПОМЕСТИТЬ ВТ_ПериодыРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |	ЛЕВОЕ СОЕДИНЕНИЕ " + ПериодыГодаТекст + " КАК ПериодыГода
    |		ПО ИСТИНА
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо,
    |	Период
    |";		   
    Запрос.Текст = ПериодыТекст;
    Запрос.Выполнить();
    ПериодыТекст = "ВТ_ПериодыРасчетаОтОбратного";
    		
    // Списки видов расчета, категория расчета которых меньше текущей  (т.е. уже посчитанные)
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПВР.Ссылка
    |ИЗ
    |	ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |ГДЕ
    |	ПВР.СпособРасчета <> &парамСпособРасчетаПроцентом
    |	И ПВР.СпособРасчета НЕ В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.УстановитьПараметр("парамУжеРассчитанныеВидыРасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
   // ОсновныеИДополнительныеНачисления
   // Поля:
   //		ФизЛицо
   //		ВидРасчета
   //		Результат
   //	Описание:
   // Выбирает начисления за период регистрации по физлицам, для которых выполняется расчет "от обратного"
   ОсновныеИДополнительныеНачисленияТекст = "
   |ВЫБРАТЬ
   |	Начисления.ФизЛицо,
   |	Начисления.ВидРасчета,
   |	СУММА(Начисления.Результат) КАК Результат,
   |	СУММА(Начисления.ДополнительныеДанные) КАК ДополнительныеДанные,
   |	СУММА(ВЫБОР 
   |				КОГДА НЕ Начисления.ЯвляетсяПрочимДоходом ТОГДА Начисления.Результат 
   |				ИНАЧЕ 0 
   |		  КОНЕЦ) КАК СуммаНачислений
   |
   |ПОМЕСТИТЬ ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного
   |ИЗ
   |	(ВЫБРАТЬ
   |		ОсновныеНачисления.ФизЛицо,
   |		ОсновныеНачисления.ВидРасчета,
   |		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
   |		ОсновныеНачисления.Результат,
   |		ОсновныеНачисления.ДополнительныеДанные
   |	ИЗ
   |		" + ИмяИсточника + " КАК ОсновныеНачисления
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
   |			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
   |	ГДЕ
   |		ВЫБОР
   |			КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
   |				ТОГДА ОсновныеНачисления.Ссылка.Проведен
   |			ИНАЧЕ ИСТИНА
   |		КОНЕЦ
   |		И ВЫБОР
   |			КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
   |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
   |				ТОГДА ОсновныеНачисления.Ссылка.Организация
   |			ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
   |		КОНЕЦ = &парамГоловнаяОрганизация
   |		И ОсновныеНачисления.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
   |		И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
   |		И (ОсновныеНачисления.Ссылка <> &парамРегистратор
   |			ИЛИ (ОсновныеНачисления.Ссылка = &парамРегистратор
   |					И ОсновныеНачисления.ВидРасчета В (&парамУжеРассчитанныеВидыРасчета)))
   |	) КАК Начисления
   |СГРУППИРОВАТЬ ПО
   |	Начисления.ФизЛицо,
   |	Начисления.ВидРасчета
   |
   |ИНДЕКСИРОВАТЬ ПО
   |	ФизЛицо,
   |	ВидРасчета
   |";
   Запрос.Текст = ОсновныеИДополнительныеНачисленияТекст;
   Запрос.Выполнить();
   ОсновныеИДополнительныеНачисленияТекст = "ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного";
   
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    		
    	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
    	Запрос.УстановитьПараметр("парамВидСтроки",  				   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
    	Запрос.УстановитьПараметр("парамИнвалид",				   	   Перечисления.ОтношениеКИнвалидности.Инвалид);
    	Запрос.УстановитьПараметр("парамТретьяГруппа",				   "III");
    	Запрос.УстановитьПараметр("парамВидПлатежа", 				   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
    	Запрос.УстановитьПараметр("парамПринят", 		   			   Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
    	Запрос.УстановитьПараметр("парамУволен", 		   			   Перечисления.ПричиныИзмененияСостояния.Увольнение);
    	Запрос.УстановитьПараметр("парамПоИсчислениюИПН",			   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
    	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамНачалоГода",				   НачалоГода(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамКонецГода",   				   КонецГода(ПериодРегистрации));
    			
    	// ФизлицаНеРезиденты
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-нерезидентов
    	ФизлицаНеРезидентыТекст = "
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК)";
    		
    	Запрос.Текст = ФизлицаНеРезидентыТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаНеРезиденты", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// РасчетныеПоказатели
    	//	Поля:
    	//		Период
    	//		РазмерМРП
    	//		РазмерМЗП
    	//
    	//	Описание:
    	// Выбирает размер месячного расчетного показателя по периодам
    	РасчетныеПоказателиТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказателиСрезПоследних.Период КАК Период,
    	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
    	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
    	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
    	|
    	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		Периоды.Период,
    	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
    	|	ИЗ	
    	|		" + ДатыПериодовГодаТекст + " КАК Периоды 
    	|
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
    	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
    	|
    	|	СГРУППИРОВАТЬ ПО
    	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
    	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Период
    	|";
    	Запрос.Текст = РасчетныеПоказателиТекст;
    	Запрос.Выполнить();
    	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказателиРасчетаОтОбратного";
    			
    	Если ПериодРегистрации >= '20070101' Тогда // после 2007 года - расчет фиксированной ставкой

    		// ПрименяемыеЛьготы
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		ПрименяетсяЛьготаУчастникаВОВ
    		//		ПрименяетсяЛьготаПоИнвалидности
    		//		ЛьготаПоДоходу
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года льготы на которые имеет право физлицо
    		ПрименяемыеЛьготыТекст = 
    		"ВЫБРАТЬ
    		|	ИПНЛьготыФизлиц.Физлицо КАК ФизЛицо,
    		|	ИПНЛьготыФизлиц.Период КАК Период,
    		|
    		|	ВЫБОР
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
    		|
    		|	ВЫБОР
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
    		|
    		|	ВЫБОР 
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    		|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
    		|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    		|	КОНЕЦ КАК ЛьготаПоДоходу
    		|
    		|ПОМЕСТИТЬ ВТ_ПрименяемыеЛьготыРасчетаОтОбратного
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
    		|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
    		|		ВЫБОР 
    		|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
    		|				ТОГДА 0 
    		|			ИНАЧЕ ВЫБОР 
    		|					КОГДА (ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности) = &парамИнвалид 
    		|							И (ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности) = &парамТретьяГруппа 
    		|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
    		|					ИНАЧЕ 99999999 
    		|				  КОНЕЦ 
    		|		КОНЕЦ КАК ЛьготаПоИнвалидности,
    		|		ВЫБОР 
    		|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
    		|				ТОГДА 0 
    		|			ИНАЧЕ 99999999 
    		|		КОНЕЦ КАК ЛьготаУчастникаВОВ
    		|		
    		|	ИЗ
    		|		(ВЫБРАТЬ
    		|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
    		|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
    		|			Периоды.Физлицо КАК Физлицо,
    		|			Периоды.Период КАК Период
    		|		ИЗ
    		|			" + ПериодыТекст + " КАК Периоды
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
    		|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
    		|					И ЛьготыФизлицПоИнвалидности.Физлицо = Периоды.Физлицо
    		|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    		|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
    		|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
    		|					И ЛьготыФизлицУчастниковВОВ.Физлицо = Периоды.Физлицо
    		|		
    		|		СГРУППИРОВАТЬ ПО
    		|			Периоды.Физлицо,
    		|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
    		|				ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
    		|					И ЛьготыФизлицПоИнвалидности.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
    		|				ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
    		|					И ЛьготыФизлицУчастниковВОВ.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    		|				ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
    		|
    		|ИНДЕКСИРОВАТЬ ПО
    		|	ФизЛицо,
    		|	Период
    		|";
    		Запрос.Текст = ПрименяемыеЛьготыТекст;
    		Запрос.Выполнить();
    		ПрименяемыеЛьготыТекст = "ВТ_ПрименяемыеЛьготыРасчетаОтОбратного";
    			
    		// Доходы
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		СуммаДоходаОборот
    		//		СуммаВычетаОборот
    		//      СуммаПримененныйВычетОборот
    		//      СуммаПримененнаяЛьготаОборот
    		//      СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
    		//
    		//	Описание:
    		// Выбирает общую сумму доходов, облагаемые налогом доходы, примененный вычет и примененную льготу за весь год по физлицам из СписокФизлиц
    				
    		// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    		// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    		// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем. 
    		// Сведения о жилищных и страховых вычетах текущего месяца всегда берем из регистра сведений, т.к. в регистре накопления они 
    		// появляются только при прямом расчете налога и поэтому могут отсутствовать, если сейчас первый раз рассчитываются начисления.
    		// Для того, чтобы в выборке всегда гарантировано были данные по всем месяцам с начала года в качестве левой таблицы
    		// используем Периоды
    		ДоходыТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Физлицо КАК ФизЛицо,
    		|	Периоды.Период КАК Период,
    		|	ЕСТЬNULL(СУММА(ИПНОбороты.СуммаДоходаОборот), 0) КАК СуммаДоходаОборот,
    		|	ЕСТЬNULL(СУММА(ИПНОбороты.СуммаВычетаОборот), 0) КАК СуммаВычетаОборот,
    		|	ЕСТЬNULL(СУММА(ИПНОбороты.СуммаПримененныйВычетОборот), 0) КАК СуммаПримененныйВычетОборот,
    		|	ЕСТЬNULL(СУММА(ИПНОбороты.СуммаПримененнаяЛьготаОборот), 0) КАК СуммаПримененнаяЛьготаОборот,
    		|	ЕСТЬNULL(СУММА(ИПНОбороты.СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот), 0) КАК СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,			
    		|	ЕСТЬNULL(СУММА(ВЫБОР
    		|					КОГДА ИПНОбороты.Период = &парамПериодРегистрации И ИПНОбороты.НачисленоВТекущейОрганизации
    		|						ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
    		|					ИНАЧЕ 0
    		|		  		   КОНЕЦ), 0) КАК ОблагаемыйДоходЗаМесяц
    		|ИЗ
    		|	" + ПериодыТекст + " КАК Периоды
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
    		|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
    		|		ВЫБОР 
    		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом 
    		|				ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) 
    		|			ИНАЧЕ 0 
    		|		КОНЕЦ КАК СуммаДоходаОборот,
    		|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
    		|		СУММА(ИПНСведенияОДоходах.ПримененныйВычет) КАК СуммаПримененныйВычетОборот,
    		|		СУММА(ИПНСведенияОДоходах.ПримененнаяЛьгота) КАК СуммаПримененнаяЛьготаОборот,
    		|		0 КАК СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,			
    		|		ВЫБОР
    		|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    		|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
    		|				ТОГДА ЛОЖЬ
    		|			ИНАЧЕ ИСТИНА
    		|		КОНЕЦ КАК НачисленоВТекущейОрганизации
    		|	ИЗ
    		|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
    		|	
    		|	ГДЕ
    		|		ИПНСведенияОДоходах.Период >= &парамНачалоГода И
    		|		ИПНСведенияОДоходах.Период <= &парамКонецМесяцаНалоговогоПериода И
    		|		ИПНСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
    		|		ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияОДоходах.Регистратор <> &парамРегистратор И
    		|		ИПНСведенияОДоходах.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
    		|		НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН
    		|				И ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации) И
			|		ИПНСведенияОДоходах.Активность
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
    		|		ИПНСведенияОДоходах.ФизЛицо,
    		|		ИПНСведенияОДоходах.СпособНалогообложения,
    		|		ИПНСведенияОДоходах.Регистратор
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНПлановыеВычеты.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
    		|		ИПНПлановыеВычеты.ФизЛицо,
    		|		0 КАК СуммаДоходаОборот,
    		|		СУММА(ИПНПлановыеВычеты.СуммаВычета) КАК СуммаВычета,
    		|		0 КАК СуммаПримененныйВычетОборот,
    		|		0 КАК СуммаПримененнаяЛьготаОборот,
    		|		0 КАК СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,			
    		|		ЛОЖЬ КАК НачисленоВТекущейОрганизации
    		|	ИЗ
    		|		РегистрСведений.ИПНПлановыеНалоговыеВычетыФизЛиц.СрезПоследних(
    		|				&парамКонецПериодаРегистрации,
    		|				Налогоплательщик = &парамНалогоплательщик
    		|				И МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И &парамКонецПериодаРегистрации
    		|				И ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК ИПНПлановыеВычеты
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНПлановыеВычеты.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНПлановыеВычеты.ФизЛицо
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
    		|		0 КАК СуммаДоходаОборот,
    		|		0 КАК СуммаВычета,
    		|		0 КАК СуммаПримененныйВычетОборот,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота) КАК СуммаПримененнаяЛьготаОборот,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
    		|		ЛОЖЬ КАК НачисленоВТекущейОрганизации
    		|	ИЗ
    		|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
    		|	
    		|	ГДЕ
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
    		|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ИПНОбороты
    		|	ПО Периоды.ФизЛицо = ИПНОбороты.ФизЛицо
    		|		И Периоды.Период = ИПНОбороты.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Физлицо,
    		|	Периоды.Период";
    				
    		ТипЗначенияИПНТекст = "ЧИСЛО(10, 2)";
    				
    		// ДоходыЗаГод 
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ОблагаемыйДоход
    		//		ОблагаемыйДоходЗаГод
    		//      ПримененныйВычет
    		//      ПримененныйВычетЗаГод
    		//      ПримененнаяЛьготаЗаГод
    		//      ПримененнаяЛьготаНаПредыдущемМестеРаботы
    		//		ЛьготируемыйОблагаемыйДоходЗаГод
    		//		ЛьготаПоДоходу
    		//
    		//	Описание:
    		//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год
    		
    		ДоходыЗаГодТекст = "
    		|ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	Периоды.Физлицо КАК ФизЛицо,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоход,
    		|	СУММА(ВЫБОР 
    		|			КОГДА Периоды.Период = ПрименяемыеЛьготы.Период 
    		|					И (ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ 
    		|						ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности) 
    		|				ТОГДА 1 
    		|			ИНАЧЕ 0 
    		|		КОНЕЦ) КАК ПрименяетсяЛьготаВМесяце,
    		|	СУММА(ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот) КАК ОблагаемыйДоходЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаПримененныйВычетОборот ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет,
    		|	СУММА(ИПНОбороты.СуммаПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
    		|	СУММА(ИПНОбороты.СуммаПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
    		|	СУММА(ИПНОбороты.СуммаПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыйОблагаемыйДоходЗаГод,
    		|	МАКСИМУМ(ПрименяемыеЛьготы.ЛьготаПоДоходу) КАК ЛьготаПоДоходу,
    		|	СУММА(ВЫБОР
    		|			КОГДА ИПНОбороты.Период = &парамПериодРегистрации И Периоды.Период = &парамПериодРегистрации
    		|				ТОГДА ИПНОбороты.ОблагаемыйДоходЗаМесяц
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц
    		|
    		|ИЗ
    		|	" + ПериодыТекст + " КАК Периоды
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыТекст + ") КАК ИПНОбороты
    		|		ПО Периоды.Период >= ИПНОбороты.Период 
    		|			И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|			И Периоды.Физлицо = ИПНОбороты.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
    		|		ПО ИПНОбороты.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|			И ИПНОбороты.Период = ПрименяемыеЛьготы.Период
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамПериодРегистрации, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК СведенияОбИнвалидностиФизлиц
    		|		ПО Периоды.ФизЛицо = СведенияОбИнвалидностиФизлиц.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамПериодРегистрации, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК СведенияОФизлицахУчастникахВОВ
    		|		ПО Периоды.ФизЛицо = СведенияОФизлицахУчастникахВОВ.ФизЛицо
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	Периоды.ФизЛицо";
    				
    		// ИПНРасчетыСБюджетом
    		//	Поля:
    		//		ФизЛицо
    		//		МесяцНалоговогоПериода
    		//		ИсчисленныйНалог			
    		//
    		//	Описание:
    		//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом и данные регистра
    		//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
    				
    		// Здесь не берем имеющийся за МесяцНалоговогоПериода в ИПНРасчетыСБюджетами налог, т.к. перерасчитываем заново,
    		// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным
    		ИПНРасчетыСБюджетомТекст = "
    		|ВЫБРАТЬ
    		|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
    		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
    		|ИЗ
    		|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
    		|
    		|ГДЕ
    		|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
    		|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик И
    		|	ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор И
    		|	ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации И
    		|	ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход И 
    		|	ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки И
    		|	НЕ(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) И
    		|	ИПНРасчетыСБюджетом.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
			|	ИПНРасчетыСБюджетом.Активность
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода,
    		|	ИПНРасчетыСБюджетом.ФизЛицо";
    				
    		// ИПНРасчетыСБюджетомЗаГод
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ИсчисленныйНалог
    		//		ИсчисленныйНалогЗаГод			
    		//
    		//	Описание:
    		//	Выбирает исчисленные налоги нарастающим итогом за год
    		ИПНРасчетыСБюджетомЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода ТОГДА ИПНРасчетыСБюджетом.ИсчисленныйНалог ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныйНалог,
    		|	СУММА(ИПНРасчетыСБюджетом.ИсчисленныйНалог) КАК ИсчисленныйНалогЗаГод
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|
    		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомТекст + ") КАК ИПНРасчетыСБюджетом
    		|		ПО Периоды.Период >= ИПНРасчетыСБюджетом.МесяцНалоговогоПериода 
    		|			И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	ИПНРасчетыСБюджетом.ФизЛицо";
    				
    				
    		// ОПВРасчетыСФондами
    		//	Поля:
    		//		ФизЛицо
    		//		МесяцНалоговогоПериода
    		//		ИсчисленныеВзносы
    		//
    		//	Описание:
    		//	Выбирает исчисленные пенсионные взносы для СписокФизлиц
    				
    		// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    		// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным				
    		ОПВРасчетыСФондамиТекст = "
    		|ВЫБРАТЬ
    		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
    		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
    		|ИЗ
    		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
    		|
    		|ГДЕ
    		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
    		|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
    		|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
    		|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И
    		|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
    		|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
    		|	НЕ(ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) И
    		|	ОПВРасчетыСФондами.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
			|	ОПВРасчетыСФондами.Активность
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
    		|	ОПВРасчетыСФондами.ФизЛицо
    		|";

    		// ОПВРасчетыСФондамиЗаГод
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ИсчисленныеВзносы
    		//		ИсчисленныеВзносыЗаГод
    		//		ЛьготируемыеИсчисленныеВзносыЗаГод
    		//
    		//	Описание:
    		//	Выбирает исчисленные пенсионные взносы нарастающим итогом за год
    		ОПВРасчетыСФондамиЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныеВзносы,
    		|	СУММА(ОПВРасчетыСФондами.ИсчисленныеВзносы) КАК ИсчисленныеВзносыЗаГод,
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыеИсчисленныеВзносыЗаГод
    		|	
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|
    		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиТекст + ") КАК ОПВРасчетыСФондами
    		|		ПО Периоды.Период >= ОПВРасчетыСФондами.МесяцНалоговогоПериода 
    		|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
    		|			ПО ОПВРасчетыСФондами.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|				И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ПрименяемыеЛьготы.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	ОПВРасчетыСФондами.ФизЛицо";

    		// ПрименениеВычетовВОрганизации
    		//	Поля:
    		//		Физлицо,
    		//		Период
    		//
    		// Описание:
    		//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
    		//	заданной организации
    		ПрименениеВычетовВОрганизацииТекст = 
    		"ВЫБРАТЬ
    		|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
    		|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
    		|		Периоды.Физлицо КАК Физлицо,
    		|		Периоды.Период КАК Период
    		|	ИЗ
    		|		"+ПериодыТекст+" КАК Периоды
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
    		|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период 
    		|				И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		Периоды.Физлицо,
    		|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
    		|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза 
    		|			И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
    		|
    		|ГДЕ
    		|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик";

    		// ОтработанноеВремя
    		//	Поля:
    		//		Физлицо,
    		//		Период,
    		//		ПредоставлятьВычет
    		//
    		// Описание:
    		//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
    		//	
    			
    		// Здесь в отличие от прямого расчета добавлен учет того, что в месяце может вовсе не быть доходов
    		// для налогообложения и не надо давать вычет. В прямом расчете ИПН это учитывается за счет того, 
    		// что ПериодыТекст строится по регистру ИПНСведенияОДоходах и если за месяц нет доходов, то и не будет
    		// записи в регистре.
    		ОтработанноеВремяТекст = 
    		"ВЫБРАТЬ
    		|	ОтработанноеВремя.Период,
    		|	ОтработанноеВремя.ФизЛицо,
    		|	ВЫБОР
    		|		КОГДА ОтработанноеВремя.Период < &парамПериодРегистрации
    		|				И ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо ЕСТЬ NULL
    		|			ТОГДА ЛОЖЬ 	// не было доходов в предыдущем месяце - не надо предоставлять и вычет,
    		|						// за текущий месяц вычет всегда учитываем, т.к. сейчас начислим физлицу что-нибудь от обратного
    		|		КОГДА СУММА(ВЫБОР 
    		|						КОГДА ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.ДатаС И ОтработанноеВремя.ДатаПо 
    		|							ТОГДА ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
    		|						ИНАЧЕ 0 
    		|			  		КОНЕЦ) >= СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) / 2
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПредоставлятьВычет
    		|
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		ОтработанноеВремя.Период,
    		|		ОтработанноеВремя.ФизЛицо,
    		|
    		|		ВЫБОР 
    		|			// вообще не был принят в штат - не считаем отработанное время
    		|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
    		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
    		|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
    		|				ТОГДА ОтработанноеВремя.Период
    		|			// принят в штат в текущем месяце - считаем с даты приема
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
    		|				ТОГДА ОтработанноеВремя.ДатаПриема
    		|			// сюда попасть не должны - не считаем 
    		|			ИНАЧЕ
    		|				ДАТАВРЕМЯ(3999, 12, 31)
    		|		КОНЕЦ КАК ДатаС,
    		|
    		|		ВЫБОР 
    		|			// повторный прием в ту же организацию и еще не уволен 
    		|			// или еще не уволен после первого приема - считаем до конца месяца
    		|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
    		|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
    		|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|			// уволен до начала месяца - не считаем
    		|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
    		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
    		|			// уволен в текущем месяце - считаем до даты увольнения
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
    		|               ТОГДА ОтработанноеВремя.ДатаУвольнения
    		|			// еще не уволен - считаем до конца месяца
    		|			ИНАЧЕ
    		|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|		КОНЕЦ КАК ДатаПо
    		|
    		|	ИЗ			
    		|		(ВЫБРАТЬ
    		|			Периоды.Период КАК Период,
    		|			Периоды.ФизЛицо КАК ФизЛицо,
    		|			МАКСИМУМ(ВЫБОР 
    		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПринят 
    		|							ТОГДА РаботникиОрганизации.Период
    		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    		|				 	 КОНЕЦ) КАК ДатаПриема,
    		|			МАКСИМУМ(ВЫБОР 
    		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
    		|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
    		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    		|				 	 КОНЕЦ) КАК ДатаУвольнения
    		|		ИЗ
    		|			" + ПериодыТекст + " КАК Периоды
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    		|				ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
    		|			   	   И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
    		|			   	   И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|			  	   И РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
    		|				   И РаботникиОрганизации.ПричинаИзмененияСостояния В (&парамПринят, &парамУволен)
			|				   И РаботникиОрганизации.Активность
    		|
    		|		СГРУППИРОВАТЬ ПО 
    		|			Периоды.Период,
    		|			Периоды.ФизЛицо) КАК ОтработанноеВремя) КАК ОтработанноеВремя
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    		|							ИПНСведенияОДоходах.ФизЛицо,
    		|							НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период
    		|						ИЗ
    		|							РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
    		|						ГДЕ
    		|							ИПНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&парамПериодРегистрации, МЕСЯЦ, -1), МЕСЯЦ)
    		|							И ИПНСведенияОДоходах.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|							И ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
			|							И ИПНСведенияОДоходах.Активность) КАК ДоходыЗаПредыдущиеМесяцыГода
    		|		ПО ОтработанноеВремя.ФизЛицо = ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо
    		|			И ОтработанноеВремя.Период = ДоходыЗаПредыдущиеМесяцыГода.Период
    		|	
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
    		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|			И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.Период И КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ОтработанноеВремя.Период,
    		|	ОтработанноеВремя.ФизЛицо,
    		|	ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо
    		|";

    		// ПрименяемыеВычетыТекст
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		НалоговыйВычетЛичный
    		//		НалоговыйВычетИждивенцев
    		//		НалоговыйВычетПредыдущегоМестаРаботы
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года налоговын вычеты на которые имеет право физлицо
    		ПрименяемыеВычетыТекст = 
    		"ВЫБРАТЬ
    		|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
    		|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
    		|	ВЫБОР 
    		|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
    		|				ИЛИ ПрименениеВычетов.ФизЛицо В (&парамФизЛицаНеРезиденты) 
    		|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
    		|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
    		|			ТОГДА 0 
    		|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
    		|	КОНЕЦ КАК НалоговыйВычетЛичный
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
    		|		Периоды.Физлицо КАК Физлицо,
    		|		Периоды.Период КАК Период
    		|	ИЗ
    		|		" + ПериодыТекст + " КАК Периоды
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
    		|			ПО ВычетыФизлиц.Период <= Периоды.Период 
    		|				И ВычетыФизлиц.Физлицо = Периоды.Физлицо
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		Периоды.Физлицо,
    		|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
    		|		ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза 
    		|			И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    		|		ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
    		|		ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо 
    		|			И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ОтработанноеВремяТекст + ") КАК ОтработанноеВремя
    		|		ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
    		|			И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо";

    		// ПрименяемыеВычетыЗаГод
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		ВычетЛичный
    		//		ВычетЛичныйЗаГод
    		//		ЛьготируемыйНалоговыйВычетЗаГод
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года применяемые налоговые вычеты нарастающим итогом за год
    		//
    		 ПрименяемыеВычетыЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	ВычетыПоПериодам.Физлицо КАК Физлицо,
    		|	Периоды.Период КАК Период,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный ИНАЧЕ 0 КОНЕЦ) КАК НалоговыйВычет,
    		|	СУММА(ВычетыПоПериодам.НалоговыйВычетЛичный) КАК НалоговыйВычетЗаГод,
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыйНалоговыйВычетЗаГод
    		|
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыТекст + ") КАК ВычетыПоПериодам
    		|		ПО ВычетыПоПериодам.Период <= Периоды.Период 
    		|			И ВычетыПоПериодам.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
    		|			ПО ВычетыПоПериодам.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|				И ВычетыПоПериодам.Период = ПрименяемыеЛьготы.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ВычетыПоПериодам.Физлицо,
    		|	Периоды.Период";

    		// облагаемый доход за месяц
    		ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоход, 0)";

    		// облагаемый доход с начала года
    		ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";

    		// право на налоговый вычет за месяц
    		ПолеНалоговыйВычетЗаМесяц = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычет, 0)";

    		// право на налоговый вычет за год
    		ПолеНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод, 0)";

    		// право на льготу за год (остаток того, что не успел использовать на предыдущем месте работы)
    		ПолеПрименяемаяЛьготаЗаГод = "
    		|ВЫБОР
    		|	КОГДА ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) > 0
    		|		ТОГДА ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0)
    		|	ИНАЧЕ 0
    		|КОНЕЦ";

    		// сумма ранее примененной льготы
    		ПолеРанееПримененнаяЛьгота = "ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаЗаГод, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0)";

    		// сумма исчисленных пенсионных взносов за месяц
    		ПолеПенсионныеВзносыЗаМесяц = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносы, 0)";
    			
    		// сумма исчисленных пенсионных взносов за год
    		ПолеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод, 0)";

    		// льготируемый облагаемый доход с начала года
    		ПолеЛьготируемыйОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ЛьготируемыйОблагаемыйДоходЗаГод, 0)";

    		// налоговый вычет за год, учитываемый при предоставлении льготы
    		ПолеЛьготируемыйНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ЛьготируемыйНалоговыйВычетЗаГод, 0)";

    		// сумма исчисленных пенсионных взносов за год, учитываемая при предоставлении льготы
    		ПолеЛьготируемыеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ЛьготируемыеИсчисленныеВзносыЗаГод, 0)";
    			
    		// льготируемая облагаемая база по ИПН за год
    		ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод = 
    		"ВЫБОР
    		|	КОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " > 0
    		|	ТОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + "
    		|	ИНАЧЕ 0
    		|КОНЕЦ";
    			
    		// примененная льгота за год   
    		ПолеПримененнаяЛьгота = 
    		"ВЫБОР
    		|	КОГДА " + ПолеПрименяемаяЛьготаЗаГод + " > " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " 
    		|		ТОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " 
    		|	ИНАЧЕ ВЫБОР 
    		|			КОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " > 0 
    		|				ТОГДА " + ПолеПрименяемаяЛьготаЗаГод + " 
    		|			ИНАЧЕ 0 
    		|		  КОНЕЦ 
    		|КОНЕЦ";
    				
    		// сумма ранее исчисленного налога за месяц
    		ПолеРанееНалогИсчисленный = "ЕСТЬNULL(ИПНРасчетыСБюджетомЗаГод.ИсчисленныйНалог, 0)";
    			
    		// БазаДляИсчисленияИПН
    		//	Поля:
    		//		Период
    		//		ФизЛицо
    		//      ОблагаемаяСумма
    		//      ОблагаемаяСуммаЗаГод
    		//      ПримененнаяЛьгота
    		//      ПримененныйВычет
    		//
    		//	Описание:
    		//	Получает облагаемую базу для исчисления ИПН с начала года для каждого месяца периода и примененную льготу 
    		БазаДляИсчисленияИПНТекст = 
    		"ВЫБРАТЬ 
    		|	ДоходыЗаГод.Период,
    		|	ДоходыЗаГод.ФизЛицо,
    		|	ДоходыЗаГод.ПрименяетсяЛьготаВМесяце,	
    		|	ДоходыЗаГод.ОблагаемыйДоход, // = ОблагаемыйДоходЗаМесяц + доходы в натур. форме за месяц
    		|	ДоходыЗаГод.ОблагаемыйДоходЗаМесяц,
    		|	ДоходыЗаГод.ОблагаемыйДоходЗаГод,
    		|	" + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|	" + ПолеПримененнаяЛьгота + " КАК ПримененнаяЛьгота,
    		|	" + ПолеРанееПримененнаяЛьгота + " КАК РанееПримененнаяЛьгота,
    		|	" + ПолеНалоговыйВычетЗаМесяц + " КАК НалоговыйВычетЗаМесяц,
    		|	" + ПолеНалоговыйВычетЗаГод + " КАК НалоговыйВычетЗаГод,
    		|	" + ПолеПенсионныеВзносыЗаМесяц + " КАК ИсчисленныеВзносыЗаМесяц,
    		|	" + ПолеПенсионныеВзносыЗаГод + " КАК ИсчисленныеВзносыЗаГод,
    		|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный,
    		|	" + ПолеПрименяемаяЛьготаЗаГод + " КАК ЛьготаПоДоходу
    		|ИЗ
    		|	(" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыЗаГодТекст + ") КАК ПрименяемыеВычетыЗаГод
    		|		ПО ДоходыЗаГод.Период = ПрименяемыеВычетыЗаГод.Период 
    		|			И ДоходыЗаГод.ФизЛицо = ПрименяемыеВычетыЗаГод.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиЗаГодТекст + ") КАК ОПВРасчетыСФондамиЗаГод
    		|		ПО ДоходыЗаГод.Период = ОПВРасчетыСФондамиЗаГод.Период 
    		|			И ДоходыЗаГод.ФизЛицо = ОПВРасчетыСФондамиЗаГод.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомЗаГодТекст + ") КАК ИПНРасчетыСБюджетомЗаГод
    		|		ПО ДоходыЗаГод.Период = ИПНРасчетыСБюджетомЗаГод.Период
    		|			И ДоходыЗаГод.ФизЛицо = ИПНРасчетыСБюджетомЗаГод.ФизЛицо
    		|";
    			
    		// БазаДляИсчисленияИПН
    		//	Поля:
    		//		Период
    		//		ФизЛицо
    			
    		// Здесь определяем максимальную сумму предоставленной льготы с начала налогового года, кроме текущего месяца
    		БазаДляИсчисленияИПНТекст = 
    		"ВЫБРАТЬ 
    		|	Периоды.Период КАК Период,
    		|	БазаДляИсчисленияИПН.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПрименяетсяЛьготаВМесяце ИНАЧЕ 0 КОНЕЦ) КАК ПрименяетсяЛьготаВМесяце,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаГод ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоходЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяБазаДляИсчисленияИПН ИНАЧЕ 0 КОНЕЦ) КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоход ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоход,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаМесяц ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
    		|	МАКСИМУМ(ВЫБОР КОГДА БазаДляИсчисленияИПН.Период < Периоды.Период ТОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота ИНАЧЕ 0 КОНЕЦ) КАК ПримененнаяЛьгота,
    		|	МАКСИМУМ(ВЫБОР КОГДА БазаДляИсчисленияИПН.Период < Периоды.Период ТОГДА БазаДляИсчисленияИПН.РанееПримененнаяЛьгота ИНАЧЕ 0 КОНЕЦ) КАК РанееПримененнаяЛьгота,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.НалоговыйВычетЗаМесяц ИНАЧЕ 0 КОНЕЦ) КАК НалоговыйВычетЗаМесяц,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.НалоговыйВычетЗаГод ИНАЧЕ 0 КОНЕЦ) КАК НалоговыйВычетЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаМесяц ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныеВзносыЗаМесяц,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаГод ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныеВзносыЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.РанееНалогИсчисленный ИНАЧЕ 0 КОНЕЦ) КАК РанееНалогИсчисленный,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготаПоДоходу ИНАЧЕ 0 КОНЕЦ) КАК ЛьготаПоДоходу
    		|	
    		|ПОМЕСТИТЬ ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|	
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
    		|		ПО БазаДляИсчисленияИПН.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД)
    		|			И БазаДляИсчисленияИПН.Период <= Периоды.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	БазаДляИсчисленияИПН.ФизЛицо
    		|
    		|ИНДЕКСИРОВАТЬ ПО
    		|	ФизЛицо,
    		|	Период
    		|";	
    		Запрос.Текст = БазаДляИсчисленияИПНТекст;
    		Запрос.Выполнить();
    		БазаДляИсчисленияИПНТекст = "ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного";
    			
    		РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|						БазаДляИсчисленияИПН.ФизЛицо,
    		|						ВЫБОР 
    		|							КОГДА БазаДляИсчисленияИПН.ПрименяетсяЛьготаВМесяце > 0 
    		|								ТОГДА 1
    		|							ИНАЧЕ 0
    		|						КОНЕЦ КАК ПризнакПримененияЛьготы,
    		|						БазаДляИсчисленияИПН.ОблагаемыйДоходЗаГод,
    		|						БазаДляИсчисленияИПН.ЛьготируемаяБазаДляИсчисленияИПН,
    		|						БазаДляИсчисленияИПН.ОблагаемыйДоход,
    		|						БазаДляИсчисленияИПН.ОблагаемыйДоходЗаМесяц,
    		|						БазаДляИсчисленияИПН.НалоговыйВычетЗаМесяц,
    		|						БазаДляИсчисленияИПН.РанееПримененнаяЛьгота,
    		|						БазаДляИсчисленияИПН.НалоговыйВычетЗаГод,
    		|						БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаМесяц,
    		|						БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаГод,
    		|						БазаДляИсчисленияИПН.РанееНалогИсчисленный,
    		|						ВЫБОР
    		|							КОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота > БазаДляИсчисленияИПН.ЛьготаПоДоходу 
    		|								ТОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота
    		|							ИНАЧЕ БазаДляИсчисленияИПН.ЛьготаПоДоходу
    		|						КОНЕЦ КАК ПрименяемаяЛьготаЗаГод
    		|			
    		|				  	ИЗ
    		|				  		" + БазаДляИсчисленияИПНТекст + " КАК БазаДляИсчисленияИПН
    		|					ГДЕ
    		|						БазаДляИсчисленияИПН.Период = &парамПериодРегистрации) КАК РасчетОтОбратногоДанныеИПН
    		|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
    		|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    		|
    		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН.СрезПоследних(
    		|						&парамПериодРегистрации, 
    		|						ВидСтавокИПНиСН = &парамПоИсчислениюИПН
    		|						И НомерСтрокиСтавок = 1) КАК СведенияОСтавкахИПН
    		|	ПО ИСТИНА
    		|";

    	Иначе // до 2007 года  - расчет по шкале
    	
    		// ПрименяемыеЛьготы
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		ПрименяетсяЛьготаУчастникаВОВ
    		//		ПрименяетсяЛьготаПоИнвалидности
    		//		ЛьготаПоДоходу
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года льготы на которые имеет право физлицо
    		ПрименяемыеЛьготыТекст = 
    		"ВЫБРАТЬ
    		|	ИПНЛьготыФизлиц.Физлицо,
    		|	ИПНЛьготыФизлиц.Период,
    		|
    		|	ВЫБОР
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
    		|
    		|	ВЫБОР
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
    		|
    		|	ВЫБОР 
    		|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    		|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
    		|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    		|	КОНЕЦ КАК ЛьготаПоДоходу
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
    		|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
    		|		ВЫБОР 
    		|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
    		|				ТОГДА 0 
    		|			ИНАЧЕ ВЫБОР 
    		|					КОГДА (ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности) = &парамИнвалид 
    		|							И (ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности) = &парамТретьяГруппа 
    		|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
    		|					ИНАЧЕ 99999999 
    		|				  КОНЕЦ 
    		|		КОНЕЦ КАК ЛьготаПоИнвалидности,
    		|		ВЫБОР 
    		|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
    		|				ТОГДА 0 
    		|			ИНАЧЕ 99999999 
    		|		КОНЕЦ КАК ЛьготаУчастникаВОВ
    		|		
    		|	ИЗ
    		|		(ВЫБРАТЬ
    		|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
    		|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
    		|			Периоды.Физлицо КАК Физлицо,
    		|			Периоды.Период КАК Период
    		|		ИЗ
    		|			" + ПериодыТекст + " КАК Периоды
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
    		|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
    		|					И ЛьготыФизлицПоИнвалидности.Физлицо = Периоды.Физлицо
    		|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    		|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
    		|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
    		|					И ЛьготыФизлицУчастниковВОВ.Физлицо = Периоды.Физлицо
    		|		
    		|		СГРУППИРОВАТЬ ПО
    		|			Периоды.Физлицо,
    		|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
    		|				ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
    		|					И ЛьготыФизлицПоИнвалидности.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
    		|				ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
    		|					И ЛьготыФизлицУчастниковВОВ.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
    		|
    		|				ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    		|				ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
    		|";
    			
    		// Доходы
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		РегистрировалсяДоходЗаПериод
    		//		СуммаДоходаВсего
    		//		СуммаДоходаОборот
    		//		СуммаВычетаОборот
    		//      СуммаПримененныйВычетОборот
    		//      СуммаПримененнаяЛьготаОборот
    		//      ПримененнаяЛьготаНаПредыдущемМестеРаботы			
    		//
    		//	Описание:
    		// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
    				
    		// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    		// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    		// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем.
    		ДоходыТекст = 
    		"ВЫБРАТЬ
    		|	ИПНОбороты.Физлицо КАК ФизЛицо,
    		|	ИПНОбороты.Период КАК Период,
    		|	ВЫБОР КОГДА СУММА(ИПНОбороты.СуммаДоходаВсего)  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РегистрировалсяДоходЗаПериод,
    		|	СУММА(ИПНОбороты.СуммаДоходаВсего) КАК СуммаДоходаВсего,
    		|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
    		|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,	
    		|	СУММА(ИПНОбороты.СуммаПримененныйВычетОборот) КАК СуммаПримененныйВычетОборот,
    		|	СУММА(ИПНОбороты.СуммаПримененнаяЛьготаОборот) КАК СуммаПримененнаяЛьготаОборот,
    		|	СУММА(ИПНОбороты.ПримененнаяЛьготаНаПредыдущемМестеРаботы) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,			
    		|	СУММА(ВЫБОР
    		|			КОГДА ИПНОбороты.Период = &парамПериодРегистрации И ИПНОбороты.НачисленоВТекущейОрганизации
    		|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
    		|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
    		|		СУММА(ИПНСведенияОДоходах.СуммаДохода) КАК СуммаДоходаВсего,
    		|		ВЫБОР КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) ИНАЧЕ 0 КОНЕЦ КАК СуммаДоходаОборот,
    		|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
    		|		СУММА(ИПНСведенияОДоходах.ПримененныйВычет) КАК СуммаПримененныйВычетОборот,
    		|		СУММА(ИПНСведенияОДоходах.ПримененнаяЛьгота) КАК СуммаПримененнаяЛьготаОборот,
    		|		0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,			
    		|		ВЫБОР
    		|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    		|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
    		|				ТОГДА ЛОЖЬ
    		|			ИНАЧЕ ИСТИНА
    		|		КОНЕЦ КАК НачисленоВТекущейОрганизации
    		|	ИЗ
    		|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
    		|	
    		|	ГДЕ
    		|		ИПНСведенияОДоходах.Период >= &парамНачалоГода И
    		|		ИПНСведенияОДоходах.Период <= &парамКонецМесяцаНалоговогоПериода И
    		|		ИПНСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
    		|		ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияОДоходах.Регистратор <> &парамРегистратор И
    		|		ИПНСведенияОДоходах.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
    		|		НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН
    		|				И ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации) И
			|		ИПНСведенияОДоходах.Активность
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ),
    		|		ИПНСведенияОДоходах.ФизЛицо,
    		|		ИПНСведенияОДоходах.СпособНалогообложения,
    		|		ИПНСведенияОДоходах.Регистратор
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
    		|       СУММА(ИПНСведенияПредыдущегоМестаРаботы.Доход),
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.Доход - ИПНСведенияПредыдущегоМестаРаботы.ДоходНеОблагаемыйИПН),
    		|		0 КАК СуммаВычетаОборот,
    		|		0 КАК СуммаПримененныйВычетОборот,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота) КАК СуммаПримененнаяЛьготаОборот,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
    		|		ЛОЖЬ
    		|	ИЗ
    		|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
    		|	
    		|	ГДЕ
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
    		|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНПлановыеВычеты.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
    		|		ИПНПлановыеВычеты.ФизЛицо,
    		|		0 КАК СуммаДоходаВсего,
    		|		0 КАК СуммаДоходаОборот,
    		|		СУММА(ИПНПлановыеВычеты.СуммаВычета) КАК СуммаВычетаОборот,
    		|		0 КАК СуммаПримененныйВычетОборот,
    		|		0 КАК СуммаПримененнаяЛьготаОборот,
    		|		0 КАК ПрименннаяЛьготаНаПредыдущемМестеРаботы,			
    		|		ЛОЖЬ КАК НачисленоВТекущейОрганизации
    		|	ИЗ
    		|		РегистрСведений.ИПНПлановыеНалоговыеВычетыФизЛиц.СрезПоследних(
    		|				&парамКонецПериодаРегистрации,
    		|				Налогоплательщик = &парамНалогоплательщик
    		|				И МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И &парамКонецПериодаРегистрации
    		|				И ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК ИПНПлановыеВычеты
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНПлановыеВычеты.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНПлановыеВычеты.ФизЛицо) КАК ИПНОбороты
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ИПНОбороты.Физлицо,
    		|	ИПНОбороты.Период";
    				
    		ТипЗначенияИПНТекст = "ЧИСЛО(10, 2)";
    				
    		// ДоходыЗаГод 
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ОблагаемыйДоходЗаГод
    		//      ПримененныйВычет
    		//      ПримененныйВычетЗаГод
    		//      ПримененнаяЛьготаЗаГод
    		//      ПримененнаяЛьготаНаПредыдущемМестеРаботы			
    		//		ОблагаемыйДоходЗаГодДляЛьготыУчастникаВОВ
    		//		ОблагаемыйДоходЗаГодДляЛьготыПоИнвалидности
    		//
    		//	Описание:
    		//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год
    		
    		// Здесь может доходов еще не быть в регистре ИПНСведенияОДоходах, то льготы присоединяем либо
    		// к ИПНОбороты либо к Периоды
    		ДоходыЗаГодТекст = "
    		|ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	Периоды.Физлицо КАК ФизЛицо,
    		|	СУММА(ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот) КАК ОблагаемыйДоходЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаПримененныйВычетОборот ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет,
    		|	СУММА(ИПНОбороты.СуммаПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
    		|	СУММА(ИПНОбороты.СуммаПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
    		|	СУММА(ИПНОбороты.ПримененнаяЛьготаНаПредыдущемМестеРаботы) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,			
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыйОблагаемыйДоходЗаГод,
    		|	МАКСИМУМ(ПрименяемыеЛьготы.ЛьготаПоДоходу) КАК ЛьготаПоДоходу,
    		|	СУММА(ВЫБОР
    		|			КОГДА ИПНОбороты.Период = &парамПериодРегистрации И Периоды.Период = &парамПериодРегистрации
    		|				ТОГДА ИПНОбороты.ОблагаемыйДоходЗаМесяц
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц
    		|
    		|ИЗ
    		|	" + ПериодыТекст + " КАК Периоды
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыТекст + ") КАК ИПНОбороты
    		|		ПО Периоды.Период >= ИПНОбороты.Период 
    		|			И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|			И Периоды.Физлицо = ИПНОбороты.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
    		|		ПО ВЫБОР
    		|				КОГДА НЕ (ИПНОбороты.ФизЛицо ЕСТЬ NULL)
    		|					ТОГДА ИПНОбороты.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|							И ИПНОбороты.Период = ПрименяемыеЛьготы.Период
    		|				ИНАЧЕ Периоды.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|						И Периоды.Период = ПрименяемыеЛьготы.Период
    		|			КОНЕЦ		
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	Периоды.ФизЛицо";
    				
    		// ДоходыЗаКвартал
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		РегистрировалсяДоходЗаПериод
    		//		ПолученныйДоходЗаКвартал
    		//		РазмерМЗПЗаКвартал
    		//
    		//	Описание:
    		//	Выбирает суммы среднеквартального дохода
    		ДоходыЗаКварталТекст = "
    		|ВЫБРАТЬ
    		|	ИПНОбороты.Период КАК Период,
    		|	ИПНОбороты.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ИПНОбороты.РегистрировалсяДоходЗаПериод) КАК РегистрировалсяДоходЗаПериод,
    		|	СУММА(ИПНОбороты.ПолученныйДоходЗаКвартал) КАК ПолученныйДоходЗаКвартал,
    		|	СУММА(РасчетныеПоказатели.РазмерМЗП) КАК РазмерМЗПЗаКвартал,
    		|	МАКСИМУМ(РасчетныеПоказатели.РазмерМЗП) КАК РазмерМЗП
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		Периоды.Период КАК Период,
    		|		Периоды.Физлицо КАК ФизЛицо,
    		|		ИПНОбороты.РегистрировалсяДоходЗаПериод КАК РегистрировалсяДоходЗаПериод,
    		|		ИПНОбороты.СуммаДоходаВсего КАК ПолученныйДоходЗаКвартал
    		|	ИЗ
    		|		" + ПериодыТекст + " КАК Периоды
    		|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыТекст + ") КАК ИПНОбороты
    		|			ПО ИПНОбороты.Период <= Периоды.Период И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, КВАРТАЛ) И Периоды.Физлицо = ИПНОбороты.Физлицо) КАК ИПНОбороты
    		|			ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    		|			ПО ИПНОбороты.Период = РасчетныеПоказатели.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ИПНОбороты.Период,
    		|	ИПНОбороты.ФизЛицо";
    				
    		// ИПНРасчетыСБюджетом
    		//	Поля:
    		//		ФизЛицо
    		//		МесяцНалоговогоПериода
    		//		ИсчисленныйНалог
    		//
    		//	Описание:
    		//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом и данные регистра
    		//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
    				
    		// Здесь не берем имеющийся за МесяцНалоговогоПериода в ИПНРасчетыСБюджетами налог, т.к. перерасчитываем заново,
    		// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным
    		ИПНРасчетыСБюджетомТекст = "
    		|ВЫБРАТЬ
    		|	ИПНРасчеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
    		|	ИПНРасчеты.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ИПНРасчеты.ИсчисленныйНалог) КАК ИсчисленныйНалог
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
    		|		ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
    		|		СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
    		|	ИЗ
    		|		РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
    		|
    		|	ГДЕ
    		|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
    		|		ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор И
    		|		ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации И
    		|		ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход И 
    		|		ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки И
    		|		НЕ(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) И
    		|		ИПНРасчетыСБюджетом.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
			|		ИПНРасчетыСБюджетом.Активность
    		|
    		|	СГРУППИРОВАТЬ ПО
    		|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода,
    		|		ИПНРасчетыСБюджетом.ФизЛицо
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ИПН)
    		|	ИЗ
    		|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
    		|	
    		|	ГДЕ
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
    		|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ИПНРасчеты
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ИПНРасчеты.МесяцНалоговогоПериода,
    		|	ИПНРасчеты.ФизЛицо";
    				
    		// ИПНРасчетыСБюджетомЗаГод
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ИсчисленныйНалогЗаГод
    		//
    		//	Описание:
    		//	Выбирает исчисленные налоги нарастающим итогом за год
    		ИПНРасчетыСБюджетомЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ИПНРасчетыСБюджетом.ИсчисленныйНалог) КАК ИсчисленныйНалогЗаГод
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомТекст + ") КАК ИПНРасчетыСБюджетом
    		|		ПО Периоды.Период >= ИПНРасчетыСБюджетом.МесяцНалоговогоПериода И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	ИПНРасчетыСБюджетом.ФизЛицо";
    				
    				
    		// ОПВРасчетыСФондами
    		//	Поля:
    		//		ФизЛицо
    		//		МесяцНалоговогоПериода
    		//		ИсчисленныеВзносы
    		//
    		//	Описание:
    		//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами и 
    		//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
    				
    		// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    		// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным				
    		ОПВРасчетыСФондамиТекст = "
    		|ВЫБРАТЬ
    		|	ОПВРасчеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
    		|	ОПВРасчеты.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ОПВРасчеты.ИсчисленныеВзносы) КАК ИсчисленныеВзносы
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
    		|		ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
    		|		СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
    		|	ИЗ
    		|		РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
    		|
    		|	ГДЕ
    		|		ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
    		|		ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
    		|		ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
    		|		ОПВРасчетыСФондами.ВидДвижения = &парамПриход И
    		|		ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
    		|		ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
    		|		НЕ(ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) И
    		|		ОПВРасчетыСФондами.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И 
			|		ОПВРасчетыСФондами.Активность
    		|
    		|	СГРУППИРОВАТЬ ПО
    		|		ОПВРасчетыСФондами.МесяцНалоговогоПериода,
    		|		ОПВРасчетыСФондами.ФизЛицо
    		|
    		|	ОБЪЕДИНИТЬ ВСЕ
    		|
    		|	ВЫБРАТЬ
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
    		|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ОПВ)
    		|	ИЗ
    		|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
    		|	
    		|	ГДЕ
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
    		|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
    		|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
    		|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ОПВРасчеты
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ОПВРасчеты.МесяцНалоговогоПериода,
    		|	ОПВРасчеты.ФизЛицо";

    		// ОПВРасчетыСФондамиЗаГод
    		//	Поля:
    		//		ФизЛицо
    		//		Период
    		//		ИсчисленныеВзносыЗаГод
    		//		ИсчисленныеВзносыЗаГодДляЛьготыУчастникаВОВ
    		//		ИсчисленныеВзносыЗаГодДляЛьготыПоИнвалидности
    		//
    		//	Описание:
    		//	Выбирает исчисленные пенсионные взносы нарастающим итогом за год
    		ОПВРасчетыСФондамиЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Период КАК Период,
    		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
    		|	СУММА(ОПВРасчетыСФондами.ИсчисленныеВзносы) КАК ИсчисленныеВзносыЗаГод,
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыеИсчисленныеВзносыЗаГод
    		|	
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|
    		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиТекст + ") КАК ОПВРасчетыСФондами
    		|		ПО Периоды.Период >= ОПВРасчетыСФондами.МесяцНалоговогоПериода 
    		|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
    		|			ПО ОПВРасчетыСФондами.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|				И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ПрименяемыеЛьготы.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	ОПВРасчетыСФондами.ФизЛицо";

    		// ПрименениеВычетовВОрганизации
    		//	Поля:
    		//		Физлицо,
    		//		Период
    		//
    		// Описание:
    		//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
    		//	заданной организации
    		ПрименениеВычетовВОрганизацииТекст = 
    		"ВЫБРАТЬ
    		|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
    		|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
    		|		Периоды.Физлицо КАК Физлицо,
    		|		Периоды.Период КАК Период
    		|	ИЗ
    		|		"+ПериодыТекст+" КАК Периоды
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
    		|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		Периоды.Физлицо,
    		|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
    		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
    		|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
    		|
    		|ГДЕ
    		|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик";

    		// ОтработанноеВремя
    		//	Поля:
    		//		Физлицо,
    		//		Период,
    		//		ПредоставлятьВычет
    		//
    		// Описание:
    		//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
    		//	
    		
    		// Здесь в отличие от прямого расчета добавлен учет того, что в месяце может вовсе не быть доходов
    		// для налогообложения и не надо давать вычет. В прямом расчете ИПН это учитывается за счет того, 
    		// что ПериодыТекст строится по регистру ИПНСведенияОДоходах и если за месяц нет доходов, то и не будет
    		// записи в регистре.
    		ОтработанноеВремяТекст = 
    		"ВЫБРАТЬ
    		|	ОтработанноеВремя.Период,
    		|	ОтработанноеВремя.ФизЛицо,
    		|	ВЫБОР
    		|		КОГДА ОтработанноеВремя.Период < &парамПериодРегистрации
    		|				И ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо ЕСТЬ NULL
    		|			ТОГДА ЛОЖЬ 	// не было доходов в предыдущем месяце - не надо предоставлять и вычет,
    		|						// за текущий месяц вычет всегда учитываем, т.к. в сейчас начислим физлицу что-нибудь от обратного
    		|		КОГДА СУММА(ВЫБОР 
    		|						КОГДА ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.ДатаС И ОтработанноеВремя.ДатаПо 
    		|							ТОГДА ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ 
    		|						ИНАЧЕ 0 
    		|			  		КОНЕЦ) >= СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) / 2
    		|			ТОГДА ИСТИНА
    		|		ИНАЧЕ ЛОЖЬ
    		|	КОНЕЦ КАК ПредоставлятьВычет
    		|
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		ОтработанноеВремя.Период,
    		|		ОтработанноеВремя.ФизЛицо,
    		|
    		|		ВЫБОР 
    		|			// вообще не был принят в штат - не считаем отработанное время
    		|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
    		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
    		|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
    		|				ТОГДА ОтработанноеВремя.Период
    		|			// принят в штат в текущем месяце - считаем с даты приема
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
    		|				ТОГДА ОтработанноеВремя.ДатаПриема
    		|			// сюда попасть не должны - не считаем 
    		|			ИНАЧЕ
    		|				ДАТАВРЕМЯ(3999, 12, 31)
    		|		КОНЕЦ КАК ДатаС,
    		|
    		|		ВЫБОР 
    		|			// повторный прием в ту же организацию и еще не уволен 
    		|			// или еще не уволен после первого приема - считаем до конца месяца
    		|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
    		|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
    		|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|			// уволен до начала месяца - не считаем
    		|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
    		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
    		|			// уволен в текущем месяце - считаем до даты увольнения
    		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
    		|               ТОГДА ОтработанноеВремя.ДатаУвольнения
    		|			// еще не уволен - считаем до конца месяца
    		|			ИНАЧЕ
    		|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|		КОНЕЦ КАК ДатаПо
    		|
    		|	ИЗ			
    		|		(ВЫБРАТЬ
    		|			Периоды.Период КАК Период,
    		|			Периоды.ФизЛицо КАК ФизЛицо,
    		|			МАКСИМУМ(ВЫБОР 
    		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПринят 
    		|							ТОГДА РаботникиОрганизации.Период
    		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    		|				 	 КОНЕЦ) КАК ДатаПриема,
    		|			МАКСИМУМ(ВЫБОР 
    		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
    		|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
    		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    		|				 	 КОНЕЦ) КАК ДатаУвольнения
    		|		ИЗ
    		|			" + ПериодыТекст + " КАК Периоды
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    		|				ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
    		|			   	   И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
    		|			   	   И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|			  	   И РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
    		|				   И РаботникиОрганизации.ПричинаИзмененияСостояния В (&парамПринят, &парамУволен)
			|				   И РаботникиОрганизации.Активность
    		|
    		|		СГРУППИРОВАТЬ ПО 
    		|			Периоды.Период,
    		|			Периоды.ФизЛицо) КАК ОтработанноеВремя) КАК ОтработанноеВремя
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    		|							ИПНСведенияОДоходах.ФизЛицо,
    		|							НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период
    		|						ИЗ
    		|							РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
    		|						ГДЕ
    		|							ИПНСведенияОДоходах.Период МЕЖДУ &парамНачалоГода И КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(&парамПериодРегистрации, МЕСЯЦ, -1), МЕСЯЦ)
    		|							И ИПНСведенияОДоходах.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|							И ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
			|							И ИПНСведенияОДоходах.Активность) КАК ДоходыЗаПредыдущиеМесяцыГода
    		|		ПО ОтработанноеВремя.ФизЛицо = ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо
    		|			И ОтработанноеВремя.Период = ДоходыЗаПредыдущиеМесяцыГода.Период
    		|	
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
    		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|			И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.Период И КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ОтработанноеВремя.Период,
    		|	ОтработанноеВремя.ФизЛицо,
    		|	ДоходыЗаПредыдущиеМесяцыГода.ФизЛицо
    		|";

    		// ПрименяемыеВычетыТекст
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		НалоговыйВычетЛичный
    		//		НалоговыйВычетИждивенцев
    		//		НалоговыйВычетПредыдущегоМестаРаботы
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года налоговын вычеты на которые имеет право физлицо
    		ПрименяемыеВычетыТекст = 
    		"ВЫБРАТЬ
    		|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
    		|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
    		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL ИЛИ ПрименениеВычетов.ФизЛицо В (&парамФизЛицаНеРезиденты) ИЛИ НЕ (ОтработанноеВремя.ПредоставлятьВычет)  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (РасчетныеПоказатели.РазмерМРП) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА ВычетыФизлиц.ПредоставлятьЛичныйВычет ТОГДА РасчетныеПоказатели.РазмерМРП ИНАЧЕ 0 КОНЕЦ КОНЕЦ КОНЕЦ КАК НалоговыйВычетЛичный,
    		|	ВЫБОР КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL ИЛИ ПрименениеВычетов.ФизЛицо В (&парамФизЛицаНеРезиденты) ИЛИ НЕ (ОтработанноеВремя.ПредоставлятьВычет)  ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА (РасчетныеПоказатели.РазмерМРП) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ РасчетныеПоказатели.РазмерМРП КОНЕЦ * ВЫБОР КОГДА (ВычетыФизлиц.КоличествоИждивенцев) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ВычетыФизлиц.КоличествоИждивенцев КОНЕЦ КОНЕЦ КАК НалоговыйВычетИждивенцев,
    		|	ВЫБОР КОГДА СведенияПредыдущегоМестаРаботы.ПримененныйВычет ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ СведенияПредыдущегоМестаРаботы.ПримененныйВычет КОНЕЦ КАК НалоговыйВычетПредыдущегоМестаРаботы
    		|ИЗ
    		|	(ВЫБРАТЬ
    		|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
    		|		Периоды.Физлицо КАК Физлицо,
    		|		Периоды.Период КАК Период
    		|	ИЗ
    		|		" + ПериодыТекст + " КАК Периоды
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
    		|			ПО ВычетыФизлиц.Период <= Периоды.Период И ВычетыФизлиц.Физлицо = Периоды.Физлицо
    		|	
    		|	СГРУППИРОВАТЬ ПО
    		|		Периоды.Физлицо,
    		|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
    		|			ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
    		|			ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    		|			ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
    		|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
    		|			ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
    		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
    		|			ПО СведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода = ИПННалоговыеВычетыФизлицСрезПоследних.Период И СведенияПредыдущегоМестаРаботы.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
    		|			ЛЕВОЕ СОЕДИНЕНИЕ (" + ОтработанноеВремяТекст + ") КАК ОтработанноеВремя
    		|			ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо";

    		// ПрименяемыеВычетыЗаГод
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		ВычетЛичныйЗаГод
    		//		ВычетИждивенцевЗаГод
    		//		ВычетПредыдущегоМестаРаботыЗаГод
    		//		НалоговыйВычетЗаГодДляЛьготыУчастникаВОВ
    		//		НалоговыйВычетЗаГодДляЛьготыПоИнвалидности
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года применяемые налоговые вычеты нарастающим итогом за год
    		//
    		ПрименяемыеВычетыЗаГодТекст = 
    		"ВЫБРАТЬ
    		|	ВычетыПоПериодам.Физлицо КАК Физлицо,
    		|	Периоды.Период КАК Период,
    		|	СУММА(ВычетыПоПериодам.НалоговыйВычетЛичный) + СУММА(ВычетыПоПериодам.НалоговыйВычетИждивенцев) + СУММА(ВычетыПоПериодам.НалоговыйВычетПредыдущегоМестаРаботы) КАК НалоговыйВычетЗаГод,
    		|	СУММА(ВЫБОР
    		|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
    		|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
    		|				ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный + ВычетыПоПериодам.НалоговыйВычетИждивенцев + ВычетыПоПериодам.НалоговыйВычетПредыдущегоМестаРаботы
    		|			ИНАЧЕ 0
    		|		  КОНЕЦ) КАК ЛьготируемыйНалоговыйВычетЗаГод
    		|
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыТекст + ") КАК ВычетыПоПериодам
    		|		ПО ВычетыПоПериодам.Период <= Периоды.Период 
    		|			И ВычетыПоПериодам.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
    		|
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
    		|			ПО ВычетыПоПериодам.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    		|				И ВычетыПоПериодам.Период = ПрименяемыеЛьготы.Период
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	ВычетыПоПериодам.Физлицо,
    		|	Периоды.Период";

    		// ПериодыНачалаНалоговогоГодаФизЛиц
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		МесяцНачалаНалоговогоГода
    		//
    		//	Описание:
    		//	Получает по всем периодам месяц начала налогового года для физлиц
    		ПериодыНачалаНалоговогоГодаФизЛицТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.ФизЛицо,
    		|	Периоды.Период,
    		|	МИНИМУМ(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода) КАК МесяцНачалаНалоговогоГода
    		|
    		|ИЗ
    		|	" + ПериодыТекст + " КАК Периоды
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|				МИНИМУМ(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода) КАК НачалоНалоговогоГода,
    		|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД) КАК НачалоКалендарногоГода,
    		|				СведенияПредыдущегоМестаРаботы.ФизЛицо КАК ФизЛицо
    		|			ИЗ
    		|				РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
    		|			ГДЕ
    		|				СведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик 
    		|				И СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
    		|				И СведенияПредыдущегоМестаРаботы.Физлицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|
    		|			СГРУППИРОВАТЬ ПО
    		|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД),
    		|				СведенияПредыдущегоМестаРаботы.ФизЛицо
    		|
    		|			ОБЪЕДИНИТЬ ВСЕ
    		|
    		|			ВЫБРАТЬ
    		|				МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК НачалоНалоговогоГода,
    		|				&парамНачалоГода КАК НачалоКалендарногоГода,
    		|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо КАК ФизЛицо
    		|			ИЗ
    		|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
    		|						&парамНачалоГода,
    		|						Организация = &парамГоловнаяОрганизация
    		|						И Сотрудник.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК РаботникиОрганизацийСрезПоследних
    		|			ГДЕ
    		|				РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &парамУволен
    		|				И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|
    		|			СГРУППИРОВАТЬ ПО
    		|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо
    		|
    		|			ОБЪЕДИНИТЬ ВСЕ
    		|
    		|			ВЫБРАТЬ
    		|				МИНИМУМ(РаботникиОрганизаций.Период) КАК НачалоНалоговогоГода,
    		|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД) КАК НачалоКалендарногоГода,
    		|				РаботникиОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо
    		|			ИЗ
    		|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
    		|			ГДЕ
    		|				РаботникиОрганизаций.Сотрудник.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|				И РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
    		|				И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|				И РаботникиОрганизаций.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
    		|				И РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамПринят
			|				И РаботникиОрганизаций.Активность
    		|
    		|			СГРУППИРОВАТЬ ПО
    		|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД),
    		|				РаботникиОрганизаций.Сотрудник.ФизЛицо
    		|				
    		|	) КАК ПериодыНачалаНалоговогоГода
    		|		ПО Периоды.ФизЛицо = ПериодыНачалаНалоговогоГода.ФизЛицо
    		|			И Периоды.Период МЕЖДУ ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода И КОНЕЦПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода, ГОД)
    		|			 И Периоды.Период >= НАЧАЛОПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода, МЕСЯЦ)
    		|
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.ФизЛицо,
    		|	Периоды.Период
    		|";

    		ТипЗначенияКоэффициентаПересчетаТекст = "ЧИСЛО(10, 2)";

    		// ПрименяемыйКоэффициентПересчета
    		//	Поля:
    		//		Физлицо
    		//		Период
    		//		ЛьготаПоДоходу
    		//
    		//	Описание:
    		//	Выбирает по всем периодам года льготы на которые имеет право физлицо
    		ПрименяемыйКоэффициентПересчетаТекст = 
    		"ВЫБРАТЬ
    		|	Периоды.Период,
    		|	Периоды.ФизЛицо,
    		|	ВЫБОР 
    		|		КОГДА Периоды.МесяцНачалаНалоговогоГода ЕСТЬ NULL 
    		|			ТОГДА 1 
    		|		ИНАЧЕ ВЫБОР 
    		|				КОГДА НЕ(РаботникиОрганизаций.Сотрудник ЕСТЬ NULL)
    		|						И РаботникиОрганизаций.ПричинаИзмененияСостояния <> &парамУволен
    		|					ТОГДА ВЫБОР 
    		|							КОГДА Периоды.МесяцНачалаНалоговогоГода <= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) 
    		|								ТОГДА 12 / МЕСЯЦ(Периоды.Период) 
    		|							ИНАЧЕ (13 - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода)) / (МЕСЯЦ(Периоды.Период) - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода) + 1) 
    		|						  КОНЕЦ 
    		|				ИНАЧЕ 1 
    		|			  КОНЕЦ 
    		|	КОНЕЦ КАК КоэффициентПересчета,
    		|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
    		|	РаботникиОрганизаций.Период КАК ДатаПоследнегоДвижения
    		|ИЗ
    		|	(" + ПериодыНачалаНалоговогоГодаФизЛицТекст + ") КАК Периоды
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|				Периоды.Период,
    		|				РаботникиОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо,
    		|				МАКСИМУМ(ВЫБОР
    		|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
    		|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
    		|							ИНАЧЕ РаботникиОрганизаций.Период
    		|						 КОНЕЦ) КАК ДатаПоследнегоДвижения
    		|       	ИЗ 
    		|				" + ДатыПериодовГодаТекст + " КАК Периоды
    		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
    		|					ПО РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
    		|						И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|						И ВЫБОР
    		|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
    		|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
    		|							ИНАЧЕ РаботникиОрганизаций.Период
    		|						  КОНЕЦ <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
			|						И РаботникиОрганизаций.Активность
    		|
    		|			СГРУППИРОВАТЬ ПО
    		|				Периоды.Период,
    		|				РаботникиОрганизаций.Сотрудник.ФизЛицо) КАК ДатыПоследнихДвижений
    		|		ПО Периоды.ФизЛицо = ДатыПоследнихДвижений.ФизЛицо
    		|			И Периоды.Период = ДатыПоследнихДвижений.Период
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
    		|		ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
    		|			И РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
    		|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    		|			И ДатыПоследнихДвижений.ДатаПоследнегоДвижения = ВЫБОР
    		|																КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен
    		|																	ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
    		|																ИНАЧЕ РаботникиОрганизаций.Период
    		|			 								 				 КОНЕЦ 
			|			И РаботникиОрганизаций.Активность
    		|";

    		// облагаемый доход с начала года
    		ПолеОблагаемыйДоходЗаГод = 
    		"ВЫБОР 
    		|	КОГДА (ДоходыЗаГод.ОблагаемыйДоходЗаГод) ЕСТЬ NULL  
    		|	ТОГДА 0 
    		|	ИНАЧЕ ДоходыЗаГод.ОблагаемыйДоходЗаГод 
    		|КОНЕЦ";

    		// право на налоговый вычет за год
    		ПолеНалоговыйВычетЗаГод = 
    		"ВЫБОР 
    		|	КОГДА (ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод) ЕСТЬ NULL  
    		|	ТОГДА 0 
    		|	ИНАЧЕ ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод 
    		|КОНЕЦ";

    		// право на льготу за год
    		ПолеПрименяемаяЛьготаЗаГод = 
    		"ВЫБОР 
    		|	КОГДА (ДоходыЗаГод.ЛьготаПоДоходу) ЕСТЬ NULL  
    		|	ТОГДА 0 
    		|	ИНАЧЕ ДоходыЗаГод.ЛьготаПоДоходу 
    		|КОНЕЦ";

    		// сумма исчисленных пенсионных взносов за год
    		ПолеПенсионныеВзносыЗаГод = 
    		"ВЫБОР 
    		|	КОГДА (ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод) ЕСТЬ NULL
    		|	ТОГДА 0 
    		|	ИНАЧЕ ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод 
    		|КОНЕЦ";
    			
    		// облагаемая база по ИПН
    		ПолеБазаДляИсчисленияИПН = 
    		"ВЫБОР
    		|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + " > 0
    		|	ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + "
    		|	ИНАЧЕ 0
    		|КОНЕЦ";

    		// льготируемый облагаемый доход с начала года
    		ПолеЛьготируемыйОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ЛьготируемыйОблагаемыйДоходЗаГод, 0)";

    		// налоговый вычет за год, учитываемый при предоставлении льготы
    		ПолеЛьготируемыйНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ЛьготируемыйНалоговыйВычетЗаГод, 0)";

    		// сумма исчисленных пенсионных взносов за год, учитываемая при предоставлении льготы
    		ПолеЛьготируемыеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ЛьготируемыеИсчисленныеВзносыЗаГод, 0)";
    			
    		// льготируемая облагаемая база по ИПН
    		ПолеЛьготируемаяБазаДляИсчисленияИПН = 
    		"ВЫБОР
    		|	КОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " > 0
    		|	ТОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + "
    		|	ИНАЧЕ 0
    		|КОНЕЦ";
    			
    		// примененная льгота за год
    		ПолеПримененнаяЛьгота = 
    		"ВЫБОР
    		|	КОГДА " + ПолеПрименяемаяЛьготаЗаГод + " > " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " 
    		|		ТОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " 
    		|	ИНАЧЕ ВЫБОР 
    		|			КОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " > 0 
    		|				ТОГДА " + ПолеПрименяемаяЛьготаЗаГод + " 
    		|			ИНАЧЕ 0 
    		|		  КОНЕЦ 
    		|КОНЕЦ";

    		// коэффициент пересчета
    		ПолеКоэффициентПересчета = 
    		"(ВЫРАЗИТЬ(ВЫБОР 
    		|				КОГДА (ПрименяемыйКоэффициентПересчета.КоэффициентПересчета) ЕСТЬ NULL 
    		|				ТОГДА 1 
    		|				ИНАЧЕ ПрименяемыйКоэффициентПересчета.КоэффициентПересчета 
    		|			КОНЕЦ КАК " + ТипЗначенияКоэффициентаПересчетаТекст + "))";
    			
    		// среднемесячный доход за квартал
    		ПолеСреднемесячныйДоходЗаКвартал =
    		"ВЫБОР
    		|	КОГДА (ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод) ЕСТЬ NULL
    		|	ТОГДА 0
    		|	ИНАЧЕ ДоходыЗаКвартал.ПолученныйДоходЗаКвартал / ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод
    		|КОНЕЦ";

    		// среднемесячный размер минимальной заработной платы
    		ПолеСреднемесячныйРазмерМЗПЗаКвартал =
    		"ВЫБОР
    		|	КОГДА (ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод) ЕСТЬ NULL
    		|	ТОГДА 0
    		|	ИНАЧЕ ДоходыЗаКвартал.РазмерМЗПЗаКвартал / ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод
    		|КОНЕЦ";
    			
    		// облагаемая сумма 
    		ПолеОблагаемаяСумма = 
    		"(ВЫБОР
    		|		КОГДА МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) > СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ)
    		|			ТОГДА 0
    		|		ИНАЧЕ СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ) - МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота)
    		|КОНЕЦ) * " + ПолеКоэффициентПересчета;
    			
    		// применение ставки "0"
    		ПолеПрименятьНулевуюСтавку = 
    		"ВЫБОР 
    		|	КОГДА " + ПолеОблагаемаяСумма + " <= ДоходыЗаКвартал.РазмерМЗП * 12 И " + ПолеСреднемесячныйДоходЗаКвартал + " <= " + ПолеСреднемесячныйРазмерМЗПЗаКвартал + "
    		|	ТОГДА 1
    		|	ИНАЧЕ 0
    		|КОНЕЦ";
    			
    		// БазаДляИсчисленияИПН
    		//	Поля:
    		//		Период
    		//		ФизЛицо
    			
    		// Здесь рассчитываем примененную льготу для каждого месяца периода, облагаемую базу для расчета необходимости применения нулевой ставки
    		БазаДляИсчисленияИПНТекст = 
    		"ВЫБРАТЬ 
    		|	ДоходыЗаГод.Период,
    		|	ДоходыЗаГод.ФизЛицо,
    		|	" + ПолеБазаДляИсчисленияИПН + " КАК ОблагаемаяСумма,
    		|	ДоходыЗаГод.ОблагаемыйДоходЗаГод,
    		|	" + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|	ДоходыЗаГод.ОблагаемыйДоходЗаМесяц,
    		|	" + ПолеПримененнаяЛьгота + " КАК ПримененнаяЛьгота,
    		|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод, 0) КАК НалоговыйВычетЗаГод,
    		|	ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод, 0) КАК ИсчисленныеВзносыЗаГод,
    		|	ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0) КАК ЛьготаПоДоходу
    		|ИЗ
    		|	(" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыЗаГодТекст + ") КАК ПрименяемыеВычетыЗаГод
    		|		ПО ДоходыЗаГод.Период = ПрименяемыеВычетыЗаГод.Период И ДоходыЗаГод.ФизЛицо = ПрименяемыеВычетыЗаГод.ФизЛицо
    		|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиЗаГодТекст + ") КАК ОПВРасчетыСФондамиЗаГод
    		|		ПО ДоходыЗаГод.Период = ОПВРасчетыСФондамиЗаГод.Период И ДоходыЗаГод.ФизЛицо = ОПВРасчетыСФондамиЗаГод.ФизЛицо
    		|";
    			
    		// БазаДляИсчисленияИПН
    		//	Поля:
    		//		Период
    		//		ФизЛицо
    			
    		// Здесь определяем максимальную сумму предоставленной льготы с начала налогового года, кроме текущего месяца
    		БазаДляИсчисленияИПНТекст = 
    		"ВЫБРАТЬ 
    		|	Периоды.Период,
    		|	БазаДляИсчисленияИПН.ФизЛицо,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаГод ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоходЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяБазаДляИсчисленияИПН ИНАЧЕ 0 КОНЕЦ) КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаМесяц ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
    		|	МАКСИМУМ(ВЫБОР КОГДА БазаДляИсчисленияИПН.Период < Периоды.Период ТОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота ИНАЧЕ 0 КОНЕЦ) КАК ПримененнаяЛьгота,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.НалоговыйВычетЗаГод ИНАЧЕ 0 КОНЕЦ) КАК НалоговыйВычетЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаГод ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныеВзносыЗаГод,
    		|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготаПоДоходу ИНАЧЕ 0 КОНЕЦ) КАК ЛьготаПоДоходу,
    		|	" + ПолеПрименятьНулевуюСтавку + " КАК ПрименятьНулевуюСтавку,
    		|	" + ПолеКоэффициентПересчета + " КАК КоэффициентПересчета,
    		|	" + ПолеСреднемесячныйРазмерМЗПЗаКвартал + " КАК СреднемесячныйРазмерМЗПЗаКвартал,
    		|	ЕСТЬNULL(ДоходыЗаКвартал.ПолученныйДоходЗаКвартал, 0) КАК ПолученныйДоходЗаКвартал,
    		|	ЕСТЬNULL(ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод, 0) КАК РегистрировалсяДоходЗаПериод
    		|	
    		|ИЗ
    		|	" + ДатыПериодовГодаТекст + " КАК Периоды
    		|	
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
    		|		ПО БазаДляИсчисленияИПН.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД)
    		|			И БазаДляИсчисленияИПН.Период <= Периоды.Период
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыйКоэффициентПересчетаТекст + ") КАК ПрименяемыйКоэффициентПересчета
    		|		ПО Периоды.Период = ПрименяемыйКоэффициентПересчета.Период
    		|			И БазаДляИсчисленияИПН.ФизЛицо = ПрименяемыйКоэффициентПересчета.ФизЛицо
    		|
    		|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаКварталТекст + ") КАК ДоходыЗаКвартал
    		|		ПО Периоды.Период = ДоходыЗаКвартал.Период
    		|			И БазаДляИсчисленияИПН.ФизЛицо = ДоходыЗаКвартал.ФизЛицо
    		|
    		|СГРУППИРОВАТЬ ПО
    		|	Периоды.Период,
    		|	БазаДляИсчисленияИПН.ФизЛицо,
    		|	ПрименяемыйКоэффициентПересчета.КоэффициентПересчета,
    		|	ПрименяемыйКоэффициентПересчета.ПричинаИзмененияСостояния,
    		|	ПрименяемыйКоэффициентПересчета.ДатаПоследнегоДвижения,
    		|	ДоходыЗаКвартал.РазмерМЗП,
    		|	ДоходыЗаКвартал.РазмерМЗПЗаКвартал,
    		|	ДоходыЗаКвартал.ПолученныйДоходЗаКвартал,
    		|	ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод
    		|";	
    			
    		РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|						БазаДляИсчисленияИПН.ФизЛицо,
    		|						СУММА(ВЫБОР 
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации И БазаДляИсчисленияИПН.ЛьготаПоДоходу > 0 
    		|									ТОГДА 1
    		|								ИНАЧЕ 0
    		|							  КОНЕЦ) КАК ПризнакПримененияЛьготы,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаГод 
    		|								ИНАЧЕ 0
    		|							  КОНЕЦ) КАК ОблагаемыйДоходЗаГод,
    		|						СУММА(ВЫБОР 
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяБазаДляИсчисленияИПН
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ЛьготируемаяБазаДляИсчисленияИПН,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.ОблагаемыйДоходЗаМесяц 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.НалоговыйВычетЗаГод 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК НалоговыйВычетЗаГод,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.ИсчисленныеВзносыЗаГод 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ИсчисленныеВзносыЗаГод,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период <> &парамПериодРегистрации
    		|									ТОГДА 0
    		|								КОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота > БазаДляИсчисленияИПН.ЛьготаПоДоходу 
    		|									ТОГДА БазаДляИсчисленияИПН.ПримененнаяЛьгота
    		|								ИНАЧЕ БазаДляИсчисленияИПН.ЛьготаПоДоходу
    		|						  	 КОНЕЦ) КАК ПрименяемаяЛьготаЗаГод,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.КоэффициентПересчета 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК КоэффициентПересчета,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.СреднемесячныйРазмерМЗПЗаКвартал 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК СреднемесячныйРазмерМЗПЗаКвартал,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.ПолученныйДоходЗаКвартал 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ПолученныйДоходЗаКвартал,
    		|						СУММА(ВЫБОР
    		|								КОГДА БазаДляИсчисленияИПН.Период = &парамПериодРегистрации
    		|									ТОГДА БазаДляИсчисленияИПН.РегистрировалсяДоходЗаПериод 
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК РегистрировалсяДоходЗаКвартал,
    		|						СУММА(ВЫБОР
    		|								КОГДА МЕСЯЦ(БазаДляИсчисленияИПН.Период) = 3
    		|									ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ПрименятьНулевуюСтавкуКв1,
    		|						СУММА(ВЫБОР
    		|								КОГДА МЕСЯЦ(БазаДляИсчисленияИПН.Период) = 6
    		|									ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ПрименятьНулевуюСтавкуКв2,
    		|						СУММА(ВЫБОР
    		|								КОГДА МЕСЯЦ(БазаДляИсчисленияИПН.Период) = 9
    		|									ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ПрименятьНулевуюСтавкуКв3,
    		|						СУММА(ВЫБОР
    		|								КОГДА МЕСЯЦ(БазаДляИсчисленияИПН.Период) = 12
    		|									ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку
    		|								ИНАЧЕ 0
    		|							 КОНЕЦ) КАК ПрименятьНулевуюСтавкуКв4
    		|			
    		|				  ИЗ
    		|				  	(" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
    		|
    		|
    		|				  СГРУППИРОВАТЬ ПО
    		|					БазаДляИсчисленияИПН.ФизЛицо) КАК РасчетОтОбратногоДанныеИПН
    		|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
    		|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    		|
    		|ЛЕВОЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомЗаГодТекст + ") КАК ИПНРасчетыСБюджетомЗаГод
    		|	ПО Основной.ФизЛицо = ИПНРасчетыСБюджетомЗаГод.ФизЛицо
    		|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    		|	   И ИПНРасчетыСБюджетомЗаГод.Период = &парамПериодРегистрации
    		|
    	    |// проверять на нулевую ставку надо только работников организации
    	    |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    		|						РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
    	    |						МАКСИМУМ(ВЫБОР
    	    |									КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
    	    |										ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
    	    |									ИНАЧЕ РаботникиОрганизации.Период
    	    |								КОНЕЦ) КАК Период
    	    |					ИЗ
    	    |						РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    	    |					ГДЕ
    	    |						РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
    		|						И РаботникиОрганизации.Сотрудник.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    		|						И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
    	    |						И РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
			|						И РаботникиОрганизации.Активность
    	    |					СГРУППИРОВАТЬ ПО
    		|						РаботникиОрганизации.Сотрудник.ФизЛицо) КАК ДатыПоследнихНазначений
    	    |	ПО Основной.ФизЛицо = ДатыПоследнихНазначений.ФизЛицо
    	    |
    	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК СведенияОРаботникахОрганизации
    		|	ПО ДатыПоследнихНазначений.ФизЛицо = СведенияОРаботникахОрганизации.Сотрудник.ФизЛицо
    	    |		И ДатыПоследнихНазначений.Период = ВЫБОР
    	    |											КОГДА СведенияОРаботникахОрганизации.ПричинаИзмененияСостояния = &парамУволен
    	    |												ТОГДА ДОБАВИТЬКДАТЕ(СведенияОРаботникахОрганизации.Период, ДЕНЬ, -1)
    	    | 											ИНАЧЕ СведенияОРаботникахОрганизации.Период
    	    |										   КОНЕЦ
    	    |		И СведенияОРаботникахОрганизации.Организация = &парамГоловнаяОрганизация
    		|		И СведенияОРаботникахОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
			|		И СведенияОРаботникахОрганизации.Активность
    		|";
    	КонецЕсли;

    КонецЕсли;
            
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    			
    	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
    	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
    	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
    	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
    			
    	СписокГруппИнвалидности = Новый СписокЗначений;
    	СписокГруппИнвалидности.Добавить("I");
    	СписокГруппИнвалидности.Добавить("II");
    			
    	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
    	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
    	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
    	|	ОПВОбороты.ФизЛицо КАК ФизЛицо,
    	|	ОПВОбороты.Период КАК Период,
    	|	СУММА(ОПВОбороты.СуммаДоходаОборот) -	СУММА(ОПВОбороты.СуммаВычетаОборот) КАК ОблагаемыйДоход,
    	|	СУММА(ОПВОбороты.ПрочиеДоходы) КАК ПрочиеДоходы
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
    	|		СУММА(ОПВСведенияОДоходах.СуммаДохода) КАК СуммаДоходаОборот,
    	|	 	СУММА(ОПВСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
    	|		ВЫБОР
    	|			КОГДА ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|				ТОГДА СУММА(ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета)
    	|			ИНАЧЕ 0
    	|		КОНЕЦ КАК ПрочиеДоходы
    	|	ИЗ
    	|		РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
    	|	
    	|	ГДЕ
    	|		ОПВСведенияОДоходах.Период >= &парамНачало И
    	|		ОПВСведенияОДоходах.Период <= &парамКонец И
    	|		ОПВСведенияОДоходах.ПериодРегистрации <= &парамКонецПериодаРегистрации И
    	|		ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
    	|		ОПВСведенияОДоходах.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
		|		ОПВСведенияОДоходах.Активность
    	|	
    	|	СГРУППИРОВАТЬ ПО
    	|		ОПВСведенияОДоходах.ФизЛицо,
    	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ),
    	|		ОПВСведенияОДоходах.Регистратор) КАК ОПВОбороты
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВОбороты.Период,
    	|	ОПВОбороты.Физлицо";

    	// ОПВРасчетыСФондами
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ИсчисленныеВзносы
    	//
    	//	Описание:
    	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
    	//  для СписокФизлиц

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц.
    	ОПВРасчетыСФондамиТекст = "
    	|ВЫБРАТЬ
    	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
    	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
    	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
    	|ИЗ
    	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
    	|
    	|ГДЕ
    	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
    	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
    	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
    	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
    	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
    	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
    	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
    	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
    	|	НЕ(ОПВРасчетыСФондами.МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)) И
    	|	ОПВРасчетыСФондами.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц) И
		|	ОПВРасчетыСФондами.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
    	|	ОПВРасчетыСФондами.ФизЛицо";

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	ВЫБОР КОГДА РасчетныеПоказатели.РазмерМЗП ЕСТЬ NULL ТОГДА 0 ИНАЧЕ РасчетныеПоказатели.РазмерМЗП * 75 КОНЕЦ КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамКонец) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("парамРазмерОграниченияПоДоходамОПВ", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("парамРазмерОграниченияПоДоходамОПВ", 0);
    	КонецЕсли;

    	// облагаемый доход за месяц
    	ПолеОблагаемыйДоходЗаМесяц = 
    	"ВЫБОР 
    	|	КОГДА (ДоходыЗаМесяц.ОблагаемыйДоход) ЕСТЬ NULL  
    	|	ТОГДА 0 
    	|	ИНАЧЕ ДоходыЗаМесяц.ОблагаемыйДоход
    	|КОНЕЦ";

    	// сумма ранее исчисленных взносов
    	ПолеРанееВзносыИсчисленные = 
    	"ВЫБОР 
    	|	КОГДА (ОПВРасчетыСФондами.ИсчисленныйВзнос) ЕСТЬ NULL 
    	|	ТОГДА 0 
    	|	ИНАЧЕ ОПВРасчетыСФондами.ИсчисленныйВзнос 
    	|КОНЕЦ";

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаБезПраваНаПенсиюТекст = "
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
    			
    	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаБезПраваНаПенсию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаПенсионеры
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц достигших пенсионный возраст
    	ФизлицаПенсионерыТекст = "
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК СведенияОПенсионномОбеспеченииФизЛиц
    	|
    	|ГДЕ
    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
    		
    	Запрос.Текст = ФизлицаПенсионерыТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	// ФизлицаИнвалидыБессрочно
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыБессрочноТекст = "
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид И
    	|	СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&парамСписокГруппИнвалидности) И
    	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки = &парамПустаяДата
    	|";
    		
    	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаИнвалидыБессрочно", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    	|						ДоходыЗаМесяц.ФизЛицо,
    	|						" + ПолеОблагаемыйДоходЗаМесяц + " КАК БазаДляИсчисленияОПВ,
    	|						" + ПолеРанееВзносыИсчисленные + " КАК РанееВзносыИсчисленные, 
    	|						ЕСТЬNULL(ДоходыЗаМесяц.ПрочиеДоходы, 0) КАК ПрочиеДоходы
    	|				   ИЗ
    	|						(" + ДоходыТекст + ") КАК ДоходыЗаМесяц
    	|						ЛЕВОЕ СОЕДИНЕНИЕ ("+ОПВРасчетыСФондамиТекст+") КАК ОПВРасчетыСФондами
    	|							ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
    	|							   И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
    	|				   ) КАК РасчетОтОбратногоДанныеОПВ
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеОПВ.ФизЛицо
    	|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    	|";

   КонецЕсли;
            
   Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
           
       // для списка погашамых удержаний определим общую сумму
       Запрос.УстановитьПараметр("парамСпособыРасчетаФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());
       Запрос.УстановитьПараметр("парамСпособРасчетаПроцентом", Перечисления.СпособыРасчетаОплатыТруда.Процентом);
       Запрос.УстановитьПараметр("парамНачало", НачалоМесяца(ПериодРегистрации));
       Запрос.УстановитьПараметр("парамКонец", КонецМесяца(ПериодРегистрации));
       Запрос.УстановитьПараметр("парамДействиеПрекратить", Перечисления.ВидыДействияСНачислением.Прекратить);

       // ПлановыеУдержания
       // Поля:
       //		ФизЛицо
       //		ВидРасчета
       //		ВидСтроки
       //		Размер
       //	Описание:
       // Выбирает плановые и фактические удержания за период регистрации для физлиц, по которым производится расчет "от обратного".
       // Фактические удержания берем только те, что введены как разовые, чтобы не задублировать плановые, если уже создан и проведен
       // документ "Расчет ИПН, ОПВ и удержаний" и заново пересчитывают "от обратного"
    		
       ПлановыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.Период < &парамНачало ТОГДА &парамНачало
    	|		ИНАЧЕ ПлановыеУдержания.Период
    	|	КОНЕЦ КАК ДатаНачала,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
    	|				И ПлановыеУдержания.ПериодЗавершения <= &парамКонец
    	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
    	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец))
    	|	КОНЕЦ КАК ДатаОкончания
    	|ИЗ
    	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
    	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
    	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
    	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
    	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
    	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
    	|			И СледующиеПлановыеУдержания.Период <= &парамКонец
		|			И СледующиеПлановыеУдержания.Активность
    	|
    	|ГДЕ
    	|	ПлановыеУдержания.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
    	|	И ПлановыеУдержания.Организация = &парамГоловнаяОрганизация
    	|	И ПлановыеУдержания.Период <= &парамКонец
    	|	И ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
    	|				И ПлановыеУдержания.ПериодЗавершения < &парамНачало ТОГДА ПлановыеУдержания.ДействиеЗавершения
    	|		ИНАЧЕ ПлановыеУдержания.Действие
    	|	  КОНЕЦ <> &парамДействиеПрекратить
		|	И ПлановыеУдержания.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|	ПлановыеУдержания.Период,
    	|	ПлановыеУдержания.ПериодЗавершения
    	|
    	|ИМЕЮЩИЕ
    	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонец)) >= &парамНачало
    	|";
       
       // В качестве фактических берем только те, что зарегистрированы как 
       // разовые, т.к. все остальные будут взяты из плановых
       ПлановыеИФактическиеУдержанияТекст = "
       |ВЫБРАТЬ
       |	Удержания.ФизЛицо,
       |	Удержания.ВидРасчета,
       |	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
       |	Удержания.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
       |	Удержания.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
       |	Удержания.ВидСтроки,
       |	СУММА(Удержания.Результат) КАК Результат,
       |	СУММА(Удержания.Размер) КАК Размер
       |ИЗ
       |	(ВЫБРАТЬ
       |			ПлановыеУдержания.ФизЛицо,
       |			ПлановыеУдержания.ВидРасчета,
       |			""ПлановыеУдержания"" КАК ВидСтроки,
       |			0 КАК Результат,
       |			ПлановыеУдержания.Размер
       |		ИЗ
       |			(" + ПлановыеУдержанияТекст + ") КАК ПлановыеУдержания
       |
       |	ОБЪЕДИНИТЬ ВСЕ
       |	
       |	ВЫБРАТЬ
       |		Удержания.ФизЛицо,
       |		Удержания.ВидРасчета,
       |		""ФактическиеУдержания"" КАК ВидСтроки,
       |		Удержания.Результат,
       |		Удержания.Размер
       |	ИЗ
       |		Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
       |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
       |			ПО Удержания.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация	   
       |	ГДЕ
       |		Удержания.Ссылка.Проведен
       |		И ВЫБОР
       |			КОГДА Удержания.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация
       |				ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
       |				ТОГДА Удержания.Ссылка.Организация
       |			ИНАЧЕ Удержания.Ссылка.Организация.ГоловнаяОрганизация
       |		КОНЕЦ = &парамГоловнаяОрганизация 
       |		И Удержания.Ссылка.ПериодРегистрации = &парамПериодРегистрации
       |		И Удержания.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
       |		И Удержания.Результат <> 0
       |	) КАК Удержания
       |
       |СГРУППИРОВАТЬ ПО
    	|	Удержания.ФизЛицо,
       |	Удержания.ВидРасчета,
       |	Удержания.ВидРасчета.СпособРасчета,
       |	Удержания.ВидСтроки
       |";
           		
       // КомпенсируемыеУдержания
       // Поля:
       //		ФизЛицо
       //		ВидУдержания
       //		Результат
       //		Размер
       //	Описание:
       // Рассчитывает результат по каждому компенсируемому виду удержаний 
       КомпенсируемыеУдержанияТекст = "
       |ВЫБРАТЬ
       |	Основной.НомерСтроки,
       |	Основной.ВидРасчета КАК ВидРасчетаОтОбратного,
       |	ПлановыеИФактическиеУдержания.ФизЛицо,
       |	ПлановыеИФактическиеУдержания.ВидРасчета КАК ВидУдержания,
       |	ПлановыеИФактическиеУдержания.ВидСтроки,
       |
       |	МАКСИМУМ(ВЫБОР
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ФактическиеУдержания""
       |					ТОГДА ПлановыеИФактическиеУдержания.Результат
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета В (&парамСпособыРасчетаФиксированнойСуммой)
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |			КОНЕЦ) 
       |	+
       |	МАКСИМУМ(ВЫБОР
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |			КОНЕЦ) / 100 * 
       |	СУММА(ЕСТЬNULL(ОсновныеИДополнительныеНачисления.Результат, 0)) КАК СуммаКомпенсируемыхУдержаний,
       |
       |	МАКСИМУМ(ВЫБОР 
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
       |					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
       |				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
       |
       |	МАКСИМУМ(ВЫБОР 
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
       |					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
       |				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
       |
       |	МАКСИМУМ(ВЫБОР 
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
       |					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
       |				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
       |
       |	МАКСИМУМ(ВЫБОР 
       |				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |					  И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
       |					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
       |				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
       |					ТОГДА ПлановыеИФактическиеУдержания.Размер
       |				ИНАЧЕ 0
       |		  	 КОНЕЦ) КАК ПроцентПрочихКомпенсируемыхУдержаний
       |
       |ИЗ
       |	" + ИмяИсточника + " КАК Основной
       |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ПлановыеИФактическиеУдержанияТекст + ") КАК ПлановыеИФактическиеУдержания
       |		ПО Основной.ФизЛицо = ПлановыеИФактическиеУдержания.ФизЛицо
       |
       |	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
       |		ПО ПлановыеИФактическиеУдержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
       |		   И ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
       |		   И ПлановыеИФактическиеУдержания.СпособРасчета = &парамСпособРасчетаПроцентом
       |
       |	ЛЕВОЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
       |		ПО ПлановыеИФактическиеУдержания.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо
       |		   И БазовыеВидыРасчета.ВидРасчета = ОсновныеИДополнительныеНачисления.ВидРасчета
       |
       |ГДЕ
       |	" + ВнешнееУсловие + "
       |	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
       |
       |СГРУППИРОВАТЬ ПО
       |	Основной.НомерСтроки,
       |	Основной.ВидРасчета,
       |	ПлановыеИФактическиеУдержания.ФизЛицо,
       |	ПлановыеИФактическиеУдержания.ВидРасчета,
       |	ПлановыеИФактическиеУдержания.ВидСтроки
       |";
           		
       РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
       |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
       |						КомпенсируемыеУдержания.НомерСтроки,
       |						СУММА(КомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний) КАК СуммаКомпенсируемыхУдержаний,
       |						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
       |						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
       |						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
       |						СУММА(КомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний) КАК ПроцентПрочихКомпенсируемыхУдержаний
       |					ИЗ
       |						(" + КомпенсируемыеУдержанияТекст + ") КАК КомпенсируемыеУдержания
       |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
       |													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка КАК ВидРасчетаОтОбратного,
       |													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
       |												ИЗ
       |													ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
       |							ПО КомпенсируемыеУдержания.ВидРасчетаОтОбратного = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчетаОтОбратного 
       |							   И КомпенсируемыеУдержания.ВидУдержания = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
       |					СГРУППИРОВАТЬ ПО 
       |						КомпенсируемыеУдержания.НомерСтроки
       |					) КАК РасчетОтОбратногоКомпенсируемыеУдержания
       |	ПО Основной.НомерСтроки = РасчетОтОбратногоКомпенсируемыеУдержания.НомерСтроки
       |";
   КонецЕсли;
            
   // Разделим прочие начисления на включаемые внутрь расчета "от обратного" и начисляемые "сверху"
   РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
   |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодРегистрации, Организация = &парамОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
   |	ПО ИСТИНА
   |
   |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |						Основной.НомерСтроки,
   |						СУММА(ОсновныеИДополнительныеНачисления.СуммаНачислений) КАК ОбщаяСуммаНачислений,
   |						СУММА(ВЫБОР
   |								КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ = &парамНеОблагаетсяЦеликом
   |									ТОГДА ОсновныеИДополнительныеНачисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК НеОблагаемыйОПВДоход,
   |						СУММА(ВЫБОР
   |								КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН = &парамНеОблагаетсяЦеликом
   |									ТОГДА ОсновныеИДополнительныеНачисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК НеОблагаемыйИПНДоход,
   |						СУММА(ВЫБОР
   |								КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL) 
   |									ТОГДА ОсновныеИДополнительныеНачисления.СуммаНачислений
   |								ИНАЧЕ 0
   |							 КОНЕЦ) КАК СуммаВключаемыхНачислений,
   |						СУММА(ВЫБОР
   |								КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
   |										И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН <> &парамНеОблагаетсяЦеликом
   |									ТОГДА ОсновныеИДополнительныеНачисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
   |						СУММА(ВЫБОР
   |								КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
   |										И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ <> &парамНеОблагаетсяЦеликом
   |									ТОГДА ОсновныеИДополнительныеНачисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
   |						СУММА(ВЫБОР
   |								КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
   |									ТОГДА ОсновныеИДополнительныеНачисления.ДополнительныеДанные
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК ДополнительныеДанные
   |				   ИЗ
   |						" + ИмяИсточника + " КАК Основной
   |						ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
   |							ПО Основной.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо 
   |						ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
   |													Ссылка КАК Ссылка,
   |													ВидРасчета КАК ВидРасчета
   |										  	   ИЗ
   |													ПланВидовРасчета." + ИмяПВР + ".ВключаемыеВРасчетОтОбратногоВидыНачислений 
   |
   |
   |											   ОБЪЕДИНИТЬ
   |
   |											   // чтобы учитывать предоставляемые вычеты по ИПН только один раз в месяце
   |											   // даже если были несколько строк расчетов 'от обратного' в разные моменты в месяце,
   |											   // включаем прочие виды 'от обратного' в качестве включаемых для данного
   |											   ВЫБРАТЬ
   |													Основной.ВидРасчета КАК Ссылка,
   |													ПВР.Ссылка КАК ВидРасчета
   |											   ИЗ
   |													" + ИмяИсточника + " КАК Основной
   |													ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПВР
   |														ПО ПВР.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
   |											   ГДЕ
   |													" + ВнешнееУсловие + " 
   |													И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
   |													И Основной.ВидРасчета.ЗачетОтработанногоВремени
   |
   |										  	   ) КАК ВключаемыеВРасчетОтОбратногоВидыНачислений
   |							ПО Основной.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.Ссылка
   |							   И ОсновныеИДополнительныеНачисления.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета
   |				  ГДЕ
   |						" + ВнешнееУсловие + "
   |						И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
   |				  СГРУППИРОВАТЬ ПО
   |						Основной.НомерСтроки) КАК РасчетОтОбратногоПрочиеНачисления
   |	ПО Основной.НомерСтроки = РасчетОтОбратногоПрочиеНачисления.НомерСтроки
   |
   |// определим облагаемые ИПН и ОПВ доходы, начисленные текущий регистратором,
   |// т.к. их еще нет в ИПНСведенияОДоходах и ОПВСведенияОДоходах
   |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |						Начисления.ФизЛицо,
   |						СУММА(ВЫБОР
   |								КОГДА Начисления.ВидРасчета.ОблагаетсяИПН <> &парамНеОблагаетсяЦеликом 
   |									ТОГДА Начисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК ОблагаемыйИПНДоход,
   |						СУММА(ВЫБОР
   |								КОГДА Начисления.ВидРасчета.ОблагаетсяИПН = &парамНеОблагаетсяЦеликом 
   |									ТОГДА Начисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК НеОблагаемыйИПНДоход,
   |						СУММА(ВЫБОР
   |								КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ <> &парамНеОблагаетсяЦеликом 
   |									ТОГДА Начисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК ОблагаемыйОПВДоход,
   |						СУММА(ВЫБОР
   |								КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ = &парамНеОблагаетсяЦеликом 
   |									ТОГДА Начисления.Результат
   |								ИНАЧЕ 0
   |							  КОНЕЦ) КАК НеОблагаемыйОПВДоход
   |				  ИЗ
   |						(ВЫБРАТЬ
   |							Основной.ФизЛицо,
   |							Основной.ВидРасчета,
   |							Основной.Результат
   |						ИЗ
   |							" + ИмяИсточника + " КАК Основной
   |				  		ГДЕ
   |							Основной.Ссылка = &парамРегистратор
   |							И Основной.ФизЛицо В (&парамРасчетОтОбратногоСписокФизЛиц)
   |							И Основной.ВидРасчета В (&парамУжеРассчитанныеВидыРасчета)
   |						) КАК Начисления
   |
   |				  СГРУППИРОВАТЬ ПО
   |						Начисления.ФизЛицо) КАК РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора
   |	ПО Основной.ФизЛицо = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ФизЛицо
   |	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
   |
   |// определим компенсируемые удержания для каждого вида расчета от обратного
   |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
   |						КомпенсируемыеУдержания.Ссылка КАК ВидРасчета,
   |						СУММА(ВЫБОР КОГДА КомпенсируемыеУдержания.ВидРасчета = &парамНалогВзносИПН ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КомпенсироватьИПН,
   |						СУММА(ВЫБОР КОГДА КомпенсируемыеУдержания.ВидРасчета = &парамНалогВзносОПВ ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КомпенсироватьОПВ,
   |						СУММА(ВЫБОР КОГДА КомпенсируемыеУдержания.ВидРасчета НЕ В (&парамНалогВзносИПН, &парамНалогВзносОПВ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КомпенсироватьУдержания
   |					ИЗ
   |						ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеУдержания
   |					ГДЕ
   |						КомпенсируемыеУдержания.Ссылка В (&парамВидыРасчетаОтОбратного)
   |					СГРУППИРОВАТЬ ПО
   |						КомпенсируемыеУдержания.Ссылка) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
   |	ПО Основной.ВидРасчета = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
   |";
   
	СтруктураТекстЗапроса = Новый Структура("РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст", 
											 РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст);
	
	Возврат СтруктураТекстЗапроса;
		
КонецФункции 

// Получает данные для расчета "от обратного" после 2009
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратногоПосле2009(НеобходимыеДанные, 
													 Организация, 
													 ПериодРегистрации, 
													 Запрос, 
													 Сотрудник = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	ИмяИсточника = "Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления";
    Условие = "Ссылка = &парамРегистратор";
    ВнешнееУсловие = "Основной.Ссылка = &парамРегистратор";
	Если Сотрудник <> Неопределено Тогда
		Условие = Условие + " И Физлицо В (&парамФизлица)";
		ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&парамФизлица)";
		Запрос.УстановитьПараметр("парамФизлица", Сотрудник.ФизЛицо);
	КонецЕсли;
	
	 /////////////////////////////////////////////////////////////////////
    // Далее идут тексты запросов для расчета "от обратного"
    
    РасчетОтОбратногоПоляТекст = ""; // строка с полями запроса
    РасчетОтОбратногоСоединенияТекст = ""; // строка с соединениями в запросе		
    
    ИмяПВР = "ОсновныеНачисленияОрганизаций";
       
    // Поля, необходимые для расчета "от обратного" 
    РасчетОтОбратногоПоляТекст = "
    |ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьИПН,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьУдержания, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьУдержания,
    |Основной.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
    |Основной.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН
    |";
    			
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ЛьготаПоДоходу, 0) КАК ЛьготаПоДоходу,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоход, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоход,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПримененныйВычетЗаГод, 0) КАК ПримененныйВычетЗаГод,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПримененнаяЛьготаЗаГод, 0) КАК ПримененнаяЛьготаЗаГод,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РазрешенныйВычетЗаГод, 0) КАК РазрешенныйВычетЗаГод,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.НалоговыйВычетЛичный, 0) КАК НалоговыйВычетЛичный,
    	|&парамСтавкаИПН КАК ПроцентИПН
    	|";
    		
    	Запрос.УстановитьПараметр("парамСтавкаИПН", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ПериодРегистрации) / 100);
    КонецЕсли;
    			
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&парамФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&парамФизЛицаБезПраваНаПенсию)
    	|		  ИЛИ Основной.ФизЛицо В (&парамФизЛицаИнвалидыБессрочно) ТОГДА ЛОЖЬ
    	|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияОПВ,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.БазаДляИсчисленияОПВ, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйОПВДоход, 0) КАК БазаДляИсчисленияОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляОПВ,
    	|&парамРазмерОграниченияПоДоходамОПВ КАК РазмерОграниченияПоДоходамОПВ,
    	|&парамСтавкаОПВ КАК ПроцентОПВ
    	|";
    		
    	Запрос.УстановитьПараметр("парамСтавкаОПВ", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний, 0) КАК СуммаКомпенсируемыхУдержаний,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний, 0) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|";
    КонецЕсли;
    			
    РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйИПНДоход, 0) КАК НеОблагаемыйИПНДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйОПВДоход, 0) КАК НеОблагаемыйОПВДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйИПНДоходВключаемыхНачислений, 0) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйОПВДоходВключаемыхНачислений, 0) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОбщаяСуммаНачислений, 0) КАК ОбщаяСуммаНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.СуммаВключаемыхНачислений, 0) КАК СуммаВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ДополнительныеДанные, 0) КАК РасчетОтОбратногоДополнительныеДанные
    |";
    
    // Далее идут тексты запросов по аналогии с функциями ПолучитьДанныеДляРасчетаИПН() и ПолучитьДанныеДляРасчетаОПВ().
    // Отличие по всем текстам в том, что в ПолучитьДанныеДляРасчетаИПН() используется &парамСписокФизЛиц,
    // а в расчете "от обратного" &парамРасчетОтОбратногоСписокФизЛиц.
    // В данном расчете предполагается, что расчет ИПН и ОПВ будет производится с установленным
    // в учетной политике по налоговому учету флажке ОтражениеПоПериодуРегистрации - все данные выбираются по ПериодРегистрации

    Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамНачалоГода", 			НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("парамОбособленноеПодразделение", Организация);
    Запрос.УстановитьПараметр("парамГоловнаяОрганизация", 	ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
    Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 	КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
    Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
    	Запрос.УстановитьПараметр("парамНалогоплательщик", 	ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация, Организация, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
    Иначе
    	Запрос.УстановитьПараметр("парамНалогоплательщик", 	Организация);
    КонецЕсли;
    
	// Список видов расчета "от обратного"
    ВидыРасчетаОтОбратногоТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ВидРасчета
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.Текст = ВидыРасчетаОтОбратногоТекст;
    Запрос.УстановитьПараметр("парамВидыРасчетаОтОбратного", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));

    // Периоды
    // Таблица список физлиц, по которым необходимо выполнить расчет налога или взносов
    // Поля:
    //		Физлицо
    СписокФизЛицТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ФизЛицо
    |
    |ПОМЕСТИТЬ ВТ_СписокФизЛиц
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";
    			
    Запрос.Текст = СписокФизЛицТекст;
    Запрос.Выполнить();
    СписокФизЛицТекст = "ВТ_СписокФизЛиц";
    
    // Периоды
    // Таблица список периодов-физлиц, по которым необходимо выполнить расчет налога или взноса
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Основной.ФизЛицо,
    |	&парамПериодРегистрации КАК Период
    |
    |ПОМЕСТИТЬ ВТ_ПериодыРасчетаОтОбратного
    |ИЗ
    |	" + СписокФизЛицТекст + " КАК Основной
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";		   
    Запрос.Текст = ПериодыТекст;
    Запрос.Выполнить();
    ПериодыТекст = "ВТ_ПериодыРасчетаОтОбратного";
    
    // Составим текст запроса для вычисления всех месяцев периода
    ДатыПериодовГодаТекст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
    				   |	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
    				   |
    				   |ПОМЕСТИТЬ ВТ_ДатыПериодовГодаРасчетаОтОбратного
    				   |ИЗ
    				   |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
    				   |ГДЕ
    				   |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
					   |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериодРегистрации, ГОД) И &парамПериодРегистрации
    				   |
    				   |ИНДЕКСИРОВАТЬ ПО
    				   |	Период";
    Запрос.Текст = ДатыПериодовГодаТекст;
    Запрос.Выполнить();
    ДатыПериодовГодаТекст = "ВТ_ДатыПериодовГодаРасчетаОтОбратного";
    	
    // Списки видов расчета, категория расчета которых меньше текущей  (т.е. уже посчитанные)
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПВР.Ссылка
    |ИЗ
    |	ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |ГДЕ
    |	ПВР.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    |	И ПВР.СпособРасчета НЕ В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.УстановитьПараметр("парамУжеРассчитанныеВидыРасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
    // ОсновныеИДополнительныеНачисления
    // Поля:
    //		ФизЛицо
    //		ВидРасчета
    //		Результат
    //	Описание:
    // Выбирает начисления за период регистрации по физлицам, для которых выполняется расчет "от обратного"
    ОсновныеИДополнительныеНачисленияТекст = "
    |ВЫБРАТЬ
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета,
    |	СУММА(ОсновныеНачисления.Результат) КАК Результат,
    |	СУММА(ОсновныеНачисления.ДополнительныеДанные) КАК ДополнительныеДанные,
    |	СУММА(ОсновныеНачисления.Результат) КАК СуммаНачислений
    |
    |ПОМЕСТИТЬ ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |		ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
    |ГДЕ
    |	ВЫБОР
    |		КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
    |			ТОГДА ОсновныеНачисления.Ссылка.Проведен
    |		ИНАЧЕ ИСТИНА
    |	КОНЕЦ
    |	И ВЫБОР
    |		КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |			ТОГДА ОсновныеНачисления.Ссылка.Организация
    |		ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
    |	КОНЕЦ = &парамГоловнаяОрганизация
    |	И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
    |	И (ОсновныеНачисления.Ссылка <> &парамРегистратор
    |		ИЛИ (ОсновныеНачисления.Ссылка = &парамРегистратор
    |				И ОсновныеНачисления.ВидРасчета В (&парамУжеРассчитанныеВидыРасчета)))
     |
    |СГРУППИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |";
    Запрос.Текст = ОсновныеИДополнительныеНачисленияТекст;
    Запрос.Выполнить();
    ОсновныеИДополнительныеНачисленияТекст = "ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного";
   
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    		
    	// ФизлицаНеРезиденты
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-нерезидентов
    	ГражданствоФизЛицТекст = "
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    	|	ГражданствоФизЛиц.ФизЛицо,
    	|	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
    	|
    	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛицРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|				&парамКонецПериодаРегистрации, 
    	|				ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + " КАК СписокФизЛиц)) КАК ГражданствоФизЛиц
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ФизЛицо
    	|";
    	Запрос.Текст = ГражданствоФизЛицТекст;
    	Запрос.Выполнить();
    	ГражданствоФизЛицТекст = "ВТ_ГражданствоФизЛицРасчетаОтОбратного";
    		
    	// РасчетныеПоказатели
    	//	Поля:
    	//		Период
    	//		РазмерМРП
    	//		РазмерМЗП
    	//
    	//	Описание:
    	// Выбирает размер месячного расчетного показателя по периодам
    	РасчетныеПоказателиТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказателиСрезПоследних.РазмерМРПДляЦелейНалогообложения КАК РазмерМРП,
    	|	РасчетныеПоказателиСрезПоследних.РазмерМЗПДляЦелейНалогообложения КАК РазмерМЗП,
    	|	РасчетныеПоказателиСрезПоследних.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
    	|	РасчетныеПоказателиСрезПоследних.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
    	|
    	|ПОМЕСТИТЬ ВТ_РасчетныеПоказателиРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамКонецПериодаРегистрации) КАК РасчетныеПоказателиСрезПоследних
    	|";
    	Запрос.Текст = РасчетныеПоказателиТекст;
    	Запрос.Выполнить();
    	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказателиРасчетаОтОбратного";
    			
    	// ПрименяемыеЛьготы
    	//	Поля:
    	//		Физлицо
    	//		Период
    	//		ПрименяетсяЛьготаУчастникаВОВ
    	//		ПрименяетсяЛьготаПоИнвалидности
    	//		ЛьготаПоДоходу
    	//
    	//	Описание:
    	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
    	ПрименяемыеЛьготыТекст = 
    	"ВЫБРАТЬ
    	|	ИПНЛьготыФизлиц.Физлицо,
    	|	
    	|	ИПНЛьготыФизлиц.ОтношениеКИнвалидности,
    	|	ИПНЛьготыФизлиц.ГруппаИнвалидности,
    	|
    	|	ВЫБОР
    	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
    	|			ТОГДА ИСТИНА
    	|		ИНАЧЕ ЛОЖЬ
    	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
    	|
    	|	ВЫБОР
    	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
    	|			ТОГДА ИСТИНА
    	|		ИНАЧЕ ЛОЖЬ
    	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
    	|
    	|	ВЫБОР 
    	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
    	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
    	|	КОНЕЦ КАК ЛьготаПоДоходу
    	|
    	|ПОМЕСТИТЬ ВТ_ПрименяемыеЛьготыРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		Периоды.Физлицо КАК Физлицо,
    	|		ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности,
    	|		ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности,
    	|		ВЫБОР 
    	|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
    	|				ТОГДА 0 
    	|			ИНАЧЕ ВЫБОР 
    	|					КОГДА ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
    	|							И ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности = ""III"" 
    	|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
    	|					ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0)
    	|				  КОНЕЦ 
    	|		КОНЕЦ КАК ЛьготаПоИнвалидности,
    	|		ВЫБОР 
    	|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
    	|				ТОГДА 0 
    	|			ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) 
    	|		КОНЕЦ КАК ЛьготаУчастникаВОВ
    	|		
    	|	ИЗ
    	|		" + СписокФизЛицТекст + " КАК Периоды
    	|
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|							&парамКонецПериодаРегистрации,
    	|							ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ЛьготыФизлицПоИнвалидности
    	|			ПО ЛьготыФизлицПоИнвалидности.Физлицо = Периоды.Физлицо
    	|				И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    	|					ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= &парамКонецПериодаРегистрации)
    	|
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(
    	|							&парамКонецПериодаРегистрации,
    	|							ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ЛьготыФизлицУчастниковВОВ
    	|			ПО ЛьготыФизлицУчастниковВОВ.Физлицо = Периоды.Физлицо
    	|
    	|		ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    	|			ПО ИСТИНА) КАК ИПНЛьготыФизлиц
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ИПНЛьготыФизлиц.Физлицо
    	|";
    	Запрос.Текст = ПрименяемыеЛьготыТекст;
    	Запрос.Выполнить();
    	ПрименяемыеЛьготыТекст = "ВТ_ПрименяемыеЛьготыРасчетаОтОбратного";
    		
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		СуммаДоходаОборот
    	//		СуммаВычетаОборот
    	//
    	//	Описание:
    	// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
    			
    	// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    	// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    	// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем. 
    	// Сведения о жилищных и страховых вычетах текущего месяца всегда берем из регистра сведений, т.к. в регистре накопления они 
    	// появляются только при прямом расчете налога и поэтому могут отсутствовать, если сейчас первый раз рассчитываются начисления.
    	// Т.к. расчет "от обратного" поддерживается только при учетной политикой с ОтражениемПоПериодуРегистрации,
    	// то в регистрах Период, ПериодРегистрации и МесяцНалоговогоПериода всегда совпадают, поэтому 
    	// устанавливаем отборы по Периоду, т.к. по нему система автоматически создает индекс.
    	ДоходыТекст = 
    	"ВЫБРАТЬ
    	|	ИПНОбороты.Физлицо КАК ФизЛицо,
    	|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
    	|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
    	|	СУММА(ВЫБОР
    	|			КОГДА ИПНОбороты.НачисленоВТекущейОрганизации
    	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
    	|			ИНАЧЕ 0
    	|		КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
    	|	СУММА(ИПНОбороты.ПрочиеДоходы) КАК ПрочиеДоходы
    	|
    	|ПОМЕСТИТЬ ВТ_ДоходыРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|		ВЫБОР 
    	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    	|				ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) 
    	|			ИНАЧЕ 0 
    	|		КОНЕЦ КАК СуммаДоходаОборот,
    	|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
    	|		СУММА(ВЫБОР
    	|				КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|					ТОГДА ИПНСведенияОДоходах.СуммаДохода - ИПНСведенияОДоходах.СуммаВычета
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) КАК ПрочиеДоходы,
    	|		ВЫБОР
    	|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
    	|				ТОГДА ЛОЖЬ
    	|			ИНАЧЕ ИСТИНА
    	|		КОНЕЦ КАК НачисленоВТекущейОрганизации
    	|	ИЗ
    	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО ИПНСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|	ГДЕ
    	|		ИПНСведенияОДоходах.Период МЕЖДУ &парамПериодРегистрации И &парамКонецПериодаРегистрации
    	|		И ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
    	|		И ИПНСведенияОДоходах.Регистратор <> &парамРегистратор
    	|		И НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|		И ИПНСведенияОДоходах.Активность
    	|	
    	|	СГРУППИРОВАТЬ ПО
    	|		ИПНСведенияОДоходах.ФизЛицо,
    	|		ИПНСведенияОДоходах.СпособНалогообложения,
    	|		ИПНСведенияОДоходах.Регистратор
    	|
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|
    	|	ВЫБРАТЬ
    	|		ИПНПлановыеВычеты.ФизЛицо,
    	|		0 КАК СуммаДоходаОборот,
    	|		СУММА(ИПНПлановыеВычеты.СуммаВычета) КАК СуммаВычета,
    	|		0 КАК ПрочиеДоходы,
    	|		ЛОЖЬ КАК НачисленоВТекущейОрганизации
    	|	ИЗ
    	|		РегистрСведений.ИПНПлановыеНалоговыеВычетыФизЛиц.СрезПоследних(
    	|				&парамКонецПериодаРегистрации,
    	|				Налогоплательщик = &парамНалогоплательщик
    	|				И МесяцНалоговогоПериода МЕЖДУ &парамПериодРегистрации И &парамКонецПериодаРегистрации
    	|				И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНПлановыеВычеты
    	|	СГРУППИРОВАТЬ ПО
    	|		ИПНПлановыеВычеты.ФизЛицо) КАК ИПНОбороты
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ИПНОбороты.Физлицо";
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыРасчетаОтОбратного";
    			
    			
    	// ИПНПримененныеЛьготыВычеты
    	//	Поля:
    	//		ФизЛицо
    	//		МесяцНалоговогоПериода		
    	//		ПримененныеВычетыЛичные - уже примененные личные налоговые вычеты по ИПН
    	//		ПримененнаяЛьгота - уже примененная льгота по ИПН
    	//
    	//	Описание:
    	//	Выбирает данные (из регистра ИПНСведенияОДоходах и данные регистра
    	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
    			
    	// Т.к. считаем только в случае если в учет. политике стоит ОтражениеПоПериодуРегистрации, то сразу накапливаем
    	// итоги с начала года по предыдущий месяц включительно.
    	ИПНПримененныеЛьготыВычетыТекст = 
    	"ВЫБРАТЬ
    	|	ИПНПримененныеВычетыЛьготы.ФизЛицо КАК ФизЛицо,
    	|	СУММА(ИПНПримененныеВычетыЛьготы.ПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
    	|	СУММА(ИПНПримененныеВычетыЛьготы.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
    	|	СУММА(ИПНПримененныеВычетыЛьготы.РазрешенныйВычетОборот) КАК РазрешенныйВычетЗаГод,
    	|	СУММА(ИПНПримененныеВычетыЛьготы.ПримененнаяЛьготаНаПредыдущемМестеРаботы) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы
    	|ПОМЕСТИТЬ ВТ_ИПНПримененныеЛьготыВычеты
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
    	|		ИПНСведенияОДоходах.ПримененныйВычетОборот КАК ПримененныйВычетОборот,
    	|		ИПНСведенияОДоходах.ПримененнаяЛьготаОборот КАК ПримененнаяЛьготаОборот,
    	|		ИПНСведенияОДоходах.РазрешенныйВычетОборот КАК РазрешенныйВычетОборот,
    	|		0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы
    	|	ИЗ
    	|		РегистрНакопления.ИПНСведенияОДоходах.Обороты(&парамНачалоГода, ДОБАВИТЬКДАТЕ(&парамПериодРегистрации, СЕКУНДА, -1), Месяц,
    	|				Налогоплательщик = &парамНалогоплательщик И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|	
    	|	ВЫБРАТЬ
    	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
    	|		0,
    	|		0,
    	|		0,
    	|		ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота
    	|	ИЗ
    	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
    	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	ГДЕ
    	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода
    	|		И ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации
    	|		И ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик) КАК ИПНПримененныеВычетыЛьготы
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ИПНПримененныеВычетыЛьготы.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ФизЛицо";
    	Запрос.Текст = ИПНПримененныеЛьготыВычетыТекст;
    	Запрос.Выполнить();
    	ИПНПримененныеЛьготыВычетыТекст = "ВТ_ИПНПримененныеЛьготыВычеты";
    				
    			
    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Т.к. расчет ведется только если в учет. политике установлено ОтражениеПоПериодуРегистрации,
    	// то анализовать надо только текущий месяц. Поэтому запрос к ОПВРасчетыСФондами вообще не требуется.

    	// ПрименениеВычетовВОрганизации
    	//	Поля:
    	//		Физлицо,
    	//		Период
    	//
    	// Описание:
    	//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
    	//	заданной организации
    	ПрименениеВычетовВОрганизацииТекст = 
    	"ВЫБРАТЬ
    	|	ИПНПрименениеВычетов.Физлицо КАК Физлицо
    	|
    	|ПОМЕСТИТЬ ВТ_ПрименениеВычетовВОрганизацииРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ИПНПрименениеВычетов.СрезПоследних(
    	|					&парамПериодРегистрации,
    	|					ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНПрименениеВычетов
    	|
    	|ГДЕ
    	|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ФизЛицо
    	|";
    	Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
    	Запрос.Выполнить();
    	ПрименениеВычетовВОрганизацииТекст = "ВТ_ПрименениеВычетовВОрганизацииРасчетаОтОбратного";

    	// ОтработанноеВремя
    	//	Поля:
    	//		Физлицо,
    	//		Период,
    	//		ПредоставлятьВычет
    	//
    	// Описание:
    	//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
    	//	
    		
    	ОтработанноеВремяТекст = 
    	"ВЫБРАТЬ
    	|	ОтработанноеВремя.ФизЛицо,
    	|	ВЫБОР
    	|		КОГДА ВЫБОР
    	|				КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
    	|					ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
    	|				ИНАЧЕ 0
    	|			КОНЕЦ >= 16
    	|			ТОГДА ИСТИНА
    	|		ИНАЧЕ ЛОЖЬ
    	|	КОНЕЦ КАК ПредоставлятьВычет
    	|
    	|ПОМЕСТИТЬ ВТ_ОтработанноеВремяРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|		ОтработанноеВремя.ФизЛицо,
    	|		ОтработанноеВремя.Период,
    	|
    	|		ВЫБОР 
    	|			// вообще не был принят в штат - не считаем отработанное время
    	|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
    	|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
    	|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
    	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
    	|				ТОГДА ОтработанноеВремя.Период
    	|			// принят в штат в текущем месяце - считаем с даты приема
    	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
    	|				ТОГДА ОтработанноеВремя.ДатаПриема
    	|			// сюда попасть не должны - не считаем 
    	|			ИНАЧЕ
    	|				ДАТАВРЕМЯ(3999, 12, 31)
    	|		КОНЕЦ КАК ДатаС,
    	|
    	|		ВЫБОР 
    	|			// повторный прием в ту же организацию и еще не уволен 
    	|			// или еще не уволен после первого приема - считаем до конца месяца
    	|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
    	|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
    	|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    	|			// уволен до начала месяца - не считаем
    	|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
    	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
    	|			// уволен в текущем месяце - считаем до даты увольнения
    	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
    	|               ТОГДА ОтработанноеВремя.ДатаУвольнения
    	|			// еще не уволен - считаем до конца месяца
    	|			ИНАЧЕ
    	|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
    	|		КОНЕЦ КАК ДатаПо
    	|
    	|	ИЗ			
    	|		(ВЫБРАТЬ
    	|			&парамПериодРегистрации КАК Период,
    	|			РаботникиОрганизации.Сотрудник.ФизЛицо КАК ФизЛицо,
    	|			МАКСИМУМ(ВЫБОР 
    	|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу) 
    	|							ТОГДА РаботникиОрганизации.Период
    	|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    	|				 	 КОНЕЦ) КАК ДатаПриема,
    	|			МАКСИМУМ(ВЫБОР 
    	|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
    	|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
    	|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
    	|				 	 КОНЕЦ) КАК ДатаУвольнения
    	|		ИЗ
    	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
    	|
    	|		ГДЕ
    	|			РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
    	|			И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
    	|			И РаботникиОрганизации.Период <= &парамКонецПериодаРегистрации
    	|			И РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), 
    	|																ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|			И РаботникиОрганизации.Активность
    	|
    	|		СГРУППИРОВАТЬ ПО 
    	|			РаботникиОрганизации.Сотрудник.ФизЛицо) КАК ОтработанноеВремя) КАК ОтработанноеВремя
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ОтработанноеВремя.ФизЛицо
    	|";

    	Запрос.Текст = ОтработанноеВремяТекст;
    	Запрос.Выполнить();
    	ОтработанноеВремяТекст = "ВТ_ОтработанноеВремяРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ОтработанноеВремяТекст;

    	// ПрименяемыеВычетыТекст
    	//	Поля:
    	//		Физлицо
    	//		Период
    	//		НалоговыйВычетЛичный
    	//		НалоговыйВычетИждивенцев
    	//		НалоговыйВычетПредыдущегоМестаРаботы
    	//
    	//	Описание:
    	//	Выбирает по всем периодам года налоговын вычеты на которые имеет право физлицо
    	ПрименяемыеВычетыТекст = 
    	"ВЫБРАТЬ
    	|	ВычетыФизлиц.Физлицо КАК Физлицо,
    	|	ВЫБОР 
    	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
    	|				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) 
    	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
    	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
    	|			ТОГДА 0 
    	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
    	|	КОНЕЦ КАК НалоговыйВычетЛичный
    	|
    	|ПОМЕСТИТЬ ВТ_ПрименяемыеВычетыРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ИПННалоговыеВычетыФизлиц.СрезПоследних(
    	|				&парамКонецПериодаРегистрации,
    	|				ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ВычетыФизлиц
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
    	|		ПО ИСТИНА
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименениеВычетовВОрганизацииТекст + " КАК ПрименениеВычетов
    	|		ПО ПрименениеВычетов.Физлицо = ВычетыФизлиц.Физлицо 
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОтработанноеВремяТекст + " КАК ОтработанноеВремя
    	|		ПО ОтработанноеВремя.ФизЛицо = ВычетыФизлиц.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ГражданствоФизЛицТекст + " КАК ГражданствоФизЛиц
    	|		ПО ГражданствоФизЛиц.ФизЛицо = ВычетыФизлиц.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ВычетыФизлиц.Физлицо
    	|";
    	Запрос.Текст = ПрименяемыеВычетыТекст;
    	Запрос.Выполнить();
    	ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычетыРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + ПрименяемыеВычетыТекст;

    	БазаДляИсчисленияИПНТекст = "
    	|ВЫБРАТЬ
    	|	СписокФизЛиц.ФизЛицо,
    	|	ЕСТЬNULL(Доходы.СуммаДоходаОборот, 0) - ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0) КАК ОблагаемыйДоход,
    	|	ЕСТЬNULL(Доходы.ПрочиеДоходы, 0) КАК ПрочиеДоходы,
    	|	
    	|	ЕСТЬNULL(ПрименяемыеЛьготы.ЛьготаПоДоходу, 0) КАК ЛьготаПоДоходу,
    	|
    	|	ЕСТЬNULL(ИПНПримененныеЛьготыВычеты.ПримененныйВычетЗаГод, 0) КАК ПримененныйВычетЗаГод,
    	|	ЕСТЬNULL(ИПНПримененныеЛьготыВычеты.ПримененнаяЛьготаЗаГод, 0) КАК ПримененнаяЛьготаЗаГод,
    	|	ЕСТЬNULL(ИПНПримененныеЛьготыВычеты.РазрешенныйВычетЗаГод, 0) КАК РазрешенныйВычетЗаГод,
    	|	ЕСТЬNULL(ИПНПримененныеЛьготыВычеты.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
    	|
    	|	ЕСТЬNULL(ПрименяемыеВычеты.НалоговыйВычетЛичный, 0) КАК НалоговыйВычетЛичный
    	|
    	|ПОМЕСТИТЬ ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного
    	|ИЗ
    	|	" + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК Доходы
    	|		ПО СписокФизЛиц.ФизЛицо = Доходы.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
    	|		ПО СписокФизЛиц.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНПримененныеЛьготыВычетыТекст + " КАК ИПНПримененныеЛьготыВычеты
    	|		ПО СписокФизЛиц.ФизЛицо = ИПНПримененныеЛьготыВычеты.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
    	|		ПО СписокФизЛиц.ФизЛицо = ПрименяемыеВычеты.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	СписокФизЛиц.ФизЛицо
    	|";
    	
    	Запрос.Текст = БазаДляИсчисленияИПНТекст;
    	Запрос.Выполнить();
    	БазаДляИсчисленияИПНТекст = "ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + БазаДляИсчисленияИПНТекст;

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + БазаДляИсчисленияИПНТекст + " КАК РасчетОтОбратногоДанныеИПН
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
    	|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    	|";

    КонецЕсли;
            
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    			
    	СписокГруппИнвалидности = Новый СписокЗначений;
    	СписокГруппИнвалидности.Добавить("I");
    	СписокГруппИнвалидности.Добавить("II");
    			
    	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
    	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|	СУММА(ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета) КАК БазаДляИсчисленияОПВ,
    	|	СУММА(ВЫБОР
    	|			КОГДА ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
    	|			ИНАЧЕ 0
    	|		КОНЕЦ) КАК ПрочиеДоходы
    	|
    	|ПОМЕСТИТЬ ВТ_ДоходыОПВРасчетаОтОбратного
    	|ИЗ
    	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ОПВСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|ГДЕ
    	|	ОПВСведенияОДоходах.Период МЕЖДУ &парамПериодРегистрации И &парамКонецПериодаРегистрации
    	|	И ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И ОПВСведенияОДоходах.Активность
    	|	
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо";
    	
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыОПВРасчетаОтОбратного";

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц. Поэтому запроса к ОПВРасчетыСФондами вообще не требуется.

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказатели.РазмерМЗП * 75 КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамКонецПериодаРегистрации) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("парамРазмерОграниченияПоДоходамОПВ", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("парамРазмерОграниченияПоДоходамОПВ", 0);
    	КонецЕсли;

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаБезПраваНаПенсиюТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&парамКонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
    			
    	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаБезПраваНаПенсию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаПенсионеры
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц достигших пенсионный возраст
    	ФизлицаПенсионерыТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
    	|						&парамКонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОПенсионномОбеспеченииФизЛиц
    	|
    	|ГДЕ
    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
    		
    	Запрос.Текст = ФизлицаПенсионерыТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	// ФизлицаИнвалидыБессрочно
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыБессрочноТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|						&парамКонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
    	|	И СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&парамСписокГруппИнвалидности)
    	|	И СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    	|";
    		
    	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
    	Запрос.УстановитьПараметр("парамФизЛицаИнвалидыБессрочно", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК РасчетОтОбратногоДанныеОПВ
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеОПВ.ФизЛицо
    	|	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    	|";

   КонецЕсли;
            
   Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
           
    	// для списка погашамых удержаний определим общую сумму
    	Запрос.УстановитьПараметр("парамСпособыРасчетаФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());

    	// ПлановыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидРасчета
    	//		ВидСтроки
    	//		Размер
    	//	Описание:
    	// Выбирает плановые и фактические удержания за период регистрации для физлиц, по которым производится расчет "от обратного".
    	// Фактические удержания берем только те, что введены как разовые, чтобы не задублировать плановые, если уже создан и проведен
    	// документ "Расчет ИПН, ОПВ и удержаний" и заново пересчитывают "от обратного"
    		
    	ПлановыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.Период < &парамПериодРегистрации ТОГДА &парамПериодРегистрации
    	|		ИНАЧЕ ПлановыеУдержания.Период
    	|	КОНЕЦ КАК ДатаНачала,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
    	|				И ПлановыеУдержания.ПериодЗавершения <= &парамКонецПериодаРегистрации
    	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
    	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонецПериодаРегистрации))
    	|	КОНЕЦ КАК ДатаОкончания
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ПлановыеУдержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
    	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
    	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
    	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
    	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
    	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
    	|			И СледующиеПлановыеУдержания.Период <= &парамКонецПериодаРегистрации
    	|
    	|ГДЕ
    	|	ПлановыеУдержания.Организация = &парамГоловнаяОрганизация
    	|	И ПлановыеУдержания.Период <= &парамКонецПериодаРегистрации
    	|	И ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
    	|				И ПлановыеУдержания.ПериодЗавершения < &парамПериодРегистрации ТОГДА ПлановыеУдержания.ДействиеЗавершения
    	|		ИНАЧЕ ПлановыеУдержания.Действие
    	|	  КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
		|	И ПлановыеУдержания.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|	ПлановыеУдержания.Период,
    	|	ПлановыеУдержания.ПериодЗавершения
    	|
    	|ИМЕЮЩИЕ
    	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &парамКонецПериодаРегистрации)) >= &парамПериодРегистрации
    	|";
    	Запрос.Текст = ПлановыеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеУдержанияТекст = "ВТ_ПлановыеУдержанияРасчетаОтОбратного";
       
    	// В качестве фактических берем только те, что зарегистрированы как 
    	// разовые, т.к. все остальные будут взяты из плановых
    	ПлановыеИФактическиеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
    	|	Удержания.ВидСтроки,
    	|	СУММА(Удержания.Результат) КАК Результат,
    	|	СУММА(Удержания.Размер) КАК Размер
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|			ПлановыеУдержания.ФизЛицо,
    	|			ПлановыеУдержания.ВидРасчета,
    	|			""ПлановыеУдержания"" КАК ВидСтроки,
    	|			0 КАК Результат,
    	|			ПлановыеУдержания.Размер
    	|		ИЗ
    	|			" + ПлановыеУдержанияТекст + " КАК ПлановыеУдержания
    	|
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|	
    	|	ВЫБРАТЬ
    	|		Удержания.ФизЛицо,
    	|		Удержания.ВидРасчета,
    	|		""ФактическиеУдержания"" КАК ВидСтроки,
    	|		Удержания.Результат,
    	|		Удержания.Размер
    	|	ИЗ
    	|		Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
    	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
    	|			ПО Удержания.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация		
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО Удержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ГДЕ
    	|		Удержания.Ссылка.Проведен
    	|		И ВЫБОР
    	|			КОГДА Удержания.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    	|				ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
    	|				ТОГДА Удержания.Ссылка.Организация
    	|			ИНАЧЕ Удержания.Ссылка.Организация.ГоловнаяОрганизация
    	|		КОНЕЦ = &парамГоловнаяОрганизация 
    	|		И Удержания.Ссылка.ПериодРегистрации = &парамПериодРегистрации
    	|		И Удержания.Результат <> 0
    	|	) КАК Удержания
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета,
    	|	Удержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Удержания.ФизЛицо
    	|";
    	Запрос.Текст = ПлановыеИФактическиеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеИФактическиеУдержанияТекст = "ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного";
           		
    	// КомпенсируемыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидУдержания
    	//		Результат
    	//		Размер
    	//	Описание:
    	// Рассчитывает результат по каждому компенсируемому виду удержаний 
    	КомпенсируемыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета КАК ВидРасчетаОтОбратного,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета КАК ВидУдержания,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки,
    	|
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ФактическиеУдержания""
    	|					ТОГДА ПлановыеИФактическиеУдержания.Результат
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета В (&парамСпособыРасчетаФиксированнойСуммой)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) 
    	|	+
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) / 100 * 
    	|	СУММА(ЕСТЬNULL(ОсновныеИДополнительныеНачисления.Результат, 0)) КАК СуммаКомпенсируемыхУдержаний,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|
    	|ПОМЕСТИТЬ ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	" + ИмяИсточника + " КАК Основной
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПлановыеИФактическиеУдержанияТекст + " КАК ПлановыеИФактическиеУдержания
    	|		ПО Основной.ФизЛицо = ПлановыеИФактическиеУдержания.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
    	|		ПО ПлановыеИФактическиеУдержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
    	|		   И ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|		   И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    	|		ПО ПлановыеИФактическиеУдержания.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо
    	|		   И БазовыеВидыРасчета.ВидРасчета = ОсновныеИДополнительныеНачисления.ВидРасчета
    	|
    	|ГДЕ
    	|	" + ВнешнееУсловие + "
    	|	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета
    	|";
    	Запрос.Текст = КомпенсируемыеУдержанияТекст;
    	Запрос.Выполнить();
    	КомпенсируемыеУдержанияТекст = "ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного";
           		
    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    	|						КомпенсируемыеУдержания.НомерСтроки,
    	|						СУММА(КомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний) КАК СуммаКомпенсируемыхУдержаний,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|					ИЗ
    	|						" + КомпенсируемыеУдержанияТекст + " КАК КомпенсируемыеУдержания
    	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка КАК ВидРасчетаОтОбратного,
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|												ИЗ
    	|													ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    	|							ПО КомпенсируемыеУдержания.ВидРасчетаОтОбратного = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчетаОтОбратного 
    	|							   И КомпенсируемыеУдержания.ВидУдержания = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|					СГРУППИРОВАТЬ ПО 
    	|						КомпенсируемыеУдержания.НомерСтроки
    	|					) КАК РасчетОтОбратногоКомпенсируемыеУдержания
    	|	ПО Основной.НомерСтроки = РасчетОтОбратногоКомпенсируемыеУдержания.НомерСтроки
    	|";
    КонецЕсли;
            
    // Разделим прочие начисления на включаемые внутрь расчета "от обратного" и начисляемые "сверху"
    РасчетОтОбратногоПрочиеНачисленияТекст = "
    |ВЫБРАТЬ
    |	Основной.НомерСтроки,
    |	СУММА(ОсновныеИДополнительныеНачисления.СуммаНачислений) КАК ОбщаяСуммаНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL) 
    |				ТОГДА ОсновныеИДополнительныеНачисления.СуммаНачислений
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК СуммаВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |				ТОГДА ОсновныеИДополнительныеНачисления.ДополнительныеДанные
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ДополнительныеДанные
    |
    |ПОМЕСТИТЬ ВТ_ПрочиеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    |		ПО Основной.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо 
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |							Ссылка КАК Ссылка,
    |							ВидРасчета КАК ВидРасчета
    |				  	  ИЗ
    |							ПланВидовРасчета." + ИмяПВР + ".ВключаемыеВРасчетОтОбратногоВидыНачислений 
    |
    |					  ОБЪЕДИНИТЬ
    |
    |					  // чтобы учитывать предоставляемые вычеты по ИПН только один раз в месяце
    |					  // даже если были несколько строк расчетов 'от обратного' в разные моменты в месяце,
    |					  // включаем прочие виды 'от обратного' в качестве включаемых для данного
    |					  ВЫБРАТЬ
    |							Основной.ВидРасчета КАК Ссылка,
    |							ПВР.Ссылка КАК ВидРасчета
    |					  ИЗ
    |							" + ИмяИсточника + " КАК Основной
    |							ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |								ПО ПВР.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |					  ГДЕ
    |							" + ВнешнееУсловие + " 
    |							И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |							И Основной.ВидРасчета.ЗачетОтработанногоВремени) КАК ВключаемыеВРасчетОтОбратногоВидыНачислений
    |		ПО Основной.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.Ссылка
    |			   И ОсновныеИДополнительныеНачисления.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |
    |СГРУППИРОВАТЬ ПО
    |	Основной.НомерСтроки
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Основной.НомерСтроки";
    Запрос.Текст = РасчетОтОбратногоПрочиеНачисленияТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоПрочиеНачисленияТекст = "ВТ_ПрочиеНачисленияРасчетаОтОбратного";

    // определим облагаемые ИПН и ОПВ доходы, начисленные текущий регистратором,
    // т.к. их еще нет в ИПНСведенияОДоходах и ОПВСведенияОДоходах
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "
    |ВЫБРАТЬ
    |	Начисления.ФизЛицо,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |	  	КОНЕЦ) КАК ОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход
    |
    |ПОМЕСТИТЬ ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		Основной.ФизЛицо,
    |		Основной.ВидРасчета,
    |		Основной.Результат
    |	ИЗ
    |		" + ИмяИсточника + " КАК Основной
    |
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |			ПО Основной.ФизЛицо = СписокФизЛиц.ФизЛицо
    |	ГДЕ
    |		Основной.Ссылка = &парамРегистратор
    |		И Основной.ВидРасчета В (&парамУжеРассчитанныеВидыРасчета)
    |	) КАК Начисления
    |
    |СГРУППИРОВАТЬ ПО
    |	Начисления.ФизЛицо
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Начисления.ФизЛицо";
    Запрос.Текст = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного";
    
    // общие для любого вида компенсируемых удержаний данные
    РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодРегистрации, Организация = &парамОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
    |	ПО ИСТИНА
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоПрочиеНачисленияТекст + " КАК РасчетОтОбратногоПрочиеНачисления
    |	ПО Основной.НомерСтроки = РасчетОтОбратногоПрочиеНачисления.НомерСтроки
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст + " КАК РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора
    |	ПО Основной.ФизЛицо = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ФизЛицо
    |	   И Основной.ВидРасчета В (&парамВидыРасчетаОтОбратного)
    |
    |// определим компенсируемые удержания для каждого вида расчета от обратного
    |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |		КомпенсируемыеУдержания.Ссылка КАК ВидРасчета,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьИПН,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьОПВ,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета НЕ В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьУдержания
    |	ИЗ
    |		ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеУдержания
    |	ГДЕ
    |		КомпенсируемыеУдержания.Ссылка В (&парамВидыРасчетаОтОбратного)
    |	СГРУППИРОВАТЬ ПО
    |		КомпенсируемыеУдержания.Ссылка) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    |ПО Основной.ВидРасчета = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    |";
           	
	
	СтруктураТекстЗапроса = Новый Структура("РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст", 
											 РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст);
	
	Возврат СтруктураТекстЗапроса;
	
КонецФункции 

// Получает данные для расчета "от обратного" после 2018
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратногоПосле2018(НеобходимыеДанные, 
													 Организация, 
													 ПериодРегистрации, 
													 Запрос, 
													 Сотрудник = Неопределено)

    УстановитьПривилегированныйРежим(Истина);
    
    ИмяИсточника = "Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления";
    Условие = "Ссылка = &парамРегистратор";
    ВнешнееУсловие = "Основной.Ссылка = &парамРегистратор";
    Если Сотрудник <> Неопределено Тогда
    	Условие = Условие + " И Физлицо В (&Физлица)";
    	ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&Физлица)";
    	Запрос.УстановитьПараметр("Физлица", Сотрудник.ФизЛицо);
    КонецЕсли;
    
	/////////////////////////////////////////////////////////////////////
	// Далее идут тексты запросов для расчета "от обратного"
    
    РасчетОтОбратногоПоляТекст = ""; // строка с полями запроса
    РасчетОтОбратногоСоединенияТекст = ""; // строка с соединениями в запросе		
    
    ИмяПВР = "ОсновныеНачисленияОрганизаций";
       
    // Поля, необходимые для расчета "от обратного" 
    РасчетОтОбратногоПоляТекст = "
    |ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьИПН,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьУдержания, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьУдержания,
    |Основной.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
    |Основной.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН
    |";
    			
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоход, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоход,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС,
    	|&СтавкаИПН КАК ПроцентИПН
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаИПН", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ПериодРегистрации) / 100);
    КонецЕсли;
    			
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&ФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаБезПраваНаПенсию)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаИнвалидыБессрочно) ТОГДА ЛОЖЬ
    	|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияОПВ,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.БазаДляИсчисленияОПВ, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйОПВДоход, 0) КАК БазаДляИсчисленияОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляОПВ,
    	|&РазмерОграниченияПоДоходамОПВ КАК РазмерОграниченияПоДоходамОПВ,
    	|&СтавкаОПВ КАК ПроцентОПВ
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаОПВ", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний, 0) КАК СуммаКомпенсируемыхУдержаний,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний, 0) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|";
    КонецЕсли;
    			
    РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйИПНДоход, 0) КАК НеОблагаемыйИПНДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйОПВДоход, 0) КАК НеОблагаемыйОПВДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйИПНДоходВключаемыхНачислений, 0) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйОПВДоходВключаемыхНачислений, 0) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОбщаяСуммаНачислений, 0) КАК ОбщаяСуммаНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.СуммаВключаемыхНачислений, 0) КАК СуммаВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ДополнительныеДанные, 0) КАК РасчетОтОбратногоДополнительныеДанные
    |";
    
    // Далее идут тексты запросов по аналогии с функциями ПолучитьДанныеДляРасчетаИПН() и ПолучитьДанныеДляРасчетаОПВ().
    // Отличие по всем текстам в том, что в ПолучитьДанныеДляРасчетаИПН() используется &СписокФизЛиц,
    // а в расчете "от обратного" &парамРасчетОтОбратногоСписокФизЛиц.
    // В данном расчете предполагается, что расчет ИПН и ОПВ будет производится с установленным
    // в учетной политике по налоговому учету флажке ОтражениеПоПериодуРегистрации - все данные выбираются по ПериодРегистрации

    Запрос.УстановитьПараметр("ПериодРегистрации", 			ПериодРегистрации);
    Запрос.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("ПустаяДата", 				'00010101');
    Запрос.УстановитьПараметр("ОбособленноеПодразделение", 	Организация);
    Запрос.УстановитьПараметр("ГоловнаяОрганизация", 		ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
    
    Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
    	Запрос.УстановитьПараметр("Налогоплательщик", 		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация, Организация, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
    Иначе
    	Запрос.УстановитьПараметр("Налогоплательщик", 		Организация);
    КонецЕсли;
    
    // Список видов расчета "от обратного"
    ВидыРасчетаОтОбратногоТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ВидРасчета
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.Текст = ВидыРасчетаОтОбратногоТекст;
    Запрос.УстановитьПараметр("ВидыРасчетаОтОбратного", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));

    // Периоды
    // Таблица список физлиц, по которым необходимо выполнить расчет налога или взносов
    // Поля:
    //		Физлицо
    СписокФизЛицТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ФизЛицо
    |
    |ПОМЕСТИТЬ ВТ_СписокФизЛиц
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";
    			
    Запрос.Текст = СписокФизЛицТекст;
    Запрос.Выполнить();
    СписокФизЛицТекст = "ВТ_СписокФизЛиц";
    
    // Периоды
    // Таблица список периодов-физлиц, по которым необходимо выполнить расчет налога или взноса
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Основной.ФизЛицо,
    |	&ПериодРегистрации КАК Период
    |
    |ПОМЕСТИТЬ ВТ_ПериодыРасчетаОтОбратного
    |ИЗ
    |	" + СписокФизЛицТекст + " КАК Основной
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";		   
    Запрос.Текст = ПериодыТекст;
    Запрос.Выполнить();
    ПериодыТекст = "ВТ_ПериодыРасчетаОтОбратного";
	
	
	// Списки видов расчета, категория расчета которых меньше текущей  (т.е. уже посчитанные)
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПВР.Ссылка
    |ИЗ
    |	ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |ГДЕ
    |	ПВР.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    |	И ПВР.СпособРасчета НЕ В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.УстановитьПараметр("УжеРассчитанныеВидыРасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
    // ОсновныеИДополнительныеНачисления
    // Поля:
    //		ФизЛицо
    //		ВидРасчета
    //		Результат
    //	Описание:
    // Выбирает начисления за период регистрации по физлицам, для которых выполняется расчет "от обратного"
    ОсновныеИДополнительныеНачисленияТекст = "
    |ВЫБРАТЬ
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета,
    |	СУММА(ОсновныеНачисления.Результат) КАК Результат,
    |	СУММА(ОсновныеНачисления.ДополнительныеДанные) КАК ДополнительныеДанные,
    |	СУММА(ОсновныеНачисления.Результат) КАК СуммаНачислений
    |
    |ПОМЕСТИТЬ ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |		ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
    |ГДЕ
    |	ВЫБОР
    |		КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
    |			ТОГДА ОсновныеНачисления.Ссылка.Проведен
    |		ИНАЧЕ ИСТИНА
    |	КОНЕЦ
    |	И ВЫБОР
    |		КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |			ТОГДА ОсновныеНачисления.Ссылка.Организация
    |		ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
    |	КОНЕЦ = &ГоловнаяОрганизация
    |	И ОсновныеНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
    |	И (ОсновныеНачисления.Ссылка <> &парамРегистратор
    |		ИЛИ (ОсновныеНачисления.Ссылка = &парамРегистратор
    |				И ОсновныеНачисления.ВидРасчета В (&УжеРассчитанныеВидыРасчета)))
	|
    |СГРУППИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |";
    Запрос.Текст = ОсновныеИДополнительныеНачисленияТекст;
    Запрос.Выполнить();
    ОсновныеИДополнительныеНачисленияТекст = "ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного";
	
#Область КомпенсироватьИПН 	
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		
		ВычетыФизЛицТекст = 
			"ВЫБРАТЬ
			|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
			|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
			|	ПрименениеВычетовИПН.ФизическоеЛицо
			|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
			|		ПО ВТ_Периоды.Физлицо = ПрименениеВычетовИПН.ФизическоеЛицо
			|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
			|			И (ПрименениеВычетовИПН.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.Период,
			|	ПрименениеВычетовИПН.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода,
			|	ПрименениеВычетовИПН.ФизическоеЛицо,
			|	ПрименениеВычетовИПН.Организация,
			|	ПрименениеВычетовИПН.ДействуетПо
			|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
			|ИЗ
			|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
			|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
			|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
			|			И (ПрименениеВычетовИПН.Активность)
			|ГДЕ
			|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
			|	И ВЫБОР
			|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
			|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
			|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
			|	ВычетыФизическихЛицИПН.ВидВычета
			|ПОМЕСТИТЬ ВТ_ПериодыВычетов
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
			|		ПО ВТ_Периоды.Физлицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
			|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
			|			И (ВычетыФизическихЛицИПН.Активность)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.Период,
			|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
			|	ВычетыФизическихЛицИПН.ВидВычета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
			|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
			|	ВычетыФизическихЛицИПН.ВидВычета,
			|	ВычетыФизическихЛицИПН.ДействуетПо,
			|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
			|ПОМЕСТИТЬ ВТ_Вычеты
			|ИЗ
			|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
			|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
			|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
			|			И (ВычетыФизическихЛицИПН.Активность)
			|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
			|ГДЕ
			|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
			|	И ВЫБОР
			|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
			|		КОНЕЦ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Вычеты.МесяцНалоговогоПериода,
			|	ВТ_Вычеты.ФизическоеЛицо,
			|	ВТ_Вычеты.ВидВычета,
			|	ВычетыИПН.Приоритет,
			|	ВычетыИПН.ПредоставлениеВычета,
			|	ВычетыИПН.ВидВзносов,
			|	ВычетыИПН.ПределВычета,
			|	ВычетыИПН.ПериодПредоставления,
			|	ВТ_Вычеты.МесяцВводаВычета
			|ПОМЕСТИТЬ ВТ_НастройкиВычетов
			|ИЗ
			|	ВТ_Вычеты КАК ВТ_Вычеты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
			|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
			|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
			|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
			|";
		
		Запрос.Текст = ВычетыФизЛицТекст;
		Запрос.Выполнить();
		
		РасчетныеПоказателиТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Периоды.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыВГодах
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
			|ИЗ
			|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода,
			|	ВТ_ПериодыРасчетныхПоказателей.Физлицо,
			|	РегламентированныеРасчетныеПоказатели.РазмерМЗП
			|ПОМЕСТИТЬ ВТ_РазмерыМЗП
			|ИЗ
			|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
			|";
			
		Запрос.Текст = РасчетныеПоказателиТекст;
		Запрос.Выполнить();
		
		РазмерыПрочихВычетовТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
			|	ВТ_НастройкиВычетов.ФизическоеЛицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	ПрочиеВычетыФизическихЛицИПН.Размер
			|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
			|ИЗ
			|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
			|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
			|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
			|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
			|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
			|";
			
		Запрос.Текст = РазмерыПрочихВычетовТекст;
		Запрос.Выполнить();
		
		НастройкиИРазмерыВычетовТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
			|	ВТ_НастройкиВычетов.ФизическоеЛицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	ВТ_НастройкиВычетов.Приоритет,
			|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
			|	ВТ_НастройкиВычетов.ВидВзносов,
			|	ВТ_НастройкиВычетов.ПределВычета,
			|	ВТ_НастройкиВычетов.ПериодПредоставления,
			|	ВТ_НастройкиВычетов.МесяцВводаВычета,
			|	ВТ_РазмерыМЗП.РазмерМЗП,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
			|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			|			ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РазмерВычета,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
			|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммовойПределВычета
			|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
			|ИЗ
			|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗП КАК ВТ_РазмерыМЗП
			|		ПО ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыМЗП.Физлицо
			|			И (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗП.ГодНалоговогоПериода)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
			|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
			|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
			|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета";
			
		Запрос.Текст = НастройкиИРазмерыВычетовТекст;
		Запрос.Выполнить();
		
		НакопленныеДанныеПоВычетамТекст = 
			"ВЫБРАТЬ
			|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанные
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПериодРегистрации, Месяц, ) КАК СведенияОбИсчисленииВычетовИПНОбороты
			|		ПО ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
			|			И ВТ_Периоды.Период > СведенияОбИсчисленииВычетовИПНОбороты.Период
			|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	0,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
			|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
			|		ИНАЧЕ 0
			|	КОНЕЦ
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
			|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
			|			И ВТ_Периоды.Физлицо = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ПО (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
			|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
			|ИЗ
			|	ВТ_НакопленныеДанные КАК ВТ_НакопленныеДанныеПоВычетам
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета";
			
		Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
		Запрос.Выполнить();

		ПрименяемыеВычетыТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВычета КАК ВидВычета,
			|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
			|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета КАК ПредоставлениеВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов КАК ВидВзносов,
			|	ВТ_НастройкиИРазмерыВычетов.ПределВычета КАК ПределВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления КАК ПериодПредоставления,
			|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета КАК МесяцВводаВычета,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП КАК РазмерМЗП,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета КАК РазмерВычета,
			|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета КАК СуммовойПределВычета,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
			|				ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_НастройкиИРазмерыВычетов.ПределВычета > 0
			|						ТОГДА ВЫБОР
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РазрешенныйВычетВТекущемПериоде,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ОстатокВычетаЗаПрошлыеМесяцы
			|ПОМЕСТИТЬ ВТ_ДанныеДляРасчетаВычетов
			|ИЗ
			|	ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
			|		ПО ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
			|			И ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
			|			И ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ВТ_ДанныеДляРасчетаВычетов.РазрешенныйВычетВТекущемПериоде + ВТ_ДанныеДляРасчетаВычетов.ОстатокВычетаЗаПрошлыеМесяцы) КАК РазрешенныеНалоговыеВычеты,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетОПВ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетВОСМС
			|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
			|ИЗ
			|	ВТ_ДанныеДляРасчетаВычетов КАК ВТ_ДанныеДляРасчетаВычетов
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо";
			
		Запрос.Текст = ПрименяемыеВычетыТекст;
		Запрос.Выполнить();
		
		ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычеты";
	
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		СуммаДоходаОборот
    	//		СуммаВычетаОборот
     	//		ОблагаемыйДоходЗаМесяц
    	//		ПрочиеДоходы
	   	//
    	//	Описание:
    	// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
    			
    	// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    	// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    	// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем. 
    	// Т.к. расчет "от обратного" поддерживается только при учетной политикой с ОтражениемПоПериодуРегистрации,
    	// то в регистрах Период, ПериодРегистрации и МесяцНалоговогоПериода всегда совпадают, поэтому 
    	// устанавливаем отборы по Периоду, т.к. по нему система автоматически создает индекс.
    	ДоходыТекст = 
	    	"ВЫБРАТЬ
	    	|	ИПНОбороты.Физлицо КАК ФизЛицо,
	    	|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	    	|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	    	|	СУММА(ВЫБОР
	    	|			КОГДА ИПНОбороты.НачисленоВТекущейОрганизации
	    	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
	    	|			ИНАЧЕ 0
	    	|		КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
	    	|	СУММА(ИПНОбороты.ПрочиеДоходы) КАК ПрочиеДоходы
	    	|
	    	|ПОМЕСТИТЬ ВТ_ДоходыРасчетаОтОбратного
	    	|ИЗ
	    	|	(ВЫБРАТЬ
	    	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	    	|		ВЫБОР 
	    	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	    	|				ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) 
	    	|			ИНАЧЕ 0 
	    	|		КОНЕЦ КАК СуммаДоходаОборот,
	    	|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
	    	|		СУММА(ВЫБОР
	    	|				КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
			|					И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	    	|					ТОГДА ИПНСведенияОДоходах.СуммаДохода - ИПНСведенияОДоходах.СуммаВычета
	    	|				ИНАЧЕ 0
	    	|			КОНЕЦ) КАК ПрочиеДоходы,
	    	|		ВЫБОР
	    	|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	    	|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
	    	|				ТОГДА ЛОЖЬ
	    	|			ИНАЧЕ ИСТИНА
	    	|		КОНЕЦ КАК НачисленоВТекущейОрганизации
	    	|	ИЗ
	    	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	    	|
	    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|			ПО ИПНСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
	    	|	
	    	|	ГДЕ
	    	|		ИПНСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	    	|		И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	    	|		И ИПНСведенияОДоходах.Регистратор <> &парамРегистратор
	    	|		И НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
	    	|		И ИПНСведенияОДоходах.Активность
	    	|	
	    	|	СГРУППИРОВАТЬ ПО
	    	|		ИПНСведенияОДоходах.ФизЛицо,
	    	|		ИПНСведенияОДоходах.СпособНалогообложения,
	    	|		ИПНСведенияОДоходах.Регистратор) КАК ИПНОбороты
	    	|СГРУППИРОВАТЬ ПО
    		|	ИПНОбороты.Физлицо";
			
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыРасчетаОтОбратного";
    			
    			
    	БазаДляИсчисленияИПНТекст = "
	    	|ВЫБРАТЬ
	    	|	СписокФизЛиц.ФизЛицо,
	    	|	ЕСТЬNULL(Доходы.СуммаДоходаОборот, 0) - ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0) КАК ОблагаемыйДоход,
	    	|	ЕСТЬNULL(Доходы.ПрочиеДоходы, 0) КАК ПрочиеДоходы,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС
	    	|
	    	|ПОМЕСТИТЬ ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного
	    	|ИЗ
	    	|	" + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|
	    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК Доходы
	    	|		ПО СписокФизЛиц.ФизЛицо = Доходы.ФизЛицо
	    	|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
			|		ПО СписокФизЛиц.ФизЛицо = ПрименяемыеВычеты.ФизическоеЛицо
			|
	    	|ИНДЕКСИРОВАТЬ ПО
	    	|	СписокФизЛиц.ФизЛицо
	    	|";
    	
    	Запрос.Текст = БазаДляИсчисленияИПНТекст;
    	Запрос.Выполнить();
    	БазаДляИсчисленияИПНТекст = "ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + БазаДляИсчисленияИПНТекст;

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
	    	|ЛЕВОЕ СОЕДИНЕНИЕ " + БазаДляИсчисленияИПНТекст + " КАК РасчетОтОбратногоДанныеИПН
	    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
	    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
	    	|";

		КонецЕсли;
#КонецОбласти		
            
#Область КомпенсироватьОПВ
	Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    			
    	СписокГруппИнвалидности = Новый СписокЗначений;
    	СписокГруппИнвалидности.Добавить("I");
    	СписокГруппИнвалидности.Добавить("II");
    			
    	Запрос.УстановитьПараметр("СписокГруппИнвалидности",  СписокГруппИнвалидности);
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
    	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|	СУММА(ВЫБОР
		|			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаДляИсчисленияОПВ,
    	|	СУММА(ВЫБОР
    	|			КОГДА ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|				И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
    	|			ИНАЧЕ 0
    	|		КОНЕЦ) КАК ПрочиеДоходы
    	|
    	|ПОМЕСТИТЬ ВТ_ДоходыОПВРасчетаОтОбратного
    	|ИЗ
    	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ОПВСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|ГДЕ
    	|	ОПВСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
    	|	И ОПВСведенияОДоходах.Налогоплательщик = &Налогоплательщик
    	|	И ОПВСведенияОДоходах.Активность
    	|	
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо";
    	
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыОПВРасчетаОтОбратного";

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц. Поэтому запроса к ОПВРасчетыСФондами вообще не требуется.

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказатели.РазмерМЗП * 75 КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НачалоГода) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", 0);
    	КонецЕсли;

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаБезПраваНаПенсиюТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
    			
    	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
    	Запрос.УстановитьПараметр("ФизЛицаБезПраваНаПенсию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаПенсионеры
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц достигших пенсионный возраст
    	ФизлицаПенсионерыТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОПенсионномОбеспеченииФизЛиц
    	|
    	|ГДЕ
    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
    		
    	Запрос.Текст = ФизлицаПенсионерыТекст;
    	Запрос.УстановитьПараметр("ФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	// ФизлицаИнвалидыБессрочно
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыБессрочноТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
    	|	И СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&СписокГруппИнвалидности)
    	|	И СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    	|";
    		
    	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
    	Запрос.УстановитьПараметр("ФизЛицаИнвалидыБессрочно", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК РасчетОтОбратногоДанныеОПВ
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеОПВ.ФизЛицо
    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    	|";

   КонецЕсли;
   
 #КонецОбласти  
 
#Область КомпенсироватьУдержания
   Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
           
    	// для списка погашамых удержаний определим общую сумму
    	Запрос.УстановитьПараметр("СпособыРасчетаФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());

    	// ПлановыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидРасчета
    	//		ВидСтроки
    	//		Размер
    	//	Описание:
    	// Выбирает плановые и фактические удержания за период регистрации для физлиц, по которым производится расчет "от обратного".
    	// Фактические удержания берем только те, что введены как разовые, чтобы не задублировать плановые, если уже создан и проведен
    	// документ "Расчет ИПН, ОПВ и удержаний" и заново пересчитывают "от обратного"
    		
    	ПлановыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.Период < &ПериодРегистрации ТОГДА &ПериодРегистрации
    	|		ИНАЧЕ ПлановыеУдержания.Период
    	|	КОНЕЦ КАК ДатаНачала,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
    	|				И ПлановыеУдержания.ПериодЗавершения <= &КонецПериодаРегистрации
    	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
    	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации))
    	|	КОНЕЦ КАК ДатаОкончания
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ПлановыеУдержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
    	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
    	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
    	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
    	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
    	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
    	|			И СледующиеПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|
    	|ГДЕ
    	|	ПлановыеУдержания.Организация = &ГоловнаяОрганизация
    	|	И ПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|	И ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
    	|				И ПлановыеУдержания.ПериодЗавершения < &ПериодРегистрации ТОГДА ПлановыеУдержания.ДействиеЗавершения
    	|		ИНАЧЕ ПлановыеУдержания.Действие
    	|	  КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
    	|	И ПлановыеУдержания.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|	ПлановыеУдержания.Период,
    	|	ПлановыеУдержания.ПериодЗавершения
    	|
    	|ИМЕЮЩИЕ
    	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации)) >= &ПериодРегистрации
    	|";
    	Запрос.Текст = ПлановыеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеУдержанияТекст = "ВТ_ПлановыеУдержанияРасчетаОтОбратного";
       
    	// В качестве фактических берем только те, что зарегистрированы как 
    	// разовые, т.к. все остальные будут взяты из плановых
    	ПлановыеИФактическиеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
    	|	Удержания.ВидСтроки,
    	|	СУММА(Удержания.Результат) КАК Результат,
    	|	СУММА(Удержания.Размер) КАК Размер
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|			ПлановыеУдержания.ФизЛицо,
    	|			ПлановыеУдержания.ВидРасчета,
    	|			""ПлановыеУдержания"" КАК ВидСтроки,
    	|			0 КАК Результат,
    	|			ПлановыеУдержания.Размер
    	|		ИЗ
    	|			" + ПлановыеУдержанияТекст + " КАК ПлановыеУдержания
    	|
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|	
    	|	ВЫБРАТЬ
    	|		Удержания.ФизЛицо,
    	|		Удержания.ВидРасчета,
    	|		""ФактическиеУдержания"" КАК ВидСтроки,
    	|		Удержания.Результат,
    	|		Удержания.Размер
    	|	ИЗ
    	|		Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
    	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
    	|			ПО Удержания.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация		
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО Удержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ГДЕ
    	|		Удержания.Ссылка.Проведен
    	|		И ВЫБОР
    	|			КОГДА Удержания.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    	|				ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
    	|				ТОГДА Удержания.Ссылка.Организация
    	|			ИНАЧЕ Удержания.Ссылка.Организация.ГоловнаяОрганизация
    	|		КОНЕЦ = &ГоловнаяОрганизация 
    	|		И Удержания.Ссылка.ПериодРегистрации = &ПериодРегистрации
    	|		И Удержания.Результат <> 0
    	|	) КАК Удержания
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета,
    	|	Удержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Удержания.ФизЛицо
    	|";
    	Запрос.Текст = ПлановыеИФактическиеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеИФактическиеУдержанияТекст = "ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного";
           		
    	// КомпенсируемыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидУдержания
    	//		Результат
    	//		Размер
    	//	Описание:
    	// Рассчитывает результат по каждому компенсируемому виду удержаний 
    	КомпенсируемыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета КАК ВидРасчетаОтОбратного,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета КАК ВидУдержания,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки,
    	|
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ФактическиеУдержания""
    	|					ТОГДА ПлановыеИФактическиеУдержания.Результат
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета В (&СпособыРасчетаФиксированнойСуммой)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) 
    	|	+
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) / 100 * 
    	|	СУММА(ЕСТЬNULL(ОсновныеИДополнительныеНачисления.Результат, 0)) КАК СуммаКомпенсируемыхУдержаний,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|
    	|ПОМЕСТИТЬ ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	" + ИмяИсточника + " КАК Основной
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПлановыеИФактическиеУдержанияТекст + " КАК ПлановыеИФактическиеУдержания
    	|		ПО Основной.ФизЛицо = ПлановыеИФактическиеУдержания.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
    	|		ПО ПлановыеИФактическиеУдержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
    	|		   И ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|		   И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    	|		ПО ПлановыеИФактическиеУдержания.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо
    	|		   И БазовыеВидыРасчета.ВидРасчета = ОсновныеИДополнительныеНачисления.ВидРасчета
    	|
    	|ГДЕ
    	|	" + ВнешнееУсловие + "
    	|	И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета
    	|";
    	Запрос.Текст = КомпенсируемыеУдержанияТекст;
    	Запрос.Выполнить();
    	КомпенсируемыеУдержанияТекст = "ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного";
           		
    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    	|						КомпенсируемыеУдержания.НомерСтроки,
    	|						СУММА(КомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний) КАК СуммаКомпенсируемыхУдержаний,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|					ИЗ
    	|						" + КомпенсируемыеУдержанияТекст + " КАК КомпенсируемыеУдержания
    	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка КАК ВидРасчетаОтОбратного,
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|												ИЗ
    	|													ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    	|							ПО КомпенсируемыеУдержания.ВидРасчетаОтОбратного = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчетаОтОбратного 
    	|							   И КомпенсируемыеУдержания.ВидУдержания = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|					СГРУППИРОВАТЬ ПО 
    	|						КомпенсируемыеУдержания.НомерСтроки
    	|					) КАК РасчетОтОбратногоКомпенсируемыеУдержания
    	|	ПО Основной.НомерСтроки = РасчетОтОбратногоКомпенсируемыеУдержания.НомерСтроки
    	|";
    КонецЕсли;
	
#КонецОбласти	
	

#Область ПрочиеНачисления	
    // Разделим прочие начисления на включаемые внутрь расчета "от обратного" и начисляемые "сверху"
    РасчетОтОбратногоПрочиеНачисленияТекст = "
    |ВЫБРАТЬ
    |	Основной.НомерСтроки,
    |	СУММА(ОсновныеИДополнительныеНачисления.СуммаНачислений) КАК ОбщаяСуммаНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL) 
    |				ТОГДА ОсновныеИДополнительныеНачисления.СуммаНачислений
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК СуммаВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |				ТОГДА ОсновныеИДополнительныеНачисления.ДополнительныеДанные
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ДополнительныеДанные
    |
    |ПОМЕСТИТЬ ВТ_ПрочиеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    |		ПО Основной.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо 
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |							Ссылка КАК Ссылка,
    |							ВидРасчета КАК ВидРасчета
    |				  	  ИЗ
    |							ПланВидовРасчета." + ИмяПВР + ".ВключаемыеВРасчетОтОбратногоВидыНачислений 
    |
    |					  ОБЪЕДИНИТЬ
    |
    |					  // чтобы учитывать предоставляемые вычеты по ИПН только один раз в месяце
    |					  // даже если были несколько строк расчетов 'от обратного' в разные моменты в месяце,
    |					  // включаем прочие виды 'от обратного' в качестве включаемых для данного
    |					  ВЫБРАТЬ
    |							Основной.ВидРасчета КАК Ссылка,
    |							ПВР.Ссылка КАК ВидРасчета
    |					  ИЗ
    |							" + ИмяИсточника + " КАК Основной
    |							ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |								ПО ПВР.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |					  ГДЕ
    |							" + ВнешнееУсловие + " 
    |							И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |							И Основной.ВидРасчета.ЗачетОтработанногоВремени) КАК ВключаемыеВРасчетОтОбратногоВидыНачислений
    |		ПО Основной.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.Ссылка
    |			   И ОсновныеИДополнительныеНачисления.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета
    |ГДЕ
    |	" + ВнешнееУсловие + "
    |	И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |
    |СГРУППИРОВАТЬ ПО
    |	Основной.НомерСтроки
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Основной.НомерСтроки";
    Запрос.Текст = РасчетОтОбратногоПрочиеНачисленияТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоПрочиеНачисленияТекст = "ВТ_ПрочиеНачисленияРасчетаОтОбратного";

#КонецОбласти

#Область ДанныеТекущегоРегистратора
    // определим облагаемые ИПН и ОПВ доходы, начисленные текущий регистратором,
    // т.к. их еще нет в ИПНСведенияОДоходах и ОПВСведенияОДоходах
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "
    |ВЫБРАТЬ
    |	Начисления.ФизЛицо,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |	  	КОНЕЦ) КАК ОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход
    |
    |ПОМЕСТИТЬ ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		Основной.ФизЛицо,
    |		Основной.ВидРасчета,
    |		Основной.Результат
    |	ИЗ
    |		" + ИмяИсточника + " КАК Основной
    |
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |			ПО Основной.ФизЛицо = СписокФизЛиц.ФизЛицо
    |	ГДЕ
    |		Основной.Ссылка = &парамРегистратор
    |		И Основной.ВидРасчета В (&УжеРассчитанныеВидыРасчета)
    |	) КАК Начисления
    |
    |СГРУППИРОВАТЬ ПО
    |	Начисления.ФизЛицо
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Начисления.ФизЛицо";
    Запрос.Текст = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного";
   
   
 #КонецОбласти
 
    // общие для любого вида компенсируемых удержаний данные
    РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодРегистрации, Организация = &ОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
    |	ПО ИСТИНА
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоПрочиеНачисленияТекст + " КАК РасчетОтОбратногоПрочиеНачисления
    |	ПО Основной.НомерСтроки = РасчетОтОбратногоПрочиеНачисления.НомерСтроки
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст + " КАК РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора
    |	ПО Основной.ФизЛицо = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ФизЛицо
    |	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |
    |// определим компенсируемые удержания для каждого вида расчета от обратного
    |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |		КомпенсируемыеУдержания.Ссылка КАК ВидРасчета,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьИПН,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьОПВ,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета НЕ В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьУдержания
    |	ИЗ
    |		ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеУдержания
    |	ГДЕ
    |		КомпенсируемыеУдержания.Ссылка В (&ВидыРасчетаОтОбратного)
    |	СГРУППИРОВАТЬ ПО
    |		КомпенсируемыеУдержания.Ссылка) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    |ПО Основной.ВидРасчета = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    |";
           	
    
    СтруктураТекстЗапроса = Новый Структура("РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст", 
    										 РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст);
    
    Возврат СтруктураТекстЗапроса;
	
КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АВТОМАТИЗАЦИИ РАСЧЕТА НАЛОГОВ, ВЗНОСОВ, ОТЧИСЛЕНИЙ

// Выполняет распределение налогов, взносов и удержаний по структурным единицам и подразделениям организаций
//
// Параметры:
//		ТаблицаРаспределения - результирующая таблица
// 		РезультатЗапроса - результат запроса с данными распределения
//		КолонкиДляРаспределения - массив имен распределяемых полей
//		КолонкаДляПоиска - имя ключевого поля для писка строки
//		КолонкаКоэффициентов - имя колонки для вычисления коэффициентов распределения (с абсолютными значениями)
//
// Возвращаемое значение:
//		Нет
//
Процедура РаспределитьНалогиВзносыУдержанияПоСтруктурнымЕдиницам(ТаблицаРаспределения, РезультатЗапроса, КолонкиДляРаспределения, КолонкаДляПоиска, КолонкаКоэффициентов) Экспорт
	
	ВыборкаПоГруппе = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, КолонкаДляПоиска);
	
	Пока ВыборкаПоГруппе.Следующий() Цикл
		ДанныеРаспределения = ВыборкаПоГруппе.Выбрать();
		
		Если ДанныеРаспределения.Количество() > 1 Тогда
			
			ПорядокОкругления = ДанныеРаспределения.ПорядокОкругления;
			МетодОкругления = ДанныеРаспределения.МетодОкругления;
			
			МассивКоэффициентов = Новый Массив;
			Пока ДанныеРаспределения.Следующий() Цикл
				МассивКоэффициентов.Добавить(ДанныеРаспределения[КолонкаКоэффициентов]);
			КонецЦикла;
			КолонкиДляРаспределенияСтрока = "";
			Для Каждого ИмяКолонки Из КолонкиДляРаспределения Цикл 
				КолонкиДляРаспределенияСтрока = КолонкиДляРаспределенияСтрока + ?(КолонкиДляРаспределенияСтрока <> "", ", ", "") + ИмяКолонки;				
			КонецЦикла;
			
			Для Каждого ИмяКолонки Из КолонкиДляРаспределения Цикл 
				
				МассивРезультатов = ОбщегоНазначенияБККлиентСервер.РаспределитьПропорционально(ВыборкаПоГруппе[ИмяКолонки], МассивКоэффициентов, 2);
				ДанныеРаспределения.Сбросить();
				МассивСозданныхСтрок = Новый Массив;
				Для Инд = 0 По МассивКоэффициентов.Количество()-1 Цикл
					ДанныеРаспределения.Следующий();
					НоваяСтрока = ТаблицаРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаспределения, ,КолонкиДляРаспределенияСтрока);
					НоваяСтрока[ИмяКолонки] = ?(МассивРезультатов <> Неопределено, МассивРезультатов[Инд], 0);
					МассивСозданныхСтрок.Добавить(НоваяСтрока);
				КонецЦикла;
				
				// Округлим результаты, остаток относим на последнюю строку
				Если МассивСозданныхСтрок.Количество() > 1 И ПорядокОкругления <> NULL Тогда
					Остаток = ВыборкаПоГруппе[ИмяКолонки];
					Для Инд = 0 По МассивСозданныхСтрок.Количество() - 1 Цикл
						РаспределеннаяСтрока = МассивСозданныхСтрок.Получить(Инд);
						Если Инд = МассивСозданныхСтрок.Количество() - 1 Тогда
							РаспределеннаяСтрока[ИмяКолонки] = Остаток;
						Иначе
							РаспределеннаяСтрока[ИмяКолонки] = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(РаспределеннаяСтрока[ИмяКолонки], ПорядокОкругления, МетодОкругления);
							Остаток = Остаток - РаспределеннаяСтрока[ИмяКолонки];
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

			КонецЦикла;
		Иначе
			ДанныеРаспределения.Следующий();
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаспределения);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Получить данные для расчета ИПН
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Таблица значений
//
Функция ПолучитьДанныеДляРасчетаИПН(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,	Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИПНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ИПНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("ФизЛицо", 			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаРезультата.Колонки.Добавить("Период", 			ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаРезультата.Колонки.Добавить("НалогИсчисленный", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультата.Колонки.Добавить("ПримененныйВычет", 	ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаРезультата.Колонки.Добавить("ПримененнаяЛьгота", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если ПериодРегистрации >= '20200101' Тогда
		// расчет по новой логике предоставления вычетов
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2020(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		// расчет по новой логике предоставления вычетов
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2019(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// расчет по новой логике предоставления вычетов
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2018(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20170701' Тогда
		// расчет только по фиксированной ставке с вычетом по взносам ОСМС
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2017(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПервыйМесяцНалоговогоПериода >= '20090101' Тогда
		// расчет только по фиксированной ставке
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2009(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПервыйМесяцНалоговогоПериода >= '20070101'Тогда
		// расчет только по фиксированной ставке
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНПосле2007(	ПервыйМесяцНалоговогоПериода, 
																	ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации, 
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса,
																	ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПоследнийМесяцНалоговогоПериода < '20070101' Тогда
		// расчет только по шкале
		ТаблицаРезультата = ПолучитьДанныеДляРасчетаИПНДо2007(	ПервыйМесяцНалоговогоПериода, 
																ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса,
																ЭтоРасчетПервойПоловиныМесяца);
	Иначе
		// оба способа расчета
		ВрмТаблица = ПолучитьДанныеДляРасчетаИПНДо2007(	ПервыйМесяцНалоговогоПериода, 
														ПоследнийМесяцНалоговогоПериода, 
														ПериодРегистрации, 
														Налогоплательщик, 
														ГоловнаяОрганизация,
														Регистратор, 
														СписокФизЛицТекст, 
														ДополнительныеПараметрыЗапроса,
														ЭтоРасчетПервойПоловиныМесяца);
		Для Каждого СтрокаТЗ Из ВрмТаблица Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		
		ВрмТаблица = ПолучитьДанныеДляРасчетаИПНПосле2007(	ПервыйМесяцНалоговогоПериода, 
															ПоследнийМесяцНалоговогоПериода, 
															ПериодРегистрации, 
															Налогоплательщик, 
															ГоловнаяОрганизация,
															Регистратор, 
															СписокФизЛицТекст, 
															ДополнительныеПараметрыЗапроса,
															ЭтоРасчетПервойПоловиныМесяца);
		Для Каждого СтрокаТЗ Из ВрмТаблица Цикл
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЦикла;
		ТаблицаРезультата.Свернуть("ФизЛицо, Период", "НалогИсчисленный, ПримененныйВычет, ПримененнаяЛьгота");
		ТаблицаРезультата.Сортировать("ФизЛицо, Период");
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
									
КонецФункции // ПолучитьДанныеДляРасчетаИПН

// Получить данные для расчета ИПН по прогрессивной шкале
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНДо2007(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
											Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамНалогоплательщик",			   Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",		   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		   НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				   Регистратор);
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  				   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамИнвалид",				   	   Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамТретьяГруппа",				   "III");
	Запрос.УстановитьПараметр("парамВидПлатежа", 				   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПринят", 		   			   Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамУволен", 		   			   Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоИсчислениюИПН",			   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", Мин(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20061231235959'));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",				   Мин(НачалоГода(ПервыйМесяцНалоговогоПериода), '20060101'));
	Запрос.УстановитьПараметр("парамКонецГода",   				   Мин(КонецГода(ПоследнийМесяцНалоговогоПериода), '20061231235959'));
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",		   Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамДатаНачалаРасчетаПоФиксСтавке",	'20070101');
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 		   КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период КАК Период,
	|	Периоды.ФизЛицо КАК Физлицо
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
	|	ИЗ
	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|	ГДЕ
	|		ИПНСведенияОДоходах.ПериодРегистрации >= &парамНачалоГода И
	|		ИПНСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
	|		ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
	|		ИПНСведенияОДоходах.Период < &парамДатаНачалаРасчетаПоФиксСтавке И
	|		ИПНСведенияОДоходах.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СведенияПредыдущегоМеста.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|		СведенияПредыдущегоМеста.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СведенияПредыдущегоМеста.ФизЛицо
	|
	|	ГДЕ
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		СведенияПредыдущегоМеста.Налогоплательщик = &парамНалогоплательщик И
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода < &парамДатаНачалаРасчетаПоФиксСтавке) КАК Периоды";

	Запрос.Текст = ПериодыТекст;

	// Составим текст запроса для вычисления всех месяцев периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Периоды.Период
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|
	|УПОРЯДОЧИТЬ ПО
	|	Периоды.Период
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	ДатыПериодовГодаТекст = "";
	
	Пока Выборка.Следующий() Цикл
		Если ДатыПериодовГодаТекст <> "" Тогда
			ДатыПериодовГодаТекст = ДатыПериодовГодаТекст + ", ";
		КонецЕсли;
					
		ДатыПериодовГодаТекст = ДатыПериодовГодаТекст + " ДАТАВРЕМЯ(" + Формат(Выборка.Период, "ДФ=гггг,ММ,дд") + ")";
	КонецЦикла;
	
	Если ДатыПериодовГодаТекст = "" Тогда
		ДатыПериодовГодаТекст = "ДАТАВРЕМЯ(" + Формат(Мин(ПериодРегистрации, '20061201'), "ДФ=гггг,ММ,дд") + ")";
	КонецЕсли;
	
	ДатыПериодовГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата В (" + ДатыПериодовГодаТекст + ")
	|";
	
	Запрос.Текст = ДатыПериодовГодаТекст;
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ФизлицаНеРезидентыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода, ФизЛицо В (" + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК)";

	Запрос.Текст = ФизлицаНеРезидентыТекст;
	Запрос.УстановитьПараметр("парамФизлицаНеРезиденты", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

	// РасчетныеПоказатели
	//	Поля:
	//		Период
	//		РазмерМРП
	//		РазмерМЗП
	//
	//	Описание:
	// Выбирает размер месячного расчетного показателя по периодам
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		(" + ДатыПериодовГодаТекст + ") КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;

	// ПрименяемыеЛьготы
	//	Поля:
	//		Физлицо
	//		Период
	//		ПрименяетсяЛьготаУчастникаВОВ
	//		ПрименяетсяЛьготаПоИнвалидности
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
	ПрименяемыеЛьготыТекст = 
	"ВЫБРАТЬ
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
	|
	|	ВЫБОР 
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|	КОНЕЦ КАК ЛьготаПоДоходу
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ВЫБОР 
	|					КОГДА (ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности) = &парамИнвалид 
	|							И (ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности) = &парамТретьяГруппа 
	|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) 
	|					ИНАЧЕ 99999999 
	|				  КОНЕЦ 
	|		КОНЕЦ КАК ЛьготаПоИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ 99999999 
	|		КОНЕЦ КАК ЛьготаУчастникаВОВ
	|		
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
	|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
	|			Периоды.Физлицо КАК Физлицо,
	|			Периоды.Период КАК Период
	|		ИЗ
	|			(" + ПериодыТекст + ") КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
	|					И ЛьготыФизлицПоИнвалидности.Физлицо = Периоды.Физлицо
	|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
	|					И ЛьготыФизлицУчастниковВОВ.Физлицо = Периоды.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Физлицо,
	|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|			ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
	|				И ЛьготыФизлицПоИнвалидности.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|			ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
	|				И ЛьготыФизлицУчастниковВОВ.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + РасчетныеПоказателиТекст + ") КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
	|";
	
	Запрос.Текст = ПрименяемыеЛьготыТекст;
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		РегистрировалсяДоходЗаПериод
	//		СуммаДоходаВсего
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		СуммаПримененныйВычетОборот
	//		СуммаПримененнаяЛьготаОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	ИПНОбороты.Физлицо КАК ФизЛицо,
	|	ИПНОбороты.Период КАК Период,
	|	ВЫБОР КОГДА СУММА(ИПНОбороты.СуммаДоходаВсего)  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК РегистрировалсяДоходЗаПериод,
	|	СУММА(ИПНОбороты.СуммаДоходаВсего) КАК СуммаДоходаВсего,
	|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ИПНОбороты.ПримененныйВычетОборот) КАК ПримененныйВычетОборот,
	|	СУММА(ИПНОбороты.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ИПНСведенияОДоходах.СуммаДоходаОборот КАК СуммаДоходаВсего,
	|		ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом 
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
	|			ИНАЧЕ 0 
	|		КОНЕЦ КАК СуммаДоходаОборот,
	|		ИПНСведенияОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|		ИПНСведенияОДоходах.ПримененныйВычетОборот КАК ПримененныйВычетОборот,
	|		ИПНСведенияОДоходах.ПримененнаяЛьготаОборот КАК ПримененнаяЛьготаОборот
	|	ИЗ
	|		РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|							&парамНачалоГода,
	|							&парамКонецМесяцаНалоговогоПериода,
	|							МЕСЯЦ,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ПериодРегистрации <= &парамПериодРегистрации
	|							И ФизЛицо В (" + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|       СУММА(ИПНСведенияПредыдущегоМестаРаботы.Доход),
	|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.Доход - ИПНСведенияПредыдущегоМестаРаботы.ДоходНеОблагаемыйИПН),
	|		0,
	|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененныйВычет),
	|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота)
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода < &парамДатаНачалаРасчетаПоФиксСтавке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ИПНОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНОбороты.Физлицо,
	|	ИПНОбороты.Период";

	Запрос.Текст = ДоходыТекст;

	ТипЗначенияИПНТекст = "ЧИСЛО(10, 2)";
	
	// ДоходыЗаГод 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоходЗаГод
	//		ПримененныйВычетЗаГод
	//		ПримененнаяЛьготаЗаГод
	//		ОблагаемыйДоходЗаГодДляЛьготыУчастникаВОВ
	//		ОблагаемыйДоходЗаГодДляЛьготыПоИнвалидности
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год
	ДоходыЗаГодТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.Физлицо КАК ФизЛицо,
	|	СУММА(ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот) КАК ОблагаемыйДоходЗаГод,
	|	СУММА(ИПНОбороты.ПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
	|	СУММА(ИПНОбороты.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыйОблагаемыйДоходЗаГод,
	|	МАКСИМУМ(ПрименяемыеЛьготы.ЛьготаПоДоходу) КАК ЛьготаПоДоходу
	|		
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыТекст + ") КАК ИПНОбороты
	|		ПО Периоды.Период >= ИПНОбороты.Период 
	|			И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|			И Периоды.Физлицо = ИПНОбороты.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
	|		ПО ИПНОбороты.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|			И ИПНОбороты.Период = ПрименяемыеЛьготы.Период
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо";

	Запрос.Текст = ДоходыЗаГодТекст;

	// ДоходыЗаКвартал
	//	Поля:
	//		ФизЛицо
	//		Период
	//		РегистрировалсяДоходЗаПериод
	//		ПолученныйДоходЗаКвартал
	//		РазмерМЗПЗаКвартал
	//
	//	Описание:
	//	Выбирает суммы среднеквартального дохода
	ДоходыЗаКварталТекст = "
	|ВЫБРАТЬ
	|	ИПНОбороты.Период КАК Период,
	|	ИПНОбороты.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНОбороты.РегистрировалсяДоходЗаПериод) КАК РегистрировалсяДоходЗаПериод,
	|	СУММА(ИПНОбороты.ПолученныйДоходЗаКвартал) КАК ПолученныйДоходЗаКвартал,
	|	СУММА(РасчетныеПоказатели.РазмерМЗП) КАК РазмерМЗПЗаКвартал,
	|	МАКСИМУМ(РасчетныеПоказатели.РазмерМЗП) КАК РазмерМЗП
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		Периоды.Физлицо КАК ФизЛицо,
	|		ИПНОбороты.РегистрировалсяДоходЗаПериод КАК РегистрировалсяДоходЗаПериод,
	|		ИПНОбороты.СуммаДоходаВсего КАК ПолученныйДоходЗаКвартал
	|	ИЗ
	|		(" + ПериодыТекст + ") КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыТекст + ") КАК ИПНОбороты
	|			ПО ИПНОбороты.Период <= Периоды.Период 
	|				И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, КВАРТАЛ) 
	|				И Периоды.Физлицо = ИПНОбороты.Физлицо) КАК ИПНОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РасчетныеПоказателиТекст + ") КАК РасчетныеПоказатели
	|		ПО ИПНОбороты.Период = РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНОбороты.Период,
	|	ИПНОбороты.ФизЛицо";
	
	Запрос.Текст = ДоходыЗаКварталТекст;
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	ИПНРасчеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИПНРасчеты.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчеты.ИсчисленныйНалог) КАК ИсчисленныйНалог
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|		СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
	|	ИЗ
	|		РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|	ГДЕ
	|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|		ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик И
	|		" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор И", "") + "
	|		ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации И
	|		ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход И 
	|		ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки И
	|		ИПНРасчетыСБюджетом.Активность
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИПНРасчетыСБюджетом.МесяцНалоговогоПериода,
	|		ИПНРасчетыСБюджетом.ФизЛицо
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ИПН)
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода < &парамДатаНачалаРасчетаПоФиксСтавке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ИПНРасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНРасчеты.МесяцНалоговогоПериода,
	|	ИПНРасчеты.ФизЛицо";

    Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	
	// ИПНРасчетыСБюджетомЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныйНалогЗаГод	
	//
	//	Описание:
	//	Выбирает исчисленные налоги нарастающим итогом за год
	ИПНРасчетыСБюджетомЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.ИсчисленныйНалог) КАК ИсчисленныйНалогЗаГод
	|ИЗ
	|	(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомТекст + ") КАК ИПНРасчетыСБюджетом
	|		ПО Периоды.Период >= ИПНРасчетыСБюджетом.МесяцНалоговогоПериода 
	|			И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	ИПНРасчетыСБюджетом.ФизЛицо";
	
	Запрос.Текст = ИПНРасчетыСБюджетомЗаГодТекст;
	
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОПВРасчеты.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчеты.ИсчисленныеВзносы) КАК ИсчисленныеВзносы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|		СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|	ИЗ
	|		РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|	ГДЕ
	|		ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|		ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|		ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|		ОПВРасчетыСФондами.ВидДвижения = &парамПриход И
	|		ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
	|		ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|		ОПВРасчетыСФондами.Активность
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|		ОПВРасчетыСФондами.ФизЛицо
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|		СУММА(ИПНСведенияПредыдущегоМестаРаботы.ОПВ)
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик И
	|		ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода < &парамДатаНачалаРасчетаПоФиксСтавке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК ОПВРасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчеты.МесяцНалоговогоПериода,
	|	ОПВРасчеты.ФизЛицо";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;

	// ОПВРасчетыСФондамиЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносыЗаГод
	//		ИсчисленныеВзносыЗаГодДляЛьготыУчастникаВОВ
	//		ИсчисленныеВзносыЗаГодДляЛьготыПоИнвалидности
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы нарастающим итогом за год
	ОПВРасчетыСФондамиЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.ИсчисленныеВзносы) КАК ИсчисленныеВзносыЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыеИсчисленныеВзносыЗаГод
	|	
	|ИЗ
	|	(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиТекст + ") КАК ОПВРасчетыСФондами
	|		ПО Периоды.Период >= ОПВРасчетыСФондами.МесяцНалоговогоПериода 
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
	|			ПО ОПВРасчетыСФондами.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|				И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ПрименяемыеЛьготы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	ОПВРасчетыСФондами.ФизЛицо";
	
	Запрос.Текст = ОПВРасчетыСФондамиЗаГодТекст;
	
	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
	//	заданной организации
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		("+ПериодыТекст+") КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период 
	|				И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза 
	|			И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
	|
	|ГДЕ
	|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик";
	
	Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
	
	// ОтработанноеВремя
	//	Поля:
	//		Физлицо,
	//		Период,
	//		ПредоставлятьВычет
	//
	// Описание:
	//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
	//	
	Если Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено Тогда
		// определяем по норме отработанноого времени, которая включается в зачет отработанного времени 
		// при предоставлении вычета
		ОтработанноеВремяТекст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.ПериодДействия КАК Период,
		|	ОтработанноеВремя.ФизЛицо КАК ФизЛицо,
		|	ВЫБОР
		|		КОГДА СУММА(ОтработанноеВремя.НормаДнейПоПятидневке) >= МАКСИМУМ(ДанныеНормыВремени.Норма) / 2
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПредоставлятьВычет
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|		ПО СписокФизЛиц.ФизЛицо = ОтработанноеВремя.ФизЛицо 
		|			И ОтработанноеВремя.Организация = &парамГоловнаяОрганизация
		|			И ОтработанноеВремя.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
		|			И ОтработанноеВремя.ВидРасчета.ЗачетОтработанногоВремениДляВычета
		|			И ОтработанноеВремя.ПериодДействия МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
		|			И ОтработанноеВремя.Активность
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период,
		|							СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Норма
		|						ИЗ
		|							РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|						ГДЕ
		|							ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
		|						СГРУППИРОВАТЬ ПО
		|							НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)) КАК ДанныеНормыВремени
		|		ПО ОтработанноеВремя.ПериодДействия = ДанныеНормыВремени.Период
		|
		|СГРУППИРОВАТЬ ПО 
		|	ОтработанноеВремя.ПериодДействия,
		|	ОтработанноеВремя.ФизЛицо";
	Иначе
		// определяем по датам приема и увольнения
		ОтработанноеВремяТекст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.Период,
		|	ОтработанноеВремя.ФизЛицо,
		|	ВЫБОР
		|		КОГДА СУММА(ВЫБОР 
		|						КОГДА ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.ДатаС И ОтработанноеВремя.ДатаПо 
		|							ТОГДА ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ 
		|						ИНАЧЕ 0 
		|			  		КОНЕЦ) >= СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) / 2
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПредоставлятьВычет
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтработанноеВремя.Период,
		|		ОтработанноеВремя.ФизЛицо,
		|
		|		ВЫБОР 
		|			// вообще не был принят в штат - не считаем отработанное время
		|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
		|				ТОГДА ОтработанноеВремя.Период
		|			// принят в штат в текущем месяце - считаем с даты приема
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
		|				ТОГДА ОтработанноеВремя.ДатаПриема
		|			// сюда попасть не должны - не считаем 
		|			ИНАЧЕ
		|				ДАТАВРЕМЯ(3999, 12, 31)
		|		КОНЕЦ КАК ДатаС,
		|
		|		ВЫБОР 
		|			// повторный прием в ту же организацию и еще не уволен 
		|			// или еще не уволен после первого приема - считаем до конца месяца
		|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
		|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
		|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|			// уволен до начала месяца - не считаем
		|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|			// уволен в текущем месяце - считаем до даты увольнения
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
		|               ТОГДА ОтработанноеВремя.ДатаУвольнения
		|			// еще не уволен - считаем до конца месяца
		|			ИНАЧЕ
		|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаПо
		|
		|	ИЗ			
		|		(ВЫБРАТЬ
		|			Периоды.Период КАК Период,
		|			Периоды.ФизЛицо КАК ФизЛицо,
		|			МАКСИМУМ(ВЫБОР 
		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПринят 
		|							ТОГДА РаботникиОрганизации.Период
		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|				 	 КОНЕЦ) КАК ДатаПриема,
		|			МАКСИМУМ(ВЫБОР 
		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
		|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|				 	 КОНЕЦ) КАК ДатаУвольнения
		|		ИЗ
		|			(" + ПериодыТекст + ") КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
		|			   	   И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|			   	   И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство 
		|			  	   И РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
		|				   И РаботникиОрганизации.ПричинаИзмененияСостояния В (&парамПринят, &парамУволен)
		|				   И РаботникиОрганизации.Активность
		|
		|		СГРУППИРОВАТЬ ПО 
		|			Периоды.Период,
		|			Периоды.ФизЛицо) КАК ОтработанноеВремя) КАК ОтработанноеВремя
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|			И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.Период И КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.Период,
		|	ОтработанноеВремя.ФизЛицо
		|";
	КонецЕсли;
	
	Запрос.Текст = ОтработанноеВремяТекст;
	
	// ПрименяемыеВычетыТекст
	//	Поля:
	//		Физлицо
	//		Период
	//		НалоговыйВычетЛичный
	//		НалоговыйВычетИждивенцев
	//		НалоговыйВычетПредыдущегоМестаРаботы
	//
	//	Описание:
	//	Выбирает по всем периодам года налоговын вычеты на которые имеет право физлицо
	ПрименяемыеВычетыТекст = 
	"ВЫБРАТЬ
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
	|	ВЫБОР 
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
	|				ИЛИ ПрименениеВычетов.Физлицо В (&парамФизЛицаНеРезиденты) 
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0 
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0)
	|	КОНЕЦ КАК НалоговыйВычетЛичный,
	|	ВЫБОР 
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
	|				ИЛИ ПрименениеВычетов.Физлицо В (&парамФизЛицаНеРезиденты) 
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ) 
	|			ТОГДА 0 
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) * ЕСТЬNULL(ВычетыФизлиц.КоличествоИждивенцев, 0)
	|	КОНЕЦ КАК НалоговыйВычетИждивенцев,
	|	ЕСТЬNULL(СведенияПредыдущегоМестаРаботы.ПримененныйВычет, 0) КАК НалоговыйВычетПредыдущегоМестаРаботы
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		(" + ПериодыТекст + ") КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период 
	|				И ВычетыФизлиц.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза 
	|			И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + РасчетныеПоказателиТекст + ") КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименениеВычетовВОрганизацииТекст + ") КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо 
	|				И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
	|		ПО СведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик 
	|				И СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
	|				И СведенияПредыдущегоМестаРаботы.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ОтработанноеВремяТекст + ") КАК ОтработанноеВремя
	|		ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
	|			И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо";

	Запрос.Текст = ПрименяемыеВычетыТекст;

	// ПрименяемыеВычетыЗаГод
	//	Поля:
	//		Физлицо
	//		Период
	//		ВычетЛичныйЗаГод
	//		ВычетИждивенцевЗаГод
	//		ВычетПредыдущегоМестаРаботыЗаГод
	//		НалоговыйВычетЗаГодДляЛьготыУчастникаВОВ
	//		НалоговыйВычетЗаГодДляЛьготыПоИнвалидности
	//
	//	Описание:
	//	Выбирает по всем периодам года применяемые налоговые вычеты нарастающим итогом за год
	//
 	ПрименяемыеВычетыЗаГодТекст = 
	"ВЫБРАТЬ
	|	ВычетыПоПериодам.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(ВычетыПоПериодам.НалоговыйВычетЛичный) + СУММА(ВычетыПоПериодам.НалоговыйВычетИждивенцев) + СУММА(ВычетыПоПериодам.НалоговыйВычетПредыдущегоМестаРаботы) КАК НалоговыйВычетЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный + ВычетыПоПериодам.НалоговыйВычетИждивенцев + ВычетыПоПериодам.НалоговыйВычетПредыдущегоМестаРаботы
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыйНалоговыйВычетЗаГод
	|
	|ИЗ
	|	(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыТекст + ") КАК ВычетыПоПериодам
	|		ПО ВычетыПоПериодам.Период <= Периоды.Период 
	|			И ВычетыПоПериодам.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеЛьготыТекст + ") КАК ПрименяемыеЛьготы
	|			ПО ВычетыПоПериодам.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|				И ВычетыПоПериодам.Период = ПрименяемыеЛьготы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыПоПериодам.Физлицо,
	|	Периоды.Период";

	Запрос.Текст = ПрименяемыеВычетыЗаГодТекст;
	
	// ПериодыНачалаНалоговогоГодаФизЛиц
	//	Поля:
	//		Физлицо
	//		Период
	//		МесяцНачалаНалоговогоГода
	//
	//	Описание:
	//	Получает по всем периодам месяц начала налогового года для физлиц
	ПериодыНачалаНалоговогоГодаФизЛицТекст = 
	"ВЫБРАТЬ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	МИНИМУМ(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода) КАК МесяцНачалаНалоговогоГода
	|
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода) КАК НачалоНалоговогоГода,
	|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД) КАК НачалоКалендарногоГода,
	|				СведенияПредыдущегоМестаРаботы.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
	|
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|					ПО Работники.Физлицо = СведенияПредыдущегоМестаРаботы.ФизЛицо
	|			ГДЕ
	|				СведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик 
	|				И СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|
	|			СГРУППИРОВАТЬ ПО
	|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД),
	|				СведенияПредыдущегоМестаРаботы.ФизЛицо
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК НачалоНалоговогоГода,
	|				&парамНачалоГода КАК НачалоКалендарногоГода,
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&парамНачалоГода,
	|						Организация = &парамГоловнаяОрганизация
	|						И Сотрудник.ФизЛицо В (" + СписокФизЛицТекст + ")) КАК РаботникиОрганизацийСрезПоследних
	|			ГДЕ
	|				РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &парамУволен
	|				И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				МИНИМУМ(РаботникиОрганизаций.Период) КАК НачалоНалоговогоГода,
	|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД) КАК НачалоКалендарногоГода,
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|					ПО Работники.Физлицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			ГДЕ
	|				РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|				И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|				И РаботникиОрганизаций.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|				И РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамПринят
	|				И РаботникиОрганизаций.Активность
	|
	|			СГРУППИРОВАТЬ ПО
	|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД),
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо
	|				
	|	) КАК ПериодыНачалаНалоговогоГода
	|		ПО Периоды.ФизЛицо = ПериодыНачалаНалоговогоГода.ФизЛицо
	|			И Периоды.Период МЕЖДУ ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода И КОНЕЦПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода, ГОД)
	|			 И Периоды.Период >= НАЧАЛОПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода, МЕСЯЦ)
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период
	|";

	Запрос.Текст = ПериодыНачалаНалоговогоГодаФизЛицТекст;

	ТипЗначенияКоэффициентаПересчетаТекст = "ЧИСЛО(10, 2)";
	
	// ПрименяемыйКоэффициентПересчета
	//	Поля:
	//		Физлицо
	//		Период
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
	ПрименяемыйКоэффициентПересчетаТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период,
	|	Периоды.ФизЛицо,
	|	ВЫБОР 
	|		КОГДА Периоды.МесяцНачалаНалоговогоГода ЕСТЬ NULL 
	|			ТОГДА 1 
	|		ИНАЧЕ ВЫБОР 
	|				КОГДА НЕ(РаботникиОрганизаций.Сотрудник ЕСТЬ NULL)
	|						И РаботникиОрганизаций.ПричинаИзмененияСостояния <> &парамУволен
	|					ТОГДА ВЫБОР 
	|							КОГДА Периоды.МесяцНачалаНалоговогоГода <= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) 
	|								ТОГДА 12 / МЕСЯЦ(Периоды.Период) 
	|							ИНАЧЕ (13 - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода)) / (МЕСЯЦ(Периоды.Период) - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода) + 1) 
	|						  КОНЕЦ 
	|				ИНАЧЕ 1 
	|			  КОНЕЦ 
	|	КОНЕЦ КАК КоэффициентПересчета,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
	|	РаботникиОрганизаций.Период КАК ДатаПоследнегоДвижения
	|ИЗ
	|	(" + ПериодыНачалаНалоговогоГодаФизЛицТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Периоды.Период,
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо,
	|				МАКСИМУМ(ВЫБОР
	|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
	|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|							ИНАЧЕ РаботникиОрганизаций.Период
	|						 КОНЕЦ) КАК ДатаПоследнегоДвижения
	|       	ИЗ 
	|				(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|						И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|						И ВЫБОР
	|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
	|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|							ИНАЧЕ РаботникиОрганизаций.Период
	|						  КОНЕЦ <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|						И РаботникиОрганизаций.Активность
	|
	|			СГРУППИРОВАТЬ ПО
	|				Периоды.Период,
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо) КАК ДатыПоследнихДвижений
	|		ПО Периоды.ФизЛицо = ДатыПоследнихДвижений.ФизЛицо
	|			И Периоды.Период = ДатыПоследнихДвижений.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			И РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|			И ДатыПоследнихДвижений.ДатаПоследнегоДвижения = ВЫБОР
	|																КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен
	|																	ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|																ИНАЧЕ РаботникиОрганизаций.Период
	|			 								 				 КОНЕЦ
	|			И РаботникиОрганизаций.Активность
	|";
	
	Запрос.Текст = ПрименяемыйКоэффициентПересчетаТекст;
	
	// облагаемый доход с начала года
	ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";
	
	// право на налоговый вычет за год
	ПолеНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод, 0)";
	
	// сумма ранее примененных налоговых вычетов
	ПолеРанееПримененныйНалоговыйВычет = "ЕСТЬNULL(ДоходыЗаГод.ПримененныйВычетЗаГод, 0)";
	
	// право на льготу за год
	ПолеПрименяемаяЛьготаЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0)";
	
	// сумма ранее примененной льготы
	ПолеРанееПримененнаяЛьгота = "ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаЗаГод, 0)";
	
	// сумма исчисленных пенсионных взносов за год
	ПолеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод, 0)";
	
	// облагаемая база по ИПН
	ПолеБазаДляИсчисленияИПН = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + " > 0
	|		ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + "
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// льготируемый облагаемый доход с начала года
	ПолеЛьготируемыйОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ЛьготируемыйОблагаемыйДоходЗаГод, 0)";

	// налоговый вычет за год, учитываемый при предоставлении льготы
	ПолеЛьготируемыйНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ЛьготируемыйНалоговыйВычетЗаГод, 0)";

	// сумма исчисленных пенсионных взносов за год, учитываемая при предоставлении льготы
	ПолеЛьготируемыеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ЛьготируемыеИсчисленныеВзносыЗаГод, 0)";
	
	// льготируемая облагаемая база по ИПН
	ПолеЛьготируемаяБазаДляИсчисленияИПН = 
	"ВЫБОР
	|	КОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " > 0
	|	ТОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + "
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// примененная льгота за год
	ПолеПримененнаяЛьгота = 
	"ВЫБОР
	|	КОГДА " + ПолеПрименяемаяЛьготаЗаГод + " > " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " 
	|		ТОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " 
	|	ИНАЧЕ ВЫБОР 
	|			КОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПН + " > 0 
	|				ТОГДА " + ПолеПрименяемаяЛьготаЗаГод + " 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ 
	|КОНЕЦ";
		
	// сумма ранее исчисленного налога
	ПолеРанееНалогИсчисленный = "ЕСТЬNULL(ИПНРасчетыСБюджетомЗаГод.ИсчисленныйНалогЗаГод, 0)";
	
	// коэффициент пересчета
	ПолеКоэффициентПересчета = "(ВЫРАЗИТЬ(ЕСТЬNULL(ПрименяемыйКоэффициентПересчета.КоэффициентПересчета, 1) КАК " + ТипЗначенияКоэффициентаПересчетаТекст + "))";
	
	// среднемесячный доход за квартал
	ПолеСреднемесячныйДоходЗаКвартал =
	"ВЫБОР
	|	КОГДА (ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод) ЕСТЬ NULL
	|	ТОГДА 0
	|	ИНАЧЕ ДоходыЗаКвартал.ПолученныйДоходЗаКвартал / ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод
	|КОНЕЦ";
	
	// среднемесячный размер минимальной заработной платы
	ПолеСреднемесячныйРазмерМЗПЗаКвартал =
	"ВЫБОР
	|	КОГДА (ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод) ЕСТЬ NULL
	|	ТОГДА 0
	|	ИНАЧЕ ДоходыЗаКвартал.РазмерМЗПЗаКвартал / ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод
	|КОНЕЦ";
	
	// облагаемая сумма 
	ПолеОблагаемаяСумма = 
	"(ВЫБОР
	|		КОГДА МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) > СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ)
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ) - МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота)
	|КОНЕЦ) * " + ПолеКоэффициентПересчета;
	
	// применение ставки "0"
	ПолеПрименятьНулевуюСтавку = 
	"ВЫБОР 
	|	КОГДА " + ПолеОблагаемаяСумма + " <= ДоходыЗаКвартал.РазмерМЗП * 12 И " + ПолеСреднемесячныйДоходЗаКвартал + " <= " + ПолеСреднемесячныйРазмерМЗПЗаКвартал + "
	|	ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// БазаДляИсчисленияИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//      ОблагаемаяСумма
	//      ПримененнаяЛьгота
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления ИПН с начала года для каждого месяца периода и примененную льготу 
	БазаДляИсчисленияИПНТекст = 
	"ВЫБРАТЬ 
	|	ДоходыЗаГод.Период,
	|	ДоходыЗаГод.ФизЛицо,
	|	" + ПолеБазаДляИсчисленияИПН + " КАК ОблагаемаяСумма,
	|	" + ПолеПримененнаяЛьгота + " КАК ПримененнаяЛьгота,
	|	" + ПолеНалоговыйВычетЗаГод + " КАК ПримененныйВычет
	|ИЗ
	|	(" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыеВычетыЗаГодТекст + ") КАК ПрименяемыеВычетыЗаГод
	|		ПО ДоходыЗаГод.Период = ПрименяемыеВычетыЗаГод.Период 
	|			И ДоходыЗаГод.ФизЛицо = ПрименяемыеВычетыЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ОПВРасчетыСФондамиЗаГодТекст + ") КАК ОПВРасчетыСФондамиЗаГод
	|		ПО ДоходыЗаГод.Период = ОПВРасчетыСФондамиЗаГод.Период 
	|			И ДоходыЗаГод.ФизЛицо = ОПВРасчетыСФондамиЗаГод.ФизЛицо
	|";

	Запрос.Текст = БазаДляИсчисленияИПНТекст;

	// БазаДляИсчисленияИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//      ОблагаемаяСумма
	//      ПримененнаяЛьгота
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления ИПН с учетом коэффициента пересчета
	БазаДляИсчисленияИПНТекст = 
	"ВЫБРАТЬ 
	|	Периоды.Период,
	|	Периоды.ФизЛицо,
	|	" + ПолеОблагаемаяСумма + " КАК ОблагаемаяСумма,
	|	" + ПолеКоэффициентПересчета + " КАК КоэффициентПересчета,	
	|	ВЫБОР // применяем нулевую ставку только для работников
	|		КОГДА ПрименяемыйКоэффициентПересчета.ПричинаИзмененияСостояния ЕСТЬ NULL
	|				ИЛИ (ПрименяемыйКоэффициентПересчета.ПричинаИзмененияСостояния = &парамУволен
	|						И ДОБАВИТЬКДАТЕ(ПрименяемыйКоэффициентПересчета.ДатаПоследнегоДвижения, ДЕНЬ, -1) < Периоды.Период)
	|			ТОГДА 0
	|		ИНАЧЕ " + ПолеПрименятьНулевуюСтавку + " 
	|	КОНЕЦ КАК ПрименятьНулевуюСтавку,
	|	МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) КАК ПримененнаяЛьгота,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПримененныйВычет ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет
	|ИЗ
	|	(" + ПериодыТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
	|		ПО БазаДляИсчисленияИПН.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД)
	|			И БазаДляИсчисленияИПН.Период <= Периоды.Период
	|			И Периоды.ФизЛицо = БазаДляИсчисленияИПН.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ПрименяемыйКоэффициентПересчетаТекст + ") КАК ПрименяемыйКоэффициентПересчета
	|		ПО Периоды.ФизЛицо = ПрименяемыйКоэффициентПересчета.ФизЛицо
	|			И Периоды.Период = ПрименяемыйКоэффициентПересчета.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаКварталТекст + ") КАК ДоходыЗаКвартал
	|		ПО Периоды.Период = ДоходыЗаКвартал.Период 
	|			И Периоды.ФизЛицо = ДоходыЗаКвартал.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо,
	|	ПрименяемыйКоэффициентПересчета.ФизЛицо,
	|	ПрименяемыйКоэффициентПересчета.ПричинаИзмененияСостояния,
	|	ПрименяемыйКоэффициентПересчета.ДатаПоследнегоДвижения,
	|	ПрименяемыйКоэффициентПересчета.КоэффициентПересчета,
	|	ДоходыЗаКвартал.РегистрировалсяДоходЗаПериод,
	|	ДоходыЗаКвартал.ПолученныйДоходЗаКвартал,
	|	ДоходыЗаКвартал.РазмерМЗПЗаКвартал,
	|	ДоходыЗаКвартал.РазмерМЗП
	|";	
	
	Запрос.Текст = БазаДляИсчисленияИПНТекст;
	
	// БазаДляИсчисленияИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//      ОблагаемаяСумма
	//      ПримененнаяЛьгота
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления ИПН с учетом применения нулевой ставки в предыдущих кварталах
	БазаДляИсчисленияИПНТекст = 
	"ВЫБРАТЬ 
	|	Периоды.Период,
	|	БазаДляИсчисленияИПН.ФизЛицо,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемаяСумма,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.КоэффициентПересчета ИНАЧЕ 0 КОНЕЦ) КАК КоэффициентПересчета,
	|
	|	ВЫБОР // если во всех предыдущих кварталах применяли нулевую ставку
	|		КОГДА СУММА(ВЫБОР // применение нулевой ставки в последних месяца каждого предшествующего квартала
	|						КОГДА КОНЕЦПЕРИОДА(БазаДляИсчисленияИПН.Период, КВАРТАЛ) < Периоды.Период
	|								И БазаДляИсчисленияИПН.Период = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(БазаДляИсчисленияИПН.Период, КВАРТАЛ), МЕСЯЦ) 
	|							ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку
	|						ИНАЧЕ 0
	|					КОНЕЦ) = СУММА(ВЫБОР // количество предшествующих кварталов
	|										КОГДА КОНЕЦПЕРИОДА(БазаДляИсчисленияИПН.Период, КВАРТАЛ) < Периоды.Период 
	|												И БазаДляИсчисленияИПН.Период = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(БазаДляИсчисленияИПН.Период, КВАРТАЛ), МЕСЯЦ)
	|											ТОГДА 1
	|										ИНАЧЕ 0
	|									КОНЕЦ) 
	|			ТОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку ИНАЧЕ 0 КОНЕЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПрименятьНулевуюСтавку,
	|	МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) КАК ПримененнаяЛьгота,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПримененныйВычет ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет
	|ИЗ
	|	(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
	|		ПО БазаДляИсчисленияИПН.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД)
	|			И БазаДляИсчисленияИПН.Период <= Периоды.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	БазаДляИсчисленияИПН.ФизЛицо
	|
	|ИМЕЮЩИЕ Периоды.Период <= МАКСИМУМ(БазаДляИсчисленияИПН.Период)
	|";	
	
	Запрос.Текст = БазаДляИсчисленияИПНТекст;
	
	// ШкалаСтавокИПНПоПериодам
	//	Поля:
	//		Период
	//		СуммаДоходаС
	//      СуммаДоходаПо
	//      Ставка
	//      СуммаНалогаПредыдущегоПредела
	//
	//	Описание:
	//	Выбирает по всем периодам года шкалы ставок для исчисления ИПН
	ШкалаСтавокИПНПоПериодамТекст = 
	"ВЫБРАТЬ
	|	ИПНШкалаСтавокСрезПоследних.Период,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаС,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаПо,
	|	СведенияОСтавкахИПНиСН.Ставка,
	|	СведенияОСтавкахИПНиСН.СуммаНалогаПредыдущегоПредела
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СтавкиИПН.Период) КАК ПериодСреза,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		(" + ДатыПериодовГодаТекст + ") КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СтавкиИПН
	|		ПО СтавкиИПН.Период <= Периоды.Период 
	|			И СтавкиИПН.ВидСтавокИПНиСН = &парамПоИсчислениюИПН
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК ИПНШкалаСтавокСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СведенияОСтавкахИПНиСН
	|		ПО СведенияОСтавкахИПНиСН.Период = ИПНШкалаСтавокСрезПоследних.ПериодСреза 
	|			И СведенияОСтавкахИПНиСН.ВидСтавокИПНиСН = &парамПоИсчислениюИПН";
	
	Запрос.Текст = ШкалаСтавокИПНПоПериодамТекст;
	
	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	//		НалогУжеИсчисленный
	//		ПримененныйВычет
	//		ПримененняЛьгота
	//	
	//	Описание:
	//	Выбирает применяемые вычеты нарастающим итогом, доход нарастающим итогом и 
	//	исчисленный налог нарастающим итогом и производит расчет налога и примененных вычетов
	ИсчисленныйИПНТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БазаДляИсчисленияИПН.ФизЛицо,
	|	БазаДляИсчисленияИПН.Период,
	|	ВЫРАЗИТЬ((ЕСТЬNULL(СтавкиИПН.СуммаНалогаПредыдущегоПредела, 0) + (БазаДляИсчисленияИПН.ОблагаемаяСумма - ЕСТЬNULL(СтавкиИПН.СуммаДоходаС, 0)) * ВЫБОР КОГДА БазаДляИсчисленияИПН.ПрименятьНулевуюСтавку > 0 ТОГДА 0 ИНАЧЕ ЕСТЬNULL(СтавкиИПН.Ставка, 0) КОНЕЦ / 100) / БазаДляИсчисленияИПН.КоэффициентПересчета КАК " + ТипЗначенияИПНТекст + ") КАК НалогИсчисленный,
	|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный,
	|   БазаДляИсчисленияИПН.ПримененныйВычет - " + ПолеРанееПримененныйНалоговыйВычет + " КАК ПримененныйВычет,
	|	БазаДляИсчисленияИПН.ПримененнаяЛьгота - " + ПолеРанееПримененнаяЛьгота + " КАК ПримененнаяЛьгота
	|ИЗ
	|	(" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ШкалаСтавокИПНПоПериодамТекст + ") КАК СтавкиИПН
	|		ПО БазаДляИсчисленияИПН.Период = СтавкиИПН.Период 
	|			И БазаДляИсчисленияИПН.ОблагаемаяСумма > СтавкиИПН.СуммаДоходаС 
	|			И БазаДляИсчисленияИПН.ОблагаемаяСумма <= СтавкиИПН.СуммаДоходаПо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ИПНРасчетыСБюджетомЗаГодТекст + ") КАК ИПНРасчетыСБюджетомЗаГод
	|		ПО БазаДляИсчисленияИПН.Период = ИПНРасчетыСБюджетомЗаГод.Период 
	|			И БазаДляИсчисленияИПН.ФизЛицо = ИПНРасчетыСБюджетомЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ДоходыЗаГодТекст + ") КАК ДоходыЗаГод
	|		ПО БазаДляИсчисленияИПН.Период = ДоходыЗаГод.Период 
	|			И БазаДляИсчисленияИПН.ФизЛицо = ДоходыЗаГод.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазаДляИсчисленияИПН.ФизЛицо, 
	|	БазаДляИсчисленияИПН.Период
	|";
	
	Запрос.Текст = ИсчисленныйИПНТекст;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеДляРасчетаИПНДо2007()

// Получить данные для расчета ИПН по фиксированной ставке
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2007(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 			   Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", 		   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		   НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				   Регистратор);
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  				   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамИнвалид",				   	   Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамТретьяГруппа",				   "III");
	Запрос.УстановитьПараметр("парамВидПлатежа", 				   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПринят", 		   			   Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамУволен", 		   			   Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамПоИсчислениюИПН",			   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюИПН);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20070101235959'));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",				   Макс(НачалоГода(ПервыйМесяцНалоговогоПериода), '20070101'));
	Запрос.УстановитьПараметр("парамКонецГода",   				   Макс(КонецГода(ПоследнийМесяцНалоговогоПериода), '20071231235959'));
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",		   Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамДатаНачалаРасчетаПоФиксСтавке",	'20070101');
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 		   КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";

	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период КАК Период,
	|	Периоды.ФизЛицо КАК Физлицо
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
	|	ИЗ
	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|	ГДЕ
	|		ИПНСведенияОДоходах.ПериодРегистрации >= &парамНачалоГода И
	|		ИПНСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
	|		ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
	|		ИПНСведенияОДоходах.Период >= &парамДатаНачалаРасчетаПоФиксСтавке И
	|		ИПНСведенияОДоходах.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СведенияПредыдущегоМеста.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|		СведенияПредыдущегоМеста.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СведенияПредыдущегоМеста.ФизЛицо
	|
	|	ГДЕ
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		СведенияПредыдущегоМеста.Налогоплательщик = &парамНалогоплательщик И
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода >= &парамДатаНачалаРасчетаПоФиксСтавке) КАК Периоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Составим текст запроса для вычисления всех месяцев периода
	ДатыПериодовГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период
	|
	|ПОМЕСТИТЬ ВТДатыПериодовГода
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период
	|";

	Запрос.Текст = ДатыПериодовГодаТекст;
	Запрос.Выполнить();
	ДатыПериодовГодаТекст = "ВТДатыПериодовГода";
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ФизлицаНеРезидентыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода, ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК)";

	Запрос.Текст = ФизлицаНеРезидентыТекст;
	Запрос.УстановитьПараметр("парамФизлицаНеРезиденты", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

	// РасчетныеПоказатели
	//	Поля:
	//		Период
	//		РазмерМРП
	//		РазмерМЗП
	//
	//	Описание:
	// Выбирает размер месячного расчетного показателя по периодам
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
	|
	|ПОМЕСТИТЬ ВТРасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ДатыПериодовГодаТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТРасчетныеПоказатели";

	// ПрименяемыеЛьготы
	//	Поля:
	//		Физлицо
	//		Период
	//		ПрименяетсяЛьготаУчастникаВОВ
	//		ПрименяетсяЛьготаПоИнвалидности
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
	ПрименяемыеЛьготыТекст = 
	"ВЫБРАТЬ
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
	|
	|	ВЫБОР 
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|	КОНЕЦ КАК ЛьготаПоДоходу
	|
	|ПОМЕСТИТЬ ВТПрименяемыеЛьготы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ВЫБОР 
	|					КОГДА (ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности) = &парамИнвалид 
	|							И (ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности) = &парамТретьяГруппа 
	|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
	|					ИНАЧЕ 99999999 
	|				  КОНЕЦ 
	|		КОНЕЦ КАК ЛьготаПоИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ 99999999 
	|		КОНЕЦ КАК ЛьготаУчастникаВОВ
	|		
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
	|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
	|			Периоды.Физлицо КАК Физлицо,
	|			Периоды.Период КАК Период
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
	|					И ЛьготыФизлицПоИнвалидности.Физлицо = Периоды.Физлицо
	|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
	|					И ЛьготыФизлицУчастниковВОВ.Физлицо = Периоды.Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Физлицо,
	|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|			ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
	|				И ЛьготыФизлицПоИнвалидности.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|			ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
	|				И ЛьготыФизлицУчастниковВОВ.Физлицо = ИПНЛьготыФизлицСрезПоследних.Физлицо
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период
	|";
	
	Запрос.Текст = ПрименяемыеЛьготыТекст;
	Запрос.Выполнить();
	ПрименяемыеЛьготыТекст = "ВТПрименяемыеЛьготы";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, примененые вычеты и льготы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			КОГДА НЕ ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом 
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ИПНСведенияОДоходах.ПримененныйВычетОборот) КАК ПримененныйВычетОборот,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот,
	|	0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|							&парамНачалоГода,
	|							&парамКонецМесяцаНалоговогоПериода,
	|							МЕСЯЦ,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ПериодРегистрации <= &парамПериодРегистрации
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота),
	|	СУММА(СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота)
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|		ПО СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";	

	ТипЗначенияИПНТекст = "ЧИСЛО(10, 2)";
	
	// ДоходыЗаГод 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		ОблагаемыйДоходЗаГод
	//		ЛьготируемыйОблагаемыйДоходЗаГод
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год
	ДоходыЗаГодТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.Физлицо КАК ФизЛицо,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаДоходаВсего ИНАЧЕ 0 КОНЕЦ) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаНеоблагаемогоДохода ИНАЧЕ 0 КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот ИНАЧЕ 0 КОНЕЦ) КАК ОблагаемыйДоход,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ИПНОбороты.Период ТОГДА ИПНОбороты.ПримененныйВычетОборот ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет,
	|	СУММА(ИПНОбороты.ПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
	|	СУММА(ИПНОбороты.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
	|	СУММА(ИПНОбороты.ПримененнаяЛьготаОборот - ИПНОбороты.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ЛьготаПримененнаяВПредыдущихМесяцах,
	|	СУММА(ИПНОбороты.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ПрименяемыеЛьготы.Период И (ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПрименяетсяЛьготаВМесяце,
	|	СУММА(ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот) КАК ОблагаемыйДоходЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыйОблагаемыйДоходЗаГод,
	|	МАКСИМУМ(ПрименяемыеЛьготы.ЛьготаПоДоходу) КАК ЛьготаПоДоходу,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ПрименяемыеЛьготы.Период И ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПризнакЛьготаУчастникаВОВ,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ПрименяемыеЛьготы.Период И ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК ПризнакЛьготаПоИнвалидности
	|		
	|ПОМЕСТИТЬ ВТДоходыЗаГод
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК ИПНОбороты
	|		ПО Периоды.Период >= ИПНОбороты.Период 
	|			И ИПНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|			И Периоды.Физлицо = ИПНОбороты.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
	|		ПО ИПНОбороты.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|			И ИПНОбороты.Период = ПрименяемыеЛьготы.Период
    |
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.Физлицо";

	Запрос.Текст = ДоходыЗаГодТекст;
	Запрос.Выполнить();
	ДоходыЗаГодТекст = "ВТДоходыЗаГод";

	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//		ПримененныеВычетыЛичные - уже примененные личные налоговые вычеты по ИПН
	//		ПримененнаяЛьгота - уже примененная льгота по ИПН
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог,
	|	ИПНРасчетыСБюджетом.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода И
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|	ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик И
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор И", "") + "
	|	ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации И
	|	ИПНРасчетыСБюджетом.ВидДвижения = &парамПриход И 
	|	ИПНРасчетыСБюджетом.ВидСтроки = &парамВидСтроки И
	|	ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	ИПНРасчетыСБюджетом.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода,
	|	ФизЛицо
	|";          

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТИПНРасчетыСБюджетом";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо
	|";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";

	// ОПВРасчетыСФондамиЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//		ИсчисленныеВзносыЗаГод
	//		ЛьготируемыеИсчисленныеВзносыЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы нарастающим итогом за год
	ОПВРасчетыСФондамиЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы ИНАЧЕ 0 КОНЕЦ) КАК ИсчисленныеВзносы,
	|	СУММА(ОПВРасчетыСФондами.ИсчисленныеВзносы) КАК ИсчисленныеВзносыЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ОПВРасчетыСФондами.ИсчисленныеВзносы
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыеИсчисленныеВзносыЗаГод
	|	
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондамиЗаГод
	|ИЗ
	|	" + ДатыПериодовГодаТекст + " КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Периоды.Период >= ОПВРасчетыСФондами.МесяцНалоговогоПериода 
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
	|			ПО ОПВРасчетыСФондами.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|				И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ПрименяемыеЛьготы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	ОПВРасчетыСФондами.ФизЛицо
	|";
	
	Запрос.Текст = ОПВРасчетыСФондамиЗаГодТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиЗаГодТекст = "ВТОПВРасчетыСФондамиЗаГод";	
	
	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
	//	заданной организации
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
	|
	|ПОМЕСТИТЬ ВТПрименениеВычетовВОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		"+ПериодыТекст+" КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период 
	|				И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза 
	|			И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
	|
	|ГДЕ
	|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период
	|";
	
	Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
	Запрос.Выполнить();
	ПрименениеВычетовВОрганизацииТекст = "ВТПрименениеВычетовВОрганизации";	
	
	// ОтработанноеВремя
	//	Поля:
	//		Физлицо,
	//		Период,
	//		ПредоставлятьВычет
	//
	// Описание:
	//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
	//	
	Если Метаданные.РегистрыРасчета.Найти("ОсновныеНачисленияРаботниковОрганизаций") <> Неопределено Тогда
		// определяем по норме отработанноого времени, которая включается в зачет отработанного времени 
		// при предоставлении вычета
		ОтработанноеВремяТекст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.ПериодДействия КАК Период,
		|	ОтработанноеВремя.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОтработанноеВремя.НормаДнейПоПятидневке) КАК НормаДнейПоПятидневке,
		|	МАКСИМУМ(ДанныеНормыВремени.Норма) КАК НормаДнейПоПроизводственномуКалендарю,
		|	ВЫБОР
		|		КОГДА СУММА(ОтработанноеВремя.НормаДнейПоПятидневке) >= МАКСИМУМ(ДанныеНормыВремени.Норма) / 2
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПредоставлятьВычет
		|
		|ПОМЕСТИТЬ ВТОтработанноеВремя
		|ИЗ
		|	" + СписокФизЛицТекст + " КАК СписокФизЛиц
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|		ПО СписокФизЛиц.ФизЛицо = ОтработанноеВремя.ФизЛицо 
		|			И ОтработанноеВремя.Организация = &парамГоловнаяОрганизация
		|			И ОтработанноеВремя.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
		|			И ОтработанноеВремя.ВидРасчета.ЗачетОтработанногоВремениДляВычета
		|			И ОтработанноеВремя.ПериодДействия МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
		|			И ОтработанноеВремя.Активность
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|							НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период,
		|							СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Норма
		|						ИЗ
		|							РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|						ГДЕ
		|							ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь	
		|								И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
		|						СГРУППИРОВАТЬ ПО
		|							НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)) КАК ДанныеНормыВремени
		|		ПО ОтработанноеВремя.ПериодДействия = ДанныеНормыВремени.Период
		|
		|СГРУППИРОВАТЬ ПО 
		|	ОтработанноеВремя.ПериодДействия,
		|	ОтработанноеВремя.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтработанноеВремя.ПериодДействия,
		|	ОтработанноеВремя.ФизЛицо
		|";
	Иначе
		// определяем по датам приема и увольнения
		ОтработанноеВремяТекст = 
		"ВЫБРАТЬ
		|	ОтработанноеВремя.Период,
		|	ОтработанноеВремя.ФизЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.ДатаС И ОтработанноеВремя.ДатаПо 
		|				ТОГДА ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НормаДнейПоПятидневке,
		|	СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК НормаДнейПоПроизводственномуКалендарю,
		|	ВЫБОР
		|		КОГДА СУММА(ВЫБОР 
		|						КОГДА ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.ДатаС И ОтработанноеВремя.ДатаПо 
		|							ТОГДА ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ 
		|						ИНАЧЕ 0 
		|			  		КОНЕЦ) >= СУММА(ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) / 2
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПредоставлятьВычет
		|
		|ПОМЕСТИТЬ ВТОтработанноеВремя
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОтработанноеВремя.Период,
		|		ОтработанноеВремя.ФизЛицо,
		|
		|		ВЫБОР 
		|			// вообще не был принят в штат - не считаем отработанное время
		|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
		|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
		|				ТОГДА ОтработанноеВремя.Период
		|			// принят в штат в текущем месяце - считаем с даты приема
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
		|				ТОГДА ОтработанноеВремя.ДатаПриема
		|			// сюда попасть не должны - не считаем 
		|			ИНАЧЕ
		|				ДАТАВРЕМЯ(3999, 12, 31)
		|		КОНЕЦ КАК ДатаС,
		|
		|		ВЫБОР 
		|			// повторный прием в ту же организацию и еще не уволен 
		|			// или еще не уволен после первого приема - считаем до конца месяца
		|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
		|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
		|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|			// уволен до начала месяца - не считаем
		|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
		|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|			// уволен в текущем месяце - считаем до даты увольнения
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
		|               ТОГДА ОтработанноеВремя.ДатаУвольнения
		|			// еще не уволен - считаем до конца месяца
		|			ИНАЧЕ
		|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|		КОНЕЦ КАК ДатаПо
		|
		|	ИЗ			
		|		(ВЫБРАТЬ
		|			Периоды.Период КАК Период,
		|			Периоды.ФизЛицо КАК ФизЛицо,
		|			МАКСИМУМ(ВЫБОР 
		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамПринят 
		|							ТОГДА РаботникиОрганизации.Период
		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|				 	 КОНЕЦ) КАК ДатаПриема,
		|			МАКСИМУМ(ВЫБОР 
		|						КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = &парамУволен
		|							ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
		|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|				 	 КОНЕЦ) КАК ДатаУвольнения
		|		ИЗ
		|			" + ПериодыТекст + " КАК Периоды
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|				ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.ФизЛицо
		|			   	   И РаботникиОрганизации.Организация = &парамГоловнаяОрганизация
		|			   	   И РаботникиОрганизации.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство 
		|			  	   И РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
		|				   И РаботникиОрганизации.ПричинаИзмененияСостояния В (&парамПринят, &парамУволен)
		|				   И РаботникиОрганизации.Активность
		|
		|		СГРУППИРОВАТЬ ПО 
		|			Периоды.Период,
		|			Периоды.ФизЛицо) КАК ОтработанноеВремя) КАК ОтработанноеВремя
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь 
		|			И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ ОтработанноеВремя.Период И КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.Период,
		|	ОтработанноеВремя.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОтработанноеВремя.Период,
		|	ОтработанноеВремя.ФизЛицо
		|";
	КонецЕсли;
	
	Запрос.Текст = ОтработанноеВремяТекст;
	Запрос.Выполнить();
	ОтработанноеВремяТекст = "ВТОтработанноеВремя";
	
	// ПрименяемыеВычетыТекст
	//	Поля:
	//		Физлицо
	//		Период
	//		НалоговыйВычетЛичный
	//
	//	Описание:
	//	Выбирает по всем периодам года налоговые вычеты на которые имеет право физлицо
	ПрименяемыеВычетыТекст = 
	"ВЫБРАТЬ
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизЛиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакПрименениеВычета,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Физлицо В (&парамФизЛицаНеРезиденты) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ОтработанноеВремя.НормаДнейПоПроизводственномуКалендарю, 0) КАК НормаДнейПоПроизводственномуКалендарю,
	|	ЕСТЬNULL(ОтработанноеВремя.НормаДнейПоПятидневке, 0) КАК НормаДнейПоПятидневке,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ВЫБОР 
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
	|				ИЛИ ПрименениеВычетов.Физлицо В (&парамФизЛицаНеРезиденты) 
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0 
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
	|	КОНЕЦ КАК НалоговыйВычетЛичный
	|
	|ПОМЕСТИТЬ ВТПрименяемыеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период 
	|				И ВычетыФизлиц.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза 
	|			И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименениеВычетовВОрганизацииТекст + " КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо 
	|				И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОтработанноеВремяТекст + " КАК ОтработанноеВремя
	|		ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
	|			И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|";

	Запрос.Текст = ПрименяемыеВычетыТекст;
	Запрос.Выполнить();
	ПрименяемыеВычетыТекст = "ВТПрименяемыеВычеты";

	// ПрименяемыеВычетыЗаГод
	//	Поля:
	//		Физлицо
	//		Период
	//		ВычетЛичный
	//		ВычетЛичныйЗаГод
	//		ЛьготируемыйНалоговыйВычетЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам года применяемые налоговые вычеты нарастающим итогом за год
	//
 	ПрименяемыеВычетыЗаГодТекст = 
	"ВЫБРАТЬ
	|	ВычетыПоПериодам.Физлицо КАК Физлицо,
	|	Периоды.Период КАК Период,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПризнакПрименениеВычета ИНАЧЕ 0 КОНЕЦ) КАК ПризнакПрименениеВычета,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.ПризнакФизЛицоНеРезидент ИНАЧЕ 0 КОНЕЦ) КАК ПризнакФизЛицоНеРезидент,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.НормаДнейПоПроизводственномуКалендарю ИНАЧЕ 0 КОНЕЦ) КАК НормаДнейПоПроизводственномуКалендарю,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.НормаДнейПоПятидневке ИНАЧЕ 0 КОНЕЦ) КАК НормаДнейПоПятидневке,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.РазмерМЗП ИНАЧЕ 0 КОНЕЦ) КАК РазмерМЗП,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = ВычетыПоПериодам.Период ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный ИНАЧЕ 0 КОНЕЦ) КАК НалоговыйВычет,
	|	СУММА(ВычетыПоПериодам.НалоговыйВычетЛичный) КАК НалоговыйВычетЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ
	|					ИЛИ ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности
	|				ТОГДА ВычетыПоПериодам.НалоговыйВычетЛичный
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ЛьготируемыйНалоговыйВычетЗаГод
	|
	|ПОМЕСТИТЬ ВТПрименяемыеВычетыЗаГод
	|ИЗ
	|	" + ДатыПериодовГодаТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ВычетыПоПериодам
	|		ПО ВычетыПоПериодам.Период <= Периоды.Период 
	|			И ВычетыПоПериодам.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
	|		ПО ВычетыПоПериодам.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|			И ВычетыПоПериодам.Период = ПрименяемыеЛьготы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВычетыПоПериодам.Физлицо,
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВычетыПоПериодам.Физлицо,
	|	Периоды.Период
	|";
	
	Запрос.Текст = ПрименяемыеВычетыЗаГодТекст;
	Запрос.Выполнить();
	ПрименяемыеВычетыЗаГодТекст = "ВТПрименяемыеВычетыЗаГод";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоход, 0)";
	
	// облагаемый доход с начала года
	ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";

	// право на налоговый вычет за месяц
	ПолеНалоговыйВычетЗаМесяц = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычет, 0)";
	
	// право на налоговый вычет за год
	ПолеНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НалоговыйВычетЗаГод, 0)";

	// сумма ранее примененных налоговых вычетов за месяц
	ПолеРанееПримененныйНалоговыйВычет = "ЕСТЬNULL(ДоходыЗаГод.ПримененныйВычет, 0)";
	
	// право на льготу за год (остаток того, что не успел использовать на предыдущем месте работы)
	ПолеПрименяемаяЛьготаЗаГод = "
	|ВЫБОР
	|	КОГДА ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) > 0
	|		ТОГДА ЕСТЬNULL(ДоходыЗаГод.ЛьготаПоДоходу, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0)
	|	ИНАЧЕ 0
	|КОНЕЦ";
	                                                                       
	// сумма ранее примененной льготы
	ПолеРанееПримененнаяЛьгота = "ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаЗаГод, 0) - ЕСТЬNULL(ДоходыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0)";
	ПолеЛьготаПримененнаяВПредыдущихМесяцах = "ЕСТЬNULL(ДоходыЗаГод.ЛьготаПримененнаяВПредыдущихМесяцах, 0)";

	// сумма исчисленных пенсионных взносов за месяц
	ПолеПенсионныеВзносыЗаМесяц = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносы, 0)";
	
	// сумма исчисленных пенсионных взносов за год
	ПолеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод, 0)";
	
	// облагаемая база по ИПН за месяц
	ПолеБазаДляИсчисленияИПНЗаМесяц = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеНалоговыйВычетЗаМесяц + " - " + ПолеПенсионныеВзносыЗаМесяц + " > 0
	|		ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеНалоговыйВычетЗаМесяц + " - " + ПолеПенсионныеВзносыЗаМесяц + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// облагаемая база по ИПН за год
	ПолеБазаДляИсчисленияИПНЗаГод = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + " > 0
	|		ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеНалоговыйВычетЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + "
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// льготируемый облагаемый доход с начала года
	ПолеЛьготируемыйОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ЛьготируемыйОблагаемыйДоходЗаГод, 0)";

	// налоговый вычет за год, учитываемый при предоставлении льготы
	ПолеЛьготируемыйНалоговыйВычетЗаГод = "ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ЛьготируемыйНалоговыйВычетЗаГод, 0)";

	// сумма исчисленных пенсионных взносов за год, учитываемая при предоставлении льготы
	ПолеЛьготируемыеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ЛьготируемыеИсчисленныеВзносыЗаГод, 0)";
	
	// льготируемая облагаемая база по ИПН за год
	ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод = 
	"ВЫБОР
	|	КОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + " > 0
	|	ТОГДА " + ПолеЛьготируемыйОблагаемыйДоходЗаГод + " - " + ПолеЛьготируемыйНалоговыйВычетЗаГод + " - " + ПолеЛьготируемыеПенсионныеВзносыЗаГод + "
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// примененная льгота за год   
	ПолеПримененнаяЛьгота = 
	"ВЫБОР
	|	КОГДА " + ПолеПрименяемаяЛьготаЗаГод + " > " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " 
	|		ТОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " 
	|	ИНАЧЕ ВЫБОР 
	|			КОГДА " + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " > 0 
	|				ТОГДА " + ПолеПрименяемаяЛьготаЗаГод + " 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ 
	|КОНЕЦ";
		
	// если размер льготы изменяется в середине года, то надо еще проверить чтобы общий размер льготы с учетом текущего месяца
	// не превышал фактического дохода, который подпадает под льготу
	ПолеПримененнаяЛьгота = 
	"ВЫБОР
	|	КОГДА " + ПолеПримененнаяЛьгота + " > " + ПолеБазаДляИсчисленияИПНЗаМесяц + " + " + ПолеЛьготаПримененнаяВПредыдущихМесяцах + "
	|		ТОГДА " + ПолеБазаДляИсчисленияИПНЗаМесяц + " + " + ПолеЛьготаПримененнаяВПредыдущихМесяцах + "
	|	ИНАЧЕ " + ПолеПримененнаяЛьгота + "
	|КОНЕЦ";
	
	// сумма ранее исчисленного налога за месяц
	ПолеРанееНалогИсчисленный = "ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалог, 0)";
	
	// облагаемая сумма за месяц
	ПолеОблагаемаяСуммаЗаМесяц = 
	"ВЫБОР
	|	КОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяОблагаемаяСуммаЗаГод ИНАЧЕ 0 КОНЕЦ) = 0
	|			ИЛИ СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПрименяетсяЛьготаВМесяце ИНАЧЕ 0 КОНЕЦ) = 0
	|		ТОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ)
	|	КОГДА МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) >= СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяОблагаемаяСуммаЗаГод ИНАЧЕ 0 КОНЕЦ)
	|		ТОГДА 0
	|	ИНАЧЕ ВЫБОР
	|			КОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ) >
	|					СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяОблагаемаяСуммаЗаГод ИНАЧЕ 0 КОНЕЦ) - МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота)
	|				ТОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготируемаяОблагаемаяСуммаЗаГод ИНАЧЕ 0 КОНЕЦ) - МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота)
	|
	|			КОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготаПримененнаяВПредыдущихМесяцах ИНАЧЕ 0 КОНЕЦ) <
	|					МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота)
	|				ТОГДА СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ) - 
	|						(МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) - СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ЛьготаПримененнаяВПредыдущихМесяцах ИНАЧЕ 0 КОНЕЦ))
	|
	|			ИНАЧЕ СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОблагаемаяСумма ИНАЧЕ 0 КОНЕЦ)
	|		  КОНЕЦ
	|КОНЕЦ";
	
	// БазаДляИсчисленияИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//      ОблагаемаяСумма
	//      ОблагаемаяСуммаЗаГод
	//      ПримененнаяЛьгота
	//      ПримененныйВычет
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления ИПН с начала года для каждого месяца периода и примененную льготу 
	БазаДляИсчисленияИПНТекст = 
	"ВЫБРАТЬ 
	|	ДоходыЗаГод.Период,
	|	ДоходыЗаГод.ФизЛицо,
	|	ДоходыЗаГод.ПрименяетсяЛьготаВМесяце,	
	|	ДоходыЗаГод.ПризнакЛьготаПоИнвалидности,
	|	ДоходыЗаГод.ПризнакЛьготаУчастникаВОВ,
	|	ДоходыЗаГод.СуммаДоходаВсего,
	|	ДоходыЗаГод.СуммаНеоблагаемогоДохода,
	|	" + ПолеПрименяемаяЛьготаЗаГод  + " КАК ПрименяемаяЛьготаЗаГод,
	|	" + ПолеПенсионныеВзносыЗаМесяц + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ПризнакПрименениеВычета, 0) КАК ПризнакПрименениеВычета,
	|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.ПризнакФизЛицоНеРезидент, 0) КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НормаДнейПоПятидневке, 0) КАК НормаДнейПоПятидневке,
	|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.НормаДнейПоПроизводственномуКалендарю, 0) КАК НормаДнейПоПроизводственномуКалендарю,
	|	ЕСТЬNULL(ПрименяемыеВычетыЗаГод.РазмерМЗП, 0) КАК РазмерМЗП,
	|	" + ПолеБазаДляИсчисленияИПНЗаМесяц + " КАК ОблагаемаяСумма,
	|	" + ПолеБазаДляИсчисленияИПНЗаГод + " КАК ОблагаемаяСуммаЗаГод,
	|	" + ПолеЛьготируемаяБазаДляИсчисленияИПНЗаГод + " КАК ЛьготируемаяОблагаемаяСуммаЗаГод,
	|	" + ПолеПримененнаяЛьгота + " КАК ПримененнаяЛьгота,
	|	" + ПолеНалоговыйВычетЗаМесяц + " КАК ПримененныйВычет,
	|	" + ПолеРанееПримененныйНалоговыйВычет + " КАК РанееПримененныйНалоговыйВычет,
	|	" + ПолеРанееПримененнаяЛьгота + " КАК РанееПримененнаяЛьгота,
	|	" + ПолеЛьготаПримененнаяВПредыдущихМесяцах + " КАК ЛьготаПримененнаяВПредыдущихМесяцах,
	|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный
	|
	|ПОМЕСТИТЬ ВТБазаДляИсчисленияИПН
	|ИЗ
	|	" + ДоходыЗаГодТекст + " КАК ДоходыЗаГод
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыЗаГодТекст + " КАК ПрименяемыеВычетыЗаГод
	|		ПО ДоходыЗаГод.Период = ПрименяемыеВычетыЗаГод.Период 
	|			И ДоходыЗаГод.ФизЛицо = ПрименяемыеВычетыЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиЗаГодТекст + " КАК ОПВРасчетыСФондамиЗаГод
	|		ПО ДоходыЗаГод.Период = ОПВРасчетыСФондамиЗаГод.Период 
	|			И ДоходыЗаГод.ФизЛицо = ОПВРасчетыСФондамиЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО ДоходыЗаГод.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|			И ДоходыЗаГод.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоходыЗаГод.Период,
	|	ДоходыЗаГод.ФизЛицо
	|";

	Запрос.Текст = БазаДляИсчисленияИПНТекст;
	Запрос.Выполнить();
	БазаДляИсчисленияИПНТекст = "ВТБазаДляИсчисленияИПН";

	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + БазаДляИсчисленияИПНТекст;

	// БазаДляИсчисленияИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//      ОблагаемаяСумма
	//      ПримененнаяЛьгота
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления ИПН с учетом льготы
	БазаДляИсчисленияИПНТекст = 
	"ВЫБРАТЬ 
	|	Периоды.Период,
	|	Периоды.ФизЛицо,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПризнакЛьготаПоИнвалидности ИНАЧЕ 0 КОНЕЦ) КАК ПризнакЛьготаПоИнвалидности,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПризнакЛьготаУчастникаВОВ ИНАЧЕ 0 КОНЕЦ) КАК ПризнакЛьготаУчастникаВОВ,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.СуммаДоходаВсего ИНАЧЕ 0 КОНЕЦ) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.СуммаНеоблагаемогоДохода ИНАЧЕ 0 КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПрименяемаяЛьготаЗаГод ИНАЧЕ 0 КОНЕЦ) КАК ПрименяемаяЛьготаЗаГод,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ОПВЗаМесяц ИНАЧЕ 0 КОНЕЦ) КАК ОПВЗаМесяц,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПризнакПрименениеВычета ИНАЧЕ 0 КОНЕЦ) КАК ПризнакПрименениеВычета,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПризнакФизЛицоНеРезидент ИНАЧЕ 0 КОНЕЦ) КАК ПризнакФизЛицоНеРезидент,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.НормаДнейПоПятидневке ИНАЧЕ 0 КОНЕЦ) КАК НормаДнейПоПятидневке,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.НормаДнейПоПроизводственномуКалендарю ИНАЧЕ 0 КОНЕЦ) КАК НормаДнейПоПроизводственномуКалендарю,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.РазмерМЗП ИНАЧЕ 0 КОНЕЦ) КАК РазмерМЗП,
	|	" + ПолеОблагаемаяСуммаЗаМесяц + " КАК ОблагаемаяСумма,
	|	МАКСИМУМ(БазаДляИсчисленияИПН.ПримененнаяЛьгота) КАК ПримененнаяЛьгота,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.ПримененныйВычет ИНАЧЕ 0 КОНЕЦ) КАК ПримененныйВычет,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.РанееПримененныйНалоговыйВычет ИНАЧЕ 0 КОНЕЦ) КАК РанееПримененныйНалоговыйВычет,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.РанееПримененнаяЛьгота ИНАЧЕ 0 КОНЕЦ) КАК РанееПримененнаяЛьгота,
	|	СУММА(ВЫБОР КОГДА Периоды.Период = БазаДляИсчисленияИПН.Период ТОГДА БазаДляИсчисленияИПН.РанееНалогИсчисленный ИНАЧЕ 0 КОНЕЦ) КАК РанееНалогИсчисленный
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + БазаДляИсчисленияИПНТекст + " КАК БазаДляИсчисленияИПН
	|		ПО БазаДляИсчисленияИПН.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД)
	|			И БазаДляИсчисленияИПН.Период <= Периоды.Период
	|			И Периоды.ФизЛицо = БазаДляИсчисленияИПН.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|";	
	
	Запрос.Текст = БазаДляИсчисленияИПНТекст;
	
	// ШкалаСтавокИПНПоПериодам
	//	Поля:
	//		Период
	//		СуммаДоходаС
	//      СуммаДоходаПо
	//      Ставка
	//      СуммаНалогаПредыдущегоПредела
	//
	//	Описание:
	//	Выбирает по всем периодам года шкалы ставок для исчисления ИПН
	ШкалаСтавокИПНПоПериодамТекст = 
	"ВЫБРАТЬ
	|	ИПНШкалаСтавокСрезПоследних.Период,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаС,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаПо,
	|	СведенияОСтавкахИПНиСН.Ставка,
	|	СведенияОСтавкахИПНиСН.СуммаНалогаПредыдущегоПредела
	|
	|ПОМЕСТИТЬ ВТШкалаСтавокИПНПоПериодам
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СтавкиИПН.Период) КАК ПериодСреза,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		" + ДатыПериодовГодаТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СтавкиИПН
	|		ПО СтавкиИПН.Период <= Периоды.Период 
	|			И СтавкиИПН.ВидСтавокИПНиСН = &парамПоИсчислениюИПН
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК ИПНШкалаСтавокСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СведенияОСтавкахИПНиСН
	|		ПО СведенияОСтавкахИПНиСН.Период = ИПНШкалаСтавокСрезПоследних.ПериодСреза 
	|			И СведенияОСтавкахИПНиСН.ВидСтавокИПНиСН = &парамПоИсчислениюИПН
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНШкалаСтавокСрезПоследних.Период
	|";
	
	Запрос.Текст = ШкалаСтавокИПНПоПериодамТекст;
	Запрос.Выполнить();
	ШкалаСтавокИПНПоПериодамТекст = "ВТШкалаСтавокИПНПоПериодам";
	
	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	//		НалогУжеИсчисленный
	//		ПримененныйВычет
	//		ПримененняЛьгота
	//	
	//	Описание:
	//	Выбирает применяемые вычеты, доход и исчисленный налог 
	//	и производит расчет налога и примененных вычетов
	ИсчисленныйИПНТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БазаДляИсчисленияИПН.ФизЛицо,
	|	БазаДляИсчисленияИПН.Период,
	|	БазаДляИсчисленияИПН.ПризнакЛьготаПоИнвалидности,
	|	БазаДляИсчисленияИПН.ПризнакЛьготаУчастникаВОВ,
	|	БазаДляИсчисленияИПН.СуммаДоходаВсего,
	|	БазаДляИсчисленияИПН.СуммаНеоблагаемогоДохода,
	|	БазаДляИсчисленияИПН.ОПВЗаМесяц,
	|	БазаДляИсчисленияИПН.ПризнакПрименениеВычета,
	|	БазаДляИсчисленияИПН.ПризнакФизЛицоНеРезидент,
	|	БазаДляИсчисленияИПН.НормаДнейПоПятидневке,
	|	БазаДляИсчисленияИПН.НормаДнейПоПроизводственномуКалендарю,
	|	БазаДляИсчисленияИПН.РазмерМЗП,
	|	БазаДляИсчисленияИПН.ПрименяемаяЛьготаЗаГод КАК ЛьготаЗаГод,
	|	БазаДляИсчисленияИПН.ОблагаемаяСумма,
	|	ВЫРАЗИТЬ((ЕСТЬNULL(СтавкиИПН.СуммаНалогаПредыдущегоПредела, 0) + (БазаДляИсчисленияИПН.ОблагаемаяСумма - ЕСТЬNULL(СтавкиИПН.СуммаДоходаС, 0)) * ЕСТЬNULL(СтавкиИПН.Ставка, 0) / 100) КАК " + ТипЗначенияИПНТекст + ") КАК ИПНЗаМесяц,
	|	ЕСТЬNULL(БазаДляИсчисленияИПН.РанееНалогИсчисленный, 0) КАК РанееНалогИсчисленный,
	|	ЕСТЬNULL(БазаДляИсчисленияИПН.ПримененныйВычет, 0) КАК ПримененныйВычетЗаМесяц,
	|	ЕСТЬNULL(БазаДляИсчисленияИПН.РанееПримененныйНалоговыйВычет, 0) КАК РанееПримененныйНалоговыйВычет,
	|	ЕСТЬNULL(БазаДляИсчисленияИПН.РанееПримененнаяЛьгота, 0) КАК РанееПримененнаяЛьгота,
	|	СтавкиИПН.Ставка КАК ПроцентСтавки,
	|
	|	ВЫРАЗИТЬ((ЕСТЬNULL(СтавкиИПН.СуммаНалогаПредыдущегоПредела, 0) + (БазаДляИсчисленияИПН.ОблагаемаяСумма - ЕСТЬNULL(СтавкиИПН.СуммаДоходаС, 0)) * ЕСТЬNULL(СтавкиИПН.Ставка, 0) / 100) КАК " + ТипЗначенияИПНТекст + ") КАК НалогИсчисленный,
	|   ЕСТЬNULL(БазаДляИсчисленияИПН.ПримененныйВычет, 0) - ЕСТЬNULL(БазаДляИсчисленияИПН.РанееПримененныйНалоговыйВычет, 0) КАК ПримененныйВычет,
	|	ЕСТЬNULL(БазаДляИсчисленияИПН.ПримененнаяЛьгота, 0) - ЕСТЬNULL(БазаДляИсчисленияИПН.РанееПримененнаяЛьгота, 0) КАК ПримененнаяЛьгота
	|ИЗ
	|	(" + БазаДляИсчисленияИПНТекст + ") КАК БазаДляИсчисленияИПН
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ШкалаСтавокИПНПоПериодамТекст + " КАК СтавкиИПН
	|		ПО БазаДляИсчисленияИПН.Период = СтавкиИПН.Период 
	|			И БазаДляИсчисленияИПН.ОблагаемаяСумма > СтавкиИПН.СуммаДоходаС 
	|			И БазаДляИсчисленияИПН.ОблагаемаяСумма <= СтавкиИПН.СуммаДоходаПо
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазаДляИсчисленияИПН.ФизЛицо, 
	|	БазаДляИсчисленияИПН.Период
	|";
	
	Запрос.Текст = ИсчисленныйИПНТекст;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеДляРасчетаИПНПосле2007()

// Получить данные для расчета ИПН по фиксированной ставке, начиная с 2009 года
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2009(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 			   Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", 		   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		   НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				   Регистратор);
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",				   Макс(НачалоГода(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамДатаНачалаРасчетаПоФиксСтавке",	'20070101');
	Запрос.УстановитьПараметр("парамНачало", 	 			 	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец", 	 			  	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090101235959'));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 	 	   КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
 	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
	|
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации И
	|	ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
	|	ИПНСведенияОДоходах.Период >= &парамДатаНачалаРасчетаПоФиксСтавке И
	|	ИПНСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";

	// Составим текст запроса для вычисления всех месяцев периода
	ДатыПериодовГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачалоГода И &парамКонец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
	|";

	Запрос.Текст = ДатыПериодовГодаТекст;
	Запрос.Выполнить();
	ДатыПериодовГодаТекст = "ВТ_ДатыПериодовГода";
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ГражданствоФизЛицТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК
	|
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ФизЛицо,
	|		Периоды.Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО ВЫБОР
	|					КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА Периоды.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ Периоды.ФизЛицо 
	|				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|				И ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВЫБОР 
	|				КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА Периоды.ФизЛицо.ФизЛицо
	|				ИНАЧЕ Периоды.ФизЛицо
	|			КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|			И Периоды.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период";

	Запрос.Текст = ГражданствоФизЛицТекст;
	Запрос.Выполнить();
	ГражданствоФизЛицТекст = "ВТ_ГражданствоФизЛиц";

	// РасчетныеПоказатели
	//	Поля:
	//		Период
	//		РазмерМРП
	//		РазмерМЗП
	//
	//	Описание:
	// Выбирает размер месячного расчетного показателя по периодам
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРПДляЦелейНалогообложения, 0) КАК РазмерМРП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
	|
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ДатыПериодовГодаТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// ПрименяемыеЛьготы
	//	Поля:
	//		Физлицо
	//		Период
	//		ПрименяетсяЛьготаУчастникаВОВ
	//		ПрименяетсяЛьготаПоИнвалидности
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
	ПрименяемыеЛьготыТекст = 
	"ВЫБРАТЬ
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период,
	|	
	|	ИПНЛьготыФизлиц.ОтношениеКИнвалидности,
	|	ИПНЛьготыФизлиц.ГруппаИнвалидности,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
	|
	|	ВЫБОР 
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|	КОНЕЦ КАК ЛьготаПоДоходу
	|
	|ПОМЕСТИТЬ ВТ_ПрименяемыеЛьготы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
	|		ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности,
	|		ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ВЫБОР 
	|					КОГДА ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|							И ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности = ""III"" 
	|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
	|					ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0)
	|				  КОНЕЦ 
	|		КОНЕЦ КАК ЛьготаПоИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) 
	|		КОНЕЦ КАК ЛьготаУчастникаВОВ
	|		
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
	|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
	|			Периоды.Физлицо КАК Физлицо,
	|			Периоды.Период КАК Период
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
	|					И ЛьготыФизлицПоИнвалидности.Физлицо = ВЫБОР 
	|																КОГДА Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
	|																	ТОГДА Периоды.Физлицо.Физлицо
	|																ИНАЧЕ Периоды.Физлицо
	|															КОНЕЦ
	|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
	|					И ЛьготыФизлицУчастниковВОВ.Физлицо = ВЫБОР 
	|																КОГДА Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
	|																	ТОГДА Периоды.Физлицо.Физлицо
	|																ИНАЧЕ Периоды.Физлицо
	|															КОНЕЦ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Физлицо,
	|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|			ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
	|				И ЛьготыФизлицПоИнвалидности.Физлицо = ВЫБОР 
	|															КОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо ССЫЛКА Справочник.Контрагенты
	|																ТОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо.Физлицо
	|															ИНАЧЕ ИПНЛьготыФизлицСрезПоследних.Физлицо
	|														КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|			ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
	|				И ЛьготыФизлицУчастниковВОВ.Физлицо = ВЫБОР 
	|															КОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо ССЫЛКА Справочник.Контрагенты
	|																ТОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо.Физлицо
	|															ИНАЧЕ ИПНЛьготыФизлицСрезПоследних.Физлицо
	|														КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период
	|";
	
	Запрос.Текст = ПрименяемыеЛьготыТекст;
	Запрос.Выполнить();
	ПрименяемыеЛьготыТекст = "ВТ_ПрименяемыеЛьготы";	
	
	// КадровыеПериодыРаботников
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ДатаПриема
	//		ДатаУвольнения
	//
	//	Описание:
	// Выбирает актуальные даты приема и увольнения по физлицам для дальнейшего ограничения предоставления вычетов
	КадровыеПериодыРаботниковТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				ТОГДА РаботникиОрганизации.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаПриема,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
	|ИЗ
	|	ВТ_Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
	|			И (РаботникиОрганизации.Организация = &парамГоловнаяОрганизация)
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
	|			И (РаботникиОрганизации.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|";
	
	Запрос.Текст = КадровыеПериодыРаботниковТекст;
	Запрос.Выполнить();
	КадровыеПериодыРаботниковТекст = "ВТ_КадровыеПериодыРаботников";

	// ДоходыВычетыЛьготы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, объект исчисления, а также льготы и вычеты за весь год по физлицам из СписокФизлиц
	ДоходыВычетыЛьготыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
	|				ТОГДА 0
	|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
	|		  КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ПрочиеВычетыОборот,
	|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеРаботников.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА ИПНСведенияОДоходах.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетОборот,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеРаботников.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА ИПНСведенияОДоходах.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныйВычетОборот,
	|	0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	|
	|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготы
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|							&парамНачалоГода,
	|							&парамКонец,
	|							МЕСЯЦ,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ПериодРегистрации <= &парамПериодРегистрации
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КадровыеПериодыРаботников.ФизЛицо КАК ФизЛицо,
	|			КадровыеПериодыРаботников.ДатаПриема КАК ДатаПриема
	|		ИЗ
	|			" + КадровыеПериодыРаботниковТекст + " КАК КадровыеПериодыРаботников
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КадровыеПериодыРаботников.ФизЛицо,
	|			КадровыеПериодыРаботников.ДатаПриема) КАК ДанныеРаботников
	|		ПО ИПНСведенияОДоходах.ФизЛицо = ДанныеРаботников.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ДанныеРаботников.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,	
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
	|ГДЕ
	|	ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода
	|	И ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации
	|	И ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамДатаНачалаРасчетаПоФиксСтавке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|";

	Запрос.Текст = ДоходыВычетыЛьготыТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыТекст = "ВТ_ДоходыВычетыЛьготы";	
	
	// ДоходыВычетыЛьготыЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Группирует общую сумму доходов, облагаемые налогом доходы, объект исчисления, а также льготы и вычеты 
	ДоходыВычетыЛьготыЗаГодТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	ДоходыВычетыЛьготы.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ОблагаемыйДоход
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОблагаемыйДоход,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаДоходаВсего
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаНеоблагаемогоДохода
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаДоходаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПрочиеВычетыОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПрочиеВычетыОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ИсчисленнаяОблагаемаяБазаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПримененнаяЛьготаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененнаяЛьготаЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетЗаМесяц,
		|	СУММА(ДоходыВычетыЛьготы.ПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.РазрешенныйВычетОборот) КАК РазрешенныйВычетЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы
		|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготыЗаГод
		|ИЗ
		|	" + ДатыПериодовГодаТекст + " КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДоходыВычетыЛьготыТекст + " КАК ДоходыВычетыЛьготы
		|		ПО Периоды.Период >= ДоходыВычетыЛьготы.Период
		|			И ДоходыВычетыЛьготы.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоходыВычетыЛьготы.Физлицо,
		|	Периоды.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Физлицо";

	Запрос.Текст = ДоходыВычетыЛьготыЗаГодТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыЗаГодТекст = "ВТ_ДоходыВычетыЛьготыЗаГод";	
		
	// ДоходыВычетыЛьготыПоПериодам
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Ограничивает выбранные данные по рассчитываемым периодам  
	ДоходыВычетыЛьготыПоПериодамТекст = 
		"ВЫБРАТЬ
		|	ДоходыВычетыЛьготыЗаГод.Период,
		|	ДоходыВычетыЛьготыЗаГод.ФизЛицо,
		|	ДоходыВычетыЛьготыЗаГод.ОблагаемыйДоход,
		|	ДоходыВычетыЛьготыЗаГод.СуммаДоходаВсего,
		|	ДоходыВычетыЛьготыЗаГод.СуммаНеоблагаемогоДохода,
		|	ДоходыВычетыЛьготыЗаГод.СуммаДоходаОборот,
		|	ДоходыВычетыЛьготыЗаГод.СуммаВычетаОборот,
		|	ДоходыВычетыЛьготыЗаГод.ПрочиеВычетыОборот,
		|	ДоходыВычетыЛьготыЗаГод.ИсчисленнаяОблагаемаяБазаОборот,
		|	ДоходыВычетыЛьготыЗаГод.ПримененныйВычетЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.РазрешенныйВычетЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.ПримененныйВычетЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.РазрешенныйВычетЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы
		|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготыПоПериодам
		|ИЗ
		|	" + ДоходыВычетыЛьготыЗаГодТекст + " КАК ДоходыВычетыЛьготыЗаГод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Периоды
		|		ПО ДоходыВычетыЛьготыЗаГод.Период = Периоды.Период
		|			И ДоходыВычетыЛьготыЗаГод.ФизЛицо = Периоды.ФизЛицо";
	
	Запрос.Текст = ДоходыВычетыЛьготыПоПериодамТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыПоПериодамТекст = "ВТ_ДоходыВычетыЛьготыПоПериодам";
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалогЗаМесяц	
	|
	|ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонец
	|	И ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "И ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор", "") + "
	|	И ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТ_ИПНРасчетыСБюджетом";
    		
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";

	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
	//	заданной организации
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ПрименениеВычетовВОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		"+ПериодыТекст+" КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период 
	|				И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза 
	|			И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
	|
	|ГДЕ
	|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период
	|";
	
	Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
	Запрос.Выполнить();
	ПрименениеВычетовВОрганизацииТекст = "ВТ_ПрименениеВычетовВОрганизации";	
	
	// ОтработанноеВремя
	//	Поля:
	//		Физлицо,
	//		Период,
	//		ПредоставлятьВычет
	//
	// Описание:
	//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
	//	
	// определяем по датам приема и увольнения
	ОтработанноеВремяТекст = 
	"ВЫБРАТЬ
	|	ОтработанноеВремя.Период,
	|	ОтработанноеВремя.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|			ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КалендарныхДнейРаботы,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|					ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|				ИНАЧЕ 0
	|			КОНЕЦ >= 16
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредоставлятьВычет
	|
	|ПОМЕСТИТЬ ВТ_ОтработанноеВремя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтработанноеВремя.Период,
	|		ОтработанноеВремя.ФизЛицо,
	|
	|		ВЫБОР 
	|			// вообще не был принят в штат - не считаем отработанное время
	|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
	|				ТОГДА ОтработанноеВремя.Период
	|			// принят в штат в текущем месяце - считаем с даты приема
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
	|				ТОГДА ОтработанноеВремя.ДатаПриема
	|			// сюда попасть не должны - не считаем 
	|			ИНАЧЕ
	|				ДАТАВРЕМЯ(3999, 12, 31)
	|		КОНЕЦ КАК ДатаС,
	|
	|		ВЫБОР 
	|			// повторный прием в ту же организацию и еще не уволен 
	|			// или еще не уволен после первого приема - считаем до конца месяца
	|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
	|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
	|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
	|			// уволен до начала месяца - не считаем
	|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			// уволен в текущем месяце - считаем до даты увольнения
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
	|               ТОГДА ОтработанноеВремя.ДатаУвольнения
	|			// еще не уволен - считаем до конца месяца
	|			ИНАЧЕ
	|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
	|		КОНЕЦ КАК ДатаПо
	|
	|	ИЗ			
	|		"+КадровыеПериодыРаботниковТекст+" КАК ОтработанноеВремя) КАК ОтработанноеВремя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтработанноеВремя.ФизЛицо,
	|	ОтработанноеВремя.Период
	|";
	
	Запрос.Текст = ОтработанноеВремяТекст;
	Запрос.Выполнить();
	ОтработанноеВремяТекст = "ВТ_ОтработанноеВремя";
	
	// ПрименяемыеВычетыТекст
	//	Поля:
	//		Физлицо
	//		Период
	//		НалоговыйВычетЛичный
	//
	//	Описание:
	//	Выбирает по всем периодам года налоговые вычеты на которые имеет право физлицо
	ПрименяемыеВычетыТекст = 
	"ВЫБРАТЬ
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизЛиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакПрименениеВычета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ОтработанноеВремя.КалендарныхДнейРаботы, 0) КАК КалендарныхДнейРаботы,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ВЫБОР 
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
	|				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0 
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
	|	КОНЕЦ КАК НалоговыйВычетЛичный
	|
	|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период 
	|				И ВычетыФизлиц.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза 
	|			И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименениеВычетовВОрганизацииТекст + " КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо 
	|				И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОтработанноеВремяТекст + " КАК ОтработанноеВремя
	|		ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
	|			И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ГражданствоФизЛицТекст + " КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|			И ГражданствоФизЛиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|";

	Запрос.Текст = ПрименяемыеВычетыТекст;
	Запрос.Выполнить();
	ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычеты";

	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	//		НалогУжеИсчисленный
	//		ПримененныйВычет
	//		ПримененняЛьгота
	//	
	//	Описание:
	//	Выбирает применяемые вычеты, доход и исчисленный налог 
	//	и производит расчет налога и примененных вычетов
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеоблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	Доходы.ПрочиеВычетыОборот КАК ПрочиеВычеты,
	|	
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ, ЛОЖЬ) КАК ПрименяетсяЛьготаУчастникаВОВ,
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности, ЛОЖЬ) КАК ПрименяетсяЛьготаПоИнвалидности,
	|	ПрименяемыеЛьготы.ОтношениеКИнвалидности,
	|	ПрименяемыеЛьготы.ГруппаИнвалидности,
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ЛьготаПоДоходу, 0) КАК ЛьготаПоДоходу,
	|
	|	ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалогЗаМесяц, 0) КАК РанееИсчисленныйНалог,
	|	ЕСТЬNULL(Доходы.ПримененныйВычетЗаМесяц, 0) КАК ПримененныйВычетЗаМесяц,
	|	ЕСТЬNULL(Доходы.ПримененныйВычетЗаГод, 0) КАК ПримененныйВычетЗаГод,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаЗаМесяц, 0) КАК ПримененнаяЛьготаЗаМесяц,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаЗаГод, 0) КАК ПримененнаяЛьготаЗаГод,
	|	ЕСТЬNULL(Доходы.РазрешенныйВычетЗаМесяц, 0) КАК РазрешенныйВычетЗаМесяц,
	|	ЕСТЬNULL(Доходы.РазрешенныйВычетЗаГод, 0) КАК РазрешенныйВычетЗаГод,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(ПрименяемыеВычеты.ПризнакПрименениеВычета, 0) КАК ПризнакПрименениеВычета,
	|	ЕСТЬNULL(ПрименяемыеВычеты.ПризнакФизЛицоНеРезидент, 0) КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ПрименяемыеВычеты.КалендарныхДнейРаботы, 0) КАК КалендарныхДнейРаботы,
	|	ЕСТЬNULL(ПрименяемыеВычеты.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(ПрименяемыеВычеты.НалоговыйВычетЛичный, 0) КАК НалоговыйВычетЛичный
	|
	|ИЗ
	|	" + ДоходыВычетыЛьготыПоПериодамТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
	|		ПО Доходы.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|			И Доходы.Период = ПрименяемыеЛьготы.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО Доходы.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|			И Доходы.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
	|		ПО Доходы.ФизЛицо = ПрименяемыеВычеты.ФизЛицо
	|			И Доходы.Период = ПрименяемыеВычеты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеДляРасчетаИПНПосле2009()

// Получить данные для расчета ИПН по фиксированной ставке, начиная с 2017 года
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2017(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 			   Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", 		   ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 		   НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				   Регистратор);
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",				   Макс(НачалоГода(ПервыйМесяцНалоговогоПериода), '20170101'));
	Запрос.УстановитьПараметр("парамДатаНачалаРасчетаПоФиксСтавке",	'20070101');
	Запрос.УстановитьПараметр("парамНачало", 	 			 	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20170101'));
	Запрос.УстановитьПараметр("парамКонец", 	 			  	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20170101235959'));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 	 	   КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
 	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
	|
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации И
	|	ИПНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
	|	ИПНСведенияОДоходах.Период >= &парамДатаНачалаРасчетаПоФиксСтавке И
	|	ИПНСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";

	// Составим текст запроса для вычисления всех месяцев периода
	ДатыПериодовГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &парамНачалоГода И &парамКонец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
	|";

	Запрос.Текст = ДатыПериодовГодаТекст;
	Запрос.Выполнить();
	ДатыПериодовГодаТекст = "ВТ_ДатыПериодовГода";
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ГражданствоФизЛицТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК
	|
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ФизЛицо,
	|		Периоды.Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО ВЫБОР
	|					КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА Периоды.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ Периоды.ФизЛицо 
	|				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|				И ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВЫБОР 
	|				КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА Периоды.ФизЛицо.ФизЛицо
	|				ИНАЧЕ Периоды.ФизЛицо
	|			КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|			И Периоды.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период";

	Запрос.Текст = ГражданствоФизЛицТекст;
	Запрос.Выполнить();
	ГражданствоФизЛицТекст = "ВТ_ГражданствоФизЛиц";

	// РасчетныеПоказатели
	//	Поля:
	//		Период
	//		РазмерМРП
	//		РазмерМЗП
	//
	//	Описание:
	// Выбирает размер месячного расчетного показателя по периодам
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРПДляЦелейНалогообложения, 0) КАК РазмерМРП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
	|
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ДатыПериодовГодаТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// ПрименяемыеЛьготы
	//	Поля:
	//		Физлицо
	//		Период
	//		ПрименяетсяЛьготаУчастникаВОВ
	//		ПрименяетсяЛьготаПоИнвалидности
	//		ЛьготаПоДоходу
	//
	//	Описание:
	//	Выбирает по всем периодам года льготы на которые имеет право физлицо
	ПрименяемыеЛьготыТекст = 
	"ВЫБРАТЬ
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период,
	|	
	|	ИПНЛьготыФизлиц.ОтношениеКИнвалидности,
	|	ИПНЛьготыФизлиц.ГруппаИнвалидности,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
	|
	|	ВЫБОР 
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ 
	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности 
	|	КОНЕЦ КАК ЛьготаПоДоходу
	|
	|ПОМЕСТИТЬ ВТ_ПрименяемыеЛьготы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИПНЛьготыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|		ИПНЛьготыФизлицСрезПоследних.Период КАК Период,
	|		ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности,
	|		ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицПоИнвалидности.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ВЫБОР 
	|					КОГДА ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|							И ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности = ""III"" 
	|						ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
	|					ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0)
	|				  КОНЕЦ 
	|		КОНЕЦ КАК ЛьготаПоИнвалидности,
	|		ВЫБОР 
	|			КОГДА (ЛьготыФизлицУчастниковВОВ.Физлицо) ЕСТЬ NULL 
	|				ТОГДА 0 
	|			ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) 
	|		КОНЕЦ КАК ЛьготаУчастникаВОВ
	|		
	|	ИЗ
	|		(ВЫБРАТЬ
	|			МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
	|			МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
	|			Периоды.Физлицо КАК Физлицо,
	|			Периоды.Период КАК Период
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|				ПО ЛьготыФизлицПоИнвалидности.Период <= Периоды.Период 
	|					И ЛьготыФизлицПоИнвалидности.Физлицо = ВЫБОР 
	|																КОГДА Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
	|																	ТОГДА Периоды.Физлицо.Физлицо
	|																ИНАЧЕ Периоды.Физлицо
	|															КОНЕЦ
	|					И (ЛьготыФизЛицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|						ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизЛицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|				ПО ЛьготыФизлицУчастниковВОВ.Период <= Периоды.Период 
	|					И ЛьготыФизлицУчастниковВОВ.Физлицо = ВЫБОР 
	|																КОГДА Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
	|																	ТОГДА Периоды.Физлицо.Физлицо
	|																ИНАЧЕ Периоды.Физлицо
	|															КОНЕЦ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Физлицо,
	|			Периоды.Период) КАК ИПНЛьготыФизлицСрезПоследних
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|			ПО ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность 
	|				И ЛьготыФизлицПоИнвалидности.Физлицо = ВЫБОР 
	|															КОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо ССЫЛКА Справочник.Контрагенты
	|																ТОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо.Физлицо
	|															ИНАЧЕ ИПНЛьготыФизлицСрезПоследних.Физлицо
	|														КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|			ПО ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ 
	|				И ЛьготыФизлицУчастниковВОВ.Физлицо = ВЫБОР 
	|															КОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо ССЫЛКА Справочник.Контрагенты
	|																ТОГДА ИПНЛьготыФизлицСрезПоследних.Физлицо.Физлицо
	|															ИНАЧЕ ИПНЛьготыФизлицСрезПоследних.Физлицо
	|														КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = ИПНЛьготыФизлицСрезПоследних.Период) КАК ИПНЛьготыФизлиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНЛьготыФизлиц.Физлицо,
	|	ИПНЛьготыФизлиц.Период
	|";
	
	Запрос.Текст = ПрименяемыеЛьготыТекст;
	Запрос.Выполнить();
	ПрименяемыеЛьготыТекст = "ВТ_ПрименяемыеЛьготы";	
	
	// КадровыеПериодыРаботников
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ДатаПриема
	//		ДатаУвольнения
	//
	//	Описание:
	// Выбирает актуальные даты приема и увольнения по физлицам для дальнейшего ограничения предоставления вычетов
	КадровыеПериодыРаботниковТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				ТОГДА РаботникиОрганизации.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаПриема,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
	|ИЗ
	|	ВТ_Периоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
	|			И (РаботникиОрганизации.Организация = &парамГоловнаяОрганизация)
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
	|			И (РаботникиОрганизации.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|";
	
	Запрос.Текст = КадровыеПериодыРаботниковТекст;
	Запрос.Выполнить();
	КадровыеПериодыРаботниковТекст = "ВТ_КадровыеПериодыРаботников";

	// ДоходыВычетыЛьготы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, объект исчисления, а также льготы и вычеты за весь год по физлицам из СписокФизлиц
	ДоходыВычетыЛьготыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
	|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
	|			ИНАЧЕ 0 
	|		  КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
	|				ТОГДА 0
	|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
	|		  КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(ВЫБОР 
	|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
	|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		  КОНЕЦ) КАК ПрочиеВычетыОборот,
	|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеРаботников.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА ИПНСведенияОДоходах.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетОборот,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ДанныеРаботников.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА ИПНСведенияОДоходах.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныйВычетОборот,
	|	0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	|
	|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготы
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|							&парамНачалоГода,
	|							&парамКонец,
	|							МЕСЯЦ,
	|							Налогоплательщик = &парамНалогоплательщик
	|							И ПериодРегистрации <= &парамПериодРегистрации
	|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КадровыеПериодыРаботников.ФизЛицо КАК ФизЛицо,
	|			КадровыеПериодыРаботников.ДатаПриема КАК ДатаПриема
	|		ИЗ
	|			" + КадровыеПериодыРаботниковТекст + " КАК КадровыеПериодыРаботников
	|		
	|		СГРУППИРОВАТЬ ПО
	|			КадровыеПериодыРаботников.ФизЛицо,
	|			КадровыеПериодыРаботников.ДатаПриема) КАК ДанныеРаботников
	|		ПО ИПНСведенияОДоходах.ФизЛицо = ДанныеРаботников.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ДанныеРаботников.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНСведенияПредыдущегоМестаРаботы.ФизЛицо,	
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ИПНСведенияПредыдущегоМестаРаботы.ПримененнаяЛьгота
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК ИПНСведенияПредыдущегоМестаРаботы
	|ГДЕ
	|	ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода
	|	И ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации
	|	И ИПНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик
	|	И ИПНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамДатаНачалаРасчетаПоФиксСтавке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|";

	Запрос.Текст = ДоходыВычетыЛьготыТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыТекст = "ВТ_ДоходыВычетыЛьготы";	
	
	// ДоходыВычетыЛьготыЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Группирует общую сумму доходов, облагаемые налогом доходы, объект исчисления, а также льготы и вычеты 
	ДоходыВычетыЛьготыЗаГодТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	ДоходыВычетыЛьготы.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ОблагаемыйДоход
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОблагаемыйДоход,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаДоходаВсего
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаНеоблагаемогоДохода
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаДоходаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПрочиеВычетыОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПрочиеВычетыОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ИсчисленнаяОблагаемаяБазаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.ПримененнаяЛьготаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененнаяЛьготаЗаМесяц,
		|	СУММА(ВЫБОР
		|			КОГДА Периоды.Период = ДоходыВычетыЛьготы.Период
		|				ТОГДА ДоходыВычетыЛьготы.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетЗаМесяц,
		|	СУММА(ДоходыВычетыЛьготы.ПримененныйВычетОборот) КАК ПримененныйВычетЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.РазрешенныйВычетОборот) КАК РазрешенныйВычетЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
		|	СУММА(ДоходыВычетыЛьготы.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы
		|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготыЗаГод
		|ИЗ
		|	" + ДатыПериодовГодаТекст + " КАК Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДоходыВычетыЛьготыТекст + " КАК ДоходыВычетыЛьготы
		|		ПО Периоды.Период >= ДоходыВычетыЛьготы.Период
		|			И ДоходыВычетыЛьготы.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, Год)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоходыВычетыЛьготы.Физлицо,
		|	Периоды.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Физлицо";

	Запрос.Текст = ДоходыВычетыЛьготыЗаГодТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыЗаГодТекст = "ВТ_ДоходыВычетыЛьготыЗаГод";	
		
	// ДоходыВычетыЛьготыПоПериодам
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ПрочиеВычетыОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//		ПримененныйВычетОборот
	//		ПримененнаяЛьготаОборот
	//		РазрешенныйВычетОборот
	//		ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	//
	//	Описание:
	// Ограничивает выбранные данные по рассчитываемым периодам  
	ДоходыВычетыЛьготыПоПериодамТекст = 
		"ВЫБРАТЬ
		|	ДоходыВычетыЛьготыЗаГод.Период,
		|	ДоходыВычетыЛьготыЗаГод.ФизЛицо,
		|	ДоходыВычетыЛьготыЗаГод.ОблагаемыйДоход,
		|	ДоходыВычетыЛьготыЗаГод.СуммаДоходаВсего,
		|	ДоходыВычетыЛьготыЗаГод.СуммаНеоблагаемогоДохода,
		|	ДоходыВычетыЛьготыЗаГод.СуммаДоходаОборот,
		|	ДоходыВычетыЛьготыЗаГод.СуммаВычетаОборот,
		|	ДоходыВычетыЛьготыЗаГод.ПрочиеВычетыОборот,
		|	ДоходыВычетыЛьготыЗаГод.ИсчисленнаяОблагаемаяБазаОборот,
		|	ДоходыВычетыЛьготыЗаГод.ПримененныйВычетЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.РазрешенныйВычетЗаМесяц,
		|	ДоходыВычетыЛьготыЗаГод.ПримененныйВычетЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.РазрешенныйВычетЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаЗаГод,
		|	ДоходыВычетыЛьготыЗаГод.ПримененнаяЛьготаНаПредыдущемМестеРаботы
		|ПОМЕСТИТЬ ВТ_ДоходыВычетыЛьготыПоПериодам
		|ИЗ
		|	" + ДоходыВычетыЛьготыЗаГодТекст + " КАК ДоходыВычетыЛьготыЗаГод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Периоды
		|		ПО ДоходыВычетыЛьготыЗаГод.Период = Периоды.Период
		|			И ДоходыВычетыЛьготыЗаГод.ФизЛицо = Периоды.ФизЛицо";
	
	Запрос.Текст = ДоходыВычетыЛьготыПоПериодамТекст;
	Запрос.Выполнить();
	ДоходыВычетыЛьготыПоПериодамТекст = "ВТ_ДоходыВычетыЛьготыПоПериодам";
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалогЗаМесяц	
	|
	|ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &парамНачалоГода
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &парамКонец
	|	И ИПНРасчетыСБюджетом.Налогоплательщик = &парамНалогоплательщик
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "И ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор", "") + "
	|	И ИПНРасчетыСБюджетом.Период <= &парамКонецПериодаРегистрации
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТ_ИПНРасчетыСБюджетом";
    		
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";

	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы           
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС для СписокФизлиц
	
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ВзносыОСМС
	|
	|ПОМЕСТИТЬ ВТ_ВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|";
	
	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТ_ВОСМСРасчетыСФондами";

	// ПрименениеВычетовВОрганизации
	//	Поля:
	//		Физлицо,
	//		Период
	//
	// Описание:
	//	Выбирает список физлиц + периоды в которые применяются налоговые вычеты по 
	//	заданной организации
	ПрименениеВычетовВОрганизацииТекст = 
	"ВЫБРАТЬ
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо КАК Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период КАК Период
	|
	|ПОМЕСТИТЬ ВТ_ПрименениеВычетовВОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		"+ПериодыТекст+" КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|			ПО Периоды.Период >= ИПНПрименениеВычетов.Период 
	|				И ИПНПрименениеВычетов.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПНПрименениеВычетовСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза 
	|			И ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.Физлицо
	|
	|ГДЕ
	|	ИПНПрименениеВычетов.Налогоплательщик = &парамНалогоплательщик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНПрименениеВычетовСрезПоследних.Физлицо,
	|	ИПНПрименениеВычетовСрезПоследних.Период
	|";
	
	Запрос.Текст = ПрименениеВычетовВОрганизацииТекст;
	Запрос.Выполнить();
	ПрименениеВычетовВОрганизацииТекст = "ВТ_ПрименениеВычетовВОрганизации";	
	
	// ОтработанноеВремя
	//	Поля:
	//		Физлицо,
	//		Период,
	//		ПредоставлятьВычет
	//
	// Описание:
	//	Список физлиц-периодов с правом применения налоговых вычетов по отработанному времени
	//	
	// определяем по датам приема и увольнения
	ОтработанноеВремяТекст = 
	"ВЫБРАТЬ
	|	ОтработанноеВремя.Период,
	|	ОтработанноеВремя.ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|			ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КалендарныхДнейРаботы,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|					ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|				ИНАЧЕ 0
	|			КОНЕЦ >= 16
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредоставлятьВычет
	|
	|ПОМЕСТИТЬ ВТ_ОтработанноеВремя
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтработанноеВремя.Период,
	|		ОтработанноеВремя.ФизЛицо,
	|
	|		ВЫБОР 
	|			// вообще не был принят в штат - не считаем отработанное время
	|			КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|			// принят в штат в предыдущих месяцах - считаем с первого числа месяца
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.Период 
	|				ТОГДА ОтработанноеВремя.Период
	|			// принят в штат в текущем месяце - считаем с даты приема
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.Период
	|				ТОГДА ОтработанноеВремя.ДатаПриема
	|			// сюда попасть не должны - не считаем 
	|			ИНАЧЕ
	|				ДАТАВРЕМЯ(3999, 12, 31)
	|		КОНЕЦ КАК ДатаС,
	|
	|		ВЫБОР 
	|			// повторный прием в ту же организацию и еще не уволен 
	|			// или еще не уволен после первого приема - считаем до конца месяца
	|			КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения 
	|				  ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
	|				ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
	|			// уволен до начала месяца - не считаем
	|			КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.Период
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			// уволен в текущем месяце - считаем до даты увольнения
	|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.Период
	|               ТОГДА ОтработанноеВремя.ДатаУвольнения
	|			// еще не уволен - считаем до конца месяца
	|			ИНАЧЕ
	|				КОНЕЦПЕРИОДА(ОтработанноеВремя.Период, МЕСЯЦ)
	|		КОНЕЦ КАК ДатаПо
	|
	|	ИЗ			
	|		"+КадровыеПериодыРаботниковТекст+" КАК ОтработанноеВремя) КАК ОтработанноеВремя
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтработанноеВремя.ФизЛицо,
	|	ОтработанноеВремя.Период
	|";
	
	Запрос.Текст = ОтработанноеВремяТекст;
	Запрос.Выполнить();
	ОтработанноеВремяТекст = "ВТ_ОтработанноеВремя";
	
	// ПрименяемыеВычетыТекст
	//	Поля:
	//		Физлицо
	//		Период
	//		НалоговыйВычетЛичный
	//
	//	Описание:
	//	Выбирает по всем периодам года налоговые вычеты на которые имеет право физлицо
	ПрименяемыеВычетыТекст = 
	"ВЫБРАТЬ
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо КАК Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период КАК Период,
	|	ВЫБОР
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизЛиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакПрименениеВычета,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ОтработанноеВремя.КалендарныхДнейРаботы, 0) КАК КалендарныхДнейРаботы,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ВЫБОР 
	|		КОГДА (ПрименениеВычетов.Физлицо) ЕСТЬ NULL 
	|				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизлиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0 
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
	|	КОНЕЦ КАК НалоговыйВычетЛичный
	|
	|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.Физлицо КАК Физлицо,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО ВычетыФизлиц.Период <= Периоды.Период 
	|				И ВычетыФизлиц.Физлицо = Периоды.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Физлицо,
	|		Периоды.Период) КАК ИПННалоговыеВычетыФизлицСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ВычетыФизлиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.ПериодСреза 
	|			И ВычетыФизлиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименениеВычетовВОрганизацииТекст + " КАК ПрименениеВычетов
	|		ПО ПрименениеВычетов.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо 
	|				И ПрименениеВычетов.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОтработанноеВремяТекст + " КАК ОтработанноеВремя
	|		ПО ОтработанноеВремя.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период 
	|			И ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ГражданствоФизЛицТекст + " КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо
	|			И ГражданствоФизЛиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Физлицо,
	|	ИПННалоговыеВычетыФизлицСрезПоследних.Период
	|";

	Запрос.Текст = ПрименяемыеВычетыТекст;
	Запрос.Выполнить();
	ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычеты";

	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	//		НалогУжеИсчисленный
	//		ПримененныйВычет
	//		ПримененняЛьгота
	//	
	//	Описание:
	//	Выбирает применяемые вычеты, доход и исчисленный налог 
	//	и производит расчет налога и примененных вычетов
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеоблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	Доходы.ПрочиеВычетыОборот КАК ПрочиеВычеты,
	|	
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ, ЛОЖЬ) КАК ПрименяетсяЛьготаУчастникаВОВ,
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности, ЛОЖЬ) КАК ПрименяетсяЛьготаПоИнвалидности,
	|	ПрименяемыеЛьготы.ОтношениеКИнвалидности,
	|	ПрименяемыеЛьготы.ГруппаИнвалидности,
	|	ЕСТЬNULL(ПрименяемыеЛьготы.ЛьготаПоДоходу, 0) КАК ЛьготаПоДоходу,
	|
	|	ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалогЗаМесяц, 0) КАК РанееИсчисленныйНалог,
	|	ЕСТЬNULL(Доходы.ПримененныйВычетЗаМесяц, 0) КАК ПримененныйВычетЗаМесяц,
	|	ЕСТЬNULL(Доходы.ПримененныйВычетЗаГод, 0) КАК ПримененныйВычетЗаГод,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаЗаМесяц, 0) КАК ПримененнаяЛьготаЗаМесяц,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаЗаГод, 0) КАК ПримененнаяЛьготаЗаГод,
	|	ЕСТЬNULL(Доходы.РазрешенныйВычетЗаМесяц, 0) КАК РазрешенныйВычетЗаМесяц,
	|	ЕСТЬNULL(Доходы.РазрешенныйВычетЗаГод, 0) КАК РазрешенныйВычетЗаГод,
	|	ЕСТЬNULL(Доходы.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботы,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|	ЕСТЬNULL(ВОСМСРасчетыСФондами.ВзносыОСМС, 0) КАК ИсчисленныеВзносыОСМС,
	|
	|	ЕСТЬNULL(ПрименяемыеВычеты.ПризнакПрименениеВычета, 0) КАК ПризнакПрименениеВычета,
	|	ЕСТЬNULL(ПрименяемыеВычеты.ПризнакФизЛицоНеРезидент, 0) КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ПрименяемыеВычеты.КалендарныхДнейРаботы, 0) КАК КалендарныхДнейРаботы,
	|	ЕСТЬNULL(ПрименяемыеВычеты.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(ПрименяемыеВычеты.НалоговыйВычетЛичный, 0) КАК НалоговыйВычетЛичный
	|
	|ИЗ
	|	" + ДоходыВычетыЛьготыПоПериодамТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеЛьготыТекст + " КАК ПрименяемыеЛьготы
	|		ПО Доходы.ФизЛицо = ПрименяемыеЛьготы.ФизЛицо
	|			И Доходы.Период = ПрименяемыеЛьготы.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО Доходы.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|			И Доходы.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВОСМСРасчетыСФондамиТекст + " КАК ВОСМСРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
	|		ПО Доходы.ФизЛицо = ПрименяемыеВычеты.ФизЛицо
	|			И Доходы.Период = ПрименяемыеВычеты.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеДляРасчетаИПНПосле2009()

// Получить данные для расчета ИПН, по правилам 2018 года:
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2018(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("Налогоплательщик", 			   	Налогоплательщик);
	Запрос.УстановитьПараметр("ПериодРегистрации", 		   		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				Регистратор);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета",				'20180101');
	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", 	 Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20180101'));
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20180101235959'));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	 Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ " + СписокФизЛицТекст + " КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
	КонецЕсли;
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, объект исчисления по физлицам из СписокФизлиц

	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот
		|
		|ПОМЕСТИТЬ ВТ_ДоходыВременная
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДохода
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_ДоходыВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыВременная.Период КАК Период,
		|	ДоходыВременная.Физлицо КАК Физлицо,
		|	ДоходыВременная.ОблагаемыйДоход КАК ОблагаемыйДоход,
		|	ДоходыВременная.СуммаДоходаВсего,
		|	ДоходыВременная.СуммаНеоблагаемогоДохода,
		|	ДоходыВременная.СуммаДоходаОборот,
		|	ДоходыВременная.СуммаВычетаОборот,
		|	ДоходыВременная.ИсчисленнаяОблагаемаяБазаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	ВТ_ДоходыВременная КАК ДоходыВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДохода.Период,
		|	СотрудникиБезДохода.Физлицо,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДохода КАК СотрудникиБезДохода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоходыВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДохода";
		
	Иначе
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|";
		
	КонецЕсли;
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалогЗаМесяц	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалогЗаМесяц	
	|
	|ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.Налогоплательщик = &Налогоплательщик
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "И ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор", "") + "
	|	И ИПНРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТ_ИПНРасчетыСБюджетом";

	// ВычетыИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//		ПримененныйВычет
	//		азрешенныйВычет
	//
	//	Описание:
	//	Выбирает примененные вычеты за период 
	ВычетыИПНТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ) КАК Период,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо КАК ФизЛицо,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот) КАК ПримененныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныеВычетыВТекущемРасчете,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот) КАК РазрешенныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныеВычетыВТекущемРасчете
	|ПОМЕСТИТЬ ВТ_ВычетыИПН
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&ПервыйМесяцНалоговогоПериода,
	|			&ПоследнийМесяцНалоговогоПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ВычетыИПНТекст;
	Запрос.Выполнить();
	ВычетыИПНТекст = "ВТ_ВычетыИПН";

	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		ОблагаемыйДоход
	//		РанееИсчисленнаяОблагаемаяБаза
	//		РанееИсчисленныйНалог
	//	
	//	Описание:
	//	Выбирает примененные вычеты, доход и исчисленный налог 
	//	и производит расчет налога
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеоблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалогЗаМесяц, 0) КАК РанееИсчисленныйНалог,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычеты, 0) КАК ПримененныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычетыВТекущемРасчете, 0) КАК ПримененныеВычетыВТекущемРасчете,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычеты, 0) КАК РазрешенныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычетыВТекущемРасчете, 0) КАК РазрешенныеВычетыВТекущемРасчете
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО Доходы.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|			И Доходы.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВычетыИПНТекст + " КАК ВычетыИПН
	|		ПО Доходы.ФизЛицо = ВычетыИПН.ФизЛицо
	|			И Доходы.Период = ВычетыИПН.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ПолучитьДанныеДляРасчетаВычетовИПН(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт

	Если ПериодРегистрации >= '20220101' Тогда
		Возврат ПолучитьДанныеДляРасчетаВычетовИПНПосле2022(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
    ИначеЕсли ПериодРегистрации >= '20210101' Тогда
		Возврат ПолучитьДанныеДляРасчетаВычетовИПНПосле2021(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		Возврат ПолучитьДанныеДляРасчетаВычетовИПНПосле2020(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаВычетовИПНПосле2019(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	Иначе
		Возврат ПолучитьДанныеДляРасчетаВычетовИПНДо2019(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеДляРасчетаВычетовИПНДо2019(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца) Экспорт
												
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;      
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета", '20180101');
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// получим ПоследнийМесяцНалоговогоПериода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", ПервыйМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", ПоследнийМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПервыйМесяцНалоговогоПериода));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|";
		
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	 //Периоды
	 //Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	 //Поля:
	 //   	Период
	 //   	Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|	
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ
		|	ВТ_СписокФизЛиц КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ПрименениеВычетовИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВычетыФизическихЛицИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета
		|;
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета КАК ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ВТ_ПрименениеВычетовИПН.ФизическоеЛицо ЕСТЬ NULL
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = ВычетыФизЛицТекст;
	Запрос.Выполнить();
	
	РасчетныеПоказателиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыВГодах
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
		|ИЗ
		|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода КАК ГодНалоговогоПериода,
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ПОМЕСТИТЬ ВТ_РазмерыМЗПМРП
		|ИЗ
		|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода";
		
	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	
	РазмерыВзносовТекст	= 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаВзносов,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) КАК ВидВзносов
		|ПОМЕСТИТЬ ВТ_РазмерыВзносов
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.Активность
		|	И ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос),
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	Запрос.Текст = РазмерыВзносовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_РазмерыВзносов";
	
	РазмерыПрочихВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ПрочиеВычетыФизическихЛицИПН.Размер
		|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
		|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
		|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = РазмерыПрочихВычетовТекст;
	Запрос.Выполнить();
	
	НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗПМРП.РазмерМЗП,
		|	ВТ_РазмерыМЗПМРП.РазмерМРП,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|			ТОГДА ЕСТЬNULL(ВТ_РазмерыВзносов.СуммаВзносов, 0)
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗПМРП КАК ВТ_РазмерыМЗПМРП
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗПМРП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыВзносов КАК ВТ_РазмерыВзносов
		|		ПО (ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|			КОНЕЦ)
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыВзносов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ВидВзносов = ВТ_РазмерыВзносов.ВидВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = НастройкиИРазмерыВычетовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НастройкиИРазмерыВычетов";
	
	НакопленныеДанныеПоВычетамТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
		|ИЗ
		|	ВТ_Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|ИЗ
		|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПоследнийМесяцНалоговогоПериода, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|			КОНЕЦ)
		|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
		|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
		|			И (ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.Налогоплательщик = &Налогоплательщик
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
		|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
		|			И ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ПО ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|			КОНЕЦ
		|			И (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
		|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо КАК Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета КАК ВидВычета,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериоде) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериоде) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериодеПоДругимДоходам) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
		|ИЗ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров КАК ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета";
		
	Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
	Запрос.Выполнить(); 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетамИтогРегистров";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетам";
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПНВременная
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДоходаИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_СведенияОДоходахИПНВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахИПНВременная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахИПНВременная.Физлицо КАК Физлицо,
		|	СведенияОДоходахИПНВременная.ОблагаемыйДоход КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_СведенияОДоходахИПНВременная КАК СведенияОДоходахИПНВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоходаИПН.Период,
		|	СотрудникиБезДоходаИПН.Физлицо,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДоходаИПН КАК СотрудникиБезДоходаИПН
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СведенияОДоходахИПНВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДоходаИПН";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_СведенияОДоходахИПН.ФизЛицо КАК ФизЛицо,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВычета,
		|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
		|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов,
		|	ВТ_НастройкиИРазмерыВычетов.ПределВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления,
		|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета,
		|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериоде, 0) КАК РазрешенныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериоде, 0) КАК ПримененныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам,
		|	ВТ_СведенияОДоходахИПН.ОблагаемыйДоход
		|ИЗ
		|	ВТ_СведенияОДоходахИПН КАК ВТ_СведенияОДоходахИПН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
		|		ПО ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
		|		ПО ВТ_СведенияОДоходахИПН.Физлицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
		|			И (ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СведенияОДоходахИПН.ФизЛицо,
		|	МесяцНалоговогоПериода,
		|	Приоритет";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДанныеДляРасчетаВычетовИПНПосле2019(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца) Экспорт
												
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	ПрименятьОПВДляГПХ = ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;      
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета", '20180101');
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// получим ПоследнийМесяцНалоговогоПериода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", ПервыйМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", ПоследнийМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПервыйМесяцНалоговогоПериода));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|";
		
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	 //Периоды
	 //Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	 //Поля:
	 //   	Период
	 //   	Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|	
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ
		|	ВТ_СписокФизЛиц КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ПрименениеВычетовИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВычетыФизическихЛицИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета
		|;
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета КАК ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ВТ_ПрименениеВычетовИПН.ФизическоеЛицо ЕСТЬ NULL
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = ВычетыФизЛицТекст;
	Запрос.Выполнить();
	
	РасчетныеПоказателиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыВГодах
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
		|ИЗ
		|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода КАК ГодНалоговогоПериода,
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ПОМЕСТИТЬ ВТ_РазмерыМЗПМРП
		|ИЗ
		|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода";
		
	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	
	РазмерыВзносовТекст	= 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаВзносов,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) КАК ВидВзносов
		|ПОМЕСТИТЬ ВТ_РазмерыВзносов
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.Активность
		|	И (ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|" + ?(ПрименятьОПВДляГПХ, "
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2019, 1, 1)
		|	ИЛИ ОПВРасчетыСФондами.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1)
		|", "") + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос),
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	Запрос.Текст = РазмерыВзносовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_РазмерыВзносов";
	
	РазмерыПрочихВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ПрочиеВычетыФизическихЛицИПН.Размер
		|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
		|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
		|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = РазмерыПрочихВычетовТекст;
	Запрос.Выполнить();
	
	НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
        |	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
        |ПОМЕСТИТЬ ВТГражданствоСрезПоследних
        |ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ))
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_НастройкиВычетов.ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТГражданствоСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТГражданствоСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, 0) КАК НеЯвляетсяНалоговымРезидентомРК
        |ПОМЕСТИТЬ ВТГражданствоФизЛиц
        |ИЗ
        |	ВТГражданствоСрезПоследних КАК ВТГражданствоСрезПоследних
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТГражданствоСрезПоследних.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		   И ВТГражданствоСрезПоследних.ПериодГражданства = ГражданствоФизЛиц.Период
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	ФизическоеЛицо,
        |	МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗПМРП.РазмерМЗП,
		|	ВТ_РазмерыМЗПМРП.РазмерМРП,
        |	ВЫБОР 
        |       КОГДА НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА 
        |           ТОГДА 
		|	            ВЫБОР
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			            ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					        КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						        ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					        ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				        КОНЕЦ
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|			            ТОГДА ЕСТЬNULL(ВТ_РазмерыВзносов.СуммаВзносов, 0)
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			            ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		            ИНАЧЕ 0
		|	            КОНЕЦ 
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗПМРП КАК ВТ_РазмерыМЗПМРП
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗПМРП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизЛиц КАК ГражданствоФизЛиц
	    |		ПО ГражданствоФизЛиц.ФизическоеЛицо = ВТ_НастройкиВычетов.ФизическоеЛицо
        |			И (ГражданствоФизЛиц.МесяцНалоговогоПериода = ВТ_НастройкиВычетов.МесяцНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыВзносов КАК ВТ_РазмерыВзносов
		|		ПО
		|" + ?(ПрименятьОПВДляГПХ, "
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_РазмерыВзносов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1)
		|			ИЛИ (ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2019, 1, 1))
		|", "
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|") + "
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыВзносов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ВидВзносов = ВТ_РазмерыВзносов.ВидВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = НастройкиИРазмерыВычетовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НастройкиИРазмерыВычетов";
	
	НакопленныеДанныеПоВычетамТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
		|ИЗ
		|	ВТ_Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|ИЗ
		|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПоследнийМесяцНалоговогоПериода, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|			КОНЕЦ)
		|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
		|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
		|			И (ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.Налогоплательщик = &Налогоплательщик
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
		|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
		|			И ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ПО ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|			КОНЕЦ
		|			И (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
		|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо КАК Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета КАК ВидВычета,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериоде) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериоде) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериодеПоДругимДоходам) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
		|ИЗ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров КАК ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета";
		
	Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
	Запрос.Выполнить(); 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетамИтогРегистров";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетам";
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПНВременная
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДоходаИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_СведенияОДоходахИПНВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахИПНВременная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахИПНВременная.Физлицо КАК Физлицо,
		|	СведенияОДоходахИПНВременная.ОблагаемыйДоход КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_СведенияОДоходахИПНВременная КАК СведенияОДоходахИПНВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоходаИПН.Период,
		|	СотрудникиБезДоходаИПН.Физлицо,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДоходаИПН КАК СотрудникиБезДоходаИПН
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СведенияОДоходахИПНВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДоходаИПН";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_СведенияОДоходахИПН.ФизЛицо КАК ФизЛицо,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВычета,
		|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
		|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов,
		|	ВТ_НастройкиИРазмерыВычетов.ПределВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления,
		|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета,
		|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериоде, 0) КАК РазрешенныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериоде, 0) КАК ПримененныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам,
		|	ВТ_СведенияОДоходахИПН.ОблагаемыйДоход
		|ИЗ
		|	ВТ_СведенияОДоходахИПН КАК ВТ_СведенияОДоходахИПН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
		|		ПО ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода
		|" + ?(ПрименятьОПВДляГПХ, "
		|			И ((ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|							ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1)
		|			ИЛИ (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2019, 1, 1))
		|", "
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)

		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|") + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
		|		ПО ВТ_СведенияОДоходахИПН.Физлицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
		|			И (ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СведенияОДоходахИПН.ФизЛицо,
		|	МесяцНалоговогоПериода,
		|	Приоритет";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДанныеДляРасчетаВычетовИПНПосле2020(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца) Экспорт
												
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	ПрименятьВычетВОСМС = ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Налогоплательщик, ПериодРегистрации);
	ПрименятьОПВиВОСМСДляГПХ = ПрименятьВычетОПВиВОСМСДляГПХ(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;      
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета", '20180101');
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// получим ПоследнийМесяцНалоговогоПериода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", ПервыйМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", ПоследнийМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПервыйМесяцНалоговогоПериода));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|";
		
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|	
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ
		|	ВТ_СписокФизЛиц КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ПрименениеВычетовИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВычетыФизическихЛицИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|" + ?(ПрименятьВычетВОСМС ИЛИ ПрименятьОПВиВОСМСДляГПХ, "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	ВТ_Периоды.Период >= ДАТАВРЕМЯ(2020, 1, 1)
		|	" + ?(НЕ ПрименятьВычетВОСМС И ПрименятьОПВиВОСМСДляГПХ, "И ВТ_Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты", "") + "
		|	" + ?(НЕ ПрименятьОПВиВОСМСДляГПХ И ПрименятьВычетВОСМС, "И ВТ_Периоды.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица", ""), "") + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета
		|;
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета КАК ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|			ИЛИ ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ВТ_ПрименениеВычетовИПН.ФизическоеЛицо ЕСТЬ NULL
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = ВычетыФизЛицТекст;
	Запрос.Выполнить();
	
	РасчетныеПоказателиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыВГодах
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
		|ИЗ
		|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода КАК ГодНалоговогоПериода,
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ПОМЕСТИТЬ ВТ_РазмерыМЗПМРП
		|ИЗ
		|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода";
		
	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	
	РазмерыВзносовТекст	= 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаВзносов,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) КАК ВидВзносов
		|ПОМЕСТИТЬ ВТ_РазмерыВзносов
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.Активность
		|	И (ОПВРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
		|" + ?(ПрименятьОПВиВОСМСДляГПХ, "
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1)
		|	ИЛИ ОПВРасчетыСФондами.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|", "") + ")
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос),
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|	" + ?(НЕ ПрименятьВычетВОСМС И ПрименятьОПВиВОСМСДляГПХ, "И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.Контрагенты", "") + "
		|	" + ?(НЕ ПрименятьОПВиВОСМСДляГПХ И ПрименятьВычетВОСМС, "И ВОСМСРасчетыСФондами.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	Запрос.Текст = РазмерыВзносовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_РазмерыВзносов";
	
	РазмерыПрочихВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ПрочиеВычетыФизическихЛицИПН.Размер
		|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
		|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
		|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = РазмерыПрочихВычетовТекст;
	Запрос.Выполнить();
	
	НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
        |	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
        |ПОМЕСТИТЬ ВТГражданствоСрезПоследних
        |ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ))
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_НастройкиВычетов.ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТГражданствоСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТГражданствоСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, 0) КАК НеЯвляетсяНалоговымРезидентомРК
        |ПОМЕСТИТЬ ВТГражданствоФизЛиц
        |ИЗ
        |	ВТГражданствоСрезПоследних КАК ВТГражданствоСрезПоследних
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТГражданствоСрезПоследних.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		   И ВТГражданствоСрезПоследних.ПериодГражданства = ГражданствоФизЛиц.Период
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	ФизическоеЛицо,
        |	МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗПМРП.РазмерМЗП,
		|	ВТ_РазмерыМЗПМРП.РазмерМРП,
		|	ВЫБОР 
        |       КОГДА НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА 
        |           ТОГДА ВЫБОР
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			            ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					        КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						        ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					        ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|		    	           КОНЕЦ
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыВзносов.СуммаВзносов, 0)
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		                ИНАЧЕ 0
		|	            КОНЕЦ 
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗПМРП КАК ВТ_РазмерыМЗПМРП
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗПМРП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизЛиц КАК ГражданствоФизЛиц
	    |		ПО (ГражданствоФизЛиц.ФизическоеЛицо = ВТ_НастройкиВычетов.ФизическоеЛицо)
    	|			И (ГражданствоФизЛиц.МесяцНалоговогоПериода = ВТ_НастройкиВычетов.МесяцНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыВзносов КАК ВТ_РазмерыВзносов
		|		ПО
		|" + ?(ПрименятьОПВиВОСМСДляГПХ, "
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_РазмерыВзносов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|", "
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|") + "
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыВзносов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ВидВзносов = ВТ_РазмерыВзносов.ВидВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = НастройкиИРазмерыВычетовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НастройкиИРазмерыВычетов";
	
	НакопленныеДанныеПоВычетамТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
		|ИЗ
		|	ВТ_Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|ИЗ
		|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПоследнийМесяцНалоговогоПериода, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|			КОНЕЦ)
		|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
		|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
		|			И (ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|				ИЛИ СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.Налогоплательщик = &Налогоплательщик
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
		|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
		|			И ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ПО ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|			КОНЕЦ
		|			И (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
		|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо КАК Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета КАК ВидВычета,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериоде) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериоде) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГодаПоДругимДоходам) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГодаПоДругимДоходам) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериодеПоДругимДоходам) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериодеПоДругимДоходам) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
		|ИЗ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров КАК ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета";
		
	Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
	Запрос.Выполнить(); 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетамИтогРегистров";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетам";
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПНВременная
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДоходаИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_СведенияОДоходахИПНВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахИПНВременная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахИПНВременная.Физлицо КАК Физлицо,
		|	СведенияОДоходахИПНВременная.ОблагаемыйДоход КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_СведенияОДоходахИПНВременная КАК СведенияОДоходахИПНВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоходаИПН.Период,
		|	СотрудникиБезДоходаИПН.Физлицо,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДоходаИПН КАК СотрудникиБезДоходаИПН
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СведенияОДоходахИПНВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДоходаИПН";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_СведенияОДоходахИПН.ФизЛицо КАК ФизЛицо,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВычета,
		|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
		|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов,
		|	ВТ_НастройкиИРазмерыВычетов.ПределВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления,
		|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета,
		|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериоде, 0) КАК РазрешенныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериоде, 0) КАК ПримененныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГодаПоДругимДоходам, 0) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГодаПоДругимДоходам, 0) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам,
		|	ВТ_СведенияОДоходахИПН.ОблагаемыйДоход
		|ИЗ
		|	ВТ_СведенияОДоходахИПН КАК ВТ_СведенияОДоходахИПН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
		|		ПО ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода
		|" + ?(ПрименятьОПВиВОСМСДляГПХ, "
		|			И ((ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|								И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|							ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|", "
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)

		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|") + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
		|		ПО ВТ_СведенияОДоходахИПН.Физлицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
		|			И (ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СведенияОДоходахИПН.ФизЛицо,
		|	МесяцНалоговогоПериода,
		|	Приоритет";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДанныеДляРасчетаВычетовИПНПосле2021(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца) Экспорт
												
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;      
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета", '20180101');
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// получим ПоследнийМесяцНалоговогоПериода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", ПервыйМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", ПоследнийМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПервыйМесяцНалоговогоПериода));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|";
		
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|	
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ
		|	ВТ_СписокФизЛиц КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ПрименениеВычетовИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВычетыФизическихЛицИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	ВТ_Периоды.Период >= ДАТАВРЕМЯ(2020, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета
		|;
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета КАК ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|			ИЛИ ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ВТ_ПрименениеВычетовИПН.ФизическоеЛицо ЕСТЬ NULL
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = ВычетыФизЛицТекст;
	Запрос.Выполнить();
	
	РасчетныеПоказателиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыВГодах
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
		|ИЗ
		|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода КАК ГодНалоговогоПериода,
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ПОМЕСТИТЬ ВТ_РазмерыМЗПМРП
		|ИЗ
		|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода";
		
	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	
	РазмерыВзносовТекст	= 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаВзносов,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) КАК ВидВзносов
		|ПОМЕСТИТЬ ВТ_РазмерыВзносов
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос),
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	Запрос.Текст = РазмерыВзносовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_РазмерыВзносов";
	
	РазмерыПрочихВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ПрочиеВычетыФизическихЛицИПН.Размер
		|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
		|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
		|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = РазмерыПрочихВычетовТекст;
	Запрос.Выполнить();
	
	НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
        |	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
        |ПОМЕСТИТЬ ВТГражданствоСрезПоследних
        |ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ))
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_НастройкиВычетов.ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТГражданствоСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТГражданствоСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, 0) КАК НеЯвляетсяНалоговымРезидентомРК
        |ПОМЕСТИТЬ ВТГражданствоФизЛиц
        |ИЗ
        |	ВТГражданствоСрезПоследних КАК ВТГражданствоСрезПоследних
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТГражданствоСрезПоследних.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		   И ВТГражданствоСрезПоследних.ПериодГражданства = ГражданствоФизЛиц.Период
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	ФизическоеЛицо,
        |	МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗПМРП.РазмерМЗП,
		|	ВТ_РазмерыМЗПМРП.РазмерМРП,
		|	ВЫБОР 
        |       КОГДА НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА 
        |           ТОГДА ВЫБОР
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			            ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					        КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						        ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					        ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|		    	           КОНЕЦ
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыВзносов.СуммаВзносов, 0)
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		                ИНАЧЕ 0
		|	            КОНЕЦ 
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗПМРП КАК ВТ_РазмерыМЗПМРП
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗПМРП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизЛиц КАК ГражданствоФизЛиц
	    |		ПО ГражданствоФизЛиц.ФизическоеЛицо = ВТ_НастройкиВычетов.ФизическоеЛицо
        |			И (ГражданствоФизЛиц.МесяцНалоговогоПериода = ВТ_НастройкиВычетов.МесяцНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыВзносов КАК ВТ_РазмерыВзносов
		|		ПО
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_РазмерыВзносов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыВзносов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ВидВзносов = ВТ_РазмерыВзносов.ВидВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = НастройкиИРазмерыВычетовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НастройкиИРазмерыВычетов";
	
	НакопленныеДанныеПоВычетамТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
		|ИЗ
		|	ВТ_Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|ИЗ
		|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПоследнийМесяцНалоговогоПериода, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|			КОНЕЦ)
		|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
		|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
		|			И (ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|				ИЛИ СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.Налогоплательщик = &Налогоплательщик
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
		|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
		|			И ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ПО ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|			КОНЕЦ
		|			И (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
		|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо КАК Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета КАК ВидВычета,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериоде) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериоде) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГодаПоДругимДоходам) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГодаПоДругимДоходам) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериодеПоДругимДоходам) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериодеПоДругимДоходам) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
		|ИЗ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров КАК ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета";
		
	Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
	Запрос.Выполнить(); 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетамИтогРегистров";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетам";
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПНВременная
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДоходаИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_СведенияОДоходахИПНВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахИПНВременная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахИПНВременная.Физлицо КАК Физлицо,
		|	СведенияОДоходахИПНВременная.ОблагаемыйДоход КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_СведенияОДоходахИПНВременная КАК СведенияОДоходахИПНВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоходаИПН.Период,
		|	СотрудникиБезДоходаИПН.Физлицо,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДоходаИПН КАК СотрудникиБезДоходаИПН
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СведенияОДоходахИПНВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДоходаИПН";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_СведенияОДоходахИПН.ФизЛицо КАК ФизЛицо,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВычета,
		|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
		|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов,
		|	ВТ_НастройкиИРазмерыВычетов.ПределВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления,
		|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета,
		|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериоде, 0) КАК РазрешенныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериоде, 0) КАК ПримененныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГодаПоДругимДоходам, 0) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГодаПоДругимДоходам, 0) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам,
		|	ВТ_СведенияОДоходахИПН.ОблагаемыйДоход
		|ИЗ
		|	ВТ_СведенияОДоходахИПН КАК ВТ_СведенияОДоходахИПН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
		|		ПО ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода
		|			И ((ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|								И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|							ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
		|		ПО ВТ_СведенияОДоходахИПН.Физлицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
		|			И (ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СведенияОДоходахИПН.ФизЛицо,
		|	МесяцНалоговогоПериода,
		|	Приоритет";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПолучитьДанныеДляРасчетаВычетовИПНПосле2022(ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца) Экспорт
												
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;      
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета", '20180101');
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик 
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// получим ПоследнийМесяцНалоговогоПериода
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИПНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	|
	|ГДЕ
	|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	|	И ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
	|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
	|	И ИПНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", ПервыйМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", ПоследнийМесяцНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПервыйМесяцНалоговогоПериода));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛицо
		|ПОМЕСТИТЬ ВТ_СписокФизЛиц
		|ИЗ
		|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо
		|";
		
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|	
		|ОБЪЕДИНИТЬ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ
		|	ВТ_СписокФизЛиц КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		
		ПериодыТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписокФизЛиц КАК Работники
		|		ПО (Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо)
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации
		|	И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
		|	И ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета
		|	И ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		
	КонецЕсли;
	
	ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ПрименениеВычетовИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВычетыФизическихЛицИПН.ФизическоеЛицо)
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	ПериодВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета КАК ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|	И ВТ_ПериодыВычетов.ВидВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС),
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ДАТАВРЕМЯ(1, 1, 1)
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	ВТ_Периоды.Период >= ДАТАВРЕМЯ(2020, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета
		|;
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Вычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета КАК ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|			ИЛИ ВТ_Вычеты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕ ВТ_ПрименениеВычетовИПН.ФизическоеЛицо ЕСТЬ NULL
		|	КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = ВычетыФизЛицТекст;
	Запрос.Выполнить();
	
	РасчетныеПоказателиТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыВГодах
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
		|ИЗ
		|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода КАК ГодНалоговогоПериода,
		|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
		|	РегламентированныеРасчетныеПоказатели.РазмерМРП
		|ПОМЕСТИТЬ ВТ_РазмерыМЗПМРП
		|ИЗ
		|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
		|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГодНалоговогоПериода";
		
	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	
	РазмерыВзносовТекст	= 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
		|	СУММА(ОПВРасчетыСФондами.Взнос) КАК СуммаВзносов,
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) КАК ВидВзносов
		|ПОМЕСТИТЬ ВТ_РазмерыВзносов
		|ИЗ
		|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ОПВРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ОПВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ОПВРасчетыСФондами.ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо,
		|	СУММА(ВОСМСРасчетыСФондами.Взнос),
		|	ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
		|ИЗ
		|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК РаботникиОрганизации
		|		ПО (РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо)
		|			И (НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(РаботникиОрганизации.Период, МЕСЯЦ))
		|ГДЕ
		|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
		|	И ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И ВОСМСРасчетыСФондами.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И ВОСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
		|	ВОСМСРасчетыСФондами.ФизЛицо";

	Запрос.Текст = РазмерыВзносовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_РазмерыВзносов";
	
	РазмерыПрочихВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ПрочиеВычетыФизическихЛицИПН.Размер
		|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
		|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
		|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = РазмерыПрочихВычетовТекст;
	Запрос.Выполнить();
	
	НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
        |	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
        |ПОМЕСТИТЬ ВТГражданствоСрезПоследних
        |ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		И (ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ))
        |
        |СГРУППИРОВАТЬ ПО
        |	ВТ_НастройкиВычетов.ФизическоеЛицо,
        |	ВТ_НастройкиВычетов.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ВТГражданствоСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТГражданствоСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, 0) КАК НеЯвляетсяНалоговымРезидентомРК
        |ПОМЕСТИТЬ ВТГражданствоФизЛиц
        |ИЗ
        |	ВТГражданствоСрезПоследних КАК ВТГражданствоСрезПоследних
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
        |		ПО ВЫБОР
		|   	      КОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|			    ТОГДА ВТГражданствоСрезПоследних.ФизическоеЛицо.ФизЛицо
		|		      ИНАЧЕ ВТГражданствоСрезПоследних.ФизическоеЛицо
		|	       КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
        |		   И ВТГражданствоСрезПоследних.ПериодГражданства = ГражданствоФизЛиц.Период
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	ФизическоеЛицо,
        |	МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета КАК ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗПМРП.РазмерМЗП,
		|	ВТ_РазмерыМЗПМРП.РазмерМРП,
		|	ВЫБОР 
        |       КОГДА НЕ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА 
        |           ТОГДА ВЫБОР
		|		            КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			            ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					        КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						        ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					        ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|		    	           КОНЕЦ
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыВзносов.СуммаВзносов, 0)
		|		                КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			                ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		                ИНАЧЕ 0
		|	            КОНЕЦ 
        |       ИНАЧЕ 0
        |   КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗПМРП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗПМРП КАК ВТ_РазмерыМЗПМРП
		|		ПО (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗПМРП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета
        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизЛиц КАК ГражданствоФизЛиц
	    |		ПО ГражданствоФизЛиц.ФизическоеЛицо = ВТ_НастройкиВычетов.ФизическоеЛицо
        |			И (ГражданствоФизЛиц.МесяцНалоговогоПериода = ВТ_НастройкиВычетов.МесяцНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыВзносов КАК ВТ_РазмерыВзносов
		|		ПО
		|			(ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_РазмерыВзносов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВТ_НастройкиВычетов.ФизическоеЛицо = ВЫБОР
		|				КОГДА ВТ_РазмерыВзносов.ФизЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_РазмерыВзносов.ФизЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_РазмерыВзносов.ФизЛицо
		|			КОНЕЦ)
		|			И ВТ_РазмерыВзносов.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыВзносов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ВидВзносов = ВТ_РазмерыВзносов.ВидВзносов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	ФизическоеЛицо,
		|	ВидВычета";
		
	Запрос.Текст = НастройкиИРазмерыВычетовТекст;
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НастройкиИРазмерыВычетов";
	
	НакопленныеДанныеПоВычетамТекст = 
		"ВЫБРАТЬ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК ФизЛицо,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|				ТОГДА РаботникиОрганизации.Период
		|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|		КОНЕЦ) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
		|ИЗ
		|	ВТ_Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
		|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
		|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
		|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
		|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Период,
		|	Периоды.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета КАК ВидВычета,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА  ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|				И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Периоды.Физлицо <> СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|					И НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|ИЗ
		|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &ПоследнийМесяцНалоговогоПериода, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
		|		ПО (ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
		|			КОНЕЦ)
		|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
		|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
		|			И (ВЫБОР
		|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетОПВ)
		|				ИЛИ СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета = ЗНАЧЕНИЕ(Справочник.ВычетыИПН.ВычетВОСМС)
		|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.Налогоплательщик = &Налогоплательщик
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	0,
		|	0,
		|	0,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
		|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
		|			И ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ПО ВЫБОР
		|				КОГДА ВТ_Периоды.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_Периоды.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_Периоды.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиВычетов.ФизическоеЛицо
		|			КОНЕЦ
		|			И (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
		|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо КАК Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета КАК ВидВычета,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериоде) КАК РазрешенныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериоде) КАК ПримененныйВычетВТекущемПериоде,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетСНачалаГодаПоДругимДоходам) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетСНачалаГодаПоДругимДоходам) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.РазрешенныйВычетВТекущемПериодеПоДругимДоходам) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	СУММА(ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ПримененныйВычетВТекущемПериодеПоДругимДоходам) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам
		|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
		|ИЗ
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров КАК ВТ_НакопленныеДанныеПоВычетамИтогРегистров
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.МесяцНалоговогоПериода,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.Физлицо,
		|	ВТ_НакопленныеДанныеПоВычетамИтогРегистров.ВидВычета
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо,
		|	ВидВычета";
		
	Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
	Запрос.Выполнить(); 
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетамИтогРегистров";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_НакопленныеДанныеПоВычетам";
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПНВременная
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.Физлицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДоходаИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_СведенияОДоходахИПНВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияОДоходахИПНВременная.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СведенияОДоходахИПНВременная.Физлицо КАК Физлицо,
		|	СведенияОДоходахИПНВременная.ОблагаемыйДоход КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_СведенияОДоходахИПНВременная КАК СведенияОДоходахИПНВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДоходаИПН.Период,
		|	СотрудникиБезДоходаИПН.Физлицо,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДоходаИПН КАК СотрудникиБезДоходаИПН
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СведенияОДоходахИПНВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДоходаИПН";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	ВТ_Периоды.Физлицо КАК Физлицо,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.ОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходахОбороты.СуммаДоходаОборот - ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТ_СведенияОДоходахИПН
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|				&ПервыйМесяцНалоговогоПериода,
		|				&ПоследнийМесяцНалоговогоПериода,
		|				Месяц,
		|				Налогоплательщик = &Налогоплательщик
		|					И ПериодРегистрации <= &ПериодРегистрации) КАК ИПНСведенияОДоходахОбороты
		|		ПО ВТ_Периоды.Физлицо = ИПНСведенияОДоходахОбороты.ФизЛицо
		|			И ВТ_Периоды.Период = ИПНСведенияОДоходахОбороты.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВТ_Периоды.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода,
		|	Физлицо";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ТекстЗапроса = 	
		"ВЫБРАТЬ
		|	ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВТ_СведенияОДоходахИПН.ФизЛицо КАК ФизЛицо,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВычета,
		|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
		|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов,
		|	ВТ_НастройкиИРазмерыВычетов.ПределВычета,
		|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления,
		|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП,
		|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета,
		|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериоде, 0) КАК РазрешенныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериоде, 0) КАК ПримененныйВычетВТекущемПериоде,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГодаПоДругимДоходам, 0) КАК РазрешенныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГодаПоДругимДоходам, 0) КАК ПримененныйВычетСНачалаГодаПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК РазрешенныйВычетВТекущемПериодеПоДругимДоходам,
		|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетВТекущемПериодеПоДругимДоходам, 0) КАК ПримененныйВычетВТекущемПериодеПоДругимДоходам,
		|	ВТ_СведенияОДоходахИПН.ОблагаемыйДоход
		|ИЗ
		|	ВТ_СведенияОДоходахИПН КАК ВТ_СведенияОДоходахИПН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
		|		ПО ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода
		|			И ((ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВЫБОР
		|				КОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
		|					И НЕ ВТ_НастройкиИРазмерыВычетов.ВидВзносов В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование))
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо.ФизЛицо
		|				ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|								И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|							ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
		|			ИЛИ (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_СведенияОДоходахИПН.Физлицо.ФизЛицо
		|				ИНАЧЕ ВТ_СведенияОДоходахИПН.Физлицо
		|			КОНЕЦ = ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо)
		|			И (ВЫБОР
		|				КОГДА ВТ_СведенияОДоходахИПН.Физлицо ССЫЛКА Справочник.Контрагенты
		|					ТОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|							И ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
		|
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
		|		ПО ВТ_СведенияОДоходахИПН.Физлицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
		|			И ВТ_СведенияОДоходахИПН.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
		|			И (ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_СведенияОДоходахИПН.ФизЛицо,
		|	МесяцНалоговогоПериода,
		|	Приоритет";

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Получить данные для расчета ОПВ по ставке 10%
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОПВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОПВ(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
									
	Если ПериодРегистрации >= '20200101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОПВПосле2020(ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОПВПосле2019(ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	ИначеЕсли ПериодРегистрации < '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОПВДо2019(ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса, ЭтоРасчетПервойПоловиныМесяца);
	КонецЕсли;

КонецФункции // ПолучитьДанныеДляРасчетаОПВ()

// Получить данные для расчета СО
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСО (Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
								
	Если ПериодРегистрации >= '20200101' Тогда
		// Расчет СО с ограничением на мин. объект исчисления  
		// + ежемес. расчет за ИП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОПосле2020(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
							
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		// Расчет СО с ограничением на мин. объект исчисления  
		// + ежемес. расчет за ИП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОПосле2019(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// Расчет СО с ограничением на мин. объект исчисления  
		// + ежемес. расчет за ИП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОПосле2018(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
	ИначеЕсли ПериодРегистрации >= '20140101' Тогда
		// Расчет СО с ограничением на мин. объект исчисления
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОПосле2014(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
	ИначеЕсли ПериодРегистрации >= '20130201' Тогда
		// Расчет СО с ограничением на мин. сумму дохода
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОПосле2013(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	Иначе
		// Расчет СО без ограничения на мин. сумму дохода
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСОДо2013(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса);
	КонецЕсли;
									
	Возврат РезультатЗапроса;
	
КонецФункции

// Получить данные для расчета СО с мин. ограничением на объект исчисления,
// опциональный ежемесячный расчет за ИП
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОПосле2018(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено)
									
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	
	ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = Ложь;
	ДанныеНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Если ДанныеНалогоплательщика.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Налогоплательщик, ПериодРегистрации);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеНалогоплательщика.ИндивидуальныйПредприниматель);
		
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТ_ФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизлицаПенсионеры";


	ПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизЛиц.Период КАК Период,
	|	ПериодыФизЛиц.Физлицо КАК Физлицо,
	|	ПериодыФизЛиц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ПериодыФизЛиц.ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО (Работники.Физлицо = СОСведенияОДоходах.ФизЛицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|	ГДЕ
	|		СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|		И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|		И НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|		И СОСведенияОДоходах.Активность
	|	
	|) КАК ПериодыФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";
		
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";	
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПустаяДата", 			  Дата(1,1,1));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
		|ВЫБРАТЬ
		|	СООбороты.ФизЛицо КАК ФизЛицо,
		|	СООбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
		|			ТОГДА СУММА(СООбороты.СуммаДоходаОборот) - СУММА(СООбороты.СуммаВычетаОборот)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОблагаемыйДоход,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.ОблагаемаяБаза) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Физлицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ) КАК Период,
		|		СУММА(ЕСТЬNULL(ВЫБОР
		|							КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|								ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0)) КАК СуммаДоходаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаВычетаОборот, 0)) КАК СуммаВычетаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.ОблагаемаяБазаОборот, 0)) КАК ОблагаемаяБаза,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаНачислений,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|	ИЗ
		|		" + ПериодыТекст + " КАК Работники 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&парамНачало,
		|				&парамКонец,
		|				Регистратор,
		|				ПериодРегистрации <= &парамКонецПериодаРегистрации
		|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
		|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
		|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
		|	ГДЕ 
		|		НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
		|
		|	СГРУППИРОВАТЬ ПО
		|		Работники.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)) КАК СООбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СООбороты.Период,
		|	СООбороты.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СООбороты.ФизЛицо,
		|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ СОРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	//	за исключением ИП
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность " + ?(ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП, " И
	|	ОПВРасчетыСФондами.ФизЛицо <> &ИндивидуальныйПредприниматель", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТ_РазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// Ограничение на объект исчисления 
	ПолеОграничениеНаМинОбъектИсчисления = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0 
	|		И " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " < " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	ТОГДА " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОграничениеНаМинОбъектИсчисления + " КАК МинОбъектИсчисления,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСО()

// Получить данные для расчета СО с мин. ограничением на объект исчисления
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОПосле2014(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено)
									
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТ_ФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизлицаПенсионеры";


	ПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизЛиц.Период КАК Период,
	|	ПериодыФизЛиц.Физлицо КАК Физлицо,
	|	ПериодыФизЛиц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ПериодыФизЛиц.ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО (Работники.Физлицо = СОСведенияОДоходах.ФизЛицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|	ГДЕ
	|		СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|		И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|		И НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|		И СОСведенияОДоходах.Активность
	|	
	|) КАК ПериодыФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";
		
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";	
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПустаяДата", 			  Дата(1,1,1));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
		|ВЫБРАТЬ
		|	СООбороты.ФизЛицо КАК ФизЛицо,
		|	СООбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
		|			ТОГДА СУММА(СООбороты.СуммаДоходаОборот) - СУММА(СООбороты.СуммаВычетаОборот)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОблагаемыйДоход,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.ОблагаемаяБаза) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Физлицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ) КАК Период,
		|		СУММА(ЕСТЬNULL(ВЫБОР
		|							КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|								ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0)) КАК СуммаДоходаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаВычетаОборот, 0)) КАК СуммаВычетаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.ОблагаемаяБазаОборот, 0)) КАК ОблагаемаяБаза,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаНачислений,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|	ИЗ
		|		" + ПериодыТекст + " КАК Работники 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&парамНачало,
		|				&парамКонец,
		|				Регистратор,
		|				ПериодРегистрации <= &парамКонецПериодаРегистрации
		|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
		|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
		|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
		|	ГДЕ 
		|		НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
		|
		|	СГРУППИРОВАТЬ ПО
		|		Работники.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)) КАК СООбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СООбороты.Период,
		|	СООбороты.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СООбороты.ФизЛицо,
		|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ СОРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТ_РазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// Ограничение на объект исчисления 
	ПолеОграничениеНаМинОбъектИсчисления = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0 
	|		И " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " < " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	ТОГДА " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОграничениеНаМинОбъектИсчисления + " КАК МинОбъектИсчисления,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСО()

// Получить данные для расчета СО с мин. ограничением на общую сумму дохода
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОПосле2013(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено)
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТ_ФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизлицаПенсионеры";

	ПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизЛиц.Период КАК Период,
	|	ПериодыФизЛиц.Физлицо КАК Физлицо,
	|	ПериодыФизЛиц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ПериодыФизЛиц.ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО (Работники.Физлицо = СОСведенияОДоходах.ФизЛицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|	ГДЕ
	|		СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|		И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|		И СОСведенияОДоходах.Активность
	|	
	|) КАК ПериодыФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";
		
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПустаяДата", 			  Дата(1,1,1));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
		|ВЫБРАТЬ
		|	СООбороты.ФизЛицо КАК ФизЛицо,
		|	СООбороты.Период КАК Период,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
		|			ТОГДА СУММА(СООбороты.СуммаДоходаОборот) - СУММА(СООбороты.СуммаВычетаОборот)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОблагаемыйДоход,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.СуммаНачислений) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаНачислений,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.ОблагаемаяБаза) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Физлицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ) КАК Период,
		|		СУММА(ЕСТЬNULL(ВЫБОР
		|							КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|								ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0)) КАК СуммаДоходаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаВычетаОборот, 0)) КАК СуммаВычетаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.ОблагаемаяБазаОборот, 0)) КАК ОблагаемаяБаза,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаНачислений,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|	ИЗ
		|		" + ПериодыТекст + " КАК Работники 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&парамНачало,
		|				&парамКонец,
		|				МЕСЯЦ,
		|				ПериодРегистрации <= &парамКонецПериодаРегистрации
		|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
		|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
		|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
		|
		|	СГРУППИРОВАТЬ ПО
		|		Работники.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)) КАК СООбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СООбороты.Период,
		|	СООбороты.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СООбороты.ФизЛицо,
		|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТ_РазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// Общая сумма начислений за месяц
	ПолеСуммаНачислений = "ЕСТЬNULL(ДоходыЗаМесяц.СуммаНачислений, 0)";
	
	// Ограничение на объект исчисления 
	ПолеОграничениеНаМинОбъектИсчисления = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0 
	|		И " + ПолеСуммаНачислений + " > 0
	|		И " + ПолеСуммаНачислений + " < " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	ТОГДА " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеСуммаНачислений + " КАК ОбщаяСуммаНачислений,
	|	" + ПолеОграничениеНаМинОбъектИсчисления + " КАК МинОбъектИсчисления,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();

КонецФункции

// Получить данные для расчета СО
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОДо2013(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СОСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СОСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СОСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СОСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|		ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|ГДЕ
	|	СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СОСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ),
	|	СОСведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	СООбороты.ФизЛицо КАК ФизЛицо,
	|	СООбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
	|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
	|			ТОГДА СУММА(СООбороты.СуммаДоходаОборот) - СУММА(СООбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
	|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
	|			ТОГДА СУММА(СООбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(СОСведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(СОСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СОСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)) КАК СООбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СООбороты.Период,
	|	СООбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СООбороты.ФизЛицо,
	|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТСОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТСОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// размер МЗП
	ПолеРазмерМЗП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСО()

// Получить данные для расчета СН.
// 
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСН(	Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
									
	Если Налогоплательщик.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
	
		РезультатЗапроса = ПолучитьДанныеДляРасчетаСНИндивидуальныйПредприниматель(ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса);
	
	Иначе
	    Если ПериодРегистрации >= '20220101' Тогда
			// расчет соц. налога по фикс. ставке
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2022(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);

		ИначеЕсли ПериодРегистрации >= '20200101' Тогда
			// расчет соц. налога по фикс. ставке
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2020(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);
		ИначеЕсли ПериодРегистрации >= '20190101' Тогда
			// расчет соц. налога по фикс. ставке
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2019(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);
		ИначеЕсли ПериодРегистрации >= '20180101' Тогда
			// расчет соц. налога по фикс. ставке
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2018(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);
		ИначеЕсли ПериодРегистрации >= '20090101' Тогда
			// расчет соц. налога по фикс. ставке
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);
		
		Иначе
			// расчет соц. налога по шкале
			РезультатЗапроса = ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокДо2009(ПоследнийМесяцНалоговогоПериода, 
																	ПериодРегистрации,
																	Налогоплательщик, 
																	ГоловнаяОрганизация,
																	Регистратор, 
																	СписокФизЛицТекст, 
																	ДополнительныеПараметрыЗапроса);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РезультатЗапроса;								
	
КонецФункции // ПолучитьДанныеДляРасчетаСН()

// Получить данные для расчета СН по регрессивной шкале
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокДо2009(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация",	ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	// массив видов ставок для исчисления СН
	МассивВидовСтавокСН = Новый Массив();
	МассивВидовСтавокСН.Добавить(Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК);
	МассивВидовСтавокСН.Добавить(Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов);
	
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  				   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 				   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамВнутреннееСовместительство",   Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	Запрос.УстановитьПараметр("парамПринят", 		   			   Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	Запрос.УстановитьПараметр("парамУволен", 		   			   Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("парамКонецМесяцаНалоговогоПериода", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачалоГода",				   НачалоГода(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецГода",   				   КонецГода(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамНеОблагаетсяЦеликом",		   Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом);
	Запрос.УстановитьПараметр("парамВидыСтавокСН",				   МассивВидовСтавокСН);
	Запрос.УстановитьПараметр("парамПоИсчислениюСНДляГражданРК",   Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляГражданРК);
	Запрос.УстановитьПараметр("парамПоИсчислениюСНДляИностранныхСпециалистов", Перечисления.ВидыСтавокИПНиСН.ПоИсчислениюСНДляИностранныхСпециалистов);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.Период КАК Период,
	|	Периоды.ФизЛицо КАК Физлицо
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СНСведенияОДоходах.ФизЛицо КАК Физлицо
	|	ИЗ
	|		РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|	ГДЕ
	|		СНСведенияОДоходах.ПериодРегистрации >= &парамНачалоГода И
	|		СНСведенияОДоходах.ПериодРегистрации <= &парамПериодРегистрации И
	|		СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик И
	|		СНСведенияОДоходах.Активность
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(СведенияПредыдущегоМеста.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|		СведенияПредыдущегоМеста.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМеста
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СведенияПредыдущегоМеста.ФизЛицо
	|
	|	ГДЕ
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СведенияПредыдущегоМеста.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		СведенияПредыдущегоМеста.Налогоплательщик = &парамНалогоплательщик) КАК Периоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо";
	
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";	
	
	// ФизлицаИностранныеСпециалисты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-иностранных специалистов
	ФизлицаИностранныеСпециалистыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаИностранныеСпециалисты
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецГода) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.ИностранныйСпециалист)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаИностранныеСпециалистыТекст;
	Запрос.Выполнить();
	ФизлицаИностранныеСпециалистыТекст = "ВТФизлицаИностранныеСпециалисты";	

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	СНОбороты.Физлицо КАК ФизЛицо,
	|	СНОбороты.Период КАК Период,
	|	СУММА(СНОбороты.СуммаДоходаВсего) КАК СуммаДоходаВсего,
	|	СУММА(СНОбороты.СуммаНеОблагаемогоДохода) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(СНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|	СУММА(СНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|		СУММА(ВЫБОР
	|				КОГДА СНСведенияОДоходах.СпособНалогообложения = &парамНеОблагаетсяЦеликом
	|					ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|			КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|		СУММА(ВЫБОР
	|				КОГДА СНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом
	|					ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР
	|				КОГДА СНСведенияОДоходах.СпособНалогообложения <> &парамНеОблагаетсяЦеликом
	|					ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот
	|	ИЗ
	|		РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачалоГода,
	|					&парамКонецМесяцаНалоговогоПериода,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик) КАК СНСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|		СНСведенияОДоходах.ФизЛицо
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		СНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|		СУММА(СНСведенияПредыдущегоМестаРаботы.Доход) КАК СуммаДоходаВсего,
	|		СУММА(СНСведенияПредыдущегоМестаРаботы.Доход - СНСведенияПредыдущегоМестаРаботы.ДоходОблагаемыйСН) КАК СуммаНеОблагаемогоДохода,
	|		СУММА(СНСведенияПредыдущегоМестаРаботы.ДоходОблагаемыйСН) КАК СуммаДоходаОборот,
	|		0 КАК СуммаВычетаОборот
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СНСведенияПредыдущегоМестаРаботы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		СНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		СНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК СНОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СНОбороты.Физлицо,
	|	СНОбороты.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНОбороты.Физлицо,
	|	СНОбороты.Период";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";

	ТипЗначенияСНТекст = "ЧИСЛО(15, 2)";
	
	// ДоходыЗаГод 
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоходЗаГод
	//
	//	Описание:
	//	Выбирает по всем периодам с начала года сумму дохода нарастающим итогом за год
	ДоходыЗаГодТекст = "
	|ВЫБРАТЬ
	|	СНОбороты.Период КАК Период,
	|	СНОбороты.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНОбороты.СуммаДоходаВсего) КАК СуммаДоходаВсего,
	|	СУММА(СНОбороты.СуммаНеОблагаемогоДохода) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(СНОбороты.ОблагаемыйДоходЗаГод) КАК ОблагаемыйДоходЗаГод
	|
	|ПОМЕСТИТЬ ВТДоходыЗаГод
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		Периоды.Физлицо КАК ФизЛицо,
	|		СНОбороты.СуммаДоходаВсего,
	|		СНОбороты.СуммаНеОблагаемогоДохода,
	|		СНОбороты.СуммаДоходаОборот - СНОбороты.СуммаВычетаОборот КАК ОблагаемыйДоходЗаГод
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК СНОбороты
	|			ПО Периоды.Период >= СНОбороты.Период 
	|				И СНОбороты.Период >= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) 
	|				И Периоды.Физлицо = СНОбороты.Физлицо) КАК СНОбороты
    |
	|СГРУППИРОВАТЬ ПО
	|	СНОбороты.Период,
	|	СНОбороты.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНОбороты.Период,
	|	СНОбороты.ФизЛицо";

	Запрос.Текст = ДоходыЗаГодТекст;
	Запрос.Выполнить();
	ДоходыЗаГодТекст = "ВТДоходыЗаГод";	

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.ИсчисленныйНалог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТСНИсчисленный
	|ИЗ
	|	(ВЫБРАТЬ
	|		СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|		СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|	ИЗ
	|		РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|	ГДЕ
	|		СНИсчисленный.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СНИсчисленный.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|		СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|		СНИсчисленный.Регистратор <> &парамРегистратор И
	|		СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|		СНИсчисленный.Активность
	|
	|	СГРУППИРОВАТЬ ПО
	|		СНИсчисленный.МесяцНалоговогоПериода,
	|		СНИсчисленный.ФизЛицо
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		СНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|		СУММА(СНСведенияПредыдущегоМестаРаботы.СН)
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СНСведенияПредыдущегоМестаРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = СНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		СНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(СНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		СНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК СНИсчисленный
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТСНИсчисленный";

	// СНИсчисленныйЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныйНалогЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные налоги нарастающим итогом за год
	СНИсчисленныйЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.ИсчисленныйНалог) КАК ИсчисленныйНалогЗаГод
	|
	|ПОМЕСТИТЬ ВТСНИсчисленныйЗаГод
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Периоды.Период >= СНИсчисленный.МесяцНалоговогоПериода 
	|			И СНИсчисленный.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|			И Периоды.Физлицо = СНИсчисленный.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	СНИсчисленный.ФизЛицо";
	
	Запрос.Текст = СНИсчисленныйЗаГодТекст;
	Запрос.Выполнить();
	СНИсчисленныйЗаГодТекст = "ВТСНИсчисленныйЗаГод";
	
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И 
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";
	
	// ОПВРасчетыСФондамиЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносыЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы нарастающим итогом за год
	ОПВРасчетыСФондамиЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.ИсчисленныеВзносы) КАК ИсчисленныеВзносыЗаГод
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондамиЗаГод
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Периоды.Период >= ОПВРасчетыСФондами.МесяцНалоговогоПериода 
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|			И Периоды.Физлицо = ОПВРасчетыСФондами.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	ОПВРасчетыСФондами.ФизЛицо";
	
	Запрос.Текст = ОПВРасчетыСФондамиЗаГодТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиЗаГодТекст = "ВТОПВРасчетыСФондамиЗаГод";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СОРасчеты.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчеты.ИсчисленныеОтчисления) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТСОРасчетыСФондами
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|		СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|	ИЗ
	|		РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|	ГДЕ
	|		СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонецМесяцаНалоговогоПериода И
	|		СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|		СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|		СОРасчетыСФондами.ВидДвижения = &парамПриход И
	|		СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
	|		СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|		СОРасчетыСФондами.Активность
	|
	|	СГРУППИРОВАТЬ ПО
	|		СОРасчетыСФондами.МесяцНалоговогоПериода,
	|		СОРасчетыСФондами.ФизЛицо
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(CНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		CНСведенияПредыдущегоМестаРаботы.ФизЛицо,
	|		СУММА(CНСведенияПредыдущегоМестаРаботы.СО)
	|	ИЗ
	|		РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК CНСведенияПредыдущегоМестаРаботы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО Работники.Физлицо = CНСведенияПредыдущегоМестаРаботы.ФизЛицо
	|	
	|	ГДЕ
	|		CНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода >= &парамНачалоГода И
	|		CНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода <= &парамПериодРегистрации И
	|		CНСведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(CНСведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, МЕСЯЦ),
	|		CНСведенияПредыдущегоМестаРаботы.ФизЛицо) КАК СОРасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчеты.МесяцНалоговогоПериода,
	|	СОРасчеты.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчеты.МесяцНалоговогоПериода,
	|	СОРасчеты.ФизЛицо";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТСОРасчетыСФондами";

	// СОРасчетыСФондамиЗаГод
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеОтчисленияЗаГод
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления нарастающим итогом за год
	СОРасчетыСФондамиЗаГодТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период КАК Период,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.ИсчисленныеОтчисления) КАК ИсчисленныеОтчисленияЗаГод
	|
	|ПОМЕСТИТЬ ВТСОРасчетыСФондамиЗаГод
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Периоды.Период >= СОРасчетыСФондами.МесяцНалоговогоПериода 
	|			И СОРасчетыСФондами.МесяцНалоговогоПериода >= НАЧАЛОПЕРИОДА(Периоды.Период, Год) 
	|			И Периоды.Физлицо = СОРасчетыСФондами.Физлицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Период,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	СОРасчетыСФондами.ФизЛицо";

	Запрос.Текст = СОРасчетыСФондамиЗаГодТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиЗаГодТекст = "ВТСОРасчетыСФондамиЗаГод";

	// ПериодыНачалаНалоговогоГодаФизЛиц
	//	Поля:
	//		Физлицо
	//		Период
	//		МесяцНачалаНалоговогоГода
	//
	//	Описание:
	//	Получает по всем периодам месяц начала налогового года для физлиц
	ПериодыНачалаНалоговогоГодаФизЛицТекст = 
	"ВЫБРАТЬ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	МИНИМУМ(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода) КАК МесяцНачалаНалоговогоГода
	|
	|ПОМЕСТИТЬ ВТПериодыНачалаНалоговогоГодаФизЛиц
	|ИЗ
	|	" + ПериодыТекст + " КАК Периоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода) КАК НачалоНалоговогоГода,
	|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД) КАК НачалоКалендарногоГода,
	|				СведенияПредыдущегоМестаРаботы.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботы
	|			ГДЕ
	|				СведенияПредыдущегоМестаРаботы.Налогоплательщик = &парамНалогоплательщик 
	|				И СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|				И СведенияПредыдущегоМестаРаботы.Физлицо В ("+СписокФизлицТекст+")
	|
	|			СГРУППИРОВАТЬ ПО
	|				НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботы.МесяцНалоговогоПериода, ГОД),
	|				СведенияПредыдущегоМестаРаботы.ФизЛицо
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Период) КАК НачалоНалоговогоГода,
	|				&парамНачалоГода КАК НачалоКалендарногоГода,
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&парамНачалоГода,
	|						Организация = &парамГоловнаяОрганизация
	|						И Сотрудник.ФизЛицо В (" + СписокФизлицТекст + ")) КАК РаботникиОрганизацийСрезПоследних
	|			ГДЕ
	|				РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> &парамУволен
	|				И РаботникиОрганизацийСрезПоследних.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизацийСрезПоследних.Сотрудник.ФизЛицо
	|
	|			ОБЪЕДИНИТЬ ВСЕ
	|
	|			ВЫБРАТЬ
	|				МИНИМУМ(РаботникиОрганизаций.Период) КАК НачалоНалоговогоГода,
	|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД) КАК НачалоКалендарногоГода,
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо КАК ФизЛицо
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|			ГДЕ
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо В (" + СписокФизлицТекст + ")
	|				И РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|				И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|				И РаботникиОрганизаций.Период МЕЖДУ &парамНачалоГода И &парамКонецМесяцаНалоговогоПериода
	|				И РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамПринят
	|				И РаботникиОрганизаций.Активность
	|
	|			СГРУППИРОВАТЬ ПО
	|				НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ГОД),
	|				РаботникиОрганизаций.Сотрудник.ФизЛицо
	|				
	|	) КАК ПериодыНачалаНалоговогоГода
	|		ПО Периоды.ФизЛицо = ПериодыНачалаНалоговогоГода.ФизЛицо
	|			И Периоды.Период МЕЖДУ ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода И КОНЕЦПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоКалендарногоГода, ГОД)
	|			 И Периоды.Период >= НАЧАЛОПЕРИОДА(ПериодыНачалаНалоговогоГода.НачалоНалоговогоГода, МЕСЯЦ)
	|
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период
	|";
	
	Запрос.Текст = ПериодыНачалаНалоговогоГодаФизЛицТекст;
	Запрос.Выполнить();
	ПериодыНачалаНалоговогоГодаФизЛицТекст = "ВТПериодыНачалаНалоговогоГодаФизЛиц";

	ТипЗначенияКоэффициентаПересчетаТекст = "ЧИСЛО(10, 2)";
	
	// ПрименяемыйКоэффициентПересчета
	//	Поля:
	//		Физлицо
	//		Период
	//		КоэффициентПересчета
	//
	//	Описание:
	//	Получает применяемый коэффициент пересчета по периодам
	ПрименяемыйКоэффициентПересчетаТекст = 
	"ВЫБРАТЬ
	|	Периоды.Период,
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНачалаНалоговогоГода,
	|	ВЫБОР 
	|		КОГДА Периоды.МесяцНачалаНалоговогоГода ЕСТЬ NULL 
	|			ТОГДА 1 
	|		ИНАЧЕ ВЫБОР 
	|				КОГДА (НЕ(РаботникиОрганизаций.Сотрудник ЕСТЬ NULL)
	|							И РаботникиОрганизаций.ПричинаИзмененияСостояния <> &парамУволен)
	|						ИЛИ Периоды.Период < ДАТАВРЕМЯ(2007, 1, 1)
	|					ТОГДА ВЫБОР 
	|							КОГДА Периоды.МесяцНачалаНалоговогоГода <= НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) 
	|								ТОГДА 12 / МЕСЯЦ(Периоды.Период) 
	|							ИНАЧЕ (13 - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода)) / (МЕСЯЦ(Периоды.Период) - МЕСЯЦ(Периоды.МесяцНачалаНалоговогоГода) + 1) 
	|						  КОНЕЦ 
	|				ИНАЧЕ 1 
	|			  КОНЕЦ 
	|	КОНЕЦ КАК КоэффициентПересчета,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния,
	|	РаботникиОрганизаций.Период КАК ДатаПоследнегоДвижения
	|
	|ПОМЕСТИТЬ ВТПрименяемыйКоэффициентПересчета
	|ИЗ
	|	" + ПериодыНачалаНалоговогоГодаФизЛицТекст + " КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Периоды.Период,
	|				Периоды.ФизЛицо,
	|				МАКСИМУМ(ВЫБОР
	|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
	|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|							ИНАЧЕ РаботникиОрганизаций.Период
	|						 КОНЕЦ) КАК ДатаПоследнегоДвижения
	|       	ИЗ 
	|				" + ПериодыТекст + " КАК Периоды
	|
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|					ПО РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|						И Периоды.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|						И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|						И ВЫБОР
	|							КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен 
	|								ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|							ИНАЧЕ РаботникиОрганизаций.Период
	|						  КОНЕЦ <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|						И РаботникиОрганизаций.Активность
	|
	|			СГРУППИРОВАТЬ ПО
	|				Периоды.Период,
	|				Периоды.ФизЛицо) КАК ДатыПоследнихДвижений
	|		ПО Периоды.ФизЛицо = ДатыПоследнихДвижений.ФизЛицо
	|			И Периоды.Период = ДатыПоследнихДвижений.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ДатыПоследнихДвижений.ФизЛицо = РаботникиОрганизаций.Сотрудник.ФизЛицо
	|			И РаботникиОрганизаций.Организация = &парамГоловнаяОрганизация
	|			И РаботникиОрганизаций.Сотрудник.ВидЗанятости <> &парамВнутреннееСовместительство
	|			И ДатыПоследнихДвижений.ДатаПоследнегоДвижения = ВЫБОР
	|																КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУволен
	|																	ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизаций.Период, ДЕНЬ, -1)
	|																ИНАЧЕ РаботникиОрганизаций.Период
	|			 								 				 КОНЕЦ
	|			И РаботникиОрганизаций.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период,
	|	Периоды.ФизЛицо
	|";
	
	Запрос.Текст = ПрименяемыйКоэффициентПересчетаТекст;
	Запрос.Выполнить();
	ПрименяемыйКоэффициентПересчетаТекст = "ВТПрименяемыйКоэффициентПересчета";
	
	// облагаемый доход с начала года
	ПолеОблагаемыйДоходЗаГод = "ЕСТЬNULL(ДоходыЗаГод.ОблагаемыйДоходЗаГод, 0)";
	
	// сумма исчисленных пенсионных взносов за год
	ПолеПенсионныеВзносыЗаГод = "ЕСТЬNULL(ОПВРасчетыСФондамиЗаГод.ИсчисленныеВзносыЗаГод, 0)";
	
	// сумма исчисленных социальных отчислений за год
	ПолеСоциальныеОтчисленияЗаГод = "ЕСТЬNULL(СОРасчетыСФондамиЗаГод.ИсчисленныеОтчисленияЗаГод, 0)";
	
	// облагаемая база по СН
	ПолеБазаДляИсчисленияСН = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаГод + " - " + ПолеПенсионныеВзносыЗаГод + "
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// сумма ранее исчисленного налога
	ПолеРанееНалогИсчисленный = "ЕСТЬNULL(СНИсчисленныйЗаГод.ИсчисленныйНалогЗаГод, 0)";
	
	// коэффициент пересчета
	ПолеКоэффициентПересчета = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (ПрименяемыйКоэффициентПересчета.КоэффициентПересчета) ЕСТЬ NULL 
	|				ТОГДА 1 
	|				ИНАЧЕ ПрименяемыйКоэффициентПересчета.КоэффициентПересчета 
	|			КОНЕЦ КАК " + ТипЗначенияКоэффициентаПересчетаТекст + "))";
	
	// БазаДляИсчисленияСН
	//	Поля:
	//		Период
	//		ФизЛицо
	//		ШкалаСтавокСН
	//      ОблагаемаяСумма
	//
	//	Описание:
	//	Получает облагаемую базу для исчисления СН с учетом коэффициента пересчета
	БазаДляИсчисленияСНТекст = 
	"ВЫБРАТЬ 
	|	ДоходыЗаГод.Период,
	|	ДоходыЗаГод.ФизЛицо,
	|	ДоходыЗаГод.СуммаДоходаВсего,
	|	ДоходыЗаГод.СуммаНеОблагаемогоДохода,
	|	" + ПолеПенсионныеВзносыЗаГод + " ОПВЗаГод,
	|	ВЫБОР
	|		КОГДА ИностранныеСпециалисты.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакИностранногоСпециалиста,
	|	" + ПолеКоэффициентПересчета + " КАК КоэффициентПересчета,
	|	ПрименяемыйКоэффициентПересчета.МесяцНачалаНалоговогоГода,
	|	ВЫБОР 
	|		КОГДА ИностранныеСпециалисты.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА &парамПоИсчислениюСНДляГражданРК 
	|		ИНАЧЕ &парамПоИсчислениюСНДляИностранныхСпециалистов 
	|	КОНЕЦ КАК ШкалаСтавокСН,
	|	" + ПолеБазаДляИсчисленияСН + " * " + ПолеКоэффициентПересчета + " КАК ОблагаемаяСумма
	|
	|ПОМЕСТИТЬ ВТБазаДляИсчисленияСН
	|ИЗ
	|	" + ДоходыЗаГодТекст + " КАК ДоходыЗаГод
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиЗаГодТекст + " КАК ОПВРасчетыСФондамиЗаГод
	|		ПО ДоходыЗаГод.Период = ОПВРасчетыСФондамиЗаГод.Период 
	|			И ДоходыЗаГод.ФизЛицо = ОПВРасчетыСФондамиЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыйКоэффициентПересчетаТекст + " КАК ПрименяемыйКоэффициентПересчета
	|		ПО ДоходыЗаГод.Период = ПрименяемыйКоэффициентПересчета.Период 
	|			И ДоходыЗаГод.ФизЛицо = ПрименяемыйКоэффициентПересчета.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИностранныеСпециалистыТекст + " КАК ИностранныеСпециалисты
	|		ПО ДоходыЗаГод.ФизЛицо = ИностранныеСпециалисты.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоходыЗаГод.Период,
	|	ДоходыЗаГод.ФизЛицо";
	
	Запрос.Текст = БазаДляИсчисленияСНТекст;
	Запрос.Выполнить();
	БазаДляИсчисленияСНТекст = "ВТБазаДляИсчисленияСН";
	
	// ШкалаСтавокСНПоПериодам
	//	Поля:
	//		Период
	//		ШкалаСтавокСН
	//		СуммаДоходаС
	//      СуммаДоходаПо
	//      Ставка
	//      СуммаНалогаПредыдущегоПредела
	//
	//	Описание:
	//	Выбирает по всем периодам года шкалы ставок для исчисления СН
	ШкалаСтавокСНПоПериодамТекст = 
	"ВЫБРАТЬ
	|	СНШкалаСтавокСрезПоследних.Период,
	|	СведенияОСтавкахИПНиСН.ВидСтавокИПНиСН КАК ШкалаСтавокСН,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаС,
	|	СведенияОСтавкахИПНиСН.СуммаДоходаПо,
	|	СведенияОСтавкахИПНиСН.Ставка,
	|	СведенияОСтавкахИПНиСН.СуммаНалогаПредыдущегоПредела
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(СтавкиСН.Период) КАК ПериодСреза,
	|		Периоды.Период КАК Период
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СтавкиСН
	|			ПО СтавкиСН.Период <= Периоды.Период 
	|				И СтавкиСН.ВидСтавокИПНиСН В (&парамВидыСтавокСН)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК СНШкалаСтавокСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОСтавкахИПНиСН КАК СведенияОСтавкахИПНиСН
	|		ПО СведенияОСтавкахИПНиСН.Период = СНШкалаСтавокСрезПоследних.ПериодСреза 
	|			И СведенияОСтавкахИПНиСН.ВидСтавокИПНиСН В (&парамВидыСтавокСН)";

	Запрос.Текст = ШкалаСтавокСНПоПериодамТекст;

	// ИсчисленныйСН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	//	
	//	Описание:
	//	Выбирает доход нарастающим итогом, исчисленный налог нарастающим итогом и производит расчет налога
	ИсчисленныйСНТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БазаДляИсчисленияСН.ФизЛицо,
	|	БазаДляИсчисленияСН.Период,
	|	БазаДляИсчисленияСН.СуммаДоходаВсего,
	|	БазаДляИсчисленияСН.СуммаНеОблагаемогоДохода,
	|	БазаДляИсчисленияСН.ОПВЗаГод,
	|	БазаДляИсчисленияСН.ПризнакИностранногоСпециалиста,
	|   БазаДляИсчисленияСН.КоэффициентПересчета,
	|	БазаДляИсчисленияСН.ОблагаемаяСумма,
	|	БазаДляИсчисленияСН.МесяцНачалаНалоговогоГода,
	|	ЕСТЬNULL(СтавкиСН.СуммаНалогаПредыдущегоПредела, 0) КАК СуммаНалогаПредыдущегоПредела,
	|	ЕСТЬNULL(СтавкиСН.СуммаДоходаС, 0) КАК СуммаДоходаС,
	|	ЕСТЬNULL(СтавкиСН.СуммаДоходаПо, 0) КАК СуммаДоходаПо,
	|	ЕСТЬNULL(СтавкиСН.Ставка, 0) КАК ПроцентСтавки,
	|	БазаДляИсчисленияСН.ШкалаСтавокСН,
	|	" + ПолеРанееНалогИсчисленный + " КАК РанееНалогИсчисленный,
	|	" + ПолеСоциальныеОтчисленияЗаГод + " КАК СОЗаГод,
	|	ВЫРАЗИТЬ((ЕСТЬNULL(СтавкиСН.СуммаНалогаПредыдущегоПредела, 0) + (БазаДляИсчисленияСН.ОблагаемаяСумма - ЕСТЬNULL(СтавкиСН.СуммаДоходаС, 0)) * ЕСТЬNULL(СтавкиСН.Ставка, 0) / 100) КАК " + ТипЗначенияСНТекст + ") КАК СНЗаГод,
	|	ВЫРАЗИТЬ((ЕСТЬNULL(СтавкиСН.СуммаНалогаПредыдущегоПредела, 0) + (БазаДляИсчисленияСН.ОблагаемаяСумма - ЕСТЬNULL(СтавкиСН.СуммаДоходаС, 0)) * ЕСТЬNULL(СтавкиСН.Ставка, 0) / 100) / БазаДляИсчисленияСН.КоэффициентПересчета КАК " + ТипЗначенияСНТекст + ") - " + ПолеРанееНалогИсчисленный + " - " + ПолеСоциальныеОтчисленияЗаГод + " КАК НалогИсчисленный
	|ИЗ
	|	" + БазаДляИсчисленияСНТекст + " КАК БазаДляИсчисленияСН
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + ШкалаСтавокСНПоПериодамТекст + ") КАК СтавкиСН
	|		ПО БазаДляИсчисленияСН.Период = СтавкиСН.Период 
	|			И БазаДляИсчисленияСН.ОблагаемаяСумма > СтавкиСН.СуммаДоходаС 
	|			И БазаДляИсчисленияСН.ОблагаемаяСумма <= СтавкиСН.СуммаДоходаПо 
	|			И БазаДляИсчисленияСН.ШкалаСтавокСН = СтавкиСН.ШкалаСтавокСН
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйЗаГодТекст + " КАК СНИсчисленныйЗаГод
	|		ПО БазаДляИсчисленияСН.Период = СНИсчисленныйЗаГод.Период 
	|			И БазаДляИсчисленияСН.ФизЛицо = СНИсчисленныйЗаГод.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиЗаГодТекст + " КАК СОРасчетыСФондамиЗаГод
	|		ПО БазаДляИсчисленияСН.Период = СОРасчетыСФондамиЗаГод.Период 
	|			И БазаДляИсчисленияСН.ФизЛицо = СОРасчетыСФондамиЗаГод.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	БазаДляИсчисленияСН.ФизЛицо, 
	|	БазаДляИсчисленияСН.Период
	|";
	
	Запрос.Текст = ИсчисленныйСНТекст;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокДо2009()

// Получить данные для расчета СН по фиксированной ставке 
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачало",				   	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец",   				   	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090131235959'));
	Запрос.УстановитьПараметр("парамВидСН", 					   Справочники.НалогиСборыОтчисления.СоциальныйНалог);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов, по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|   СНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ПериодыГода
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СНСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ПериодыГодаТекст;
	Запрос.Выполнить();
	ПериодыГодаТекст = "ВТ_ПериодыГода";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) - СУММА(СНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(СНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СНСведенияОДоходах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыГодаТекст+" КАК Периоды
	|		ПО (Периоды.Период = НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ))
	|			И (Периоды.ФизЛицо = СНСведенияОДоходах.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТ_СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода >= &парамНачало И
	|	СНИсчисленный.МесяцНалоговогоПериода <= &парамКонец И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо,
	|	СНИсчисленный.МесяцНалоговогоПериода";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТ_СНИсчисленный";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// определим учетную политику и размеры регламентированных показателей за каждый из месяцев
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗПДляЦелейНалогообложения, 0) КАК РазмерМЗП
	|	
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыГодаТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеОблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|
	|	ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0) КАК РанееИсчисленныйНалог,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0) КАК ИсчисленныеОтчисления,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Доходы.ФизЛицо = СНИсчисленный.ФизЛицо
	|			И Доходы.Период = СНИсчисленный.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Доходы.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО Доходы.Период = РасчетныеПоказатели.Период
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009()

// Получить данные для расчета СН по фиксированной ставке
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2018(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачало",				   	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец",   				   	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090131235959'));
	Запрос.УстановитьПараметр("парамВидСН", 					   Справочники.НалогиСборыОтчисления.СоциальныйНалог);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов, по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыГодаТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|   СНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ПериодыГода
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СНСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ПериодыГодаТекст;
	Запрос.Выполнить();
	ПериодыГодаТекст = "ВТ_ПериодыГода";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) - СУММА(СНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(СНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СНСведенияОДоходах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыГодаТекст+" КАК Периоды
	|		ПО (Периоды.Период = НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ))
	|			И (Периоды.ФизЛицо = СНСведенияОДоходах.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТ_СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода >= &парамНачало И
	|	СНИсчисленный.МесяцНалоговогоПериода <= &парамКонец И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо,
	|	СНИсчисленный.МесяцНалоговогоПериода";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТ_СНИсчисленный";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// определим учетную политику и размеры регламентированных показателей за каждый из месяцев
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|	
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыГодаТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеОблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|
	|	ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0) КАК РанееИсчисленныйНалог,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0) КАК ИсчисленныеОтчисления,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Доходы.ФизЛицо = СНИсчисленный.ФизЛицо
	|			И Доходы.Период = СНИсчисленный.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Доходы.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО Доходы.Период = РасчетныеПоказатели.Период
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009()

// Получить данные для расчета СН по правилам расчета для индивидуального предпринимателя.
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНИндивидуальныйПредприниматель(ПериодРегистрации, 
																Налогоплательщик,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	
	Запрос.УстановитьПараметр("парамПриход",					   ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  				   Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 				   Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамЮрФизЛицо_ФизЛицо",			   Перечисления.ЮрФизЛицо.ФизЛицо);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает уже ранее исчисленные налоги за месяц для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТСНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода = &парамПериодРегистрации И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо
	|";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТСНИсчисленный";

	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТСОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизлицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода = &парамПериодРегистрации И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо
	|";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТСОРасчетыСФондами";

	// сумма исчисленных социальных отчислений за год
	ПолеСоциальныеОтчисления = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0)";
	
	// сумма ранее исчисленного налога
	ПолеРанееНалогИсчисленный = "ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0)";
	
	// сумма исчисленного налога
	ПолеНалогИсчисленный = 
	"ВЫБОР
	|	КОГДА РаботникиОрганизации.ФизЛицо = Организации.ИндивидуальныйПредприниматель
	|		ТОГДА ЕСТЬNULL(УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, 0)
	|	ИНАЧЕ ЕСТЬNULL(УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, 0)
	|КОНЕЦ * ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) - " + ПолеСоциальныеОтчисления;
	
	// ИсчисленныйСН	
	//	Поля:
	//		Физлицо
	//		Период
	//		НалогИсчисленный
	ИсчисленныйСНТекст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Налогоплательщик,
	|	РаботникиОрганизации.ФизЛицо,
	|	&парамПериодРегистрации КАК Период,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ФизЛицо = Организации.ИндивидуальныйПредприниматель
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакИндивидуальногоПредпринимателя,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, 0) КАК КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
	|	ЕСТЬNULL(УчетнаяПолитикаНУ.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, 0) КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
	|	" + ПолеРанееНалогИсчисленный + " КАК РанееИсчисленныйНалог,
	|	" + ПолеСоциальныеОтчисления + " КАК СОЗаМесяц,
	|	ВЫБОР
	|		КОГДА " + ПолеНалогИсчисленный + " > 0
	|			ТОГДА " + ПолеНалогИсчисленный + "
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СНЗаМесяц,
	|	ВЫБОР
	|		КОГДА " + ПолеНалогИсчисленный + " > 0
	|			ТОГДА " + ПолеНалогИсчисленный + "
	|		ИНАЧЕ 0
	|	КОНЕЦ - " + ПолеРанееНалогИсчисленный + " КАК НалогИсчисленный
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК РаботникиОрганизации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(
	|				&парамКонецПериодаРегистрации,
	|				Организация = &парамНалогоплательщик) КАК УчетнаяПолитикаНУ
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&парамКонецПериодаРегистрации) КАК РасчетныеПоказатели
	|		ПО ИСТИНА
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Организации.Ссылка = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО РаботникиОрганизации.ФизЛицо = СНИсчисленный.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО РаботникиОрганизации.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаботникиОрганизации.ФизЛицо
	|";
	
	Запрос.Текст = ИсчисленныйСНТекст;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНИндивидуальныйПредприниматель()

// Получить данные для расчета ОППВ
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОППВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОППВ(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
									
	Если ПериодРегистрации >= '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОППВПосле2019(ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса);
	ИначеЕсли ПериодРегистрации < '20190101' Тогда
		Возврат ПолучитьДанныеДляРасчетаОППВДо2019(ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса);
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеДляРасчетаОППВ()

// Получить данные для расчета ВОСМС 
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаВОСМС(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
									
    Если ПериодРегистрации >= '20210101' Тогда

		РезультатЗапроса = ПолучитьДанныеДляРасчетаВОСМСПосле2021(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		                                                          
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда

		РезультатЗапроса = ПолучитьДанныеДляРасчетаВОСМСПосле2020(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// Расчет ВОСМС с 2018 года не производится
		РезультатЗапроса = Неопределено;
		
	ИначеЕсли ПериодРегистрации >= '20170701' Тогда
		// Расчет ВОСМС с ограничением на мин. сумму объекта исчисления 1 МЗП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаВОСМСДо2018(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	Иначе 
		РезультатЗапроса = Неопределено;
	КонецЕсли;
									
	Возврат РезультатЗапроса;
КонецФункции

// Получить данные для расчета ВОСМС по правилам 2017 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаВОСМСДо2018(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	Если ОтражениеПоПериодуРегистрации И ПериодРегистрации < '20170701' Тогда
		Сообщить("Расчет Взносов ОСМС до июля 2017 года не предусмотрен.");
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидВОСМС", 			Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	РеквизитыНалогоплательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Если РеквизитыНалогоплательщика.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		И ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель) Тогда
		Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель);
	КонецЕсли;	
	
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВОСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ВОСМССведенияОДоходах.Активность
		|	И ВОСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВОСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Активность
	|	И ВОСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериодыФизЛиц
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМССведенияОДоходах.Активность
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель) и ПериодРегистрации >= Дата(2017,7,1), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамПериодРегистрации,
	|	&парамИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды ГДЕ ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ &парамКонецПериодаРегистрации <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ)) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ГДЕ
	|	&парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ (" + СписокФизЛицТекст + ") КАК Работники)
	|" , "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ВОСМССведенияОДоходах.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизЛиц.Период,
	|	ПериодыФизЛиц.ФизЛицо,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыФизЛиц КАК ПериодыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизЛиц.Период,
	|   ПериодыФизЛиц.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ВОСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ВОСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.СуммаДоходаОборот) - СУММА(ВОСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходыФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ВОСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВОСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ВОСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ВОСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВОСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ВОСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСОбороты.Период,
	|	ВОСМСОбороты.Физлицо
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель) и ПериодРегистрации >= Дата(2017,7,1), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамИндивидуальныйПредприниматель,
	|	&парамПериодРегистрации,
	|	0,
	|	0,
	|	Работники.ПризнакФизЛицаБезМедицинскогоСтрахования КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	Работники.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	Работники.ПризнакФизлицаИнвалида КАК ПризнакФизлицаИнвалида,
	|	Работники.ПризнакФизлицаУчастникаВОВ КАК ПризнакФизлицаУчастникаВОВ
	|ИЗ
	|	" + ПериодыТекст + " КАК Работники
	|ГДЕ
	|	Работники.ФизЛицо = &парамИндивидуальныйПредприниматель
	|" , "") + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыФизЛиц.ФизЛицо,
	|	ДоходыФизЛиц.Период,
	|	СУММА(ДоходыФизЛиц.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ДоходыФизЛиц.ИсчисленнаяОблагаемаяБаза) КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТДоходыФизЛиц КАК ДоходыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ДоходыФизЛиц.Период,
	|   ДоходыФизЛиц.ФизЛицо
	|";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС (приходы по регистру ВОСМСРасчетыСФондами)
	//  для СписокФизлиц
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ВОСМСРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТВОСМСРасчетыСФондами";

	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "
	|ВЫБРАТЬ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо КАК ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзносДругойРаботадатель
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО (ВЫБОР 
	|				КОГДА РаботникиОрганизации.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА РаботникиОрганизации.ФизЛицо.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|				ИНАЧЕ РаботникиОрганизации.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|			КОНЕЦ)
	|			И (РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода >= &парамНачало
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода <= &парамКонец
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода";
	
	Запрос.Текст = ВТВОСМСРасчетыСФондамиДругойРаботадательТекст;
	Запрос.Выполнить();
	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "ВТВОСМСРасчетыСФондамиДругойРаботадатель";
	
	  
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 15, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияВОСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// размер МЗП
	ПолеРазмерМЗП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ВОСМС
	ПолеБазаДляИсчисленияВОСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияВОСМС +" > 0) 
	|					ТОГДА  " + ПолеБазаДляИсчисленияВОСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияВОСМСТекст + "))";
	
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ВОСМСРасчетыСФондами.ИсчисленныйВзнос, 0)";
	
	// сумма ранее исчисленных взносов от другого работодателя
	
	ИсчисленныйВзносДругойРаботадатель = "ЕСТЬNULL(ВТВОСМСРасчетыСФондамиДругойРаботадатель.ИсчисленныйВзносДругойРаботадатель, 0)";

	ПолеРазмерОграниченияВОСМС = "ВЫРАЗИТЬ(" + ПолеРазмерОграниченияПоДоходам + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка - " + ИсчисленныйВзносДругойРаботадатель + " КАК " + ТипЗначенияВОСМСТекст + ")";
	
	ПолеРазмерОграниченияВОСМС = 
	"(Выбор 
	|		Когда " + ПолеРазмерОграниченияВОСМС + " <  0  
	|			Тогда 0  
	|       Иначе " + ПолеРазмерОграниченияВОСМС + " 
	|	КОНЕЦ)";
	
	ПолеВзносыИсчисленные = 
	"(Выбор 
	|		Когда " + ПолеРазмерОграниченияВОСМС + " < " + ПолеВзносыИсчисленные + " И " + ИсчисленныйВзносДругойРаботадатель + " > 0  
	|			Тогда " + ПолеРазмерОграниченияВОСМС + "  
	|       Иначе " + ПолеВзносыИсчисленные + " 
	|	КОНЕЦ)";
	
	// ИсчисленныеВОСМС
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет 

	ИсчисленныеВОСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияВОСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеБазаДляИсчисленияВОСМС + " - " + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК ОблагаемаяБаза,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеВзносыИсчисленные + " КАК ВОСМСЗаМесяц,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееВзносыИсчисленные,
	|	" + ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные + "Как ВзносИсчисленный, 
	|	ЕСТЬNULL(ВТВОСМСРасчетыСФондамиДругойРаботадатель.ИсчисленныйВзносДругойРаботадатель, 0) Как ИсчисленныйВзносДругойРаботадатель
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВОСМСРасчетыСФондамиТекст+" КАК ВОСМСРасчетыСФондами
	|		ПО ВОСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВТВОСМСРасчетыСФондамиДругойРаботадательТекст+" КАК ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|		ПО ВТВОСМСРасчетыСФондамиДругойРаботадатель.Период = ДоходыЗаМесяц.Период 
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо.ФизЛицо
	|				ИНАЧЕ ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|			КОНЕЦ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				ИНАЧЕ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеВОСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								
								
// Получить данные для расчета ВОСМС по правилам 2020 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаВОСМСПосле2020(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидВОСМС", 			Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	РеквизитыНалогоплательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);
	
	ПрименятьКорректировкуВОСМС = ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации)
		И НЕ ДополнительныеПараметрыЗапроса = Неопределено
		И НЕ ДополнительныеПараметрыЗапроса.Свойство("ИсчисленныйИПН") = Неопределено
        И (НЕ ДополнительныеПараметрыЗапроса.Свойство("ТолькоДоходОтНалоговогоАгента")
            ИЛИ НЕ ДополнительныеПараметрыЗапроса.ТолькоДоходОтНалоговогоАгента);
        
    // установим дополнительные параметры
    Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
        Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
            Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
        КонецЦикла;
        Если НЕ ДополнительныеПараметрыЗапроса.Свойство("ТолькоДоходОтНалоговогоАгента") Тогда
            Запрос.УстановитьПараметр("ТолькоДоходОтНалоговогоАгента", Ложь);         
        КонецЕсли;
    Иначе 
        Запрос.УстановитьПараметр("ТолькоДоходОтНалоговогоАгента", Ложь);         
    КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВОСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ВОСМССведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВОСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериодыФизЛиц
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМССведенияОДоходах.Активность
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамПериодРегистрации,
	|	&парамИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды ГДЕ ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ &парамКонецПериодаРегистрации <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ)) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ГДЕ
	|	&парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ (" + СписокФизЛицТекст + ") КАК Работники)
	|" , "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ВОСМССведенияОДоходах.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизЛиц.Период,
	|	ПериодыФизЛиц.ФизЛицо,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыФизЛиц КАК ПериодыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизЛиц.Период,
	|   ПериодыФизЛиц.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// получим физлиц и контрагентов в виде соответствия для определения дохода по другому виду
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	Контрагенты.Ссылка КАК КонтрагентФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизлицаИнвалида,
	|	СписокФизЛиц.ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентовИФизЛиц
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СписокФизЛиц.ФизЛицо,
	|	Контрагенты.ФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизлицаИнвалида,
	|	СписокФизЛиц.ПризнакФизлицаУчастникаВОВ
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.Контрагенты 
	|";
	Запрос.Выполнить();

	// ДоходыПоДругимВидамТекст
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	ВОСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ВОСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.СуммаДоходаОборот) - СУММА(ВОСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходыФизЛицПоДругимВидам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ВОСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВОСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ВОСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ВОСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК Работники
	|			ПО Работники.КонтрагентФизЛицо = ВОСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Работники.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ВОСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСОбороты.Период,
	|	ВОСМСОбороты.Физлицо
	|";
	
	Запрос.Текст = ДоходыПоДругимВидамТекст;
	Запрос.Выполнить();
	ДоходыПоДругимВидамТекст = "ВТДоходыФизЛицПоДругимВидам";
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ВОСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ВОСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.СуммаДоходаОборот) - СУММА(ВОСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходыФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ВОСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВОСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ВОСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ВОСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВОСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ВОСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСОбороты.Период,
	|	ВОСМСОбороты.Физлицо
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамИндивидуальныйПредприниматель,
	|	&парамПериодРегистрации,
	|	0,
	|	0,
	|	Работники.ПризнакФизЛицаБезМедицинскогоСтрахования КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	Работники.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	Работники.ПризнакФизлицаИнвалида КАК ПризнакФизлицаИнвалида,
	|	Работники.ПризнакФизлицаУчастникаВОВ КАК ПризнакФизлицаУчастникаВОВ
	|ИЗ
	|	" + ПериодыТекст + " КАК Работники
	|ГДЕ
	|	Работники.ФизЛицо = &парамИндивидуальныйПредприниматель
	|" , "") + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыФизЛиц.ФизЛицо,
	|	ДоходыФизЛиц.Период,
	|	СУММА(ДоходыФизЛиц.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ДоходыФизЛиц.ИсчисленнаяОблагаемаяБаза) КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТДоходыФизЛиц КАК ДоходыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ДоходыФизЛиц.Период,
	|   ДоходыФизЛиц.ФизЛицо
	|";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС (приходы по регистру ВОСМСРасчетыСФондами)
	//  для СписокФизлиц
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ВОСМСРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТВОСМСРасчетыСФондами";
		
	// ВОСМСРасчетыСФондамиПоДругимВидам
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС (приходы по регистру ВОСМСРасчетыСФондами)
	//  для СписокФизлиц
	ВОСМСРасчетыСФондамиПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ВОСМСРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондамиПоДругимВидам
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.КонтрагентФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	РаботникиОрганизации.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизации.ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ВОСМСРасчетыСФондамиПоДругимВидамТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиПоДругимВидамТекст = "ВТВОСМСРасчетыСФондамиПоДругимВидам";

	Если ПрименятьКорректировкуВОСМС Тогда
		
		Если ОтражениеПоПериодуРегистрации Тогда
			ПолеПериодаКорректировки = "&парамПериодРегистрации";	
		Иначе
			ПолеПериодаКорректировки = "ИсчисленныйИПН.МесяцНалоговогоПериода";	
		КонецЕсли;
		
		// ИПНРасчетыСФондами
		//	Поля:
		//		ФизЛицо
		//		МесяцНалоговогоПериода
		//		КорректировкаДохода
		//
		//	Описание:
		//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
		//  
		ИПНСведенияОДоходах = "
		|ВЫБРАТЬ
		|	" + ПолеПериодаКорректировки + " КАК Период,
		|	ИсчисленныйИПН.ФизЛицо КАК ФизЛицо,
		|	ИсчисленныйИПН.ПримененнаяЛьгота КАК ПримененнаяЛьгота
		|ПОМЕСТИТЬ ВТ_ИсчисленныйИПН
		|ИЗ
		|	&парамИсчисленныйИПН КАК ИсчисленныйИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК МаксимальнаяСуммаКорректировкиДохода
		|
		|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
		|ИЗ	(ВЫБРАТЬ
		|		ИПНСведенияОДоходах.Период КАК Период,
		|		ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|		ИПНСведенияОДоходах.ПримененнаяЛьготаОборот
		|	ИЗ
		|		РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|						&парамНачало,
		|						&парамКонец,
		|						МЕСЯЦ,
		|						Налогоплательщик = &парамНалогоплательщик
		|						И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
		|			ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|				И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)
		|
		// данные документа
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ИПНСведенияОДоходах.Период КАК Период,
		|		ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
		|		ИПНСведенияОДоходах.ПримененнаяЛьгота
		|
		|	ИЗ
		|		ВТ_ИсчисленныйИПН КАК ИПНСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
		|			ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|				И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)) КАК ИПНСведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Период,
		|	ИПНСведенияОДоходах.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)";
		
		Запрос.Текст = ИПНСведенияОДоходах;
		Запрос.УстановитьПараметр("парамИсчисленныйИПН", ДополнительныеПараметрыЗапроса.ИсчисленныйИПН);
		Запрос.Выполнить();
		ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
		
	КонецЕсли;
	
	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "
	|ВЫБРАТЬ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо КАК ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзносДругойРаботадатель
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО (ВЫБОР 
	|				КОГДА РаботникиОрганизации.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА РаботникиОрганизации.ФизЛицо.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|				ИНАЧЕ РаботникиОрганизации.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|			КОНЕЦ)
	|			И (РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода >= &парамНачало
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода <= &парамКонец
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода";
	
	Запрос.Текст = ВТВОСМСРасчетыСФондамиДругойРаботадательТекст;
	Запрос.Выполнить();
	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "ВТВОСМСРасчетыСФондамиДругойРаботадатель";
	
	  
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2)) КАК ВидДохода,
	|	ЕСТЬNULL(УчетнаяПолитика.СтавкаВОСМСДляИП, 0) КАК Ставка
	|ИЗ 
	|РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			
	|ГДЕ
	|	УчетнаяПолитика.Организация = &парамНалогоплательщик
	|	И УчетнаяПолитика.Период >= ДАТАВРЕМЯ(2020, 1, 1)
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияВОСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// корректировка доход за месяц
	ПолеКорректировкаДохода = ?(ПрименятьКорректировкуВОСМС, "ВЫБОР КОГДА ЕСТЬNULL(РазмерПрименяемойКорректировки.МаксимальнаяСуммаКорректировкиДохода, 0) < 0 ТОГДА 0 ИНАЧЕ ЕСТЬNULL(РазмерПрименяемойКорректировки.МаксимальнаяСуммаКорректировкиДохода, 0) КОНЕЦ ", "0 ");
	
	// размер МЗП
	ПолеРазмерМЗП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// облагаемый доход за месяц по другим видам
	ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам = "ЕСТЬNULL(ДоходыЗаМесяцПоДругимВидам.ИсчисленнаяОблагаемаяБаза, 0)";	
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// ограничение по Взносам
	ПолеРазмерОграниченияПоВзносам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0) * ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) /100";

	// облагаемая база по ВОСМС
	ПолеБазаДляИсчисленияВОСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + "-" + ПолеКорректировкаДохода + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "-" +  ПолеКорректировкаДохода + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "-" +  ПолеКорректировкаДохода + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияВОСМС +" > 0) 
	|					ТОГДА  " + ПолеБазаДляИсчисленияВОСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияВОСМСТекст + "))";
	
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ВОСМСРасчетыСФондами.ИсчисленныйВзнос, 0)";
	
	// сумма ранее исчисленных взносов от другого работодателя
	ИсчисленныйВзносДругойРаботадатель = "ЕСТЬNULL(ВТВОСМСРасчетыСФондамиДругойРаботадатель.ИсчисленныйВзносДругойРаботадатель, 0)";
	
	// ИсчисленныеВОСМС
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет 

	ИсчисленныеВОСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ВЫБОР КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты ТОГДА ДоходыЗаМесяц.Физлицо.ФизЛицо ИНАЧЕ ДоходыЗаМесяц.Физлицо КОНЕЦ КАК ФизЛицоДохода,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияВОСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам + " КАК РанееИсчисленнаяОблагаемаяБазаПоДругимВидам,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	" + ПолеРазмерОграниченияПоВзносам + " КАК РазмерОграниченияПоВзносам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееВзносыИсчисленные,
	|	" + "-" + ПолеКорректировкаДохода + " КАК КорректировкаДохода,
	|	" + ИсчисленныйВзносДругойРаботадатель + " КАК ИсчисленныйВзносДругойРаботадатель
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ДоходыПоДругимВидамТекст+" КАК ДоходыЗаМесяцПоДругимВидам
	|		ПО ДоходыЗаМесяц.Период = ДоходыЗаМесяцПоДругимВидам.Период 
	|			И ДоходыЗаМесяц.ФизЛицо = ДоходыЗаМесяцПоДругимВидам.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВОСМСРасчетыСФондамиТекст+" КАК ВОСМСРасчетыСФондами
	|		ПО ВОСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВТВОСМСРасчетыСФондамиДругойРаботадательТекст+" КАК ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|		ПО ВТВОСМСРасчетыСФондамиДругойРаботадатель.Период = ДоходыЗаМесяц.Период 
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо.ФизЛицо
	|				ИНАЧЕ ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|			КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВОСМСРасчетыСФондамиПоДругимВидамТекст+" КАК ВОСМСРасчетыСФондамиПоДругимВидам
	|		ПО ВОСМСРасчетыСФондамиПоДругимВидам.Период = ДоходыЗаМесяц.Период 
	|			И ВОСМСРасчетыСФондамиПоДругимВидам.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|" +
	?(ПрименятьКорректировкуВОСМС, "
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНСведенияОДоходах + " КАК РазмерПрименяемойКорректировки
	|		ПО ДоходыЗаМесяц.Период = РазмерПрименяемойКорректировки.Период
	|			И ДоходыЗаМесяц.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо", "") + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				КОГДА ДоходыЗаМесяц.Физлицо = &парамИндивидуальныйПредприниматель
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ""ИП""
	|				ИНАЧЕ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			КОНЕЦ
    |
    |ГДЕ
    |   НЕ &ТолькоДоходОтНалоговогоАгента
	|	ИЛИ ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеВОСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

// Получить данные для расчета ВОСМС по правилам 2021 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаВОСМСПосле2021(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидВОСМС", 			Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	РеквизитыНалогоплательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);
	
		// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВОСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ВОСМССведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВОСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериодыФизЛиц
	|ИЗ
	|	РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, МЕСЯЦ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО (ВЫБОР 
	|				КОГДА Работники.Физлицо ССЫЛКА Справочник.Контрагенты 
	|					ТОГДА Работники.Физлицо.Физлицо 
	|				ИНАЧЕ Работники.Физлицо
	|			КОНЕЦ) = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ВОСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ВОСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМССведенияОДоходах.Активность
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамПериодРегистрации,
	|	&парамИндивидуальныйПредприниматель,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды ГДЕ ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ &парамКонецПериодаРегистрации <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, МЕСЯЦ)) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ) 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ГДЕ
	|	&парамИндивидуальныйПредприниматель В (ВЫБРАТЬ ФизЛицо ИЗ (" + СписокФизЛицТекст + ") КАК Работники)
	|" , "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ВОСМССведенияОДоходах.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыФизЛиц.Период,
	|	ПериодыФизЛиц.ФизЛицо,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ПериодыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТПериодыФизЛиц КАК ПериодыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ПериодыФизЛиц.Период,
	|   ПериодыФизЛиц.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// получим физлиц и контрагентов в виде соответствия для определения дохода по другому виду
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	Контрагенты.Ссылка КАК КонтрагентФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизлицаИнвалида,
	|	СписокФизЛиц.ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентовИФизЛиц
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СписокФизЛиц.ФизЛицо,
	|	Контрагенты.ФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизлицаИнвалида,
	|	СписокФизЛиц.ПризнакФизлицаУчастникаВОВ
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.Контрагенты 
	|";
	Запрос.Выполнить();

	// ДоходыПоДругимВидамТекст
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	ВОСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ВОСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.СуммаДоходаОборот) - СУММА(ВОСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходыФизЛицПоДругимВидам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ВОСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВОСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ВОСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ВОСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК Работники
	|			ПО Работники.КонтрагентФизЛицо = ВОСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Работники.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ВОСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСОбороты.Период,
	|	ВОСМСОбороты.Физлицо
	|";
	
	Запрос.Текст = ДоходыПоДругимВидамТекст;
	Запрос.Выполнить();
	ДоходыПоДругимВидамТекст = "ВТДоходыФизЛицПоДругимВидам";
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ВОСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ВОСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.СуммаДоходаОборот) - СУММА(ВОСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ВОСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ВОСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходыФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ВОСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВОСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ВОСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ВОСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ВОСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВОСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ВОСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСОбороты.Период,
	|	ВОСМСОбороты.Физлицо
	|" + ?(ЗначениеЗаполнено(РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель), "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&парамИндивидуальныйПредприниматель,
	|	&парамПериодРегистрации,
	|	0,
	|	0,
	|	Работники.ПризнакФизЛицаБезМедицинскогоСтрахования КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	Работники.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	Работники.ПризнакФизлицаИнвалида КАК ПризнакФизлицаИнвалида,
	|	Работники.ПризнакФизлицаУчастникаВОВ КАК ПризнакФизлицаУчастникаВОВ
	|ИЗ
	|	" + ПериодыТекст + " КАК Работники
	|ГДЕ
	|	Работники.ФизЛицо = &парамИндивидуальныйПредприниматель
	|" , "") + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыФизЛиц.ФизЛицо,
	|	ДоходыФизЛиц.Период,
	|	СУММА(ДоходыФизЛиц.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ДоходыФизЛиц.ИсчисленнаяОблагаемаяБаза) КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ДоходыФизЛиц.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	ВТДоходыФизЛиц КАК ДоходыФизЛиц
	|СГРУППИРОВАТЬ ПО
	|	ДоходыФизЛиц.Период,
	|   ДоходыФизЛиц.ФизЛицо
	|";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС (приходы по регистру ВОСМСРасчетыСФондами)
	//  для СписокФизлиц
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ВОСМСРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТВОСМСРасчетыСФондами";
		
	// ВОСМСРасчетыСФондамиПоДругимВидам
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные взносы ОСМС (приходы по регистру ВОСМСРасчетыСФондами)
	//  для СписокФизлиц
	ВОСМСРасчетыСФондамиПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ВОСМСРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондамиПоДругимВидам
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.КонтрагентФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ВОСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ВОСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ВОСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ВОСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	РаботникиОрганизации.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизации.ФизЛицо,
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ВОСМСРасчетыСФондамиПоДругимВидамТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиПоДругимВидамТекст = "ВТВОСМСРасчетыСФондамиПоДругимВидам";

	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "
	|ВЫБРАТЬ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо КАК ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзносДругойРаботадатель
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО (ВЫБОР 
	|				КОГДА РаботникиОрганизации.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА РаботникиОрганизации.ФизЛицо.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|				ИНАЧЕ РаботникиОрганизации.ФизЛицо = СведенияПредыдущегоМестаРаботыФизЛиц.Физлицо
	|			КОНЕЦ)
	|			И (РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода >= &парамНачало
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода <= &парамКонец
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &парамНалогоплательщик
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода";
	
	Запрос.Текст = ВТВОСМСРасчетыСФондамиДругойРаботадательТекст;
	Запрос.Выполнить();
	ВТВОСМСРасчетыСФондамиДругойРаботадательТекст = "ВТВОСМСРасчетыСФондамиДругойРаботадатель";
	
	  
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаВзносы КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2)) КАК ВидДохода,
	|	ЕСТЬNULL(УчетнаяПолитика.СтавкаВОСМСДляИП, 0) КАК Ставка
	|ИЗ 
	|РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			
	|ГДЕ
	|	УчетнаяПолитика.Организация = &парамНалогоплательщик
	|	И УчетнаяПолитика.Период >= ДАТАВРЕМЯ(2020, 1, 1)
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияВОСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// размер МЗП
	ПолеРазмерМЗП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// облагаемый доход за месяц по другим видам
	ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам = "ЕСТЬNULL(ДоходыЗаМесяцПоДругимВидам.ИсчисленнаяОблагаемаяБаза, 0)";	
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// ограничение по Взносам
	ПолеРазмерОграниченияПоВзносам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0) * ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) /100";

	// облагаемая база по ВОСМС
	ПолеБазаДляИсчисленияВОСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР 
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияВОСМС +" > 0) 
	|					ТОГДА  " + ПолеБазаДляИсчисленияВОСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияВОСМСТекст + "))";
	
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ВОСМСРасчетыСФондами.ИсчисленныйВзнос, 0)";
	
	// сумма ранее исчисленных взносов от другого работодателя
	ИсчисленныйВзносДругойРаботадатель = "ЕСТЬNULL(ВТВОСМСРасчетыСФондамиДругойРаботадатель.ИсчисленныйВзносДругойРаботадатель, 0)";
	
	// ИсчисленныеВОСМС
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет 

	ИсчисленныеВОСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ВЫБОР КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты ТОГДА ДоходыЗаМесяц.Физлицо.ФизЛицо ИНАЧЕ ДоходыЗаМесяц.Физлицо КОНЕЦ КАК ФизЛицоДохода,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияВОСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам + " КАК РанееИсчисленнаяОблагаемаяБазаПоДругимВидам,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	" + ПолеРазмерОграниченияПоВзносам + " КАК РазмерОграниченияПоВзносам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееВзносыИсчисленные,
	|	" + ИсчисленныйВзносДругойРаботадатель + " КАК ИсчисленныйВзносДругойРаботадатель
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ДоходыПоДругимВидамТекст+" КАК ДоходыЗаМесяцПоДругимВидам
	|		ПО ДоходыЗаМесяц.Период = ДоходыЗаМесяцПоДругимВидам.Период 
	|			И ДоходыЗаМесяц.ФизЛицо = ДоходыЗаМесяцПоДругимВидам.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВОСМСРасчетыСФондамиТекст+" КАК ВОСМСРасчетыСФондами
	|		ПО ВОСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ВОСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВТВОСМСРасчетыСФондамиДругойРаботадательТекст+" КАК ВТВОСМСРасчетыСФондамиДругойРаботадатель
	|		ПО ВТВОСМСРасчетыСФондамиДругойРаботадатель.Период = ДоходыЗаМесяц.Период 
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо Ссылка Справочник.Контрагенты
	|					ТОГДА ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо.ФизЛицо
	|				ИНАЧЕ ВТВОСМСРасчетыСФондамиДругойРаботадатель.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|			КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ВОСМСРасчетыСФондамиПоДругимВидамТекст+" КАК ВОСМСРасчетыСФондамиПоДругимВидам
	|		ПО ВОСМСРасчетыСФондамиПоДругимВидам.Период = ДоходыЗаМесяц.Период 
	|			И ВОСМСРасчетыСФондамиПоДругимВидам.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				КОГДА ДоходыЗаМесяц.Физлицо = &парамИндивидуальныйПредприниматель
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ""ИП""
	|				ИНАЧЕ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеВОСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

// Получить данные для расчета ООСМС
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМС(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
						
     Если ПериодРегистрации >= '20210101' Тогда
		РезультатЗапроса = ПолучитьДанныеДляРасчетаООСМСПосле2021(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда
    	РезультатЗапроса = ПолучитьДанныеДляРасчетаООСМСПосле2020(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		// Расчет ООСМС с 2018 без ограничения на мин. сумму объекта исчисления 1 МЗП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаООСМСПосле2019(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда
		// Расчет ООСМС с 2018 без ограничения на мин. сумму объекта исчисления 1 МЗП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаООСМСПосле2018(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	Иначе
		// Расчет ООСМС с ограничением на мин. сумму объекта исчисления 1 МЗП
		РезультатЗапроса = ПолучитьДанныеДляРасчетаООСМСДо2018(ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик, 
																Регистратор, 
																СписокФизЛицТекст,
																ОтражениеПоПериодуРегистрации,
																ДополнительныеПараметрыЗапроса);
		
	КонецЕсли;
									
	Возврат РезультатЗапроса;

КонецФункции

// Получить данные для расчета ООСМС поправилам 2017 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМСДо2018(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	Если ОтражениеПоПериодуРегистрации И ПериодРегистрации < '20170701' Тогда
		Сообщить("Расчет Отчислений ОСМС до июля 2017 года не предусмотрен.");
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидООСМС", 			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ООСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ООСМССведенияОДоходах.Активность
		|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ООСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Активность
	|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМССведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ООСМССведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ООСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ООСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.СуммаДоходаОборот) - СУММА(ООСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ООСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ООСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ООСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ООСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ООСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ООСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСОбороты.Период,
	|	ООСМСОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСОбороты.ФизЛицо,
	|	ООСМСОбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ООСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные отчисления ОСМС (приходы по регистру ООСМСРасчетыСФондами)
	//  для СписокФизлиц
	ООСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ООСМСРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ООСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ООСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ООСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ООСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ООСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ООСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ООСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ООСМСРасчетыСФондамиТекст = "ВТООСМСРасчетыСФондами";

	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 15, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияООСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// размер МЗП
	ПолеРазмерМЗП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ООСМС
	ПолеБазаДляИсчисленияООСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияООСМС +" > 0) 
	|					ТОГДА  " + ПолеБазаДляИсчисленияООСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияООСМСТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(ООСМСРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеООСМС
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет

	ИсчисленныеООСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияООСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеОтчисленияИсчисленные + " КАК ООСМСЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ООСМСРасчетыСФондамиТекст+" КАК ООСМСРасчетыСФондами
	|		ПО ООСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ООСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеООСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

// Получить данные для расчета ООСМС по правилам 2018 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМСПосле2018(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидООСМС", 			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ООСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ООСМССведенияОДоходах.Активность
		|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ООСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Активность
	|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМССведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ООСМССведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ООСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ООСМСОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.СуммаДоходаОборот) - СУММА(ООСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ООСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ООСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ООСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ООСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ООСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ООСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСОбороты.Период,
	|	ООСМСОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСОбороты.ФизЛицо,
	|	ООСМСОбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ООСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные отчисления ОСМС (приходы по регистру ООСМСРасчетыСФондами)
	//  для СписокФизлиц
	ООСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ООСМСРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ООСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ООСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ООСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ООСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ООСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ООСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ООСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ООСМСРасчетыСФондамиТекст = "ВТООСМСРасчетыСФондами";

	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 15, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияООСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// размер МЗП
	ПолеРазмерМЗП = ?(ПрименятьОграничениеНаМинимальныйОбъектОСМС, "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)", "0");
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ООСМС
	ПолеБазаДляИсчисленияООСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияООСМС +" > 0) 
	|					ТОГДА  " + ПолеБазаДляИсчисленияООСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияООСМСТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(ООСМСРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеООСМС
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет

	ИсчисленныеООСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияООСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеОтчисленияИсчисленные + " КАК ООСМСЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ООСМСРасчетыСФондамиТекст+" КАК ООСМСРасчетыСФондами
	|		ПО ООСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ООСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеООСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции							

// Получить данные для расчета ООСМС по правилам 2020 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМСПосле2020(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидООСМС", 			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ООСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ООСМССведенияОДоходах.Активность
		|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ООСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Активность
	|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМССведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ООСМССведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ООСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ООСМСОбороты.Период КАК Период,
	|	СУММА(ООСМСОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(ООСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ООСМССведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ООСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ООСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ООСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ООСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ООСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ООСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСОбороты.Период,
	|	ООСМСОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСОбороты.ФизЛицо,
	|	ООСМСОбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ООСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные отчисления ОСМС (приходы по регистру ООСМСРасчетыСФондами)
	//  для СписокФизлиц
	ООСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ООСМСРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ООСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ООСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ООСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ООСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ООСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ООСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ООСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ООСМСРасчетыСФондамиТекст = "ВТООСМСРасчетыСФондами";

	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК МаксимальнаяСуммаКорректировкиДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Период,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияООСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// корректировка доход за месяц
	ПолеКорректировкаДохода = ?(ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации),
	" - ЕСТЬNULL(РазмерПрименяемойКорректировки.МаксимальнаяСуммаКорректировкиДохода, 0) ", "");

	// размер МЗП
	ПолеРазмерМЗП = ?(ПрименятьОграничениеНаМинимальныйОбъектОСМС, "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)", "0");
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ООСМС
	ПолеБазаДляИсчисленияООСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияООСМС +" > 0) 
	|					ТОГДА " + ПолеБазаДляИсчисленияООСМС + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияООСМСТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(ООСМСРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеООСМС
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет

	ИсчисленныеООСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияООСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеОтчисленияИсчисленные + " КАК ООСМСЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ООСМСРасчетыСФондамиТекст+" КАК ООСМСРасчетыСФондами
	|		ПО ООСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ООСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИПНСведенияОДоходах+" КАК РазмерПрименяемойКорректировки
	|		ПО ДоходыЗаМесяц.Период = РазмерПрименяемойКорректировки.Период
	|			И ДоходыЗаМесяц.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеООСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

// Получить данные для расчета ООСМС по правилам 2021 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМСПосле2021(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидООСМС", 			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ООСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ООСМССведенияОДоходах.Активность
		|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ООСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Активность
	|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, МЕСЯЦ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМССведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ООСМССведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ООСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ООСМСОбороты.Период КАК Период,
	|	СУММА(ООСМСОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(ООСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ООСМССведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ООСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ООСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ООСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ООСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ООСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ООСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСОбороты.Период,
	|	ООСМСОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСОбороты.ФизЛицо,
	|	ООСМСОбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ООСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные отчисления ОСМС (приходы по регистру ООСМСРасчетыСФондами)
	//  для СписокФизлиц
	ООСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ООСМСРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ООСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ООСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ООСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ООСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ООСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ООСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ООСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ООСМСРасчетыСФондамиТекст = "ВТООСМСРасчетыСФондами";

	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК МаксимальнаяСуммаКорректировкиДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Период,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ВОСМС для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияООСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// размер МЗП
	ПолеРазмерМЗП = ?(ПрименятьОграничениеНаМинимальныйОбъектОСМС, "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)", "0");
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ООСМС
	ПолеБазаДляИсчисленияООСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"ВЫБОР 
	|	КОГДА (" + ПолеБазаДляИсчисленияООСМС +" > 0) 
	|		ТОГДА  " + ПолеБазаДляИсчисленияООСМС +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(ООСМСРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеООСМС
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет

	ИсчисленныеООСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияООСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеОтчисленияИсчисленные + " КАК ООСМСЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ООСМСРасчетыСФондамиТекст+" КАК ООСМСРасчетыСФондами
	|		ПО ООСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ООСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИПНСведенияОДоходах+" КАК РазмерПрименяемойКорректировки
	|		ПО ДоходыЗаМесяц.Период = РазмерПрименяемойКорректировки.Период
	|			И ДоходыЗаМесяц.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеООСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

Функция РасчетИПНДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетИПНДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ОПВЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ВОСМСЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ИПНЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("РанееИсчисленныйИПН");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ПримененнаяЛьготаЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ПримененнаяЛьготаЗаГод");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("РазрешенныйВычетЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("РанееПримененныйВычет");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ПримененныйВычетЗаМесяц");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("ПримененныеВычетыИПН");
	РасчетИПНДополнительныеДанные.Колонки.Добавить("РазрешенныеВычетыИПН");
	
	Возврат РасчетИПНДополнительныеДанные;	

КонецФункции 

Процедура РассчитатьИПНДополнительныеДанные(Объект, ИПНДанныеДляРасчета = Неопределено, ОПВДанныеДляРасчета = Неопределено, ВОСМСДанныеДляРасчета = Неопределено, РасчетИПНДополнительныеДанные = Неопределено, ВычетыИПНДляРасчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИПНДанныеДляРасчета", ИПНДанныеДляРасчета);
	Запрос.УстановитьПараметр("ОПВДанныеДляРасчета", ОПВДанныеДляРасчета);
	Запрос.УстановитьПараметр("ВОСМСДанныеДляРасчета", ВОСМСДанныеДляРасчета);
	Запрос.УстановитьПараметр("ВычетыИПНДляРасчета", ВычетыИПНДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", КалендарныеГрафики.ПроизводственныйКалендарьРеспубликиКазахстан());
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(Объект.ПериодРегистрации));
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	ГоловнаяОрганизация = ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Объект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	// Данные для расчета
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИПНДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ИПНДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИПНДанныеДляРасчета.Налог КАК Налог,
	|	ИПНДанныеДляРасчета.ПримененныйВычет КАК ПримененныйВычет,
	|	ИПНДанныеДляРасчета.ПримененнаяЛьгота КАК ПримененнаяЛьгота,
	|	ИПНДанныеДляРасчета.РазрешенныйВычет КАК РазрешенныйВычет,
	|	ИПНДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ИПНДанныеДляРасчета КАК ИПНДанныеДляРасчета";
	
	Запрос.Выполнить();
	
	// Данные ОПВ	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОПВДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ОПВДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОПВДанныеДляРасчета.Взнос КАК Взнос,
	|	ОПВДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТОПВДанныеДляРасчета
	|ИЗ
	|	&ОПВДанныеДляРасчета КАК ОПВДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ОПВРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ОПВРасчетыСФондами.Регистратор <> &Регистратор
	|	И ОПВРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Выполнить();
	
	// Данные ВОСМС
	Запрос.УстановитьПараметр("ВОСМСДанныеДляРасчета", ВОСМСДанныеДляРасчета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВОСМСДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВОСМСДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВОСМСДанныеДляРасчета.Взнос КАК Взнос,
	|	ВОСМСДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТВОСМСДанныеДляРасчета
	|ИЗ
	|	&ВОСМСДанныеДляРасчета КАК ВОСМСДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|ПОМЕСТИТЬ ВТВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ВОСМСРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ВОСМСРасчетыСФондами.Регистратор <> &Регистратор
	|	И ВОСМСРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Выполнить();
	
	
	// Данные Вычеты ИПН
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыИПНДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВычетыИПНДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВычетыИПНДляРасчета.ПримененныйВычет КАК ПримененныеВычетыИПН,
	|	ВычетыИПНДляРасчета.РазрешенныйВычет КАК РазрешенныеВычетыИПН
	|ПОМЕСТИТЬ ВТВычетыИПНДляРасчета
	|ИЗ
	|	&ВычетыИПНДляРасчета КАК ВычетыИПНДляРасчета";
	
	Запрос.Выполнить();	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0) КАК РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыПериодовГода
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|	ПО ДанныеПроизводственногоКалендаря.Дата >= РасчетныеПоказателиСрезПоследних.Период
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата >= &НачалоГода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|ПОМЕСТИТЬ ВТГражданствоСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|			И (ГражданствоФизЛиц.Период <= &КонецПериодаРегистрации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТГражданствоСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ВТГражданствоСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, 0) КАК НеЯвляетсяНалоговымРезидентомРК
	|ПОМЕСТИТЬ ВТГражданствоФизЛиц
	|ИЗ
	|	ВТГражданствоСрезПоследних КАК ВТГражданствоСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВТГражданствоСрезПоследних.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|			И ВТГражданствоСрезПоследних.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИПНПрименениеВычетов.Период) КАК ПериодСреза,
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ИПНПрименениеВычетовСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО ВТДанныеДляРасчета.МесяцНалоговогоПериода >= ИПНПрименениеВычетов.Период
	|			И (ИПНПрименениеВычетов.Физлицо = ВТДанныеДляРасчета.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПНПрименениеВычетовСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ИПНПрименениеВычетовСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТПрименениеВычетовВОрганизации
	|ИЗ
	|	ИПНПрименениеВычетовСрезПоследних КАК ИПНПрименениеВычетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПНПрименениеВычетов КАК ИПНПрименениеВычетов
	|		ПО (ИПНПрименениеВычетов.Период = ИПНПрименениеВычетовСрезПоследних.ПериодСреза)
	|			И (ИПНПрименениеВычетов.Физлицо = ИПНПрименениеВычетовСрезПоследних.ФизЛицо)
	|ГДЕ
	|	ИПНПрименениеВычетов.Налогоплательщик = &Налогоплательщик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				ТОГДА РаботникиОрганизации.Период
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаПриема,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|				ТОГДА ДОБАВИТЬКДАТЕ(РаботникиОрганизации.Период, ДЕНЬ, -1)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ПО ВТДанныеДляРасчета.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
	|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
	|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|			И (РаботникиОрганизации.Период <= &КонецПериодаРегистрации)
	|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
	|			И (РаботникиОрганизации.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанноеВремя.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОтработанноеВремя.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОтработанноеВремя.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) < ОтработанноеВремя.МесяцНалоговогоПериода
	|			ТОГДА ОтработанноеВремя.МесяцНалоговогоПериода
	|		КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаПриема, МЕСЯЦ) = ОтработанноеВремя.МесяцНалоговогоПериода
	|			ТОГДА ОтработанноеВремя.ДатаПриема
	|		ИНАЧЕ ДАТАВРЕМЯ(3999, 12, 31)
	|	КОНЕЦ КАК ДатаС,
	|	ВЫБОР
	|		КОГДА ОтработанноеВремя.ДатаПриема > ОтработанноеВремя.ДатаУвольнения
	|				ИЛИ ГОД(ОтработанноеВремя.ДатаУвольнения) = 1
	|			ТОГДА КОНЕЦПЕРИОДА(ОтработанноеВремя.МесяцНалоговогоПериода, МЕСЯЦ)
	|		КОГДА ОтработанноеВремя.ДатаУвольнения < ОтработанноеВремя.МесяцНалоговогоПериода
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|		КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.ДатаУвольнения, МЕСЯЦ) = ОтработанноеВремя.МесяцНалоговогоПериода
	|			ТОГДА ОтработанноеВремя.ДатаУвольнения
	|		ИНАЧЕ КОНЕЦПЕРИОДА(ОтработанноеВремя.МесяцНалоговогоПериода, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаПо
	|ПОМЕСТИТЬ ОтработанноеВремя
	|ИЗ
	|	ВТ_КадровыеПериодыРаботников КАК ОтработанноеВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтработанноеВремя.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОтработанноеВремя.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|			ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КалендарныхДнейРаботы,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА ОтработанноеВремя.ДатаС <= ОтработанноеВремя.ДатаПо
	|					ТОГДА РАЗНОСТЬДАТ(ОтработанноеВремя.ДатаС, ОтработанноеВремя.ДатаПо, ДЕНЬ) + 1
	|				ИНАЧЕ 0
	|			КОНЕЦ >= 16
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПредоставлятьВычет
	|ПОМЕСТИТЬ ВТ_ОтработанноеВремя
	|ИЗ
	|	ОтработанноеВремя КАК ОтработанноеВремя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИПННалоговыеВычетыФизлиц.Период) КАК Период,
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ИПННалоговыеВычетыФизлицСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ИПННалоговыеВычетыФизлиц
	|		ПО (ИПННалоговыеВычетыФизлиц.Период <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (ИПННалоговыеВычетыФизлиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ФизЛицо ЕСТЬ NULL 
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизЛиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакПрименениеВычета,
	|	ВЫБОР
	|		КОГДА ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицоНеРезидент,
	|	ЕСТЬNULL(ОтработанноеВремя.КалендарныхДнейРаботы, 0) КАК КалендарныхДнейРаботы,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ФизЛицо ЕСТЬ NULL 
	|				ИЛИ ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК = ИСТИНА
	|				ИЛИ НЕ ЕСТЬNULL(ОтработанноеВремя.ПредоставлятьВычет, ЛОЖЬ)
	|				ИЛИ НЕ ЕСТЬNULL(ВычетыФизЛиц.ПредоставлятьЛичныйВычет, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
	|	КОНЕЦ КАК НалоговыйВычетЛичный,
	|	ОтработанноеВремя.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
	|ИЗ
	|	ИПННалоговыеВычетыФизлицСрезПоследних КАК ИПННалоговыеВычетыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИПННалоговыеВычетыФизлиц КАК ВычетыФизЛиц
	|		ПО (ВычетыФизЛиц.Период = ИПННалоговыеВычетыФизлицСрезПоследних.Период)
	|			И (ВычетыФизЛиц.Физлицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = ИПННалоговыеВычетыФизлицСрезПоследних.МесяцНалоговогоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеВычетовВОрганизации КАК ПрименениеВычетов
	|		ПО (ПрименениеВычетов.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо)
	|			И (ПрименениеВычетов.МесяцНалоговогоПериода = ИПННалоговыеВычетыФизлицСрезПоследних.МесяцНалоговогоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОтработанноеВремя КАК ОтработанноеВремя
	|		ПО (ОтработанноеВремя.МесяцНалоговогоПериода = ИПННалоговыеВычетыФизлицСрезПоследних.МесяцНалоговогоПериода)
	|			И (ОтработанноеВремя.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО (ГражданствоФизЛиц.ФизЛицо = ИПННалоговыеВычетыФизлицСрезПоследних.ФизЛицо)
	|			И (ГражданствоФизЛиц.МесяцНалоговогоПериода = ИПННалоговыеВычетыФизлицСрезПоследних.МесяцНалоговогоПериода)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МесяцНалоговогоПериода,
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПНСведенияОДоходахОбороты.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходахОбороты.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ИПНСведенияОДоходахОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ИПНСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК ОблагаемаяБазаЗаМесяц,
	|	ИПНСведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ИПНСведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ИПНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ИПНСведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	0 КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,
	|	ИПНСведенияОДоходахОбороты.ПримененныйВычетОборот КАК ПримененныйВычетОборот,
	|	ИПНСведенияОДоходахОбороты.ПримененнаяЛьготаОборот КАК ПримененнаяЛьготаОборот,
	|	ИПНСведенияОДоходахОбороты.РазрешенныйВычетОборот КАК РазрешенныйВычетОборот,
	|	ИПНСведенияОДоходахОбороты.ПримененныйВычетОборот КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|			&НачалоГода,
	|			,
	|			Регистратор,
	|			ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТДанныеДляРасчета.ФизЛицо
	|					ИЗ
	|						ВТДанныеДляРасчета)
	|				И ПериодРегистрации <= &ПериодРегистрации
	|				И Налогоплательщик = &Налогоплательщик) КАК ИПНСведенияОДоходахОбороты
	|ГДЕ
	|	ИПНСведенияОДоходахОбороты.Регистратор <> &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТ_ДатыПериодовГода.Период КАК МесяцНалоговогоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.СуммаДохода
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.ОблагаемыйДоход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемыйДоход,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.ПримененнаяЛьготаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененнаяЛьготаЗаМесяц,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныйВычетЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаЗаГод,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДатыПериодовГода.Период = ВТДанныеОДоходах.Период
	|				ТОГДА ВТДанныеОДоходах.РанееПримененныйВычет
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТ_ДатыПериодовГода КАК ВТ_ДатыПериодовГода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|		ПО ВТ_ДатыПериодовГода.Период >= ВТДанныеОДоходах.Период
	|			И (ВТДанныеОДоходах.Период >= НАЧАЛОПЕРИОДА(ВТ_ДатыПериодовГода.Период, ГОД))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТ_ДатыПериодовГода.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход КАК ОблагаемыйДоход,
	|	ВТИтоговыеДанныеОДоходах.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,
	|	ВТИтоговыеДанныеОДоходах.ПримененныйВычетЗаМесяц КАК ПримененныйВычетЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.ПримененнаяЛьготаЗаМесяц КАК ПримененнаяЛьготаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.РазрешенныйВычетЗаМесяц КАК РазрешенныйВычетЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.ПримененнаяЛьготаЗаГод КАК ПримененнаяЛьготаЗаГод,
	|	ВТИтоговыеДанныеОДоходах.РанееПримененныйВычет КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|			И ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТДанныеДляРасчета.ФизЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	ВТДанныеДляРасчета.ОблагаемаяБаза,
	|	0,
	|	0,
	|	0,
	|	ВТДанныеДляРасчета.ПримененныйВычет,
	|	ВТДанныеДляРасчета.ПримененнаяЛьгота,
	|	ВТДанныеДляРасчета.РазрешенныйВычет,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ИтоговыеДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ИтоговыеДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ИтоговыеДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ИтоговыеДанныеОДоходах.ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот) КАК ПримененнаяЛьготаНаПредыдущемМестеРаботыОборот,
	|	СУММА(ИтоговыеДанныеОДоходах.ПримененныйВычетЗаМесяц) КАК ПримененныйВычетЗаМесяц,
	|	СУММА(ИтоговыеДанныеОДоходах.ПримененнаяЛьготаЗаМесяц) КАК ПримененнаяЛьготаЗаМесяц,
	|	СУММА(ИтоговыеДанныеОДоходах.РазрешенныйВычетЗаМесяц) КАК РазрешенныйВычетЗаМесяц,
	|	СУММА(ИтоговыеДанныеОДоходах.ПримененнаяЛьготаЗаГод) КАК ПримененнаяЛьготаЗаГод,
	|	СУММА(ИтоговыеДанныеОДоходах.РанееПримененныйВычет) КАК РанееПримененныйВычет
	|ПОМЕСТИТЬ ВТИтогоДоходы
	|ИЗ
	|	ИтоговыеДанныеОДоходах КАК ИтоговыеДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговыеДанныеОДоходах.ФизЛицо,
	|	ИтоговыеДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ИПНРасчетыСФондамиОбороты.НалогПриход) КАК ИПНЗаМесяц,
	|	СУММА(ИПНРасчетыСФондамиОбороты.НалогПриход) КАК РанееИсчисленныйИПН
	|ПОМЕСТИТЬ ВТДанныеОНалогах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИПНРасчетыСБюджетом.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И МесяцНалоговогоПериода В
	|						(ВЫБРАТЬ
	|							ВтДанныеДляРасчета.МесяцНалоговогоПериода
	|						ИЗ
	|							ВтДанныеДляРасчета)
	|					И Налогоплательщик = &Налогоплательщик) КАК ИПНРасчетыСФондамиОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ИПНРасчетыСФондамиОбороты.ФизЛицо
	|			И ВТДанныеДляРасчета.МесяцНалоговогоПериода = ИПНРасчетыСФондамиОбороты.МесяцНалоговогоПериода
	|			И (ИПНРасчетыСФондамиОбороты.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	ВТДанныеДляРасчета.Налог,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОНалогах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОНалогах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОНалогах.ИПНЗаМесяц) КАК ИПНЗаМесяц,
	|	СУММА(ВТДанныеОНалогах.РанееИсчисленныйИПН) КАК РанееИсчисленныйИПН
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОНалогах
	|ИЗ
	|	ВТДанныеОНалогах КАК ВТДанныеОНалогах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОНалогах.ФизЛицо,
	|	ВТДанныеОНалогах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛьготыФизлицПоИнвалидности.Период) КАК ПериодСрезаИнвалидность,
	|	МАКСИМУМ(ЛьготыФизлицУчастниковВОВ.Период) КАК ПериодСрезаУчастникиВОВ,
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ИПНЛьготыФизлицСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|		ПО ВТДанныеДляРасчета.МесяцНалоговогоПериода >= ЛьготыФизлицПоИнвалидности.Период
	|			И ВТДанныеДляРасчета.ФизЛицо = ЛьготыФизлицПоИнвалидности.Физлицо
	|			И (ЛьготыФизлицПоИнвалидности.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ КОНЕЦПЕРИОДА(ЛьготыФизлицПоИнвалидности.СрокДействияСправки, ДЕНЬ) >= &КонецПериодаРегистрации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|		ПО ВТДанныеДляРасчета.МесяцНалоговогоПериода >= ЛьготыФизлицУчастниковВОВ.Период
	|			И (ЛьготыФизлицУчастниковВОВ.Физлицо = ВТДанныеДляРасчета.ФизЛицо)
	|		СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПНЛьготыФизлицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ИПНЛьготыФизлицСрезПоследних.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	|	ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	ВЫБОР
	|		КОГДА ЛьготыФизлицПоИнвалидности.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЛьготыФизлицПоИнвалидности.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|						И ЛьготыФизлицПоИнвалидности.ГруппаИнвалидности = ""III""
	|					ТОГДА ЕСТЬNULL(ВТ_РазмерОграниченияПоДоходам.РазмерНеоблагаемогоИПНДоходаИнвалидов3Группы, 0)
	|				ИНАЧЕ ЕСТЬNULL(ВТ_РазмерОграниченияПоДоходам.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЛьготаПоИнвалидности,
	|	ВЫБОР
	|		КОГДА ЛьготыФизлицУчастниковВОВ.Физлицо ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_РазмерОграниченияПоДоходам.РазмерНеоблагаемогоИПНДоходаИнвалидов1_2Группы, 0)
	|	КОНЕЦ КАК ЛьготаУчастникаВОВ
	|ПОМЕСТИТЬ ИПНЛьготыФизлиц
	|ИЗ
	|	ИПНЛьготыФизлицСрезПоследних КАК ИПНЛьготыФизлицСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизлиц КАК ЛьготыФизлицПоИнвалидности
	|		ПО (ЛьготыФизлицПоИнвалидности.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаИнвалидность)
	|			И (ЛьготыФизлицПоИнвалидности.Физлицо = ИПНЛьготыФизлицСрезПоследних.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицахУчастникахВОВ КАК ЛьготыФизлицУчастниковВОВ
	|		ПО (ЛьготыФизлицУчастниковВОВ.Период = ИПНЛьготыФизлицСрезПоследних.ПериодСрезаУчастникиВОВ)
	|			И (ЛьготыФизлицУчастниковВОВ.Физлицо = ИПНЛьготыФизлицСрезПоследних.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО (ВТ_РазмерОграниченияПоДоходам.Период = ИПНЛьготыФизлицСрезПоследних.МесяцНалоговогоПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИПНЛьготыФизлиц.ФизЛицо КАК ФизЛицо,
	|	ИПНЛьготыФизлиц.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИПНЛьготыФизлиц.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	|	ИПНЛьготыФизлиц.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаПоИнвалидности > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименяетсяЛьготаПоИнвалидности,
	|	ВЫБОР
	|		КОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ > ИПНЛьготыФизлиц.ЛьготаПоИнвалидности
	|			ТОГДА ИПНЛьготыФизлиц.ЛьготаУчастникаВОВ
	|		ИНАЧЕ ИПНЛьготыФизлиц.ЛьготаПоИнвалидности
	|	КОНЕЦ КАК ЛьготаПоДоходу
	|ПОМЕСТИТЬ ВТ_ПрименяемыеЛьготы
	|ИЗ
	|	ИПНЛьготыФизлиц КАК ИПНЛьготыФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтогоДоходы.ФизЛицо КАК ФизЛицо,
	|	ВТИтогоДоходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТИтогоДоходы.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ОПВРасчетыСФондамиОбороты.ИсчисленныеВзносы) КАК ОПВЗаМесяц,
	|	СУММА(ВОСМСРасчетыСФондамиОбороты.ИсчисленныеВзносы) КАК ВОСМСЗаМесяц,
	|	СУММА(ВТИтоговыеДанныеОНалогах.ИПНЗаМесяц) КАК ИПНЗаМесяц,
	|	СУММА(ВТИтогоДоходы.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТИтоговыеДанныеОНалогах.РанееИсчисленныйИПН) КАК РанееИсчисленныйИПН,
	|	СУММА(ВТИтогоДоходы.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТ_ПрименяемыеЛьготы.ЛьготаПоДоходу КАК ЛьготаПоДоходу,
	|	СУММА(ВТИтогоДоходы.ПримененнаяЛьготаЗаМесяц) КАК ПримененнаяЛьготаЗаМесяц,
	|	СУММА(ВТИтогоДоходы.РазрешенныйВычетЗаМесяц) КАК РазрешенныйВычетЗаМесяц,
	|	СУММА(ВТИтогоДоходы.РанееПримененныйВычет) КАК РанееПримененныйВычет,
	|	СУММА(ВТИтогоДоходы.ПримененныйВычетЗаМесяц) КАК ПримененныйВычетЗаМесяц,
	|	СУММА(ВТИтогоДоходы.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТИтогоДоходы.СуммаДохода) КАК СуммаДохода,
	|	ВТИтогоДоходы.ПримененнаяЛьготаЗаГод КАК ПримененнаяЛьготаЗаГод,
	|	ВТ_ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ КАК ПрименяетсяЛьготаУчастникаВОВ,
	|	ВТ_ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности КАК ПрименяетсяЛьготаПоИнвалидности,
	|	ВТ_ПрименяемыеВычеты.ПризнакПрименениеВычета КАК ПризнакПрименениеВычета,
	|	ВТ_ПрименяемыеВычеты.ПризнакФизЛицоНеРезидент КАК ПризнакФизЛицоНеРезидент,
	|	ВТ_ПрименяемыеВычеты.КалендарныхДнейРаботы КАК КалендарныхДнейРаботы,
	|	ВТ_ПрименяемыеВычеты.НалоговыйВычетЛичный КАК НалоговыйВычетЛичный,
	|	ВТ_ПрименяемыеЛьготы.ОтношениеКИнвалидности КАК ОтношениеКИнвалидности,
	|	ВТ_ПрименяемыеЛьготы.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	СУММА(0) КАК ПримененныеВычетыИПН,
	|	СУММА(0) КАК РазрешенныеВычетыИПН
	|ПОМЕСТИТЬ ВТИтоговыеДанные
	|ИЗ
	|	ВТИтогоДоходы КАК ВТИтогоДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОНалогах КАК ВТИтоговыеДанныеОНалогах
	|		ПО ВТИтогоДоходы.ФизЛицо = ВТИтоговыеДанныеОНалогах.ФизЛицо
	|			И ВТИтогоДоходы.МесяцНалоговогоПериода = ВТИтоговыеДанныеОНалогах.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОПВРасчетыСФондами КАК ОПВРасчетыСФондамиОбороты
	|		ПО ВТИтогоДоходы.ФизЛицо = ОПВРасчетыСФондамиОбороты.ФизЛицо
	|			И ВТИтогоДоходы.МесяцНалоговогоПериода = ОПВРасчетыСФондамиОбороты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондамиОбороты
	|		ПО ВТИтогоДоходы.ФизЛицо = ВОСМСРасчетыСФондамиОбороты.ФизЛицо
	|			И ВТИтогоДоходы.МесяцНалоговогоПериода = ВОСМСРасчетыСФондамиОбороты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтогоДоходы.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименяемыеВычеты КАК ВТ_ПрименяемыеВычеты
	|		ПО ВТИтогоДоходы.ФизЛицо = ВТ_ПрименяемыеВычеты.ФизЛицо
	|			И ВТИтогоДоходы.МесяцНалоговогоПериода = ВТ_ПрименяемыеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименяемыеЛьготы КАК ВТ_ПрименяемыеЛьготы
	|		ПО ВТИтогоДоходы.ФизЛицо = ВТ_ПрименяемыеЛьготы.ФизЛицо
	|			И ВТИтогоДоходы.МесяцНалоговогоПериода = ВТ_ПрименяемыеЛьготы.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтогоДоходы.ФизЛицо,
	|	ВТИтогоДоходы.МесяцНалоговогоПериода,
	|	ВТ_ПрименяемыеВычеты.ПризнакПрименениеВычета,
	|	ВТ_ПрименяемыеВычеты.ПризнакФизЛицоНеРезидент,
	|	ВТ_ПрименяемыеВычеты.КалендарныхДнейРаботы,
	|	ВТ_ПрименяемыеВычеты.НалоговыйВычетЛичный,
	|	ВТ_ПрименяемыеЛьготы.ОтношениеКИнвалидности,
	|	ВТ_ПрименяемыеЛьготы.ГруппаИнвалидности,
	|	ВТ_ПрименяемыеЛьготы.ЛьготаПоДоходу,
	|	ВТ_ПрименяемыеЛьготы.ПрименяетсяЛьготаУчастникаВОВ,
	|	ВТ_ПрименяемыеЛьготы.ПрименяетсяЛьготаПоИнвалидности,
	|	ВТИтогоДоходы.ПримененнаяЛьготаЗаГод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОПВДанныеДляРасчета.ФизЛицо,
	|	ОПВДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	ОПВДанныеДляРасчета.Взнос,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	"""",
	|	0,
	|	0
	|ИЗ
	|	ВТОПВДанныеДляРасчета КАК ОПВДанныеДляРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВОСМСДанныеДляРасчета.ФизЛицо,
	|	ВОСМСДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	ВОСМСДанныеДляРасчета.Взнос,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	"""",
	|	0,
	|	0
	|ИЗ
	|	ВТВОСМСДанныеДляРасчета КАК ВОСМСДанныеДляРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТВычетыИПНДляРасчета.ФизЛицо,
	|	ВТВычетыИПНДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	"""",
	|	СУММА(ВТВычетыИПНДляРасчета.ПримененныеВычетыИПН),
	|	СУММА(ВТВычетыИПНДляРасчета.РазрешенныеВычетыИПН)
	|ИЗ
	|	ВТВычетыИПНДляРасчета КАК ВТВычетыИПНДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТВычетыИПНДляРасчета.ФизЛицо,
	|	ВТВычетыИПНДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанные.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанные.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТИтоговыеДанные.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТИтоговыеДанные.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТИтоговыеДанные.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТИтоговыеДанные.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТИтоговыеДанные.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ВТИтоговыеДанные.ОПВЗаМесяц) КАК ОПВЗаМесяц,
	|	СУММА(ВТИтоговыеДанные.ВОСМСЗаМесяц) КАК ВОСМСЗаМесяц,
	|	СУММА(ВТИтоговыеДанные.ИПНЗаМесяц) КАК ИПНЗаМесяц,
	|	СУММА(ВТИтоговыеДанные.РанееИсчисленныйИПН) КАК РанееИсчисленныйИПН,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.ПримененнаяЛьготаЗаГод)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененнаяЛьготаЗаГод,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА ВЫБОР
	|					КОГДА МАКСИМУМ(ВТИтоговыеДанные.ПрименяетсяЛьготаУчастникаВОВ)
	|							ИЛИ МАКСИМУМ(ВТИтоговыеДанные.ПрименяетсяЛьготаПоИнвалидности)
	|						ТОГДА СУММА(ВТИтоговыеДанные.ЛьготаПоДоходу)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЛьготаПоДоходу,
	|	МАКСИМУМ(ВТИтоговыеДанные.ПрименяетсяЛьготаУчастникаВОВ) КАК ПрименяетсяЛьготаУчастникаВОВ,
	|	МАКСИМУМ(ВТИтоговыеДанные.ПрименяетсяЛьготаПоИнвалидности) КАК ПрименяетсяЛьготаПоИнвалидности,
	|	СУММА(ВТИтоговыеДанные.ПризнакПрименениеВычета) КАК ПризнакПрименениеВычета,
	|	СУММА(ВТИтоговыеДанные.ПризнакФизЛицоНеРезидент) КАК ПризнакФизЛицоНеРезидент,
	|	СУММА(ВТИтоговыеДанные.КалендарныхДнейРаботы) КАК КалендарныхДнейРаботы,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.НалоговыйВычетЛичный)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НалоговыйВычетЛичный,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.ПримененнаяЛьготаЗаМесяц)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененнаяЛьготаЗаМесяц,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.РазрешенныйВычетЗаМесяц)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазрешенныйВычетЗаМесяц,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.РанееПримененныйВычет)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееПримененныйВычет,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВТИтоговыеДанные.ФизЛицо) <> ТИП(Справочник.Контрагенты)
	|			ТОГДА СУММА(ВТИтоговыеДанные.ПримененныйВычетЗаМесяц)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПримененныйВычетЗаМесяц,
	|	СУММА(ВТИтоговыеДанные.ПримененныеВычетыИПН) КАК ПримененныеВычетыИПН,
	|	СУММА(ВТИтоговыеДанные.РазрешенныеВычетыИПН) КАК РазрешенныеВычетыИПН
	|ИЗ
	|	ВТИтоговыеДанные КАК ВТИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТИтоговыеДанные.ФизЛицо,
	|	ВТИтоговыеДанные.МесяцНалоговогоПериода";

	ДанныеИПН = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеИПН.Следующий() Цикл
		
		РасчетИПНДополнительныеДанныеСтрока = РасчетИПНДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетИПНДополнительныеДанныеСтрока, ДанныеИПН);
		
		Если Объект.ПериодРегистрации < Дата(2018,1,1) Тогда
			Если ДанныеИПН.НалоговыйВычетЛичный = 0 Тогда
				Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Заявление на вычет не зарегистрировано. '");
				КонецЕсли;
				Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Лицо не является налоговым резидентом РК. '");
				КонецЕсли;
				Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является работником менее 16 календарных дней. '");
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
				РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является лицом, приравненным к участникам ВОВ. '");
			КонецЕсли;
			Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
				РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является инвалидом (родителем инвалида, участником ВОВ). '");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПН(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено) Экспорт

	Если ПериодРегистрации >= '20200101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетИПНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетИПНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20180101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетИПНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20170701' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2017(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетИПНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетИПНДополнительныеДанные);
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПН()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНДо2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	УжеПрименилиВычет = 0;
	УжеПрименилиЛьготу = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	Если КомментироватьРасчет Тогда
		// комментарий для расчет ИПН реализован только начиная с 2007 года - начало комментария формируется в документе РасчетУдержанийРаботниковОрганизаций
		ЕстьПодробныйКомментарий = ТаблицаДанныеИПН.Колонки.Найти("СуммаДоходаВсего") <> Неопределено;
	КонецЕсли;
	
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеИПН.Период >= '20070101' Тогда
			// комментарии и проверки реализованы только в расчете после 2007 года
			Если ДанныеИПН.ПроцентСтавки = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеИПН.РазмерМЗП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеИПН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеИПН.Период) Тогда
			УжеИсчислили = 0;
			УжеПрименилиВычет = 0;
			УжеПрименилиЛьготу = 0;
			ТекущееФизлицо = ДанныеИПН.ФизЛицо;
			ТекущийГод = Год(ДанныеИПН.Период);
		КонецЕсли;
		
		РанееНалогИсчисленный = ?(ДанныеИПН.РанееНалогИсчисленный = null, 0, ДанныеИПН.РанееНалогИсчисленный);
		Если ДанныеИПН.Период >= '20070101' Тогда
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный);
			ВычетПримененный = ДанныеИПН.ПримененныйВычет;
		Иначе
			НалогИсчисленный = ?(ДанныеИПН.НалогИсчисленный = null, 0, ДанныеИПН.НалогИсчисленный) - УжеИсчислили;
			ВычетПримененный = ДанныеИПН.ПримененныйВычет - УжеПрименилиВычет;
		КонецЕсли;
		ЛьготаПримененная = ДанныеИПН.ПримененнаяЛьгота - УжеПрименилиЛьготу;
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		НалогИсчисленный = НалогИсчисленный - РанееНалогИсчисленный;
		
		Если 	НалогИсчисленный = 0 и 
				ВычетПримененный = 0 и 
				ЛьготаПримененная = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;
		УжеПрименилиВычет = УжеПрименилиВычет + ВычетПримененный;
		УжеПрименилиЛьготу = УжеПрименилиЛьготу + ЛьготаПримененная;

	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ПримененныйВычет, ПримененнаяЛьгота");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНДо2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода, РазрешенныйВычет");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
				СтруктураСтроки.РазрешенныйВычет = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ТекущееФизЛицо = "";
	ВычетПримененныйВДанномРасчете = 0;
	РазрешенныйВычетВДанномРасчете = 0;
	ЛьготаПримененнаяВДанномРасчете = 0;
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[ДанныеИПН.Период];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеСтавкиИПН.Вставить(ДанныеИПН.Период, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если ДанныеИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
			ВычетПримененныйВДанномРасчете = 0;
			РазрешенныйВычетВДанномРасчете = 0;
			ЛьготаПримененнаяВДанномРасчете = 0;
		КонецЕсли;

		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// сумма невыбранной льготы
		
		// т.к. одно физлицо может присутствовать в нескольких документах расчета за один месяц, 
		// то определим "чистую" сумму льготы, приходящейся на прошлые месяцы
		ПримененнаяЛьготаЗаПрошлыеМесяцы = ДанныеИПН.ПримененнаяЛьготаЗаГод - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		МаксимальноДопустимаяЛьгота = Макс(ДанныеИПН.ЛьготаПоДоходу - ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокЛьготы = Макс(МаксимальноДопустимаяЛьгота - ПримененнаяЛьготаЗаПрошлыеМесяцы - ЛьготаПримененнаяВДанномРасчете, 0);
		
		Если ОстатокЛьготы > 0 И ОблагаемыйДоход > 0 Тогда
			ЛьготаПримененная = Мин(ОблагаемыйДоход, ОстатокЛьготы) - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		Иначе
			ЛьготаПримененная = 0;
		КонецЕсли;
		
		ЛьготаПримененнаяВДанномРасчете = ЛьготаПримененнаяВДанномРасчете + ЛьготаПримененная;
		
		// облагаемая часть дохода после применения льготы и вычета ОПВ
		ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносы;
		
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеИПН.РазрешенныйВычетЗаГод - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		РазрешенныйВычетЗаТекущийМесяц = ДанныеИПН.НалоговыйВычетЛичный + РазрешенныйВычетВДанномРасчете;
		РазрешенныйВычет = ДанныеИПН.НалоговыйВычетЛичный - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		РазрешенныйВычетВДанномРасчете = РазрешенныйВычетВДанномРасчете + РазрешенныйВычет;
		ПрименныйВычетЗаТекущийМесяц = РазрешенныйВычетЗаПрошлыеМесяцы + РазрешенныйВычетЗаТекущийМесяц - (ДанныеИПН.ПримененныйВычетЗаГод - ДанныеИПН.ПримененныйВычетЗаМесяц) - ВычетПримененныйВДанномРасчете;		
		ВычетПримененный = ПрименныйВычетЗаТекущийМесяц;
		
		Если ОблагаемаяСумма >= 0 Тогда
			ВычетПримененный = Мин(ВычетПримененный, ОблагаемаяСумма);
		Иначе
			ВычетПримененный = 0;
		КонецЕсли;
		
		// если было несколько документов по расчету налога, то определяем остаток вычета для текущего документа
		ВычетПримененный = ВычетПримененный - ДанныеИПН.ПримененныйВычетЗаМесяц;
		
		ВычетПримененныйВДанномРасчете = ВычетПримененныйВДанномРасчете + ВычетПримененный;

		ОблагаемаяСумма = ОблагаемаяСумма - ПрименныйВычетЗаТекущийМесяц - ДанныеИПН.ПрочиеВычеты;
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			
		   	Если ДанныеИПН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетИПНДополнительныеДанныеСтрока							= РасчетИПНДополнительныеДанные.Добавить();
				РасчетИПНДополнительныеДанныеСтрока.ФизЛицо					= ДанныеИПН.ФизЛицо;
				РасчетИПНДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеИПН.Период;
				
				РасчетИПНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;

				Если ДанныеИПН.ЛьготаПоДоходу <> 0 Тогда
					
					Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ
						ИЛИ ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
						РасчетИПНДополнительныеДанныеСтрока.ПримененнаяЛьготаЗаМесяц = ДанныеИПН.ПримененнаяЛьготаЗаМесяц + ЛьготаПримененная;
					КонецЕсли;
					Если ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы <> 0 Тогда
						РасчетИПНДополнительныеДанныеСтрока.ПримененнаяЛьготаЗаГод = ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы;
					КонецЕсли;
					Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
						РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является лицом, приравненным к участникам ВОВ '");
					КонецЕсли;
					Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
						РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является инвалидом (родителем инвалида, участником ВОВ) '");
					КонецЕсли;
				КонецЕсли;
				
				РасчетИПНДополнительныеДанныеСтрока.ОПВЗаМесяц = ДанныеИПН.ИсчисленныеВзносы;
				РасчетИПНДополнительныеДанныеСтрока.ПримененныйВычетЗаМесяц = ВычетПримененный + ДанныеИПН.ПримененныйВычетЗаМесяц;
				РасчетИПНДополнительныеДанныеСтрока.РанееПримененныйВычет = ДанныеИПН.ПримененныйВычетЗаМесяц;
				
				// всего за месяц разрешенный
				РасчетИПНДополнительныеДанныеСтрока.РазрешенныйВычетЗаМесяц = ДанныеИПН.НалоговыйВычетЛичный;
				
				Если ДанныеИПН.НалоговыйВычетЛичный = 0 Тогда
					Если ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
						РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Заявление на вычет не зарегистрировано. '");
					КонецЕсли;
					Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
						РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Лицо не является налоговым резидентом РК. '");
					КонецЕсли;
					Если ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
						РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является работником менее 16 календарных дней. '");
					КонецЕсли;
				КонецЕсли;

				// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
				// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то нижеследующим
				// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)				
				
				РасчетИПНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = Макс(ОблагаемаяСумма, 0);
				РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
				
				РасчетИПНДополнительныеДанныеСтрока.ИПНЗаМесяц = НалогИсчисленныйЗаМесяц;
				РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленныйИПН = ДанныеИПН.РанееИсчисленныйНалог;

			КонецЕсли;
				
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ВычетПримененный = 0 И 
					ЛьготаПримененная = 0 И
					РазрешенныйВычет = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.РазрешенныйВычет				= РазрешенныйВычет;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009()

// Заполняет набор записей по переданным данным расчета ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2017(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, МесяцНалоговогоПериода, РазрешенныйВычет");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененныйВычет = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
				СтруктураСтроки.РазрешенныйВычет = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ТекущееФизЛицо = "";
	ВычетПримененныйВДанномРасчете = 0;
	РазрешенныйВычетВДанномРасчете = 0;
	ЛьготаПримененнаяВДанномРасчете = 0;
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[ДанныеИПН.Период];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеСтавкиИПН.Вставить(ДанныеИПН.Период, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если ДанныеИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
			ВычетПримененныйВДанномРасчете = 0;
			РазрешенныйВычетВДанномРасчете = 0;
			ЛьготаПримененнаяВДанномРасчете = 0;
		КонецЕсли;

		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// сумма невыбранной льготы
		
		// т.к. одно физлицо может присутствовать в нескольких документах расчета за один месяц, 
		// то определим "чистую" сумму льготы, приходящейся на прошлые месяцы
		ПримененнаяЛьготаЗаПрошлыеМесяцы = ДанныеИПН.ПримененнаяЛьготаЗаГод - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		МаксимальноДопустимаяЛьгота = Макс(ДанныеИПН.ЛьготаПоДоходу - ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы, 0);
		ОстатокЛьготы = Макс(МаксимальноДопустимаяЛьгота - ПримененнаяЛьготаЗаПрошлыеМесяцы - ЛьготаПримененнаяВДанномРасчете, 0);
		
		Если ОстатокЛьготы > 0 И ОблагаемыйДоход > 0 Тогда
			ЛьготаПримененная = Мин(ОблагаемыйДоход, ОстатокЛьготы) - ДанныеИПН.ПримененнаяЛьготаЗаМесяц;
		Иначе
			ЛьготаПримененная = 0;
		КонецЕсли;
		
		ЛьготаПримененнаяВДанномРасчете = ЛьготаПримененнаяВДанномРасчете + ЛьготаПримененная;
		
		// облагаемая часть дохода после применения льготы и вычета ОПВ
		ОблагаемаяСумма = ОблагаемыйДоход - ОстатокЛьготы - ДанныеИПН.ИсчисленныеВзносы;
		
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеИПН.РазрешенныйВычетЗаГод - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		РазрешенныйВычетЗаТекущийМесяц = ДанныеИПН.НалоговыйВычетЛичный + РазрешенныйВычетВДанномРасчете;
		РазрешенныйВычет = ДанныеИПН.НалоговыйВычетЛичный - ДанныеИПН.РазрешенныйВычетЗаМесяц;
		РазрешенныйВычетВДанномРасчете = РазрешенныйВычетВДанномРасчете + РазрешенныйВычет;
		ПрименныйВычетЗаТекущийМесяц = РазрешенныйВычетЗаПрошлыеМесяцы + РазрешенныйВычетЗаТекущийМесяц - (ДанныеИПН.ПримененныйВычетЗаГод - ДанныеИПН.ПримененныйВычетЗаМесяц) - ВычетПримененныйВДанномРасчете;		
		ВычетПримененный = ПрименныйВычетЗаТекущийМесяц;
		
		Если ОблагаемаяСумма >= 0 Тогда
			ВычетПримененный = Мин(ВычетПримененный, ОблагаемаяСумма);
		Иначе
			ВычетПримененный = 0;
		КонецЕсли;
		
		// если было несколько документов по расчету налога, то определяем остаток вычета для текущего документа
		ВычетПримененный = ВычетПримененный - ДанныеИПН.ПримененныйВычетЗаМесяц;
		
		ВычетПримененныйВДанномРасчете = ВычетПримененныйВДанномРасчете + ВычетПримененный;

		ОблагаемаяСумма = ОблагаемаяСумма - ПрименныйВычетЗаТекущийМесяц - ДанныеИПН.ИсчисленныеВзносыОСМС - ДанныеИПН.ПрочиеВычеты;
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ВычетПримененный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВычетПримененный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		ЛьготаПримененная 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ЛьготаПримененная, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			
			РасчетИПНДополнительныеДанныеСтрока							= РасчетИПНДополнительныеДанные.Добавить();
			РасчетИПНДополнительныеДанныеСтрока.ФизЛицо					= ДанныеИПН.ФизЛицо;
			РасчетИПНДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеИПН.Период;
			
			РасчетИПНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;

			Если ДанныеИПН.ЛьготаПоДоходу <> 0 Тогда
				
				Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ
					ИЛИ ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
					РасчетИПНДополнительныеДанныеСтрока.ПримененнаяЛьготаЗаМесяц = ДанныеИПН.ПримененнаяЛьготаЗаМесяц + ЛьготаПримененная;
				КонецЕсли;
				Если ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы <> 0 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ПримененнаяЛьготаЗаГод = ДанныеИПН.ПримененнаяЛьготаЗаГод + ДанныеИПН.ПримененнаяЛьготаНаПредыдущемМестеРаботы;
				КонецЕсли;
				Если ДанныеИПН.ПрименяетсяЛьготаУчастникаВОВ Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является лицом, приравненным к участникам ВОВ '");
				КонецЕсли;
				Если ДанныеИПН.ПрименяетсяЛьготаПоИнвалидности Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является инвалидом (родителем инвалида, участником ВОВ) '");
				КонецЕсли;
			КонецЕсли;
			
			РасчетИПНДополнительныеДанныеСтрока.ОПВЗаМесяц = ДанныеИПН.ИсчисленныеВзносы;
			РасчетИПНДополнительныеДанныеСтрока.ВОСМСЗаМесяц = ДанныеИПН.ИсчисленныеВзносыОСМС;
			РасчетИПНДополнительныеДанныеСтрока.ПримененныйВычетЗаМесяц = ВычетПримененный + ДанныеИПН.ПримененныйВычетЗаМесяц;
			РасчетИПНДополнительныеДанныеСтрока.РанееПримененныйВычет = ДанныеИПН.ПримененныйВычетЗаМесяц;
			
			// всего за месяц разрешенный
			РасчетИПНДополнительныеДанныеСтрока.РазрешенныйВычетЗаМесяц = ДанныеИПН.НалоговыйВычетЛичный;
			
			Если ДанныеИПН.НалоговыйВычетЛичный = 0 Тогда
				Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ДанныеИПН.ПризнакПрименениеВычета = 0 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Заявление на вычет не зарегистрировано. '");
				КонецЕсли;
				Если ДанныеИПН.ПризнакФизЛицоНеРезидент <> 0 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Лицо не является налоговым резидентом РК. '");
				КонецЕсли;
				Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.ФизическиеЛица") И ДанныеИПН.КалендарныхДнейРаботы < 16 Тогда
					РасчетИПНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр( "ru = 'Является работником менее 16 календарных дней. '");
				КонецЕсли;
			КонецЕсли;

			// т.к в комментарий могут еще попасть сообщения о плановых налоговых вычетах (страховых, жилищных),
			// которые рассчитываются в документе "РасчетУдержанийРаботниковОрганизаций", то нижеследующим
			// комментариям назначаем порядок сообщения больший, чем "100" ("100" - это порядок сообщения для плановых вычетов)				
			
			РасчетИПНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = Макс(ОблагаемаяСумма, 0);
			РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
			
			РасчетИПНДополнительныеДанныеСтрока.ИПНЗаМесяц = НалогИсчисленныйЗаМесяц;
			РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленныйИПН = ДанныеИПН.РанееИсчисленныйНалог;

		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ВычетПримененный = 0 И 
					ЛьготаПримененная = 0 И
					РазрешенныйВычет = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.ПримененныйВычет				= ВычетПримененный;
		Строка.ПримененнаяЛьгота			= ЛьготаПримененная;
		Строка.РазрешенныйВычет				= РазрешенныйВычет;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза, ПримененныйВычет, ПримененнаяЛьгота, РазрешенныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымИПНПосле2009()

// Заполняет набор записей по переданным данным расчета вычетов ИПН
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СведенияОбИсчисленииВычетовИПН
//	ТаблицаДанныеВычетовИПН - таблица значений - данные расчета вычетов ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПН(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
  	Если ПериодРегистрации >= '20210101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
    иначеЕсли ПериодРегистрации >= '20200101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда	
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
	Иначе 
		ЗаполнитьНаборЗаписейПоДаннымВычетовИПНДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, КомментарийВидаРасчета, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
			
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов Тогда
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
		ИначеЕсли ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам Тогда
			Если ДанныеВычетовИПН.ПределВычета > 0 Тогда
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета, ДанныеВычетовИПН.РазмерВычета);
				ИначеЕсли ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
														- РазрешенныйВычетЗаПрошлыеМесяцы 
														- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
														ДанныеВычетовИПН.РазмерВычета);
				Иначе 
					РазрешенныйВычетВТекущемПериоде = 0;
				КонецЕсли;
			Иначе 
				РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			КонецЕсли;
		Иначе
			РазрешенныйВычетВТекущемПериоде = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВычетовИПН.ФизЛицо, "ФизЛицо");
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
				РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам;
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде + ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
					
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если	РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
			
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов Тогда
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
		ИначеЕсли ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам Тогда
			Если ДанныеВычетовИПН.ПределВычета > 0 Тогда
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета, ДанныеВычетовИПН.РазмерВычета);
				ИначеЕсли ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
														- РазрешенныйВычетЗаПрошлыеМесяцы 
														- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
														ДанныеВычетовИПН.РазмерВычета);
				Иначе 
					РазрешенныйВычетВТекущемПериоде = 0;
				КонецЕсли;
			Иначе 
				РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			КонецЕсли;
		Иначе
			РазрешенныйВычетВТекущемПериоде = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВычетовИПН.ФизЛицо, "ФизЛицо");
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				// игнорируем ОПВ 
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам;
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде + ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
					
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если	РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");

	ПрименятьОПВиВОСМСДляГПХ = ПрименятьВычетОПВиВОСМСДляГПХ(Организация, ПериодРегистрации);
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если (ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			И ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГодаПоДругимДоходам;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетСНачалаГодаПоДругимДоходам;
		Иначе
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
		КонецЕсли;
			
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода + РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода + ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов Тогда
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		ИначеЕсли ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам Тогда
			Если ДанныеВычетовИПН.ПределВычета > 0 Тогда
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета, ДанныеВычетовИПН.РазмерВычета);
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
				ИначеЕсли ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
														- РазрешенныйВычетЗаПрошлыеМесяцы 
														- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
														ДанныеВычетовИПН.РазмерВычета);
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
				Иначе 
					РазрешенныйВычетВТекущемПериоде = 0;
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
				КонецЕсли;
			Иначе 
				РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
				РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
				ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
			КонецЕсли;
		Иначе
			РазрешенныйВычетВТекущемПериоде = 0;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВычетовИПН.ФизЛицо, "ФизЛицо");
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				// игнорируем ОПВ и ВОСМС
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		                                                                                                                      
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам - РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		// ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам не используем, тк теперь ограничение по виду дохода в выборе запроса 
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
					
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если	РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьНаборЗаписейПоДаннымВычетовИПНПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеВычетовИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода, ВидВычета");
	
	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	МассивСтрок = Новый Массив;
	ТекущееФизЛицо = "";
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ТекущееФизЛицо Тогда
				Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
					РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
				КонецЕсли;
				ТекущееФизЛицо = Строка.Физлицо;
				МассивСтрок = Новый Массив;
			КонецЕсли;

			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, МесяцНалоговогоПериода, ВидВычета, РазрешенныйВычет, ПримененныйВычет");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				МассивСтрок.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущееФизЛицо) Тогда
		РаботникиДляРасчетаИПН.Вставить(ТекущееФизЛицо, МассивСтрок);
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета вычетов ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	//
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ВычетыПримененныеВДанномРасчете = Новый Соответствие;
	ВычетыРазрешенныеВДанномРасчете = Новый Соответствие;
	
	// Для разных видов дохода фиксируем примененные вычеты в текущем расчете
	ВычетыПримененныеВДанномРасчетеПоВидамДохода = Новый ТаблицаЗначений;
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("Контрагент");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ФизЛицо");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ВидВычета");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("ПримененныйВычет");
	ВычетыПримененныеВДанномРасчетеПоВидамДохода.Колонки.Добавить("РазрешенныйВычет");

	ТекущееФизЛицо = "";
	ТекущийМесяцНалоговогоПериода = "";
	
	Для Каждого ДанныеВычетовИПН Из ТаблицаДанныеВычетовИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		
		Если ДанныеВычетовИПН.РазмерМЗП = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеВычетовИПН.ФизЛицо Тогда
			ТекущееФизЛицо = ДанныеВычетовИПН.ФизЛицо;
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ВычетыПримененныеВДанномРасчете.Очистить();
			ВычетыРазрешенныеВДанномРасчете.Очистить();
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
		ИначеЕсли ТекущийМесяцНалоговогоПериода <> НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
			ОблагаемыйДоход = ДанныеВычетовИПН.ОблагаемыйДоход;
			ТекущийМесяцНалоговогоПериода = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			Если НачалоГода(ДанныеВычетовИПН.МесяцНалоговогоПериода) = НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода) Тогда
				ВычетыПримененныеВДанномРасчете.Очистить();
				ВычетыРазрешенныеВДанномРасчете.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если (ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			И ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГодаПоДругимДоходам;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетСНачалаГодаПоДругимДоходам;
		Иначе
			РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
			ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам = 0;
		КонецЕсли;
			
		// Соберем остатки за прошлые периоды в пределах года
		РазрешенныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.РазрешенныйВычетСНачалаГода + РазрешенныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		ПримененныйВычетЗаПрошлыеМесяцы = ДанныеВычетовИПН.ПримененныйВычетСНачалаГода + ПримененныйВычетЗаПрошлыеМесяцыПоДругимДоходам - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
		ОстатокВычетаЗаПрошлыеМесяцы = РазрешенныйВычетЗаПрошлыеМесяцы - ПримененныйВычетЗаПрошлыеМесяцы;
		
		// Получим значения в текущем периоде
		Если ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоИсчисленнойСуммеВзносов Тогда
			РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		ИначеЕсли ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.Стандартный 
			ИЛИ ДанныеВычетовИПН.ПредоставлениеВычета = Перечисления.ВидыПредоставленияВычетов.ПоПериодическимПлатежам Тогда
			Если ДанныеВычетовИПН.ПределВычета > 0 Тогда
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета, ДанныеВычетовИПН.РазмерВычета);
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
				ИначеЕсли ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					РазрешенныйВычетВТекущемПериоде = Мин(ДанныеВычетовИПН.СуммовойПределВычета 
														- РазрешенныйВычетЗаПрошлыеМесяцы 
														- ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0), 
														ДанныеВычетовИПН.РазмерВычета);
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам;
				Иначе 
					РазрешенныйВычетВТекущемПериоде = 0;
					РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
					ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
				КонецЕсли;
			Иначе 
				РазрешенныйВычетВТекущемПериоде = ДанныеВычетовИПН.РазмерВычета;
				РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
				ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
			КонецЕсли;
		Иначе
			РазрешенныйВычетВТекущемПериоде = 0;
			РазрешенныйВычетВТекущемПериодеПоДругимДоходам = 0;
			ПримененныйВычетВТекущемПериодеПоДругимДоходам = 0;
		КонецЕсли;
		
		// Получим сумму вычетов примененную по другим видам доходов в данном расчете
		Если ТипЗнч(ДанныеВычетовИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			ФизЛицоРасчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВычетовИПН.ФизЛицо, "ФизЛицо");
		Иначе 
			ФизЛицоРасчета = ДанныеВычетовИПН.ФизЛицо;
		КонецЕсли;

		МассивПримененныеВычеты = ВычетыПримененныеВДанномРасчетеПоВидамДохода.НайтиСтроки(Новый Структура("ФизЛицо, ВидВычета", ФизЛицоРасчета, ДанныеВычетовИПН.ВидВычета));		

		ПримененныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = 0;
		Для Каждого СтрокаПримененныйВычет Из МассивПримененныеВычеты Цикл
			Если СтрокаПримененныйВычет.Контрагент <> ДанныеВычетовИПН.ФизЛицо Тогда
				// игнорируем ОПВ и ВОСМС
				Если ДанныеВычетовИПН.ПериодПредоставления = Перечисления.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода Тогда
					ПримененныйВычетВТекущемРасчетеПоДругимДоходам = ПримененныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.ПримененныйВычет;
					РазрешенныйВычетВТекущемРасчетеПоДругимДоходам = РазрешенныйВычетВТекущемРасчетеПоДругимДоходам + СтрокаПримененныйВычет.РазрешенныйВычет;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		                                                                                                                      
		ПримененныйВычетВТекущемПериоде = Мин(ОблагаемыйДоход, ОстатокВычетаЗаПрошлыеМесяцы + РазрешенныйВычетВТекущемПериоде + ?(ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0)
										- ПримененныйВычетВТекущемПериодеПоДругимДоходам - ПримененныйВычетВТекущемРасчетеПоДругимДоходам
										- ?(ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) <> Неопределено, ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета), 0));
		
		// Скорректируем остаток облагаемого дохода
		ОблагаемыйДоход = Макс(0, ОблагаемыйДоход - ПримененныйВычетВТекущемПериоде);
		
		// Получим значения в текущем расчете
		РазрешенныйВычетВТекущемРасчете = РазрешенныйВычетВТекущемПериоде - ДанныеВычетовИПН.РазрешенныйВычетВТекущемПериоде - РазрешенныйВычетВТекущемРасчетеПоДругимДоходам - РазрешенныйВычетВТекущемПериодеПоДругимДоходам;
		// ДанныеВычетовИПН.ПримененныйВычетВТекущемПериодеПоДругимДоходам не используем, тк теперь ограничение по виду дохода в выборе запроса 
		ПримененныйВычетВТекущемРасчете = ПримененныйВычетВТекущемПериоде - ДанныеВычетовИПН.ПримененныйВычетВТекущемПериоде;
		
		// Зафиксируем результаты по значению текущего физлица расчета
		Если ВычетыПримененныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда
			ВычетыПримененныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, ПримененныйВычетВТекущемРасчете);
		Иначе 
			ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыПримененныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + ПримененныйВычетВТекущемРасчете;
		КонецЕсли;
		
		Если ВычетыРазрешенныеВДанномРасчете.Получить(ДанныеВычетовИПН.ВидВычета) = Неопределено Тогда 
			ВычетыРазрешенныеВДанномРасчете.Вставить(ДанныеВычетовИПН.ВидВычета, РазрешенныйВычетВТекущемРасчете);
		Иначе 
			ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] = ВычетыРазрешенныеВДанномРасчете[ДанныеВычетовИПН.ВидВычета] + РазрешенныйВычетВТекущемРасчете;
		КонецЕсли;
					
		// Зафиксируем результаты в целом по физлицу
		НоваяСтрокаПримененныеВычеты 					= ВычетыПримененныеВДанномРасчетеПоВидамДохода.Добавить();
		НоваяСтрокаПримененныеВычеты.Контрагент 		= ДанныеВычетовИПН.ФизЛицо;
		НоваяСтрокаПримененныеВычеты.ФизЛицо 			= ФизЛицоРасчета;
		НоваяСтрокаПримененныеВычеты.ВидВычета 			= ДанныеВычетовИПН.ВидВычета;
		НоваяСтрокаПримененныеВычеты.ПримененныйВычет 	= ПримененныйВычетВТекущемРасчете;
		НоваяСтрокаПримененныеВычеты.РазрешенныйВычет 	= РазрешенныйВычетВТекущемРасчете;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			Если	РазрешенныйВычетВТекущемРасчете = 0 И
					ПримененныйВычетВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период							= НачалоМесяца(ДанныеВычетовИПН.МесяцНалоговогоПериода);
			
			// Измерения
			Движение.ФизическоеЛицо             	= ДанныеВычетовИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.ПериодРегистрации	    		= НачалоМесяца(ПериодРегистрации);
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;
			Движение.ВидВычета		          		= ДанныеВычетовИПН.ВидВычета;

			// Ресурсы
			Движение.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
			Движение.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
			
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВычетовИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВычетовИПН.МесяцНалоговогоПериода;
			СтруктураПоиска.ВидВычета = ДанныеВычетовИПН.ВидВычета;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеВычетовИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВычетовИПН.ФизЛицо;
		Строка.МесяцНалоговогоПериода 		= ДанныеВычетовИПН.МесяцНалоговогоПериода;
		Строка.ВидВычета					= ДанныеВычетовИПН.ВидВычета;
		Строка.РазрешенныйВычет				= РазрешенныйВычетВТекущемРасчете;
		Строка.ПримененныйВычет				= ПримененныйВычетВТекущемРасчете;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВычетыИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		Для Каждого Строка Из Элемент.Значение Цикл
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВычетыИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВычетыИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВычетыИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода, ВидВычета", "РазрешенныйВычет, ПримененныйВычет");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВычетыИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "Период");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("РазрешенныйВычет"), ВРег(Колонка.Имя)) = 0 
					И Найти(ВРег("ПримененныйВычет"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "РазрешенныйВычет, ПримененныйВычет");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

// Заполняет набор записей по переданным данным расчета ИПН 2018 года
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2018(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ТекущееФизЛицо = "";
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[ДанныеИПН.Период];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеСтавкиИПН.Вставить(ДанныеИПН.Период, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;

		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);
		
		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		Если КомментироватьРасчет Тогда
			
			РасчетИПНДополнительныеДанныеСтрока							= РасчетИПНДополнительныеДанные.Добавить();
			РасчетИПНДополнительныеДанныеСтрока.ФизЛицо					= ДанныеИПН.ФизЛицо;
			РасчетИПНДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеИПН.Период;
			
			РасчетИПНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;

			РасчетИПНДополнительныеДанныеСтрока.ПримененныеВычетыИПН = ДанныеИПН.ПримененныеВычетыВТекущемРасчете;
			РасчетИПНДополнительныеДанныеСтрока.РазрешенныеВычетыИПН = ДанныеИПН.РазрешенныеВычетыВТекущемРасчете;
			
			РасчетИПНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = Макс(ОблагаемаяСумма, 0);
			РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
			
			РасчетИПНДополнительныеДанныеСтрока.ИПНЗаМесяц = НалогИсчисленныйЗаМесяц;
			РасчетИПНДополнительныеДанныеСтрока.РанееИсчисленныйИПН = ДанныеИПН.РанееИсчисленныйНалог;
				
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ОблагаемаяБаза = 0 И
					ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
					ДанныеИПН.РазрешенныеВычетыВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	//
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РасчетОПВДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетОПВДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетОПВДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("ОПВЗаМесяц");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("РанееИсчисленныйОПВ");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("МаксимальноеОграничение");
	РасчетОПВДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");

	Возврат РасчетОПВДополнительныеДанные;	

КонецФункции 

Процедура РассчитатьОПВДополнительныеДанные(Объект, ОПВДанныеДляРасчета = Неопределено, РасчетОПВДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОПВДанныеДляРасчета", ОПВДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	РеквизитыОрганизации = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Организация, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ?(РеквизитыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, РеквизитыОрганизации.ИндивидуальныйПредприниматель, Неопределено));

	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);

	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");

	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОПВДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ОПВДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОПВДанныеДляРасчета.Взнос КАК Взнос,
	|	ОПВДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ОПВДанныеДляРасчета КАК ОПВДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * ВЫБОР
	|			КОГДА РасчетныеПоказатели.Период < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА 75
	|			ИНАЧЕ 50
	|	КОНЕЦ, 0) КАК МаксимальноеОграничение
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо
	|ПОМЕСТИТЬ ВТФизлицаИнвалидыБессрочно
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОбИнвалидностиФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОбИнвалидностиФизлиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид
	|	И СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В(&парамСписокГруппИнвалидности)
	|	И СведенияОбИнвалидностиФизлиц.СрокДействияСправки = &парамПустаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОбИнвалидностиФизлиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаИнвалидыБессрочно.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезПраваНаПенсию КАК ФизлицаБезПраваНаПенсию
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаБезПраваНаПенсию.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаИнвалидыБессрочно КАК ФизлицаИнвалидыБессрочно
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаИнвалидыБессрочно.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// получим физлиц и контрагентов в виде соответствия для определения дохода по другому виду
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	Контрагенты.Ссылка КАК КонтрагентФизЛицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентовИФизЛиц
	|ИЗ
	|	ВТДанныеДляРасчета КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|	И СписокФизЛиц.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СписокФизЛиц.ФизЛицо,
	|	Контрагенты.ФизЛицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода
	|ИЗ
	|	ВТДанныеДляРасчета КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.Контрагенты 
	|	И СписокФизЛиц.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020,1,1)
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокФизЛиц.Физлицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ОПВСведенияОДоходахОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ОПВСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ОПВСведенияОДоходахОбороты.СуммаДоходаОборот) КАК СуммаДохода,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ОПВСведенияОДоходахОбороты.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ОПВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ОПВСведенияОДоходахОбороты.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемыйДоход,
	|	0 КАК ОблагаемыйДоходПоДругимВидам
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации <= &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ОПВСведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ОПВСведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ОПВСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (НЕ ОПВСведенияОДоходахОбороты.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете)
	|			И (ОПВСведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	СУММА(ВЫБОР
	|			КОГДА ОПВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ОПВСведенияОДоходахОбороты.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ОПВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА ОПВСведенияОДоходахОбороты.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОблагаемыйДоходПоДругимВидам
	|ИЗ
	|	ВТ_СоответствиеКонтрагентовИФизЛиц КАК ВТДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТ_СоответствиеКонтрагентовИФизЛиц.КонтрагентФизЛицо
	|						ИЗ
	|							ВТ_СоответствиеКонтрагентовИФизЛиц)
	|					И ПериодРегистрации <= &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ОПВСведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.КонтрагентФизЛицо = ОПВСведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ОПВСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (НЕ ОПВСведенияОДоходахОбороты.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете)
	|			И (ОПВСведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	СУММА(ВТДанныеДляРасчета.ОблагаемаяБаза),
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоходПоДругимВидам) КАК ОблагаемыйДоходПоДругимВидам
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.Взнос КАК ОПВЗаМесяц,
	|	ОПВРасчетыСФондами.Взнос КАК РанееИсчисленныйОПВ
	|ПОМЕСТИТЬ ВТДанныеОбОтчислениях
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ОПВРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ОПВРасчетыСФондами.Регистратор <> &Регистратор
	|	И ОПВРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И ОПВРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеДляРасчета.Взнос),
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОбОтчислениях.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОбОтчислениях.ОПВЗаМесяц) КАК ОПВЗаМесяц,
	|	СУММА(ВТДанныеОбОтчислениях.РанееИсчисленныйОПВ) КАК РанееИсчисленныйОПВ
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
	|ИЗ
	|	ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОбОтчислениях.ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяИП,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоходПоДругимВидам
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоходПоДругимВидам,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.ОПВЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.РанееИсчисленныйОПВ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныйОПВ,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальноеОграничение,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|			ТОГДА ВЫБОР КОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение < ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход + ВТИтоговыеДанныеОДоходах.ОблагаемыйДоходПоДругимВидам  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДостигнутоМаксимальноеОграничение,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида КАК ПризнакФизЛицаИнвалида
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо";

	ДанныеОПВ = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		РасчетОПВДополнительныеДанныеСтрока = РасчетОПВДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетОПВДополнительныеДанныеСтрока, ДанныеОПВ);
		
		Если ДанныеОПВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
			РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на пенсию. '");
		КонецЕсли;
		Если ДанныеОПВ.ЯвляетсяИП Тогда
			РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринемателем. '");
		КонецЕсли;
		Если ДанныеОПВ.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;
		Если ДанныеОПВ.ПризнакФизЛицаИнвалида <> 0 Тогда
			РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом I или II группы, у которого инвалидность установлена бессрочно. '");
		КонецЕсли;
		Если ДанныеОПВ.ДостигнутоМаксимальноеОграничение И ДанныеОПВ.ОПВЗаМесяц = 0 Тогда
			РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Достигнуто максимальное ограничение дохода'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаборЗаписейПоДаннымОПВ(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетОПВДополнительныеДанные = Неопределено) Экспорт
	
	Если ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымОПВПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетОПВДополнительныеДанные);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымОПВДо2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетОПВДополнительныеДанные);
	КонецЕсли;	
		
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВДо2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетОПВДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаОПВ.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеОПВ = РезультатОПВ.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ДанныеОПВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеОПВ.ПроцентСтавки = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных пенсионных взносов'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеОПВ.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = ДанныеОПВ.ВзносИсчисленный;
		ОблагаемаяБаза = ДанныеОПВ.ОблагаемаяБаза;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если КомментироватьРасчет Тогда
			
			ОПВДолжныБытьРассчитаны = Истина;
			
			Если ДанныеОПВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда
				РасчетОПВДополнительныеДанныеСтрока 						= РасчетОПВДополнительныеДанные.Добавить();
				РасчетОПВДополнительныеДанныеСтрока.ФизЛицо					= ДанныеОПВ.ФизЛицо;
				РасчетОПВДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеОПВ.Период;
				РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на пенсию. '");
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОПВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетОПВДополнительныеДанныеСтрока 						= РасчетОПВДополнительныеДанные.Добавить();
				РасчетОПВДополнительныеДанныеСтрока.ФизЛицо					= ДанныеОПВ.ФизЛицо;
				РасчетОПВДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеОПВ.Период;
				РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОПВ.ПризнакФизЛицаИнвалида <> 0 Тогда
				РасчетОПВДополнительныеДанныеСтрока 						= РасчетОПВДополнительныеДанные.Добавить();
				РасчетОПВДополнительныеДанныеСтрока.ФизЛицо					= ДанныеОПВ.ФизЛицо;
				РасчетОПВДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеОПВ.Период;
				РасчетОПВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом I или II группы, у которого инвалидность установлена бессрочно. '");
				ОПВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ОПВДолжныБытьРассчитаны Тогда
				РасчетОПВДополнительныеДанныеСтрока 						= РасчетОПВДополнительныеДанные.Добавить();
				РасчетОПВДополнительныеДанныеСтрока.ФизЛицо					= ДанныеОПВ.ФизЛицо;
				РасчетОПВДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеОПВ.Период;
				
				РасчетОПВДополнительныеДанныеСтрока.ОблагаемыйДоход 		= ДанныеОПВ.ОблагаемыйДоход;
				РасчетОПВДополнительныеДанныеСтрока.МаксимальноеОграничение = ДанныеОПВ.РазмерОграниченияПоДоходам;
				
				РасчетОПВДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 			=  ДанныеОПВ.ОблагаемаяБазаЗаМесяц;
				РасчетОПВДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	=  ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза;
				
				РасчетОПВДополнительныеДанныеСтрока.ОПВЗаМесяц 			= ДанныеОПВ.ВзносЗаПериод;
				РасчетОПВДополнительныеДанныеСтрока.РанееИсчисленныйОПВ =  ДанныеОПВ.РанееИсчисленныйВзнос;
			КонецЕсли;
			
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВ.Удалить(ДанныеОПВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВ
	Для Каждого Элемент Из РаботникиДляРасчетаОПВ Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

// Заполняет набор записей по переданным данным расчета ОПВ для документов по расчету ОПВ
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//  НаборЗаписей - набор записей регистра ОПВРасчетыСФондами 
//	РезультатОПВ - данные расчета ОПВ (полученный функцией ПроведениеРасчетовПолныеПрава.ПолучитьДанныеДляРасчетаОПВ())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОПВПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОПВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетОПВДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОПВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаОПВ.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеОПВ = РезультатОПВ.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеОПВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОПВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ДанныеОПВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОПВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеОПВ.ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных пенсионных взносов'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеОПВ.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеОПВ);
		
		// сумма взносов исчисленная
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		
		Если МассивВзносов.Количество() > 0 Тогда
			ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
		Иначе
			ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
		КонецЕсли;
		
		РазмерОграниченияПоДоходам = ДанныеОПВ.РазмерОграниченияПоДоходам;
		
		// уменьшим максимальный предел по доходам за счет суммы по другим видам дохода
		Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
			ИЛИ ДанныеОПВ.РанееИсчисленныйВзносПоДругимВидам > 0 Тогда
			
			РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
			
		КонецЕсли;
		
		// облагаемая база
		Если ДанныеОПВ.ОблагаемыйДоход <= 0 Тогда
			
			ОблагаемаяБаза = 0;
			
		ИначеЕсли НЕ ДанныеОПВ.ИндивидуальныйПредприниматель = Null
			И ДанныеОПВ.ОблагаемыйДоход < ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам Тогда
			
			ОблагаемаяБаза = ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам;
			
		ИначеЕсли ДанныеОПВ.ОблагаемыйДоход < РазмерОграниченияПоДоходам Тогда
			
			ОблагаемаяБаза = ДанныеОПВ.ОблагаемыйДоход;
			
		Иначе
			
			ОблагаемаяБаза = РазмерОграниченияПоДоходам;
			
		КонецЕсли;			
		
		ОблагаемаяБаза = ОблагаемаяБаза - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза;
		
		Если ОблагаемаяБаза <= 0 Тогда
			
			ВзносЗаПериод = 0;
			
		ИначеЕсли НЕ ДанныеОПВ.ИндивидуальныйПредприниматель = Null
			И ОблагаемаяБаза < ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам Тогда
			
			ВзносЗаПериод = ДанныеОПВ.РазмерМинимальногоОграниченияПоДоходам * ДанныеОПВ.Ставка;
			
		ИначеЕсли ОблагаемаяБаза < РазмерОграниченияПоДоходам Тогда
			
			ВзносЗаПериод = ОблагаемаяБаза * ДанныеОПВ.Ставка;
			
		Иначе
			
			ВзносЗаПериод = РазмерОграниченияПоДоходам * ДанныеОПВ.Ставка;
			
		КонецЕсли;
		
		// ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные - не отнимаем, т.к. выше уже уменьшили облагаемую базу ОблагаемаяБаза - ДанныеОПВ.РанееИсчисленнаяОблагаемаяБаза
		ВзносИсчисленный = ВзносЗаПериод;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеОПВ.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеОПВ.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОПВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОПВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОПВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОПВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОПВ.Удалить(ДанныеОПВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОПВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОПВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОПВ
	Для Каждого Элемент Из РаботникиДляРасчетаОПВ Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОПВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОПВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОПВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОПВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОПВ

Функция РасчетСОДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетСОДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетСОДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетСОДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетСОДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетСОДополнительныеДанные.Колонки.Добавить("ОПВЗаМесяц");
	РасчетСОДополнительныеДанные.Колонки.Добавить("СОЗаМесяц");
	РасчетСОДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетСОДополнительныеДанные.Колонки.Добавить("РанееИсчисленныеСО");
	РасчетСОДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетСОДополнительныеДанные.Колонки.Добавить("МинимальноеОграничение");
	РасчетСОДополнительныеДанные.Колонки.Добавить("МаксимальноеОграничение");
	РасчетСОДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");

	Возврат РасчетСОДополнительныеДанные;	

КонецФункции 

Процедура РассчитатьСОДополнительныеДанные(Объект, СОДанныеДляРасчета = Неопределено, РасчетСОДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СОДанныеДляРасчета", СОДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = Ложь;
	ДанныеНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Если ДанныеНалогоплательщика.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Налогоплательщик, Объект.ПериодРегистрации);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеНалогоплательщика.ИндивидуальныйПредприниматель);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СОДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	СОДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СОДанныеДляРасчета.Отчисление КАК Отчисление,
	|	СОДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&СОДанныеДляРасчета КАК СОДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * ВЫБОР
	|			КОГДА РасчетныеПоказателиСрезПоследних.Период < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА 10
	|			ИНАЧЕ 7
	|		КОНЕЦ, 0) КАК МаксимальноеОграничение,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК МинимальноеОграничение
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаБезСоциальногоСтрахования КАК ФизлицаБезСоциальногоСтрахования
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СОСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СОСведенияОДоходахОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	СОСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК ОблагаемаяБазаЗаМесяц,
	|	СОСведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА СОСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА СОСведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА СОСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА СОСведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации = &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК СОСведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = СОСведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СОСведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (СОСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (НЕ СОСведенияОДоходахОбороты.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете)
	|			И (СОСведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	ВТДанныеДляРасчета.ОблагаемаяБаза,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.Отчисление КАК СОЗаМесяц,
	|	СОРасчетыСФондами.Отчисление КАК РанееИсчисленныеСО
	|ПОМЕСТИТЬ ВТДанныеОбОтчислениях
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО СОРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И СОРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	СОРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И СОРасчетыСФондами.Регистратор <> &Регистратор
	|	И СОРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ СОРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И СОРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	ВТДанныеДляРасчета.Отчисление,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОбОтчислениях.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОбОтчислениях.СОЗаМесяц) КАК СОЗаМесяц,
	|	СУММА(ВТДанныеОбОтчислениях.РанееИсчисленныеСО) КАК РанееИсчисленныеСО
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
	|ИЗ
	|	ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОбОтчислениях.ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ОПВЗаМесяц
	|ПОМЕСТИТЬ ВТДанныеОПВ
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ОПВРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ОПВРасчетыСФондами.Регистратор <> &Регистратор
	|	И ОПВРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И ОПВРасчетыСФондами.ФизЛицо <> &ИндивидуальныйПредприниматель
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.СОЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СОЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.РанееИсчисленныеСО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныеСО,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальноеОграничение,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МинимальноеОграничение,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезСоциальногоСтрахования = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТДанныеОПВ.ОПВЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОПВЗаМесяц
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПВ КАК ВТДанныеОПВ
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТДанныеОПВ.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТДанныеОПВ.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо";

	ДанныеСО = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеСО.Следующий() Цикл
		
		РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетСОДополнительныеДанныеСтрока, ДанныеСО);
		
		Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда                                                             
			РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит социальному страхованию. '");
		КонецЕсли;
		Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета СО
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСО(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСОДополнительныеДанные = Неопределено) Экспорт
	
	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСОДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСОДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20140101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2014(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСОДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20130201' Тогда
		ЗаполнитьНаборЗаписейПоДаннымСОПосле2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	Иначе
		ЗаполнитьНаборЗаписейПоДаннымСОДо2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на объект исчисления
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСОДополнительныеДанные = Неопределено)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ВсегдаВБольшуюСторону);
				СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СО в рамках одного периода
		Если ДанныеСО.РанееОтчисленияИсчисленные > 0
			И (ОтчислениеИсчисленное < 1 И ОтчислениеИсчисленное > 0
			ИЛИ ОтчислениеИсчисленное > -1 И ОтчислениеИсчисленное < 0) Тогда
			
			ОтчислениеИсчисленное = 0;
			
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
        
        ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			СОДолжныБытьРассчитаны = Истина;
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит социальному страхованию. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ОблагаемыйДоход 			 = ДанныеСО.ОблагаемыйДоход;
				РасчетСОДополнительныеДанныеСтрока.ОПВЗаМесяц				 = ДанныеСО.ОПВЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.МинимальноеОграничение	 = ДанныеСО.МинОбъектИсчисления;
				РасчетСОДополнительныеДанныеСтрока.МаксимальноеОграничение	 = ДанныеСО.РазмерОграниченияПоДоходах;
				
				РасчетСОДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц			 = ОблагаемаяБазаЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	 = ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;

				РасчетСОДополнительныеДанныеСтрока.СОЗаМесяц 			= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СОЗаМесяц,  ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленныеСО	= ДанныеСО.РанееОтчисленияИсчисленные;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на объект исчисления
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСОДополнительныеДанные = Неопределено)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеСО.ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных социальных отчислений'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СО в рамках одного периода
		Если ДанныеСО.РанееОтчисленияИсчисленные > 0
			И (ОтчислениеИсчисленное < 1 И ОтчислениеИсчисленное > 0
			ИЛИ ОтчислениеИсчисленное > -1 И ОтчислениеИсчисленное < 0) Тогда
			
			ОтчислениеИсчисленное = 0;
			
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			СОДолжныБытьРассчитаны = Истина;
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит социальному страхованию. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ОблагаемыйДоход 			 = ДанныеСО.ОблагаемыйДоход;
				РасчетСОДополнительныеДанныеСтрока.ОПВЗаМесяц				 = ДанныеСО.ОПВЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.МинимальноеОграничение	 = ДанныеСО.МинОбъектИсчисления;
				РасчетСОДополнительныеДанныеСтрока.МаксимальноеОграничение	 = ДанныеСО.РазмерОграниченияПоДоходах;
				
				РасчетСОДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц			 = ОблагаемаяБазаЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	 = ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
				
				РасчетСОДополнительныеДанныеСтрока.СОЗаМесяц 			= СОЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленныеСО	= ДанныеСО.РанееОтчисленияИсчисленные;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на объект исчисления
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2014(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСОДополнительныеДанные = Неопределено)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных социальных отчислений'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СО в рамках одного периода
		Если ДанныеСО.РанееОтчисленияИсчисленные > 0
			И (ОтчислениеИсчисленное < 1 И ОтчислениеИсчисленное > 0
			ИЛИ ОтчислениеИсчисленное > -1 И ОтчислениеИсчисленное < 0) Тогда
			
			ОтчислениеИсчисленное = 0;
			
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			СОДолжныБытьРассчитаны = Истина;
			
			Если ДанныеСО.ПризнакФизЛицаБезСоциальногоСтрахования <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не подлежит социальному страхованию. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			Если ДанныеСО.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				СОДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если СОДолжныБытьРассчитаны Тогда
				РасчетСОДополнительныеДанныеСтрока = РасчетСОДополнительныеДанные.Добавить();
				РасчетСОДополнительныеДанныеСтрока.ФизЛицо					 = ДанныеСО.ФизЛицо;
				РасчетСОДополнительныеДанныеСтрока.МесяцНалоговогоПериода	 = ДанныеСО.Период;
				РасчетСОДополнительныеДанныеСтрока.ОблагаемыйДоход 			 = ДанныеСО.ОблагаемыйДоход;
				РасчетСОДополнительныеДанныеСтрока.ОПВЗаМесяц				 = ДанныеСО.ОПВЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.МинимальноеОграничение	 = ДанныеСО.МинОбъектИсчисления;
				РасчетСОДополнительныеДанныеСтрока.МаксимальноеОграничение	 = ДанныеСО.РазмерОграниченияПоДоходах;
				
				РасчетСОДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц			 = ОблагаемаяБазаЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	 = ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
				
				РасчетСОДополнительныеДанныеСтрока.СОЗаМесяц 			= СОЗаМесяц;
				РасчетСОДополнительныеДанныеСтрока.РанееИсчисленныеСО	= ДанныеСО.РанееОтчисленияИсчисленные;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОДо2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина) Экспорт
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных социальных отчислений'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.МинОбъектИсчисления;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

// Заполняет набор записей по переданным данным расчета СО с мин. ограничением на общую сумму доходов
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатСО - таблица значений - данные расчета СО
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымСОПосле2013(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатСО, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина)
	
    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СО
	РаботникиДляРасчетаСО = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаСО.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета СО, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеСО = РезультатСО.Выбрать();
	БылаОшибка = Ложь;
	
	// узнаем работает ли организация по урощенке
	ОрганизацияЯвляетсяПлательщикомСН = УчетнаяПолитикаСервер.ОрганизацияЯвляетсяПлательщикомСН(Организация, ПериодРегистрации);
	
	Пока ДанныеСО.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСО.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ДанныеСО.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСО.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если ДанныеСО.ПроцентСтавки = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных социальных отчислений'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеСО.РазмерОграниченияПоДоходах = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ОтчислениеИсчисленное = ДанныеСО.ОтчислениеИсчисленное;
		СОЗаМесяц 			  = ДанныеСО.СОЗаМесяц;
		ОблагаемаяБазаЗаМесяц = Мин(ДанныеСО.ОблагаемаяБазаЗаМесяц, ДанныеСО.РазмерОграниченияПоДоходах);
		
		// для самостоятельно занятых лиц, работающих на упрощенном режиме сумма СО не должна быть менее 4% от МЗП
		Если НЕ ОрганизацияЯвляетсяПлательщикомСН И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда			
			Если ЗначениеЗаполнено(ДанныеСО.ФизЛицо) И ДанныеСО.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
				МинОграничение = ДанныеСО.МинОграничениеСОпоИП;
				Если СОЗаМесяц <> 0 И СОЗаМесяц < МинОграничение Тогда
					СОЗаМесяц = МинОграничение;
					ОблагаемаяБазаЗаМесяц = ДанныеСО.РазмерМЗП;
					// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
					ОтчислениеИсчисленное = СОЗаМесяц - ДанныеСО.РанееОтчисленияИсчисленные;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеСО.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру

			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеСО.ФизЛицо;
			Движение.СтруктурнаяЕдиница			= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеСО.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Отчисление					= ОтчислениеИсчисленное;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСО.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСО.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСО.Удалить(ДанныеСО.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСО.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСО.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаСО Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеСО = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеСО.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеСО.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеСО);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Отчисление"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Отчисление");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымСО

Функция РасчетСНДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетСНДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетСНДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетСНДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетСНДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетСНДополнительныеДанные.Колонки.Добавить("ОПВЗаМесяц");
	РасчетСНДополнительныеДанные.Колонки.Добавить("ВОСМСЗаМесяц");
	РасчетСНДополнительныеДанные.Колонки.Добавить("СОЗаМесяц");
	РасчетСНДополнительныеДанные.Колонки.Добавить("СНЗаМесяц");
	РасчетСНДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетСНДополнительныеДанные.Колонки.Добавить("РанееИсчисленныйСН");
	РасчетСНДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетСНДополнительныеДанные.Колонки.Добавить("КоэффициентМРП");
	РасчетСНДополнительныеДанные.Колонки.Добавить("СуммаНалогаДоВычетаСО");
	РасчетСНДополнительныеДанные.Колонки.Добавить("МинимальноеОграничение");
	РасчетСНДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");

	Возврат РасчетСНДополнительныеДанные;	

КонецФункции 

Процедура РассчитатьСНДополнительныеДанные(Объект, СНДанныеДляРасчета = Неопределено, СОДанныеДляРасчета = Неопределено, РасчетСНДополнительныеДанные = Неопределено) Экспорт
	
	Если Объект.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СНДанныеДляРасчета", СНДанныеДляРасчета);
		Запрос.УстановитьПараметр("СОДанныеДляРасчета", СОДанныеДляРасчета);
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("Налогоплательщик", Объект.Организация);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СНДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	СНДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СНДанныеДляРасчета.Налог КАК Налог,
		|	СНДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	&СНДанныеДляРасчета КАК СНДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СОДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	СОДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СОДанныеДляРасчета.Отчисление КАК Отчисление,
		|	СОДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
		|ПОМЕСТИТЬ ВТСОДанныеДляРасчета
		|ИЗ
		|	&СОДанныеДляРасчета КАК СОДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
		|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
		|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
		|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДляРасчета.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетныеПоказателиСрезПоследних.Период,
		|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК МинимальноеОграничение
		|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
		|ИЗ
		|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
		|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РасчетныеПоказателиСрезПоследних.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СУММА(СНСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК РанееИсчисленнаяОблагаемаяБаза,
		|	СУММА(СНСведенияОДоходахОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
		|	СУММА(СНСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаЗаМесяц,
		|	СУММА(СНСведенияОДоходахОбороты.СуммаДоходаОборот) КАК СуммаДохода,
		|	СУММА(ВЫБОР
		|			КОГДА СНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА СНСведенияОДоходахОбороты.СуммаДоходаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ - ВЫБОР
		|			КОГДА СНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА СНСведенияОДоходахОбороты.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТДанныеОДоходах
		|ИЗ
		|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СНСведенияОДоходах.Обороты(
		|				,
		|				,
		|				Регистратор,
		|				ФизЛицо В
		|						(ВЫБРАТЬ
		|							ВТДанныеДляРасчета.ФизЛицо
		|						ИЗ
		|							ВТДанныеДляРасчета)
		|					И ПериодРегистрации = &ПериодРегистрации
		|					И Налогоплательщик = &Налогоплательщик) КАК СНСведенияОДоходахОбороты
		|		ПО ВТДанныеДляРасчета.ФизЛицо = СНСведенияОДоходахОбороты.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СНСведенияОДоходахОбороты.Период, МЕСЯЦ))
		|			И (СНСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
		|			И (СНСведенияОДоходахОбороты.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеДляРасчета.ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДанныеДляРасчета.ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
		|	0,
		|	0,
		|	ВТДанныеДляРасчета.ОблагаемаяБаза,
		|	0,
		|	0
		|ИЗ
		|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеОДоходах.ФизЛицо,
		|	ВТДанныеОДоходах.МесяцНалоговогоПериода,
		|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
		|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
		|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
		|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
		|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
		|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
		|ИЗ
		|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеОДоходах.ФизЛицо,
		|	ВТДанныеОДоходах.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СУММА(СНИсчисленныйОбороты.НалогОборот) КАК СНЗаМесяц,
		|	СУММА(СНИсчисленныйОбороты.НалогОборот) КАК РанееИсчисленныйСН
		|ПОМЕСТИТЬ ВТДанныеОНалогах
		|ИЗ
		|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СНИсчисленный.Обороты(
		|				,
		|				,
		|				Регистратор,
		|				ФизЛицо В
		|						(ВЫБРАТЬ
		|							ВТДанныеДляРасчета.ФизЛицо
		|						ИЗ
		|							ВТДанныеДляРасчета)
		|					И МесяцНалоговогоПериода В
		|						(ВЫБРАТЬ
		|							ВтДанныеДляРасчета.МесяцНалоговогоПериода
		|						ИЗ
		|							ВтДанныеДляРасчета)
		|					И Налогоплательщик = &Налогоплательщик) КАК СНИсчисленныйОбороты
		|		ПО ВТДанныеДляРасчета.ФизЛицо = СНИсчисленныйОбороты.ФизЛицо
		|			И ВТДанныеДляРасчета.МесяцНалоговогоПериода = СНИсчисленныйОбороты.МесяцНалоговогоПериода
		|			И (СНИсчисленныйОбороты.Регистратор <> &Регистратор)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеДляРасчета.ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДанныеДляРасчета.ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
		|	ВТДанныеДляРасчета.Налог,
		|	0
		|ИЗ
		|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеОНалогах.ФизЛицо,
		|	ВТДанныеОНалогах.МесяцНалоговогоПериода,
		|	СУММА(ВТДанныеОНалогах.СНЗаМесяц) КАК СНЗаМесяц,
		|	СУММА(ВТДанныеОНалогах.РанееИсчисленныйСН) КАК РанееИсчисленныйСН
		|ПОМЕСТИТЬ ВТИтоговыеДанныеОНалогах
		|ИЗ
		|	ВТДанныеОНалогах КАК ВТДанныеОНалогах
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеОНалогах.ФизЛицо,
		|	ВТДанныеОНалогах.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	СОРасчетыСФондами.Отчисление КАК СОЗаМесяц
		|ПОМЕСТИТЬ ВТДанныеОбОтчислениях
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО СОРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
		|			И СОРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
		|ГДЕ
		|	СОРасчетыСФондами.Налогоплательщик = &Налогоплательщик
		|	И СОРасчетыСФондами.Регистратор <> &Регистратор
		|	И СОРасчетыСФондами.Период <= &КонецПериодаРегистрации
		|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
		|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
		|	И СОРасчетыСФондами.Активность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСОДанныеДляРасчета.ФизЛицо,
		|	ВТСОДанныеДляРасчета.МесяцНалоговогоПериода,
		|	СУММА(ВТСОДанныеДляРасчета.Отчисление)
		|ИЗ
		|	ВТСОДанныеДляРасчета КАК ВТСОДанныеДляРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСОДанныеДляРасчета.ФизЛицо,
		|	ВТСОДанныеДляРасчета.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДанныеОбОтчислениях.ФизЛицо,
		|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода,
		|	СУММА(ВТДанныеОбОтчислениях.СОЗаМесяц) КАК СОЗаМесяц
		|ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
		|ИЗ
		|	ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТДанныеОбОтчислениях.ФизЛицо,
		|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя, 0) КАК КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя,
		|	ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПоследних.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника, 0) КАК КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
		|ПОМЕСТИТЬ ВТУчетнаяПолитика
		|ИЗ
		|	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&КонецПериодаРегистрации, Организация = &Налогоплательщик) КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
		|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ВЫБОР
		|		КОГДА ВТДанныеДляРасчета.ФизЛицо = Организации.ИндивидуальныйПредприниматель
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПризнакИндивидуальногоПредпринимателя
		|ПОМЕСТИТЬ ВТПризнакИП
		|ИЗ
		|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (Организации.Ссылка = &Налогоплательщик)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
		|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза, 0) КАК РанееИсчисленнаяОблагаемаяБаза,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот, 0) КАК СуммаВычетаОборот,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц, 0) КАК ОблагаемаяБазаЗаМесяц,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОДоходах.СуммаДохода, 0) КАК СуммаДохода,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОНалогах.СНЗаМесяц, 0) КАК СНЗаМесяц,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОНалогах.РанееИсчисленныйСН, 0) КАК РанееИсчисленныйСН,
		|	ЕСТЬNULL(ВТИтоговыеДанныеОбОтчислениях.СОЗаМесяц, 0) КАК СОЗаМесяц,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА ВТПризнакИП.ПризнакИндивидуальногоПредпринимателя
		|				ТОГДА ВТУчетнаяПолитика.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя
		|			ИНАЧЕ ВТУчетнаяПолитика.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника
		|		КОНЕЦ, 0) КАК КоэффициентМРП,
		|	ЕСТЬNULL(ВТПризнакИП.ПризнакИндивидуальногоПредпринимателя, ЛОЖЬ) КАК ПризнакИндивидуальногоПредпринимателя
		|ИЗ
		|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОНалогах КАК ВТИтоговыеДанныеОНалогах
		|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОНалогах.ФизЛицо
		|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОНалогах.МесяцНалоговогоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
		|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
		|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУчетнаяПолитика КАК ВТУчетнаяПолитика
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПризнакИП КАК ВТПризнакИП
		|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТПризнакИП.ФизЛицо
		|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТПризнакИП.МесяцНалоговогоПериода";
		
		ДанныеСН = Запрос.Выполнить().Выбрать();
		
		Пока ДанныеСН.Следующий() Цикл
			
			РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(РасчетСНДополнительныеДанныеСтрока, ДанныеСН);
			
			Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя Тогда
				РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
			Иначе
				РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СНДанныеДляРасчета", СНДанныеДляРасчета);
		Запрос.УстановитьПараметр("СОДанныеДляРасчета", СОДанныеДляРасчета);
		Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
		Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаИзмененияМинимальногоПределаСН", '20220101');
		ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																			Объект.Организация, 
																			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		Иначе
			Налогоплательщик = Объект.Организация;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
		Запрос.Текст =
		"ВЫБРАТЬ
        |   СНДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
        |   СНДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СНДанныеДляРасчета.Налог КАК Налог,
        |   СНДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
        |ПОМЕСТИТЬ ВТДанныеДляРасчета
        |ИЗ
        |   &СНДанныеДляРасчета КАК СНДанныеДляРасчета
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   СОДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
        |   СОДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СОДанныеДляРасчета.Отчисление КАК Отчисление,
        |   СОДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
        |ПОМЕСТИТЬ ВТСОДанныеДляРасчета
        |ИЗ
        |   &СОДанныеДляРасчета КАК СОДанныеДляРасчета
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
        |   МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
        |ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
        |ИЗ
        |   ВТДанныеДляРасчета КАК ДанныеДляРасчета
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
        |       ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
        |
        |СГРУППИРОВАТЬ ПО
        |   ДанныеДляРасчета.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   РасчетныеПоказателиСрезПоследних.Период КАК Период,
        |   ВЫБОР
        |       КОГДА РасчетныеПоказателиСрезПоследних.Период >= &ДатаИзмененияМинимальногоПределаСН
        |           ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП * 14, 0)
        |       ИНАЧЕ ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
        |   КОНЕЦ КАК МинимальноеОграничение
        |ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
        |ИЗ
        |   ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
        |       ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
        |
        |ИНДЕКСИРОВАТЬ ПО
        |   РасчетныеПоказателиСрезПоследних.Период
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(СНСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК РанееИсчисленнаяОблагаемаяБаза,
        |   СУММА(СНСведенияОДоходахОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
        |   СУММА(СНСведенияОДоходахОбороты.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаЗаМесяц,
        |   СУММА(СНСведенияОДоходахОбороты.СуммаДоходаОборот) КАК СуммаДохода,
        |   СУММА(ВЫБОР
        |           КОГДА СНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
        |               ТОГДА СНСведенияОДоходахОбороты.СуммаДоходаОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ - ВЫБОР
        |           КОГДА СНСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
        |               ТОГДА СНСведенияОДоходахОбороты.СуммаВычетаОборот
        |           ИНАЧЕ 0
        |       КОНЕЦ) КАК ОблагаемыйДоход
        |ПОМЕСТИТЬ ВТДанныеОДоходах
        |ИЗ
        |   ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СНСведенияОДоходах.Обороты(
        |               ,
        |               ,
        |               Регистратор,
        |               ФизЛицо В
        |                       (ВЫБРАТЬ
        |                           ВТДанныеДляРасчета.ФизЛицо
        |                       ИЗ
        |                           ВТДанныеДляРасчета)
        |                   И ПериодРегистрации = &ПериодРегистрации
        |                   И Налогоплательщик = &Налогоплательщик) КАК СНСведенияОДоходахОбороты
        |       ПО ВТДанныеДляРасчета.ФизЛицо = СНСведенияОДоходахОбороты.ФизЛицо
        |           И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(СНСведенияОДоходахОбороты.Период, МЕСЯЦ))
        |           И (СНСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
        |           И (СНСведенияОДоходахОбороты.Регистратор <> &Регистратор)
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТДанныеДляРасчета.ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ВТДанныеДляРасчета.ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода,
        |   0,
        |   0,
        |   ВТДанныеДляРасчета.ОблагаемаяБаза,
        |   0,
        |   0
        |ИЗ
        |   ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
        |   ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
        |   СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
        |   СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
        |   СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
        |   СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
        |ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
        |ИЗ
        |   ВТДанныеОДоходах КАК ВТДанныеОДоходах
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТДанныеОДоходах.ФизЛицо,
        |   ВТДанныеОДоходах.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(СНИсчисленныйОбороты.НалогОборот) КАК СНЗаМесяц,
        |   СУММА(СНИсчисленныйОбороты.НалогОборот) КАК РанееИсчисленныйСН
        |ПОМЕСТИТЬ ВТДанныеОНалогах
        |ИЗ
        |   ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СНИсчисленный.Обороты(
        |               ,
        |               ,
        |               Регистратор,
        |               ФизЛицо В
        |                       (ВЫБРАТЬ
        |                           ВТДанныеДляРасчета.ФизЛицо
        |                       ИЗ
        |                           ВТДанныеДляРасчета)
        |                   И МесяцНалоговогоПериода В
        |                       (ВЫБРАТЬ
        |                           ВтДанныеДляРасчета.МесяцНалоговогоПериода
        |                       ИЗ
        |                           ВтДанныеДляРасчета)
        |                   И Налогоплательщик = &Налогоплательщик) КАК СНИсчисленныйОбороты
        |       ПО ВТДанныеДляРасчета.ФизЛицо = СНИсчисленныйОбороты.ФизЛицо
        |           И ВТДанныеДляРасчета.МесяцНалоговогоПериода = СНИсчисленныйОбороты.МесяцНалоговогоПериода
        |           И (СНИсчисленныйОбороты.Регистратор <> &Регистратор)
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТДанныеДляРасчета.ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ВТДанныеДляРасчета.ФизЛицо,
        |   ВТДанныеДляРасчета.МесяцНалоговогоПериода,
        |   ВТДанныеДляРасчета.Налог,
        |   0
        |ИЗ
        |   ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТДанныеОНалогах.ФизЛицо КАК ФизЛицо,
        |   ВТДанныеОНалогах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(ВТДанныеОНалогах.СНЗаМесяц) КАК СНЗаМесяц,
        |   СУММА(ВТДанныеОНалогах.РанееИсчисленныйСН) КАК РанееИсчисленныйСН
        |ПОМЕСТИТЬ ВТИтоговыеДанныеОНалогах
        |ИЗ
        |   ВТДанныеОНалогах КАК ВТДанныеОНалогах
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТДанныеОНалогах.ФизЛицо,
        |   ВТДанныеОНалогах.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
        |   ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СОРасчетыСФондами.Отчисление КАК СОЗаМесяц
        |ПОМЕСТИТЬ ВТДанныеОбОтчислениях
        |ИЗ
        |   РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
        |       ПО СОРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
        |           И СОРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
        |ГДЕ
        |   СОРасчетыСФондами.Налогоплательщик = &Налогоплательщик
        |   И СОРасчетыСФондами.Регистратор <> &Регистратор
        |   И СОРасчетыСФондами.Период <= &КонецПериодаРегистрации
        |   И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
        |   И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
        |   И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
        |   И СОРасчетыСФондами.Активность
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   ВТСОДанныеДляРасчета.ФизЛицо,
        |   ВТСОДанныеДляРасчета.МесяцНалоговогоПериода,
        |   СУММА(ВТСОДанныеДляРасчета.Отчисление)
        |ИЗ
        |   ВТСОДанныеДляРасчета КАК ВТСОДанныеДляРасчета
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТСОДанныеДляРасчета.ФизЛицо,
        |   ВТСОДанныеДляРасчета.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТДанныеОбОтчислениях.ФизЛицо КАК ФизЛицо,
        |   ВТДанныеОбОтчислениях.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(ВТДанныеОбОтчислениях.СОЗаМесяц) КАК СОЗаМесяц
        |ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
        |ИЗ
        |   ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
        |
        |СГРУППИРОВАТЬ ПО
        |   ВТДанныеОбОтчислениях.ФизЛицо,
        |   ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
        |   ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(ОПВРасчетыСФондами.Взнос) КАК ОПВЗаМесяц
        |ПОМЕСТИТЬ ВТДанныеОПВ
        |ИЗ
        |   РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
        |       ПО ОПВРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
        |           И ОПВРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
        |ГДЕ
        |   ОПВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
        |   И ОПВРасчетыСФондами.Регистратор <> &Регистратор
        |   И ОПВРасчетыСФондами.Период <= &КонецПериодаРегистрации
        |   И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
        |   И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
        |   И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
        |   И ОПВРасчетыСФондами.Активность
        |
        |СГРУППИРОВАТЬ ПО
        |   ОПВРасчетыСФондами.ФизЛицо,
        |   ОПВРасчетыСФондами.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
        |   ВОСМСРасчетыСФондами.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ВОСМСЗаМесяц
        |ПОМЕСТИТЬ ВТДанныеВОСМС
        |ИЗ
        |   РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
        |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
        |       ПО ВОСМСРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
        |           И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
        |ГДЕ
        |   ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
        |   И ВОСМСРасчетыСФондами.Регистратор <> &Регистратор
        |   И ВОСМСРасчетыСФондами.Период <= &КонецПериодаРегистрации
        |   И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
        |   И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
        |   И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
        |   И ВОСМСРасчетыСФондами.Активность
        |
        |СГРУППИРОВАТЬ ПО
        |   ВОСМСРасчетыСФондами.ФизЛицо,
        |   ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
        |   ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
        |   ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
        |   ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
        |   ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц КАК ОблагаемаяБазаЗаМесяц,
        |   ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
        |   ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход КАК ОблагаемыйДоход,
        |   ВТИтоговыеДанныеОНалогах.СНЗаМесяц КАК СНЗаМесяц,
        |   ВТИтоговыеДанныеОНалогах.РанееИсчисленныйСН КАК РанееИсчисленныйСН,
        |   ДанныеОПВ.ОПВЗаМесяц КАК ОПВЗаМесяц,
        |   ДанныеВОСМС.ВОСМСЗаМесяц КАК ВОСМСЗаМесяц,
        |   ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение КАК МинимальноеОграничение,
        |   ВТИтоговыеДанныеОбОтчислениях.СОЗаМесяц КАК СОЗаМесяц
        |ИЗ
        |   ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОНалогах КАК ВТИтоговыеДанныеОНалогах
        |       ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОНалогах.ФизЛицо
        |           И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОНалогах.МесяцНалоговогоПериода
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПВ КАК ДанныеОПВ
        |       ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ДанныеОПВ.ФизЛицо
        |           И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ДанныеОПВ.МесяцНалоговогоПериода
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВОСМС КАК ДанныеВОСМС
        |       ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ДанныеВОСМС.ФизЛицо
        |           И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ДанныеВОСМС.МесяцНалоговогоПериода
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
        |       ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.Период
        |       ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
        |       ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
        |           И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода";
		
		ДанныеСН = Запрос.Выполнить().Выбрать();
		
		ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
			Объект.Организация, 
			Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
		Иначе
			Налогоплательщик = Объект.Организация;
		КонецЕсли;
		
		СоответствиеСтавкиСН = Новый Соответствие;
			
		Пока ДанныеСН.Следующий() Цикл
			
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.МесяцНалоговогоПериода];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, Объект.ПериодРегистрации);
				СоответствиеСтавкиСН.Вставить(Объект.ПериодРегистрации, ПроцентСтавки);			
			КонецЕсли;

			РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(РасчетСНДополнительныеДанныеСтрока, ДанныеСН);
			
			РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = Окр(ДанныеСН.ОблагаемаяБазаЗаМесяц * ПроцентСтавки / 100, 2);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСН(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено) Экспорт

   	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСНДополнительныеДанные);
    ИначеЕсли ПериодРегистрации >= '20210101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2021(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСНДополнительныеДанные);
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20190101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2019(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСНДополнительныеДанные);
	ИначеЕсли ПериодРегистрации >= '20090101' Тогда
		ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетСНДополнительныеДанные);
	Иначе
		ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСН()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;

	УжеИсчислили = 0;
	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТекущийГод = 0;
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			Если ДанныеСН.ПроцентСтавки = 0 И ДанныеСН.СуммаНалогаПредыдущегоПредела = 0 И ДанныеСН.ОблагаемаяСумма <> 0 Тогда
				МассивПараметровСтавки = Новый Массив();
				МассивПараметровСтавки.Добавить(ДанныеСН.ШкалаСтавокСН);
				ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки '") + НРег(Лев(ДанныеСН.ШкалаСтавокСН, 1)) + Сред(ДанныеСН.ШкалаСтавокСН, 2);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизлицо <> ДанныеСН.ФизЛицо ИЛИ ТекущийГод <> Год(ДанныеСН.Период) Тогда
			УжеИсчислили = 0;
			ТекущееФизлицо = ДанныеСН.ФизЛицо;
			ТекущийГод = Год(ДанныеСН.Период);
		КонецЕсли;
		
		НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный) - УжеИсчислили;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если НалогИсчисленный = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
		// Запомним суммы для следующей итерации
		УжеИсчислили = УжеИсчислили + НалогИсчисленный;

	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНДо2009()

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки социального налога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			СНЗаМесяц = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2) - ДанныеСН.ИсчисленныеОтчисления;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеСН.РанееИсчисленныйНалог > 0
			И (НалогИсчисленный < 1 И НалогИсчисленный > 0
			ИЛИ НалогИсчисленный > -1 И НалогИсчисленный < 0) Тогда
			
			НалогИсчисленный = 0;
			
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
				РасчетСНДополнительныеДанныеСтрока.ФизЛицо =  ДанныеСН.ФизЛицо;					
				РасчетСНДополнительныеДанныеСтрока.МесяцНалоговогоПериода =  ДанныеСН.Период;					
					
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					РасчетСНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеСН.ОблагаемыйДоход;
					РасчетСНДополнительныеДанныеСтрока.ОПВЗаМесяц =  ДанныеСН.ИсчисленныеВзносы;					
					
					РасчетСНДополнительныеДанныеСтрока.МинимальноеОграничение = ДанныеСН.РазмерМЗП;
					
					РасчетСНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = ОблагаемаяСумма;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
					
					РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = СуммаНалогаДоВычетаСО;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц =  ДанныеСН.ИсчисленныеОтчисления;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = СНЗаМесяц;
					
				Иначе                                 				
			
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
					Иначе
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
					КонецЕсли;
					
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =  ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
					Иначе
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =   ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
					КонецЕсли;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц = ДанныеСН.СОЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = ДанныеСН.СНЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					
				КонецЕсли;
									
			КонецЕсли;
		
		КонецЕсли;

		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза			    = ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2009()

Функция РасчетОППВДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетОППВДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетОППВДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("ОППВЗаМесяц");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("РанееИсчисленныйОППВ");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетОППВДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");

	Возврат РасчетОППВДополнительныеДанные;	

КонецФункции

Процедура РассчитатьОППВДополнительныеДанные(Объект, ОППВДанныеДляРасчета = Неопределено, РасчетОППВДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОППВДанныеДляРасчета", ОППВДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОППВДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ОППВДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОППВДанныеДляРасчета.Взнос КАК Взнос,
	|	ОППВДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ОППВДанныеДляРасчета КАК ОППВДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеИмеетПравоНаПенсию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезПраваНаПенсию КАК ФизлицаБезПраваНаПенсию
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаБезПраваНаПенсию.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОППВСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ОППВСведенияОДоходахОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ОППВСведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК ОблагаемаяБазаЗаМесяц,
	|	ОППВСведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ОППВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ОППВСведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ОППВСведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ОППВСведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОППВСведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации = &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ОППВСведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ОППВСведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ОППВСведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ОППВСведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (ОППВСведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	ВТДанныеДляРасчета.ОблагаемаяБаза,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ОППВРасчетыСФондами.Взнос КАК ОППВЗаМесяц,
	|	ОППВРасчетыСФондами.Взнос КАК РанееИсчисленныйОППВ
	|ПОМЕСТИТЬ ВТДанныеОВзносах
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ОППВРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ОППВРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ОППВРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ОППВРасчетыСФондами.Регистратор <> &Регистратор
	|	И ОППВРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОППВРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	ВТДанныеДляРасчета.Взнос,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОВзносах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОВзносах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОВзносах.ОППВЗаМесяц) КАК ОППВЗаМесяц,
	|	СУММА(ВТДанныеОВзносах.РанееИсчисленныйОППВ) КАК РанееИсчисленныйОППВ
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОВзносах
	|ИЗ
	|	ВТДанныеОВзносах КАК ВТДанныеОВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОВзносах.ФизЛицо,
	|	ВТДанныеОВзносах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОВзносах.ОППВЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОППВЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|			ТОГДА ВТИтоговыеДанныеОВзносах.РанееИсчисленныйОППВ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныйОППВ,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезПраваНаПенсию КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОВзносах КАК ВТИтоговыеДанныеОВзносах
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОВзносах.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОВзносах.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо";

	ДанныеОППВ = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеОППВ.Следующий() Цикл
		
		РасчетОППВДополнительныеДанныеСтрока = РасчетОППВДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетОППВДополнительныеДанныеСтрока, ДанныеОППВ);
		
		Если ДанныеОППВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда                                                             
			РасчетОППВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на пенсию. '");
		КонецЕсли;
		
		Если ДанныеОППВ.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетОППВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть по переданным данным расчета ОППВ
//
// Параметры: 
//  НаборЗаписей - набор записей регистра СОРасчетыСФондами
//	РезультатОППВ - таблица значений - данные расчета ОППВ
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымОППВ(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатОППВ, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетОППВДополнительныеДанные = Неопределено) Экспорт
	
	Если ПериодРегистрации < '20140101' Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ОПВ
	РаботникиДляРасчетаОППВ = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаОППВ.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОППВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеОППВ = РезультатОППВ.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеОППВ.Следующий() Цикл
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеОППВ.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ДанныеОППВ.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеОППВ.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеОППВ.ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки обязательных профессиональных пенсионных взносов'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ВзносИсчисленный = ДанныеОППВ.ВзносИсчисленный;
		ОблагаемаяБаза = ДанныеОППВ.ОблагаемаяБаза;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеОППВ.РанееИсчисленныйВзнос > 0
			И ОблагаемаяБаза = 0
			И (ВзносИсчисленный < 1 И ВзносИсчисленный > 0
			ИЛИ ВзносИсчисленный > -1 И ВзносИсчисленный < 0) Тогда
			
			ВзносИсчисленный = 0;
			
		КонецЕсли;
		
		ОППВДолжныБытьРассчитаны = Истина;

		Если РасчетОППВДополнительныеДанные <> Неопределено Тогда
			Если ДанныеОППВ.ПризнакФизЛицаБезПраваНаПенсию <> 0 Тогда 
				РасчетОППВДополнительныеДанныеСтрока = РасчетОППВДополнительныеДанные.Добавить();
				РасчетОППВДополнительныеДанныеСтрока.ФизЛицо 				= ДанныеОППВ.ФизЛицо;
				РасчетОППВДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеОППВ.Период;
				РасчетОППВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на пенсию. '");
				ОППВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеОППВ.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетОППВДополнительныеДанныеСтрока = РасчетОППВДополнительныеДанные.Добавить();
				РасчетОППВДополнительныеДанныеСтрока.ФизЛицо 				= ДанныеОППВ.ФизЛицо;
				РасчетОППВДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеОППВ.Период;
				РасчетОППВДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				ОППВДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			// Округлим результат
			ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			
			Если ОППВДолжныБытьРассчитаны Тогда
				
				РасчетОППВДополнительныеДанныеСтрока = РасчетОППВДополнительныеДанные.Добавить();
				РасчетОППВДополнительныеДанныеСтрока.ФизЛицо 				= ДанныеОППВ.ФизЛицо;
				РасчетОППВДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеОППВ.Период;
				РасчетОППВДополнительныеДанныеСтрока.ОблагаемыйДоход		= ДанныеОППВ.ОблагаемыйДоход;
				
				РасчетОППВДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 			= ДанныеОППВ.ОблагаемаяБазаЗаМесяц;
				РасчетОППВДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеОППВ.РанееИсчисленнаяОблагаемаяБаза;
				
				РасчетОППВДополнительныеДанныеСтрока.ОППВЗаМесяц 			= ДанныеОППВ.ВзносЗаПериод;
				РасчетОППВДополнительныеДанныеСтрока.РанееИсчисленныйОППВ 	= ДанныеОППВ.РанееИсчисленныйВзнос;
				
			КонецЕсли;
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеОППВ.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеОППВ.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеОППВ.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеОППВ.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаОППВ.Удалить(ДанныеОППВ.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеОППВ.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеОППВ.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеОППВ
	Для Каждого Элемент Из РаботникиДляРасчетаОППВ Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйОППВ = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйОППВ.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйОППВ.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйОППВ);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымОППВ

Функция РасчетВОСМСДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетВОСМСДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ВОСМСЗаМесяц");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("РанееИсчисленныеВОСМС");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("МинимальноеОграничение");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("МаксимальноеОграничение");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");
	РасчетВОСМСДополнительныеДанные.Колонки.Добавить("ВОСМСДругогоРаботодателя");
	
	Возврат РасчетВОСМСДополнительныеДанные;	

КонецФункции

Процедура РассчитатьВОСМСДополнительныеДанные(Объект, ВОСМСДанныеДляРасчета = Неопределено, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВОСМСДанныеДляРасчета", ВОСМСДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	РеквизитыОрганизации = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.Организация, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ?(РеквизитыОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, РеквизитыОрганизации.ИндивидуальныйПредприниматель, Неопределено));
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВОСМСДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВОСМСДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВОСМСДанныеДляРасчета.Взнос КАК Взнос,
	|	ВОСМСДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ВОСМСДанныеДляРасчета КАК ВОСМСДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * ВЫБОР
	|			КОГДА РасчетныеПоказателиСрезПоследних.Период < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА 15
	|			ИНАЧЕ 10
	|		КОНЕЦ, 0) КАК МаксимальноеОграничение,
	|	ВЫБОР
	|		КОГДА РасчетныеПоказателиСрезПоследних.Период < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МинимальноеОграничение
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = (ВЫБОР 
	|																КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|																	ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|																ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|															КОНЕЦ)
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизЛицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОбИнвалидностиФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОбИнвалидностиФизлиц.Физлицо = (ВЫБОР 
	|														КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|															ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|														ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|													КОНЕЦ)
	|			И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, МЕСЯЦ) >= КОНЕЦПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизЛицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОФизлицахУчастникахВОВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОФизлицахУчастникахВОВ.Физлицо = (ВЫБОР 
	|														КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|															ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|														ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|													КОНЕЦ)
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус В (ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ), ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.ФизЛицо = (ВЫБОР 
	|											КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|												ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|											ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|										КОНЕЦ)
	|ГДЕ
	|	ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаИнвалиды.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаУчастникиВОВ.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаУчастникаВОВ,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО (ВЫБОР 
	|				КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|					ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|				ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|			КОНЕЦ) = ФизлицаПенсионеры.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаИнвалиды КАК ФизЛицаИнвалиды
	|		ПО (ВЫБОР 
	|				КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|					ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|				ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|			КОНЕЦ) = ФизЛицаИнвалиды.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаУчастникиВОВ КАК ФизЛицаУчастникиВОВ
	|		ПО (ВЫБОР 
	|				КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|					ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|				ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|			КОНЕЦ) = ФизЛицаУчастникиВОВ.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезМедицинскогоСтрахования КАК ФизЛицаБезМедицинскогоСтрахования
	|		ПО (ВЫБОР 
	|				КОГДА ВТДанныеДляРасчета.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица 
	|					ТОГДА ВТДанныеДляРасчета.ФизЛицо
	|				ИНАЧЕ ВТДанныеДляРасчета.ФизЛицо.ФизЛицо
	|			КОНЕЦ) = ФизЛицаБезМедицинскогоСтрахования.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// получим физлиц и контрагентов в виде соответствия для определения дохода по другому виду
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	Контрагенты.Ссылка КАК КонтрагентФизЛицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентовИФизЛиц
	|ИЗ
	|	ВТДанныеДляРасчета КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|	И СписокФизЛиц.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020,1,1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СписокФизЛиц.ФизЛицо,
	|	Контрагенты.ФизЛицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода
	|ИЗ
	|	ВТДанныеДляРасчета КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.Контрагенты 
	|	И СписокФизЛиц.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020,1,1)
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокФизЛиц.Физлицо,
	|	СписокФизЛиц.МесяцНалоговогоПериода
	|;
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВОСМССведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВОСМССведенияОДоходахОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВОСМССведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК ОблагаемаяБазаЗаМесяц,
	|	ВОСМССведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВОСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ВОСМССведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВОСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ВОСМССведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	0 КАК ОблагаемыйДоходПоДругимВидам
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации <= &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ВОСМССведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ВОСМССведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ВОСМССведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (НЕ ВОСМССведенияОДоходахОбороты.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете)
	|			И (ВОСМССведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ВОСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ВОСМССведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВОСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ВОСМССведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	ВТ_СоответствиеКонтрагентовИФизЛиц КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВОСМССведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТ_СоответствиеКонтрагентовИФизЛиц.КонтрагентФизЛицо
	|						ИЗ
	|							ВТ_СоответствиеКонтрагентовИФизЛиц)
	|					И ПериодРегистрации <= &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ВОСМССведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.КонтрагентФизЛицо = ВОСМССведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВОСМССведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ВОСМССведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (НЕ ВОСМССведенияОДоходахОбороты.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете)
	|			И (ВОСМССведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	СУММА(ВТДанныеДляРасчета.ОблагаемаяБаза),
	|	0,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоходПоДругимВидам) КАК ОблагаемыйДоходПоДругимВидам
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.Взнос КАК ВОСМСЗаМесяц,
	|	ВОСМСРасчетыСФондами.Взнос КАК РанееИсчисленныеВОСМС,
	|	0 КАК ИсчисленныйВзносДругойРаботадатель
	|ПОМЕСТИТЬ ВТДанныеОВзносах
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ВОСМСРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ВОСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ВОСМСРасчетыСФондами.Регистратор <> &Регистратор
	|	И ВОСМСРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеДляРасчета.Взнос),
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС
	|ИЗ
	|	РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО Выбор 
	|			КОГДА ДанныеДляРасчета.ФизЛицо Ссылка Справочник.Контрагенты 
	|				Тогда СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = ДанныеДляРасчета.ФизЛицо.ФизЛицо
	|			Иначе
	|				СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			Конец	
	|			И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &Налогоплательщик
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода >= &ПериодРегистрации
	|	И СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода <= &КонецПериодаРегистрации
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОВзносах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОВзносах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОВзносах.ВОСМСЗаМесяц) КАК ВОСМСЗаМесяц,
	|	СУММА(ВТДанныеОВзносах.РанееИсчисленныеВОСМС) КАК РанееИсчисленныеВОСМС,
	|	СУММА(ВТДанныеОВзносах.ИсчисленныйВзносДругойРаботадатель) КАК ИсчисленныйВзносДругойРаботадатель
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОВзносах
	|ИЗ
	|	ВТДанныеОВзносах КАК ВТДанныеОВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОВзносах.ФизЛицо,
	|	ВТДанныеОВзносах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяИП,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА 2 * ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ВТИтоговыеДанныеОВзносах.ВОСМСЗаМесяц
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОВзносах.ВОСМСЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОСМСЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА ВТИтоговыеДанныеОВзносах.РанееИсчисленныеВОСМС
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОВзносах.РанееИсчисленныеВОСМС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныеВОСМС,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода < ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА 2 * ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2020, 1, 1)
	|			ТОГДА 1.4 * ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МинимальноеОграничение,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.ФизЛицо = &ИндивидуальныйПредприниматель 
	|			ТОГДА 2 * ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальноеОграничение,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВЫБОР КОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение < ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход + ВТИтоговыеДанныеОДоходах.ОблагаемыйДоходПоДругимВидам  ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДостигнутоМаксимальноеОграничение,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ЕстьNull(ВТИтоговыеДанныеОВзносах.ИсчисленныйВзносДругойРаботадатель,  0) как ВОСМСДругогоРаботодателя
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОВзносах КАК ВТИтоговыеДанныеОВзносах
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОВзносах.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОВзносах.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.МесяцНалоговогоПериода";

	ДанныеВОСМС = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		РасчетВОСМСДополнительныеДанныеСтрока = РасчетВОСМСДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетВОСМСДополнительныеДанныеСтрока, ДанныеВОСМС);
		
		Если ДанныеВОСМС.ЯвляетсяИП Тогда
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринемателем. '");
		КонецЕсли;
		
		Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда                                                             
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на медицинское страхование. '");
		КонецЕсли;
		
		Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;
		
		Если ДанныеВОСМС.ПризнакФизЛицаУчастникаВОВ <> 0 Тогда
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является участником или инвалидом ВОВ. '");
		КонецЕсли;

		Если ДанныеВОСМС.ПризнакФизЛицаИнвалида <> 0 Тогда
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом. '");
		КонецЕсли;

		Если ДанныеВОСМС.ДостигнутоМаксимальноеОграничение И ДанныеВОСМС.ВОСМСЗаМесяц = 0 Тогда
			РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Достигнуто максимальное ограничение дохода'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ВОСМС для документов
//
// Параметры: 
//	ТабличнаяЧасть - ссылка на табличную часть документа, с которой работать
//	ПериодРегистрации - первое число месяца, в котором производиться расчет
//	РезультатВОСМС - данные расчета ВОСМС (полученный функцией ПроведениеРасчетовСервер.ПолучитьДанныеДляРасчетаВОСМС())
//	Налогоплательщик - ссылка на элемент справочника Организации, соответствующий организации-налогоплательщику
//	Организация - ссылка на элемент справочника Организации из шапки документа
//	ОтражениеПоПериодуРегистрации - булевский признак отражения расчетов по налогам ПериодомРегистрации
//	Перерасчет - булевский признак выполнения перерасчета
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМС(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
   	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетВОСМСДополнительныеДанные);
    ИначеЕсли ПериодРегистрации >= '20210101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетВОСМСДополнительныеДанные);
    ИначеЕсли ПериодРегистрации >= '20200101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетВОСМСДополнительныеДанные);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымВОСМСДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетВОСМСДополнительныеДанные);
	КонецЕсли;	
		
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСДо2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаВОСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;

		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеВОСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеВОСМС.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
		КонецЕсли;
		
		Если НЕ РасчетЗаИП Тогда
			ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;
		Иначе
			ПроцентСтавки = ПроцедурыНалоговогоУчета.ПолучитьСтавкуОСМС(ДанныеВОСМС.Период, "Взносы", Перечисления.ЮрФизЛицо.ЮрЛицо);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если ПроцентСтавки = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки взносов ОСМС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ РасчетЗаИП Тогда
			ВзносИсчисленный = ДанныеВОСМС.ВзносИсчисленный;
			ОблагаемаяБаза = ДанныеВОСМС.ОблагаемаяБаза;
		ИначеЕсли ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
			И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0
			И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
			И ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0 Тогда
			// для ИП объект всегда 2 МЗП
			ВзносИсчисленныйЗаМесяц = 2 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееВзносыИсчисленные;
			ОблагаемаяБаза = 2 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ВзносИсчисленный = 0;
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
			Если КомментироватьРасчет Тогда
			
			ВОСМСДолжныБытьРассчитаны = Истина;

			Если ДанныеВОСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетВОСМСДополнительныеДанныеСтрока 						 = РасчетВОСМСДополнительныеДанные.Добавить();
				РасчетВОСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеВОСМС.ФизЛицо;
				РасчетВОСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
				РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				РасчетВОСМСДополнительныеДанныеСтрока 						 = РасчетВОСМСДополнительныеДанные.Добавить();
				РасчетВОСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеВОСМС.ФизЛицо;
				РасчетВОСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
				РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является участником или инвалидом ВОВ. '");
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда
				РасчетВОСМСДополнительныеДанныеСтрока 						 = РасчетВОСМСДополнительныеДанные.Добавить();
				РасчетВОСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеВОСМС.ФизЛицо;
				РасчетВОСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
				РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на медицинское страхование. '");
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеВОСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				РасчетВОСМСДополнительныеДанныеСтрока 						 = РасчетВОСМСДополнительныеДанные.Добавить();
				РасчетВОСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеВОСМС.ФизЛицо;
				РасчетВОСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
				РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом. '");
				ВОСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ВОСМСДолжныБытьРассчитаны Тогда
				РасчетВОСМСДополнительныеДанныеСтрока 							= РасчетВОСМСДополнительныеДанные.Добавить();
				РасчетВОСМСДополнительныеДанныеСтрока.ФизЛицо					= ДанныеВОСМС.ФизЛицо;
				РасчетВОСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеВОСМС.Период;
				РасчетВОСМСДополнительныеДанныеСтрока.ОблагаемыйДоход 			= ДанныеВОСМС.ОблагаемыйДоход;
				
				РасчетВОСМСДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	=  ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
				РасчетВОСМСДополнительныеДанныеСтрока.РанееИсчисленныеВОСМС				=  ДанныеВОСМС.РанееВзносыИсчисленные;
				
				РасчетВОСМСДополнительныеДанныеСтрока.ВОСМСДругогоРаботодателя	= ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель;
				
				Если РасчетЗаИП Тогда
					РасчетВОСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринемателем. '");
					РасчетВОСМСДополнительныеДанныеСтрока.ВОСМСЗаМесяц 				= ВзносИсчисленныйЗаМесяц;
					РасчетВОСМСДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 	= 2 * ДанныеВОСМС.РазмерМЗП;
					РасчетВОСМСДополнительныеДанныеСтрока.МинимальноеОграничение	= 2 * ДанныеВОСМС.РазмерМЗП;
					РасчетВОСМСДополнительныеДанныеСтрока.МаксимальноеОграничение	= 2 * ДанныеВОСМС.РазмерМЗП;
				Иначе 
					РасчетВОСМСДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 	= ДанныеВОСМС.ОблагаемаяБазаЗаМесяц;
					РасчетВОСМСДополнительныеДанныеСтрока.ВОСМСЗаМесяц 				= ДанныеВОСМС.ВОСМСЗаМесяц;
					РасчетВОСМСДополнительныеДанныеСтрока.МинимальноеОграничение	= ДанныеВОСМС.РазмерМЗП;
					РасчетВОСМСДополнительныеДанныеСтрока.МаксимальноеОграничение	= ДанныеВОСМС.РазмерОграниченияПоДоходам;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаВОСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;

		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;
		
		// проверим заполненность необходимых реквизитов
		//Если ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки взносов ОСМС'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			Если РазмерОграниченияПоДоходам = 0 Тогда
				ОблагаемаяБаза = 0;
			Иначе
				// облагаемая база по ВОСМС
				Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
					
					Если ДанныеВОСМС.ОблагаемыйДоход + ДанныеВОСМС.КорректировкаДохода > РазмерОграниченияПоДоходам Тогда
						ОблагаемаяБаза = РазмерОграниченияПоДоходам ;
					Иначе
						ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход + ДанныеВОСМС.КорректировкаДохода;
					КонецЕсли;
					
				Иначе 
					
					ОблагаемаяБаза = 0;
					
				КонецЕсли;
				
				ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
				
			КонецЕсли;

			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = Мин((ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100), ДанныеВОСМС.РазмерОграниченияПоВзносам - ДанныеВОСМС.РанееВзносыИсчисленные);
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
			
		ИначеЕсли ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
			И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0
			И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
			И ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0 Тогда
			// для ИП объект всегда 1.4 МЗП
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееВзносыИсчисленные;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ВзносИсчисленный = 0;
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2021(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаВОСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;

		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;
		
		// проверим заполненность необходимых реквизитов
		//Если ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки взносов ОСМС'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = МассивВзносов[0].ОблагаемаяБаза;
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			Если РазмерОграниченияПоДоходам = 0 Тогда
				ОблагаемаяБаза = 0;
			Иначе
				// облагаемая база по ВОСМС
				Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
					
					Если ДанныеВОСМС.ОблагаемыйДоход > РазмерОграниченияПоДоходам Тогда
						ОблагаемаяБаза = РазмерОграниченияПоДоходам ;
					Иначе
						ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход;
					КонецЕсли;
					
				Иначе 
					
					ОблагаемаяБаза = 0;
					
				КонецЕсли;
				
				ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
				
			КонецЕсли;

			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = Мин((ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100), ДанныеВОСМС.РазмерОграниченияПоВзносам - ДанныеВОСМС.РанееВзносыИсчисленные);
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
			
		ИначеЕсли ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
			И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0
			И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
			И ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0 Тогда
			// для ИП объект всегда 1.4 МЗП
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееВзносыИсчисленные;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ВзносИсчисленный = 0;
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Процедура ЗаполнитьНаборЗаписейПоДаннымВОСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, РезультатВОСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетВОСМСДополнительныеДанные = Неопределено) Экспорт
	
	СоответствиеПравилаОкругления = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ВОСМС
	РаботникиДляРасчетаВОСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Взнос, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаВОСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ОПВ, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеВОСМС = РезультатВОСМС.Выбрать();
	БылаОшибка = Ложь;
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам = Новый ТаблицаЗначений;
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ФизЛицо", 	   Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("Период", 	       ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Колонки.Добавить("ОблагаемаяБаза", ОбщегоНазначенияБККлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаВзносовПоФизЛицамПоДругимДоходам.Индексы.Добавить("ФизЛицо, Период");
	
	СтруктураПоискаПоФизЛицам = Новый Структура("ФизЛицо, Период");
	
	Пока ДанныеВОСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеВОСМС.ФизЛицо) И ДанныеВОСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			РасчетЗаИП = Истина;
		Иначе
			РасчетЗаИП = Ложь;
		КонецЕсли;

		ПроцентСтавки = ДанныеВОСМС.ПроцентСтавки;
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеВОСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеВОСМС.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
				СоответствиеПравилаОкругления.Вставить(ДанныеВОСМС.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		Если ДанныеВОСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоФизЛицам, ДанныеВОСМС);
		
		Если НЕ РасчетЗаИП Тогда
			
			МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
			
			Если МассивВзносов.Количество() > 0 Тогда
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам   = МассивВзносов[0].ОблагаемаяБаза;
				ВОСМСРанееИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОблагаемаяБазаРанееВРасчетеПоДругимВидам * ДанныеВОСМС.ПроцентСтавки / 100, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
			Иначе
				ОблагаемаяБазаРанееВРасчетеПоДругимВидам   = 0;
				ВОСМСРанееИсчисленный = 0;
			КонецЕсли;
			
			РазмерОграниченияПоДоходам = ДанныеВОСМС.РазмерОграниченияПоДоходам;
		
			Если ОблагаемаяБазаРанееВРасчетеПоДругимВидам > 0
				ИЛИ ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ОблагаемаяБазаРанееВРасчетеПоДругимВидам - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБазаПоДругимВидам, 0);
				
			КонецЕсли;
		
			Если ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель > 0 Тогда
				
				РазмерОграниченияПоДоходам = Макс(РазмерОграниченияПоДоходам - ДанныеВОСМС.ИсчисленныйВзносДругойРаботадатель / (ДанныеВОСМС.ПроцентСтавки / 100), 0);
	
			КонецЕсли;
			
			Если РазмерОграниченияПоДоходам = 0 Тогда
				ОблагаемаяБаза = 0;
			Иначе
				// облагаемая база по ВОСМС
				Если ДанныеВОСМС.ОблагаемыйДоход > 0 Тогда
					
					Если ДанныеВОСМС.ОблагаемыйДоход > РазмерОграниченияПоДоходам Тогда
						ОблагаемаяБаза = РазмерОграниченияПоДоходам ;
					Иначе
						ОблагаемаяБаза = ДанныеВОСМС.ОблагаемыйДоход;
					КонецЕсли;
					
				Иначе 
					
					ОблагаемаяБаза = 0;
					
				КонецЕсли;
				
				ОблагаемаяБаза = ОблагаемаяБаза - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
				
			КонецЕсли;

			// сумма взносов исчисленная
			Если ОблагаемаяБаза > 0 Тогда
				ВзносИсчисленный = Мин((ОблагаемаяБаза * ДанныеВОСМС.ПроцентСтавки / 100), ДанныеВОСМС.РазмерОграниченияПоВзносам - ДанныеВОСМС.РанееВзносыИсчисленные - ВОСМСРанееИсчисленный);
			Иначе
				ВзносИсчисленный = 0;
			КонецЕсли;
			
		ИначеЕсли ДанныеВОСМС.ПризнакФизЛицаПенсионера = 0
			И ДанныеВОСМС.ПризнакФизлицаИнвалида = 0
			И ДанныеВОСМС.ПризнакФизлицаУчастникаВОВ = 0
			И ДанныеВОСМС.ПризнакФизЛицаБезМедицинскогоСтрахования = 0 Тогда
			// для ИП объект всегда 1.4 МЗП
			ВзносИсчисленныйЗаМесяц = 1.4 * ДанныеВОСМС.РазмерМЗП * ПроцентСтавки / 100;
			ВзносИсчисленный = ВзносИсчисленныйЗаМесяц - ДанныеВОСМС.РанееВзносыИсчисленные;
			ОблагаемаяБаза = 1.4 * ДанныеВОСМС.РазмерМЗП - ДанныеВОСМС.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ВзносИсчисленный = 0;
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		// Округлим результат
		ВзносИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ВзносИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ВзносИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		МассивВзносов = ТаблицаВзносовПоФизЛицамПоДругимДоходам.НайтиСтроки(СтруктураПоискаПоФизЛицам);
		Если МассивВзносов.Количество() > 0 Тогда
			СтрокаВзносовТаблицаВзносовПоФизЛицам = МассивВзносов[0];
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза + ОблагаемаяБаза;
		Иначе
			СтрокаВзносовТаблицаВзносовПоФизЛицам = ТаблицаВзносовПоФизЛицамПоДругимДоходам.Добавить();
			СтрокаВзносовТаблицаВзносовПоФизЛицам.Период = ДанныеВОСМС.Период;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ФизЛицо = ДанныеВОСМС.ФизЛицоДохода;
			СтрокаВзносовТаблицаВзносовПоФизЛицам.ОблагаемаяБаза = ОблагаемаяБаза;
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;

			// Измерения
			Движение.ФизЛицо                	= ДанныеВОСМС.ФизЛицо;
			Движение.СтруктурнаяЕдиница        	= Организация;
			Движение.МесяцНалоговогоПериода    	= ДанныеВОСМС.Период;
			Движение.ВидПлатежа					= Перечисления.ВидыПлатежейВБюджетИФонды.Налог;
			Движение.Организация            	= Организация;
			Движение.Налогоплательщик          	= Налогоплательщик;

			// Ресурсы
			Движение.Взнос						= ВзносИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеВОСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеВОСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаВОСМС.Удалить(ДанныеВОСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеВОСМС.ФизЛицо;
		Строка.Взнос  						= ВзносИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеВОСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеВОСМС
	Для Каждого Элемент Из РаботникиДляРасчетаВОСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеВОСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеВОСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеВОСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Взнос, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныеВОСМС);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");

			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Взнос"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Взнос");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымВОСМС

Функция РасчетООСМСДополнительныеДанныеОписаниеТаблицыЗначений() Экспорт

	РасчетООСМСДополнительныеДанные = Новый ТаблицаЗначений;
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("ФизЛицо");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("МесяцНалоговогоПериода");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("ОблагаемыйДоход");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("ООСМСЗаМесяц");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("ОблагаемаяБазаЗаМесяц");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("РанееИсчисленныеООСМС");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("РанееИсчисленнаяОблагаемаяБаза");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("МинимальноеОграничение");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("МаксимальноеОграничение");
	РасчетООСМСДополнительныеДанные.Колонки.Добавить("ДополнительныеСведения");

	Возврат РасчетООСМСДополнительныеДанные;	

КонецФункции

Процедура РассчитатьООСМСДополнительныеДанные(Объект, ООСМСДанныеДляРасчета = Неопределено, РасчетООСМСДополнительныеДанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ООСМСДанныеДляРасчета", ООСМСДанныеДляРасчета);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодРегистрации", Объект.ПериодРегистрации);
	Запрос.УстановитьПараметр("КонецПериодаРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		Налогоплательщик = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Объект.Организация, 
																		Объект.Организация, 
																		Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты);
	Иначе
		Налогоплательщик = Объект.Организация;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Налогоплательщик", Налогоплательщик);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ООСМСДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ООСМСДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ООСМСДанныеДляРасчета.Отчисление КАК Отчисление,
	|	ООСМСДанныеДляРасчета.ОблагаемаяБаза КАК ОблагаемаяБаза
	|ПОМЕСТИТЬ ВТДанныеДляРасчета
	|ИЗ
	|	&ООСМСДанныеДляРасчета КАК ООСМСДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК Период,
	|	МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|ПОМЕСТИТЬ ВТРасчетныеПоказателиСрезПоследних
	|ИЗ
	|	ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО ДанныеДляРасчета.МесяцНалоговогоПериода >= РасчетныеПоказатели.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период КАК МесяцНалоговогоПериода,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК МинимальноеОграничение,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * ВЫБОР
	|			КОГДА РасчетныеПоказателиСрезПоследних.Период < ДАТАВРЕМЯ(2019, 1, 1)
	|				ТОГДА 15
	|			ИНАЧЕ 10
	|		КОНЕЦ, 0) КАК МаксимальноеОграничение
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	ВТРасчетныеПоказателиСрезПоследних КАК РасчетныеПоказателиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО (РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизЛицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОбИнвалидностиФизлиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОбИнвалидностиФизлиц.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|			И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, МЕСЯЦ) >= КОНЕЦПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ))
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.Физлицо КАК Физлицо
	|ПОМЕСТИТЬ ВТФизЛицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&КонецПериодаРегистрации, ) КАК СведенияОФизлицахУчастникахВОВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО СведенияОФизлицахУчастникахВОВ.Физлицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус В (ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ), ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизЛицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&КонецПериодаРегистрации, ) КАК ГражданствоФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ПО ГражданствоФизЛиц.ФизЛицо = ВТДанныеДляРасчета.ФизЛицо
	|ГДЕ
	|	ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГражданствоФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаИнвалиды.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаУчастникиВОВ.Физлицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаУчастникаВОВ,
	|	ВЫБОР
	|		КОГДА НЕ ФизЛицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования
	|ПОМЕСТИТЬ ВТИсключаемыеФизЛица
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизлицаПенсионеры КАК ФизлицаПенсионеры
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаИнвалиды КАК ФизЛицаИнвалиды
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизЛицаИнвалиды.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаУчастникиВОВ КАК ФизЛицаУчастникиВОВ
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизЛицаУчастникиВОВ.Физлицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизЛицаБезМедицинскогоСтрахования КАК ФизЛицаБезМедицинскогоСтрахования
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ФизЛицаБезМедицинскогоСтрахования.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ООСМССведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ООСМССведенияОДоходахОбороты.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ООСМССведенияОДоходахОбороты.ОблагаемаяБазаОборот КАК ОблагаемаяБазаЗаМесяц,
	|	ООСМССведенияОДоходахОбороты.СуммаДоходаОборот КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ООСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ООСМССведенияОДоходахОбороты.СуммаДоходаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ООСМССведенияОДоходахОбороты.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|			ТОГДА ООСМССведенияОДоходахОбороты.СуммаВычетаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТДанныеОДоходах
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТДанныеДляРасчета.ФизЛицо
	|						ИЗ
	|							ВТДанныеДляРасчета)
	|					И ПериодРегистрации = &ПериодРегистрации
	|					И Налогоплательщик = &Налогоплательщик) КАК ООСМССведенияОДоходахОбороты
	|		ПО ВТДанныеДляРасчета.ФизЛицо = ООСМССведенияОДоходахОбороты.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ВТДанныеДляРасчета.МесяцНалоговогоПериода, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходахОбороты.Период, МЕСЯЦ))
	|			И (ООСМССведенияОДоходахОбороты.ПериодРегистрации <= ВТДанныеДляРасчета.МесяцНалоговогоПериода)
	|			И (ООСМССведенияОДоходахОбороты.Регистратор <> &Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	0,
	|	0,
	|	ВТДанныеДляРасчета.ОблагаемаяБаза,
	|	0,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза) КАК РанееИсчисленнаяОблагаемаяБаза,
	|	СУММА(ВТДанныеОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|	СУММА(ВТДанныеОДоходах.ОблагаемаяБазаЗаМесяц) КАК ОблагаемаяБазаЗаМесяц,
	|	СУММА(ВТДанныеОДоходах.СуммаДохода) КАК СуммаДохода,
	|	СУММА(ВТДанныеОДоходах.ОблагаемыйДоход) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОДоходах
	|ИЗ
	|	ВТДанныеОДоходах КАК ВТДанныеОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОДоходах.ФизЛицо,
	|	ВТДанныеОДоходах.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.ФизЛицо КАК ФизЛицо,
	|	ДанныеДляРасчета.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.Отчисление КАК ООСМСЗаМесяц,
	|	ООСМСРасчетыСФондами.Отчисление КАК РанееИсчисленныеООСМС
	|ПОМЕСТИТЬ ВТДанныеОбОтчислениях
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
	|		ПО ООСМСРасчетыСФондами.ФизЛицо = ДанныеДляРасчета.ФизЛицо
	|			И ООСМСРасчетыСФондами.МесяцНалоговогоПериода = ДанныеДляРасчета.МесяцНалоговогоПериода
	|ГДЕ
	|	ООСМСРасчетыСФондами.Налогоплательщик = &Налогоплательщик
	|	И ООСМСРасчетыСФондами.Регистратор <> &Регистратор
	|	И ООСМСРасчетыСФондами.Период <= &КонецПериодаРегистрации
	|	И ООСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ООСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ООСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ООСМСРасчетыСФондами.Активность
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТДанныеДляРасчета.ФизЛицо,
	|	ВТДанныеДляРасчета.МесяцНалоговогоПериода,
	|	ВТДанныеДляРасчета.Отчисление,
	|	0
	|ИЗ
	|	ВТДанныеДляРасчета КАК ВТДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДанныеОбОтчислениях.ФизЛицо КАК ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВТДанныеОбОтчислениях.ООСМСЗаМесяц) КАК ООСМСЗаМесяц,
	|	СУММА(ВТДанныеОбОтчислениях.РанееИсчисленныеООСМС) КАК РанееИсчисленныеООСМС
	|ПОМЕСТИТЬ ВТИтоговыеДанныеОбОтчислениях
	|ИЗ
	|	ВТДанныеОбОтчислениях КАК ВТДанныеОбОтчислениях
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТДанныеОбОтчислениях.ФизЛицо,
	|	ВТДанныеОбОтчислениях.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИтоговыеДанныеОДоходах.ФизЛицо КАК ФизЛицо,
	|	ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.РанееИсчисленнаяОблагаемаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленнаяОблагаемаяБаза,
	|	ВТИтоговыеДанныеОДоходах.СуммаВычетаОборот КАК СуммаВычетаОборот,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемаяБазаЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемаяБазаЗаМесяц,
	|	ВТИтоговыеДанныеОДоходах.СуммаДохода КАК СуммаДохода,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОДоходах.ОблагаемыйДоход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.ООСМСЗаМесяц
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ООСМСЗаМесяц,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТИтоговыеДанныеОбОтчислениях.РанееИсчисленныеООСМС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РанееИсчисленныеООСМС,
	|	ВЫБОР
	|		КОГДА ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2018, 1, 1) // С 2018 года исключен минимальный предел для отчисленй и взносов ОСМС
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|						И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|						И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|						И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|					ТОГДА ВТ_РазмерОграниченияПоДоходам.МинимальноеОграничение
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК МинимальноеОграничение,
	|	ВЫБОР
	|		КОГДА ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ = 0
	|				И ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования = 0
	|			ТОГДА ВТ_РазмерОграниченияПоДоходам.МаксимальноеОграничение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальноеОграничение,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаПенсионера КАК ПризнакФизЛицаПенсионера,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаИнвалида КАК ПризнакФизЛицаИнвалида,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаУчастникаВОВ КАК ПризнакФизЛицаУчастникаВОВ,
	|	ВТИсключаемыеФизЛица.ПризнакФизЛицаБезМедицинскогоСтрахования КАК ПризнакФизЛицаБезМедицинскогоСтрахования
	|ИЗ
	|	ВТИтоговыеДанныеОДоходах КАК ВТИтоговыеДанныеОДоходах
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоговыеДанныеОбОтчислениях КАК ВТИтоговыеДанныеОбОтчислениях
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИтоговыеДанныеОбОтчислениях.ФизЛицо
	|			И ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТИтоговыеДанныеОбОтчислениях.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеФизЛица КАК ВТИсключаемыеФизЛица
	|		ПО ВТИтоговыеДанныеОДоходах.ФизЛицо = ВТИсключаемыеФизЛица.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерОграниченияПоДоходам КАК ВТ_РазмерОграниченияПоДоходам
	|		ПО ВТИтоговыеДанныеОДоходах.МесяцНалоговогоПериода = ВТ_РазмерОграниченияПоДоходам.МесяцНалоговогоПериода";

	ДанныеООСМС = Запрос.Выполнить().Выбрать();
	
	Пока ДанныеООСМС.Следующий() Цикл
		
		РасчетООСМСДополнительныеДанныеСтрока = РасчетООСМСДополнительныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(РасчетООСМСДополнительныеДанныеСтрока, ДанныеООСМС);
		
		Если ДанныеООСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
			РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
		КонецЕсли;

		Если ДанныеООСМС.ПризнакФизЛицаУчастникаВОВ <> 0 Тогда
			РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является участником или инвалидом ВОВ. '");
		КонецЕсли;

		Если ДанныеООСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда
			РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на медицинское страхование. '");
		КонецЕсли;

		Если ДанныеООСМС.ПризнакФизЛицаИнвалида <> 0 Тогда
			РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом. '");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//	РезультаООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМС(ТабличнаяЧасть, ПериодРегистрации, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетООСМСДополнительныеДанные = Неопределено) Экспорт
    
   	Если ПериодРегистрации >= '20220101' Тогда
		ЗаполнитьНаборЗаписейПоДаннымООСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетООСМСДополнительныеДанные);
	Иначе	
		ЗаполнитьНаборЗаписейПоДаннымООСМСДо2022(ТабличнаяЧасть, ПериодРегистрации, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет, КомментироватьРасчет, ФизЛицо, УдалятьСтрокиСНулевымиЗначениями, РасчетООСМСДополнительныеДанные);
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымООСМС

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//	РезультаООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМСПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетООСМСДополнительныеДанные = Неопределено) Экспорт

    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ООСМС
	РаботникиДляРасчетаООСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаООСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ООСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеООСМС = РезультатООСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеООСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеООСМС.ФизЛицо) И ДанныеООСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			Продолжить;
		КонецЕсли;
		
        // Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеООСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеООСМС.Период);
			Если ПравилоОкругления.Период >= '20220101' Тогда
				СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
			Иначе
				ПравилоОкругления = Новый Структура("ПорядокОкругления, МетодОкругления", Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
				СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
			КонецЕсли;
		КонецЕсли;
	
		Если ДанныеООСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ООСМСЗаМесяц 		  = ДанныеООСМС.ООСМСЗаМесяц;
		ОблагаемаяБазаЗаМесяц = ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
		
		// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
		ОтчислениеИсчисленное = ООСМСЗаМесяц - ДанныеООСМС.РанееОтчисленияИсчисленные;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное,  ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			ООСМСДолжныБытьРассчитаны = Истина;

			Если ДанныеООСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является участником или инвалидом ВОВ. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на медицинское страхование. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ООСМСДолжныБытьРассчитаны Тогда
				РасчетООСМСДополнительныеДанныеСтрока 							= РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо					= ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеООСМС.Период;
                
                РасчетООСМСДополнительныеДанныеСтрока.ООСМСЗаМесяц              = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ООСМСЗаМесяц,  ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
				РасчетООСМСДополнительныеДанныеСтрока.ОблагаемыйДоход 			= ДанныеООСМС.ОблагаемыйДоход;
				РасчетООСМСДополнительныеДанныеСтрока.МинимальноеОграничение	= ДанныеООСМС.РазмерМЗП;
				РасчетООСМСДополнительныеДанныеСтрока.МаксимальноеОграничение	= ДанныеООСМС.РазмерОграниченияПоДоходам;
				
				РасчетООСМСДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 			=  ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
				РасчетООСМСДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	=  ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
			КонецЕсли;
			
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеООСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеООСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаООСМС.Удалить(ДанныеООСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеООСМС.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеООСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаООСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеООСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеООСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеООСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымООСМС

// Заполняет набор записей по переданным данным расчета ООСМС
//
// Параметры: 
//	РезультаООСМС - таблица значений - данные расчета ООСМС
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымООСМСДо2022(ТабличнаяЧасть, ПериодРегистрации, РезультатООСМС, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетООСМСДополнительныеДанные = Неопределено) Экспорт

    // правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Физлицо, МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ООСМС
	РаботникиДляРасчетаООСМС = Новый Соответствие;

	// если расчет производится не по всем строкам табличной части, а только по отдельному физлицу,
	// то сохраним значения строк табличной части, относящихся к другим физлицам
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			Если Строка.ФизЛицо <> ФизЛицо Тогда
				СтруктураСтроки = Новый Структура("ФизЛицо, Отчисление, ОблагаемаяБаза, МесяцНалоговогоПериода");
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);	
				РаботникиДляРасчетаООСМС.Вставить(Строка.Физлицо, СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если Не Перерасчет Тогда
		// очистим результаты расчета ООСМС, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	ДанныеООСМС = РезультатООСМС.Выбрать();
	БылаОшибка = Ложь;
	
	Пока ДанныеООСМС.Следующий() Цикл
		
		Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
			И ЗначениеЗаполнено(ДанныеООСМС.ФизЛицо) И ДанныеООСМС.ФизЛицо = Организация.ИндивидуальныйПредприниматель Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеООСМС.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ДанныеООСМС.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеООСМС.Период, ПравилоОкругления);
		КонецЕсли;
	
		// проверим заполненность необходимых реквизитов
		//Если ДанныеООСМС.ПроцентСтавки = 0 Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки отчислений ОСМС'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
	
		Если ДанныеООСМС.РазмерОграниченияПоДоходам = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение минимальной заработной платы для определения размера ограничения по доходам'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
	
		ООСМСЗаМесяц 		  = ДанныеООСМС.ООСМСЗаМесяц;
		ОблагаемаяБазаЗаМесяц = ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
		
		// пересчитаем исчисленное отлисление за вычетом ранее исчисленных сумм
		ОтчислениеИсчисленное = ООСМСЗаМесяц - ДанныеООСМС.РанееОтчисленияИсчисленные;
		
		// Округлим результат
		ОтчислениеИсчисленное = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ОтчислениеИсчисленное, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		ОблагаемаяБаза = ОблагаемаяБазаЗаМесяц - ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если ОтчислениеИсчисленное = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			ООСМСДолжныБытьРассчитаны = Истина;

			Если ДанныеООСМС.ПризнакФизЛицаПенсионера <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является пенсионером. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаУчастникаВОВ <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является участником или инвалидом ВОВ. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизЛицаБезМедицинскогоСтрахования <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Не имеет права на медицинское страхование. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ДанныеООСМС.ПризнакФизлицаИнвалида <> 0 Тогда
				РасчетООСМСДополнительныеДанныеСтрока 						 = РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо				 = ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода = ДанныеООСМС.Период;
				РасчетООСМСДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является инвалидом. '");
				ООСМСДолжныБытьРассчитаны = Ложь;
			КонецЕсли;
			
			Если ООСМСДолжныБытьРассчитаны Тогда
				РасчетООСМСДополнительныеДанныеСтрока 							= РасчетООСМСДополнительныеДанные.Добавить();
				РасчетООСМСДополнительныеДанныеСтрока.ФизЛицо					= ДанныеООСМС.ФизЛицо;
				РасчетООСМСДополнительныеДанныеСтрока.МесяцНалоговогоПериода 	= ДанныеООСМС.Период;
				
				РасчетООСМСДополнительныеДанныеСтрока.ОблагаемыйДоход 			= ДанныеООСМС.ОблагаемыйДоход;
				РасчетООСМСДополнительныеДанныеСтрока.МинимальноеОграничение	= ДанныеООСМС.РазмерМЗП;
				РасчетООСМСДополнительныеДанныеСтрока.МаксимальноеОграничение	= ДанныеООСМС.РазмерОграниченияПоДоходам;
				
				РасчетООСМСДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц 			=  ДанныеООСМС.ОблагаемаяБазаЗаМесяц;
				РасчетООСМСДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза	=  ДанныеООСМС.РанееИсчисленнаяОблагаемаяБаза;
			КонецЕсли;
			
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеООСМС.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеООСМС.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаООСМС.Удалить(ДанныеООСМС.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеООСМС.ФизЛицо;
		Строка.Отчисление					= ОтчислениеИсчисленное;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеООСМС.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныеСО
	Для Каждого Элемент Из РаботникиДляРасчетаООСМС Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныеООСМС = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныеООСМС.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныеООСМС.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Отчисление, ОблагаемаяБаза");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборЗаписейПоДаннымООСМС

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ПЕНИ ВЗНОСОВ И ОТЧИСЛЕНИЙ

// Получить данные для расчета пени взносов и отчислений
// Параметры:
//	ВидОперации - ПеречислениеСсылка.ВидыОперацийРасчетПени
//	Организация - ссылка на организацию из шапки документа
//	ДатаНачала, ДатаОкончания - период расчета пени
//	СписокФизЛицТекст - строка с текстом запроса для выбора физлиц для расчета
//	ДополнительныеПараметрыЗапроса - дополнительные параметры запроса, используемые в СписокФизлицТекст
//
// Возвращаемое значение:
//	Результат запроса
//
Функция ПолучитьДанныеДляРасчетаПениОПВиСО(ВидОперации, Организация, ДатаНачала, 
											ДатаОкончания, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамГоловнаяОрганизация", ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамНачало", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("парамКонец", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамРасход", ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("парамПоМесяцуВыплатыДоходов", Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуВыплатыДоходов);
	Запрос.УстановитьПараметр("парамПоМесяцуНалоговогоПериода", Перечисления.ПорядокОпределенияСрокаПеречисления.ПоМесяцуНалоговогоПериода);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		
		Запрос.УстановитьПараметр("парамНалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
		
		Запрос.УстановитьПараметр("парамНалогСборОтчисление", Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование);
		
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда
			Запрос.УстановитьПараметр("парамНалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы);
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
			Запрос.УстановитьПараметр("парамНалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
		Иначе 
			Запрос.УстановитьПараметр("парамНалогСборОтчисление", Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
		КонецЕсли;
		
		// виды платежей, на которые начисляется пени
		МассивВидовПлатежей = Новый Массив;
		МассивВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
		МассивВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогАкт);
		МассивВидовПлатежей.Добавить(Перечисления.ВидыПлатежейВБюджетИФонды.НалогСам);
		
		Запрос.УстановитьПараметр("парамВидыПлатежей", МассивВидовПлатежей);
		
	КонецЕсли;

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// Сроки перечисления 
	СрокиПеречисленияТекст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Месяц,
	|	СрокиПеречисленияНалоговСборовОтчислений.СрокПеречисления,
	|	СрокиПеречисленияНалоговСборовОтчислений.ПорядокОпределенияСрокаПеречисления
	|ПОМЕСТИТЬ ВТ_СрокиПеречисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет,
	|		ВложенныйЗапрос.Месяц КАК Месяц
	|	ИЗ
	|		(ВЫБРАТЬ
	|			1 КАК Приоритет,
	|			НАЧАЛОПЕРИОДА(СрокиПеречисления.Месяц, МЕСЯЦ) КАК Месяц
	|		ИЗ
	|			РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисления
	|		ГДЕ
	|			СрокиПеречисления.ВидНалога = &парамНалогСборОтчисление
	|			И СрокиПеречисления.Организация = &парамОрганизация
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			2,
	|			НАЧАЛОПЕРИОДА(СрокиПеречисления.Месяц, МЕСЯЦ)
	|		ИЗ
	|			РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисления
	|		ГДЕ
	|			СрокиПеречисления.ВидНалога = &парамНалогСборОтчисление
	|			И СрокиПеречисления.Организация = &парамПустаяОрганизация) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Месяц) КАК ВложенныйЗапрос
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисленияНалоговСборовОтчислений
	|		ПО ВложенныйЗапрос.Месяц = НАЧАЛОПЕРИОДА(СрокиПеречисленияНалоговСборовОтчислений.Месяц, МЕСЯЦ)
	|			И (ВЫБОР
	|				КОГДА ВложенныйЗапрос.Приоритет = 1
	|					ТОГДА СрокиПеречисленияНалоговСборовОтчислений.Организация = &парамОрганизация
	|				ИНАЧЕ СрокиПеречисленияНалоговСборовОтчислений.Организация = &парамПустаяОрганизация
	|			КОНЕЦ)
	|			И (СрокиПеречисленияНалоговСборовОтчислений.ВидНалога = &парамНалогСборОтчисление)";
	
	Запрос.Текст = СрокиПеречисленияТекст;
	Запрос.Выполнить();
	СрокиПеречисленияТекст = "ВТ_СрокиПеречисления";
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_СрокиПеречисления";
	
	// список дат в течение периода расчета, в которые происходили изменения задолженности, либо
	// в которые изменялись ставки рефинансирования либо коэффициенты ставок,
	// либо завершались сроки перечисления
	
	// все года (чтобы учесть високосные) за период расчета	
	ДатыИзмененияТекст = "";
	ТекДата = НачалоДня(ДатаНачала);
	Пока ТекДата <= НачалоДня(ДатаОкончания) Цикл
		Если НЕ ПустаяСтрока(ДатыИзмененияТекст) Тогда
			ДатыИзмененияТекст = ДатыИзмененияТекст + "
			|
			|ОБЪЕДИНИТЬ
			|";
		КонецЕсли;
		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(ТекДата, "ДФ=гггг,ММ,дд") + ") КАК Период " + ?(ПустаяСтрока(ДатыИзмененияТекст), "
		|ПОМЕСТИТЬ ВТ_ДатыИзменения", "") + "
		|";
		ТекДата = ДобавитьМесяц(НачалоГода(ТекДата), 12);
	КонецЦикла;
	
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		
		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОПВПодлежитПеречислениюВФонды.Период, ДЕНЬ), ДЕНЬ, 1) КАК Период
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ОПВПодлежитПеречислениюВФонды
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|		ПО ОПВПодлежитПеречислениюВФонды.ФизЛицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ОПВПодлежитПеречислениюВФонды.Период МЕЖДУ &парамНачало И &парамКонец
		|	И ОПВПодлежитПеречислениюВФонды.Организация = &парамОрганизация
		|	И ОПВПодлежитПеречислениюВФонды.Активность
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда

		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СОРасчетыСФондами.Период, ДЕНЬ), ДЕНЬ, 1) КАК Период
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|		ПО СОРасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	СОРасчетыСФондами.Период МЕЖДУ &парамНачало И &парамКонец
		|	И СОРасчетыСФондами.Организация = &парамОрганизация
		|	И СОРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И СОРасчетыСФондами.Активность
		|";
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда 
		
		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.Период, ДЕНЬ), ДЕНЬ, 1) КАК Период
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|		ПО ОППВРасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ОППВРасчетыСФондами.Период МЕЖДУ &парамНачало И &парамКонец
		|	И ОППВРасчетыСФондами.Организация = &парамОрганизация
		|	И ОППВРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И ОППВРасчетыСФондами.Активность
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда 
		
		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВОСМСПодлежитПеречислениюВФонды.Период, ДЕНЬ), ДЕНЬ, 1) КАК Период
		|ИЗ
		|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ВОСМСПодлежитПеречислениюВФонды
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|		ПО ВОСМСПодлежитПеречислениюВФонды.ФизЛицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ВОСМСПодлежитПеречислениюВФонды.Период МЕЖДУ &парамНачало И &парамКонец
		|	И ВОСМСПодлежитПеречислениюВФонды.Организация = &парамОрганизация
		|	И ВОСМСПодлежитПеречислениюВФонды.Активность
		|";
	Иначе
		
		ДатыИзмененияТекст = ДатыИзмененияТекст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.Период, ДЕНЬ), ДЕНЬ, 1) КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизЛиц
		|		ПО ООСМСРасчетыСФондами.ФизЛицо = СписокФизЛиц.ФизЛицо
		|ГДЕ
		|	ООСМСРасчетыСФондами.Период МЕЖДУ &парамНачало И &парамКонец
		|	И ООСМСРасчетыСФондами.Организация = &парамОрганизация
		|	И ООСМСРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И ООСМСРасчетыСФондами.Активность
		|";
	КонецЕсли;

	ДатыИзмененияТекст = ДатыИзмененияТекст + "
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СтавкаРефинансированияНБ.Период
	|ИЗ
	|	РегистрСведений.СтавкаРефинансированияНБ КАК СтавкаРефинансированияНБ
	|ГДЕ
	|	СтавкаРефинансированияНБ.Период МЕЖДУ &парамНачало И &парамКонец
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.Период
	|ИЗ
	|	РегистрСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени КАК КоэффициентыСтавкиРефинансированияНБДляРасчетаПени
	|ГДЕ
	|	КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.Период МЕЖДУ &парамНачало И &парамКонец
	|	И КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.ВидНалога = &парамНалогСборОтчисление
	|	И КоэффициентыСтавкиРефинансированияНБДляРасчетаПени.Организация В (&парамПустаяОрганизация, &парамОрганизация)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(СрокиПеречисления.СрокПеречисления, ДЕНЬ, 1) КАК Период
	|ИЗ
	|	РегистрСведений.СрокиПеречисленияНалоговСборовОтчислений КАК СрокиПеречисления
	|ГДЕ
	|	СрокиПеречисления.СрокПеречисления МЕЖДУ &парамНачало И &парамКонец
	|	И СрокиПеречисления.ВидНалога = &парамНалогСборОтчисление
	|	И СрокиПеречисления.Организация В (&парамОрганизация, &парамПустаяОрганизация)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&парамКонец, ДЕНЬ), ДЕНЬ, 1) КАК Период
	|";
		
	Запрос.Текст = ДатыИзмененияТекст;
	Запрос.Выполнить();
	ДатыИзмененияТекст = "ВТ_ДатыИзменения";
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ДатыИзменения";
	
	// рассчитаем суммы задолженности на начало каждого периода расчета пени
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
	
		ЗадолженностьТекст = "
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ПодлежитПеречислению.ВзносОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды.Остатки(&парамНачало,
		|		Организация = &парамОрганизация
		|		И ФизЛицо В (ВЫБРАТЬ
		|							ФизЛицо
		|						ИЗ
		|							(" + СписокФизЛицТекст + ") КАК СписокФизЛиц)) КАК ПодлежитПеречислению
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР КОГДА ПодлежитПеречислению.ВидДвижения = &парамПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * ПодлежитПеречислению.Взнос) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ОПВПодлежитПеречислениюВФонды КАК ПодлежитПеречислению
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизлиц
		|		ПО ПодлежитПеречислению.ФизЛицо = СписокФизлиц.ФизЛицо
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ПодлежитПеречислению.Период >= &парамНачало 
		|			И ПодлежитПеречислению.Период < ДатыИзменения.Период
		|ГДЕ
		|	ПодлежитПеречислению.Организация = &парамОрганизация
		|	И ПодлежитПеречислению.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ),
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда

		ЗадолженностьТекст = "
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	СОРасчетыСФондами.ФизЛицо,
		|	СОРасчетыСФондами.СтруктурнаяЕдиница,
		|	СОРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СОРасчетыСФондами.ОтчислениеОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами.Остатки(&парамНачало,
		|		Организация = &парамОрганизация
		|		И ВидПлатежа В (&парамВидыПлатежей)
		|		И ФизЛицо В (ВЫБРАТЬ
		|							ФизЛицо
		|						ИЗ
		|							(" + СписокФизЛицТекст + ") КАК СписокФизЛиц)) КАК СОРасчетыСФондами
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	СОРасчетыСФондами.ФизЛицо,
		|	СОРасчетыСФондами.СтруктурнаяЕдиница,
		|	СОРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР КОГДА СОРасчетыСФондами.ВидДвижения = &парамПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * СОРасчетыСФондами.Отчисление) КАК Сумма
		|
		|ИЗ
		|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизлиц
		|		ПО СОРасчетыСФондами.ФизЛицо = СписокФизлиц.ФизЛицо
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО СОРасчетыСФондами.Период >= &парамНачало 
		|			И СОРасчетыСФондами.Период < ДатыИзменения.Период
		|ГДЕ
		|	СОРасчетыСФондами.Организация = &парамОрганизация
		|	И СОРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И СОРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменения.Период,
		|	СОРасчетыСФондами.ФизЛицо,
		|	СОРасчетыСФондами.СтруктурнаяЕдиница,
		|	СОРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда 
		ЗадолженностьТекст = "
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	ОППВРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ОППВРасчетыСФондами.ВзносОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами.Остатки(&парамНачало,
		|		Организация = &парамОрганизация
		|		И ВидПлатежа В (&парамВидыПлатежей)
		|		И ФизЛицо В (ВЫБРАТЬ
		|							ФизЛицо
		|						ИЗ
		|							(" + СписокФизЛицТекст + ") КАК СписокФизЛиц)) КАК ОППВРасчетыСФондами
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	ОППВРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР КОГДА ОППВРасчетыСФондами.ВидДвижения = &парамПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * ОППВРасчетыСФондами.Взнос) КАК Сумма
		|
		|ИЗ
		|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизлиц
		|		ПО ОППВРасчетыСФондами.ФизЛицо = СписокФизлиц.ФизЛицо
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ОППВРасчетыСФондами.Период >= &парамНачало 
		|			И ОППВРасчетыСФондами.Период < ДатыИзменения.Период
		|ГДЕ
		|	ОППВРасчетыСФондами.Организация = &парамОрганизация
		|	И ОППВРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И ОППВРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменения.Период,
		|	ОППВРасчетыСФондами.ФизЛицо,
		|	ОППВРасчетыСФондами.СтруктурнаяЕдиница,
		|	ОППВРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда
	
		ЗадолженностьТекст = "
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ПодлежитПеречислению.ВзносОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды.Остатки(&парамНачало,
		|		Организация = &парамОрганизация
		|		И ФизЛицо В (ВЫБРАТЬ
		|							ФизЛицо
		|						ИЗ
		|							(" + СписокФизЛицТекст + ") КАК СписокФизЛиц)) КАК ПодлежитПеречислению
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР КОГДА ПодлежитПеречислению.ВидДвижения = &парамПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * ПодлежитПеречислению.Взнос) КАК Сумма
		|ИЗ
		|	РегистрНакопления.ВОСМСПодлежитПеречислениюВФонды КАК ПодлежитПеречислению
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизлиц
		|		ПО ПодлежитПеречислению.ФизЛицо = СписокФизлиц.ФизЛицо
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ПодлежитПеречислению.Период >= &парамНачало 
		|			И ПодлежитПеречислению.Период < ДатыИзменения.Период
		|ГДЕ
		|	ПодлежитПеречислению.Организация = &парамОрганизация
		|	И ПодлежитПеречислению.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменения.Период,
		|	ПодлежитПеречислению.ФизЛицо,
		|	ПодлежитПеречислению.СтруктурнаяЕдиница,
		|	ПодлежитПеречислению.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцВыплатыДоходов, МЕСЯЦ),
		|	НАЧАЛОПЕРИОДА(ПодлежитПеречислению.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
	Иначе
		
		ЗадолженностьТекст = "
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ООСМСРасчетыСФондами.ФизЛицо,
		|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
		|	ООСМСРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	ООСМСРасчетыСФондами.ОтчислениеОстаток КАК Сумма
		|ПОМЕСТИТЬ ВТ_Задолженность
		|ИЗ
		|	РегистрНакопления.ООСМСРасчетыСФондами.Остатки(&парамНачало,
		|		Организация = &парамОрганизация
		|		И ВидПлатежа В (&парамВидыПлатежей)
		|		И ФизЛицо В (ВЫБРАТЬ
		|							ФизЛицо
		|						ИЗ
		|							(" + СписокФизЛицТекст + ") КАК СписокФизЛиц)) КАК ООСМСРасчетыСФондами
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДатыИзменения.Период,
		|	ООСМСРасчетыСФондами.ФизЛицо,
		|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
		|	ООСМСРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцВыплатыДоходов,
		|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	СУММА(ВЫБОР КОГДА ООСМСРасчетыСФондами.ВидДвижения = &парамПриход ТОГДА 1 ИНАЧЕ -1 КОНЕЦ * ООСМСРасчетыСФондами.Отчисление) КАК Сумма
		|
		|ИЗ
		|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК СписокФизлиц
		|		ПО ООСМСРасчетыСФондами.ФизЛицо = СписокФизлиц.ФизЛицо
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК ДатыИзменения
		|		ПО ООСМСРасчетыСФондами.Период >= &парамНачало 
		|			И ООСМСРасчетыСФондами.Период < ДатыИзменения.Период
		|ГДЕ
		|	ООСМСРасчетыСФондами.Организация = &парамОрганизация
		|	И ООСМСРасчетыСФондами.ВидПлатежа В (&парамВидыПлатежей)
		|	И ООСМСРасчетыСФондами.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыИзменения.Период,
		|	ООСМСРасчетыСФондами.ФизЛицо,
		|	ООСМСРасчетыСФондами.СтруктурнаяЕдиница,
		|	ООСМСРасчетыСФондами.ПодразделениеОрганизации,
		|	НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
		|";
	КонецЕсли;	
	
	Запрос.Текст = ЗадолженностьТекст;
	Запрос.Выполнить();
	ЗадолженностьТекст = "ВТ_Задолженность";
	
	// определим просроченную задолженность
	ПросроченнаяЗадолженностьТекст = "
	|ВЫБРАТЬ
	|	Задолженность.Период,
	|	Задолженность.ФизЛицо,
	|	Задолженность.СтруктурнаяЕдиница,
	|	Задолженность.ПодразделениеОрганизации,
	|	Задолженность.МесяцНалоговогоПериода,
	|	МИНИМУМ(Задолженность.МесяцВыплатыДоходов) КАК МесяцВыплатыДоходов,
	|	МИНИМУМ(СрокиПеречисления.СрокПеречисления) КАК СрокПеречисления,
	|	СУММА(Задолженность.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПросроченнаяЗадолженность
	|ИЗ
	|	" + ЗадолженностьТекст + " КАК Задолженность
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СрокиПеречисленияТекст + " КАК СрокиПеречисления
	|		ПО (Задолженность.МесяцВыплатыДоходов = СрокиПеречисления.Месяц
	|				И СрокиПеречисления.ПорядокОпределенияСрокаПеречисления = &парамПоМесяцуВыплатыДоходов) 
	|			ИЛИ (Задолженность.МесяцНалоговогоПериода = СрокиПеречисления.Месяц
	|					И СрокиПеречисления.ПорядокОпределенияСрокаПеречисления = &парамПоМесяцуНалоговогоПериода) 
	|ГДЕ
	|	(СрокиПеречисления.СрокПеречисления ЕСТЬ NULL // оставляем NULL, чтобы потом сказать, что не заполнен регистр сроков за соответ. месяц
	|		ИЛИ Задолженность.Период > СрокиПеречисления.СрокПеречисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Задолженность.Период,
	|	Задолженность.ФизЛицо,
	|	Задолженность.СтруктурнаяЕдиница,
	|	Задолженность.ПодразделениеОрганизации,
	|	Задолженность.МесяцНалоговогоПериода
	|
	|ИМЕЮЩИЕ СУММА(Задолженность.Сумма) > 0
	|";
	
	Запрос.Текст = ПросроченнаяЗадолженностьТекст;
	Запрос.Выполнить();
	ПросроченнаяЗадолженностьТекст = "ВТ_ПросроченнаяЗадолженность";
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ПросроченнаяЗадолженность";
	
	// определим значения ставки рефинансирования и коэффициента, применяемого к ставке на дату расчета
	ЗначенияПараметровРасчетаТекст = "
	|ВЫБРАТЬ
	|	ДатыИзменения.Период,
	|	СтавкаРефинансированияНБ.Размер КАК СтавкаРефинансирования,
	|	КоэффициентыСтавкиРефинансирования.Коэффициент
	|ПОМЕСТИТЬ ВТ_ЗначенияПараметровРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|			ДатыИзменения.Период,
	|			МАКСИМУМ(СтавкаРефинансированияНБ.Период) КАК ПериодСтавки,
	|			МАКСИМУМ(ВЫБОР
	|						КОГДА КоэффициентыСтавкиРефинансирования.Организация = &парамОрганизация
	|							ТОГДА КоэффициентыСтавкиРефинансирования.Период
	|						ИНАЧЕ NULL
	|					 КОНЕЦ) КАК ПериодКоэффициентаОрг,
	|			МАКСИМУМ(ВЫБОР
	|						КОГДА КоэффициентыСтавкиРефинансирования.Организация = &парамПустаяОрганизация
	|							ТОГДА КоэффициентыСтавкиРефинансирования.Период
	|						ИНАЧЕ NULL
	|					 КОНЕЦ) КАК ПериодКоэффициентаОбщ
	|		ИЗ
	|			" + ДатыИзмененияТекст + " КАК ДатыИзменения
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияНБ КАК СтавкаРефинансированияНБ
	|				ПО СтавкаРефинансированияНБ.Период <= ДатыИзменения.Период
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени КАК КоэффициентыСтавкиРефинансирования
	|				ПО КоэффициентыСтавкиРефинансирования.Период <= ДатыИзменения.Период
	|					И КоэффициентыСтавкиРефинансирования.ВидНалога = &парамНалогСборОтчисление
	|					И КоэффициентыСтавкиРефинансирования.Организация В (&парамПустаяОрганизация, &парамОрганизация)
	|
	|		СГРУППИРОВАТЬ ПО
	|			ДатыИзменения.Период) КАК ДатыИзменения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкаРефинансированияНБ КАК СтавкаРефинансированияНБ
	|		ПО ДатыИзменения.ПериодСтавки = СтавкаРефинансированияНБ.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентыСтавкиРефинансированияНБДляРасчетаПени КАК КоэффициентыСтавкиРефинансирования
	|		ПО КоэффициентыСтавкиРефинансирования.ВидНалога = &парамНалогСборОтчисление
	|			И ВЫБОР
	|				КОГДА НЕ (ДатыИзменения.ПериодКоэффициентаОрг ЕСТЬ NULL) 
	|					ТОГДА ДатыИзменения.ПериодКоэффициентаОрг = КоэффициентыСтавкиРефинансирования.Период
	|							И КоэффициентыСтавкиРефинансирования.Организация = &парамОрганизация
	|					ИНАЧЕ ДатыИзменения.ПериодКоэффициентаОбщ = КоэффициентыСтавкиРефинансирования.Период
	|							И КоэффициентыСтавкиРефинансирования.Организация = &парамПустаяОрганизация
	|			КОНЕЦ
	|";
	
	Запрос.Текст = ЗначенияПараметровРасчетаТекст;
	Запрос.Выполнить();
	ЗначенияПараметровРасчетаТекст = "ВТ_ЗначенияПараметровРасчета";
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТ_ЗначенияПараметровРасчета";
	
	// Составим периоды расчета пени, когда все параметры были постоянными
	ПериодыРасчетаТекст = "
	|ВЫБРАТЬ
	|	ДатыИзменения.Период КАК ДатаНачала,
	|	МИНИМУМ(ЕСТЬNULL(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(СледДатыИзменения.Период, ДЕНЬ, -1), ДЕНЬ), &парамКонец)) КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ПериодыРасчета
	|ИЗ
	|	" + ДатыИзмененияТекст + " КАК ДатыИзменения
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДатыИзмененияТекст + " КАК СледДатыИзменения
	|		ПО ДатыИзменения.Период < СледДатыИзменения.Период
	|ГДЕ
	|	ДатыИзменения.Период МЕЖДУ &парамНачало И &парамКонец
	|СГРУППИРОВАТЬ ПО
	|	ДатыИзменения.Период
	|";
	
	Запрос.Текст = ПериодыРасчетаТекст;
	Запрос.Выполнить();
	ПериодыРасчетаТекст = "ВТ_ПериодыРасчета";
	
	// Окончательный текст запроса 
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыРасчета.ДатаНачала,
	|	ПериодыРасчета.ДатаОкончания,
	|	ПросроченнаяЗадолженность.ФизЛицо,
	|	ПросроченнаяЗадолженность.СтруктурнаяЕдиница,
	|	ПросроченнаяЗадолженность.ПодразделениеОрганизации,
	|	ПросроченнаяЗадолженность.МесяцНалоговогоПериода,
	|	ПросроченнаяЗадолженность.МесяцВыплатыДоходов,
	|	ПросроченнаяЗадолженность.СрокПеречисления,
	|	ПросроченнаяЗадолженность.Сумма КАК СуммаЗадолженности,
	|	ПараметрыРасчета.СтавкаРефинансирования,
	|	ПараметрыРасчета.Коэффициент,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПросроченнаяЗадолженность.Период, ГОД), КОНЕЦПЕРИОДА(ПросроченнаяЗадолженность.Период, ГОД), ДЕНЬ) + 1 КАК ДнейВГоду,
	|	ПросроченнаяЗадолженность.Сумма * ПараметрыРасчета.Коэффициент * ПараметрыРасчета.СтавкаРефинансирования / 100 *
	|				(РАЗНОСТЬДАТ(ПериодыРасчета.ДатаНачала, ПериодыРасчета.ДатаОкончания, ДЕНЬ) + 1) / 
	|					(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ПросроченнаяЗадолженность.Период, ГОД), КОНЕЦПЕРИОДА(ПросроченнаяЗадолженность.Период, ГОД), ДЕНЬ) + 1) КАК Сумма
	|	
	|ИЗ
	|	" + ПросроченнаяЗадолженностьТекст + " КАК ПросроченнаяЗадолженность
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыРасчетаТекст + " КАК ПериодыРасчета
	|		ПО ПросроченнаяЗадолженность.Период = ПериодыРасчета.ДатаНачала
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ЗначенияПараметровРасчетаТекст + " КАК ПараметрыРасчета
	|		ПО ПросроченнаяЗадолженность.Период = ПараметрыРасчета.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПросроченнаяЗадолженность.ФизЛицо,
	|	ПросроченнаяЗадолженность.СтруктурнаяЕдиница,
	|	ПросроченнаяЗадолженность.ПодразделениеОрганизации,
	|	ПросроченнаяЗадолженность.МесяцНалоговогоПериода,
	|	ПросроченнаяЗадолженность.СрокПеречисления,
	|	ПросроченнаяЗадолженность.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаПениОПВиСО

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	ВидОперации - вид операции расчета пени
//	ПериодРегистрации - месяц, в котором производится расчет пени
//	ТабличнаяЧасть - табличная часть документа РасчетПениОПВиСО
//	РезультатРасчетаПени - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО(ВидОперации, ПериодРегистрации, ТабличнаяЧастьДокумента, РезультатРасчетаПени) Экспорт
	
	// правило округления
	Если ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОПВ Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениСО Тогда
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениОППВ Тогда 
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениВОСМС Тогда 
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасчетПени.РасчетПениООСМС Тогда 
		ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование, ПериодРегистрации);
	КонецЕсли;

	ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по которым считается пени
	РаботникиДляРасчетаПени = Новый Соответствие;
	Для Каждого Строка Из ТабличнаяЧастьДокумента Цикл
		РаботникиДляРасчетаПени.Вставить(Строка.Физлицо, Новый Структура("СтруктурнаяЕдиница, ПодразделениеОрганизации, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", 
																			Строка.СтруктурнаяЕдиница,
																			Строка.ПодразделениеОрганизации,
																			Строка.МесяцНалоговогоПериода,
																			Строка.ДатаНачала,
																			Строка.ДатаОкончания));
	КонецЦикла;
	
	// очистим результаты расчета пени, которые находятся в табличной части документа
	ТабличнаяЧастьДокумента.Очистить(); 
	ТабличнаяЧасть = ТабличнаяЧастьДокумента.Выгрузить(); 
	
	ТекущееФизЛицо = Неопределено;
	ТекущаяСтруктурнаяЕдиница = Неопределено;
	ТекущееПодразделениеОрганизации = Неопределено;
	ТекущийМесяцНалоговогоПериода = Неопределено;
	ТекущаяСтрокаТЧ = Неопределено;
	ТекущаяСуммаЗадолженности = Неопределено;
	ТекущаяСтавкаРефинансирования = Неопределено;
	ТекущийКоэффициент = Неопределено;
	ТекущееЧислоДнейВГоду = Неопределено;
	
	ДанныеРасчетаПени = РезультатРасчетаПени.Выбрать();
	
	Пока ДанныеРасчетаПени.Следующий() Цикл
		
		БылоСообщениеОбОшибке = Ложь;
		Если ДанныеРасчетаПени.СрокПеречисления = NULL Тогда
			
			БылоСообщениеОбОшибке = Истина;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = '%1 за месяц налогового периода %2 (месяц выплаты доходов %3) не указан срок перечисления!'"), 
							ДанныеРасчетаПени.ФизЛицо,
							Формат(ДанныеРасчетаПени.МесяцНалоговогоПериода, "ДФ='ММММ гггг'"), 
							Формат(ДанныеРасчетаПени.МесяцВыплатыДоходов, "ДФ='ММММ гггг'"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
		КонецЕсли;
		
		Если ДанныеРасчетаПени.СтавкаРефинансирования = NULL Или ДанныеРасчетаПени.СтавкаРефинансирования = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не определено значение ставки рефинансирования на %1!'"), 
							Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

		Если ДанныеРасчетаПени.Коэффициент = NULL Или ДанныеРасчетаПени.Коэффициент = 0 Тогда
			БылоСообщениеОбОшибке = Истина;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не определено значение коэффициента ставки рефинансирования на %1, используемого для расчета пени!'"), 
							Формат(ДанныеРасчетаПени.ДатаНачала, "ДФ=dd.MM.yyyy"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если БылоСообщениеОбОшибке Тогда
			Продолжить;
		КонецЕсли;
	
		Если ДанныеРасчетаПени.ФизЛицо <> ТекущееФизЛицо
				Или ДанныеРасчетаПени.СтруктурнаяЕдиница <> ТекущаяСтруктурнаяЕдиница
				Или ДанныеРасчетаПени.ПодразделениеОрганизации <> ТекущееПодразделениеОрганизации
				Или ДанныеРасчетаПени.МесяцНалоговогоПериода <> ТекущийМесяцНалоговогоПериода
				Или ДанныеРасчетаПени.СуммаЗадолженности <> ТекущаяСуммаЗадолженности
				Или ДанныеРасчетаПени.СтавкаРефинансирования <> ТекущаяСтавкаРефинансирования 
				Или ДанныеРасчетаПени.Коэффициент <> ТекущийКоэффициент 
				Или ДанныеРасчетаПени.ДнейВГоду <> ТекущееЧислоДнейВГоду Тогда
			
			// сменилось физлицо или месяц налогового периода - создаем новую строку
			ТекущееФизЛицо = ДанныеРасчетаПени.ФизЛицо;
			ТекущаяСтруктурнаяЕдиница = ДанныеРасчетаПени.СтруктурнаяЕдиница;
			ТекущаяПодразделениеОрганизации = ДанныеРасчетаПени.ПодразделениеОрганизации;
			ТекущийМесяцНалоговогоПериода = ДанныеРасчетаПени.МесяцНалоговогоПериода;
			ТекущаяСуммаЗадолженности = ДанныеРасчетаПени.СуммаЗадолженности;
			ТекущаяСтавкаРефинансирования = ДанныеРасчетаПени.СтавкаРефинансирования;
			ТекущийКоэффициент = ДанныеРасчетаПени.Коэффициент;
			ТекущееЧислоДнейВГоду = ДанныеРасчетаПени.ДнейВГоду;
			
			ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
			
			// заполняем новую строку
			ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
		Иначе
			Если ЗначениеЗаполнено(ТекущаяСтрокаТЧ) 
					И КонецДня(ТекущаяСтрокаТЧ.ДатаОкончания) + 1 = НачалоДня(ДанныеРасчетаПени.ДатаНачала) Тогда
				// новую строку не создаем, передвигаем дату окончания в текущей строке в будущее и складываем суммы
				ТекущаяСтрокаТЧ.ДатаОкончания = ДанныеРасчетаПени.ДатаОкончания;
				ТекущаяСтрокаТЧ.Сумма = ТекущаяСтрокаТЧ.Сумма + ДанныеРасчетаПени.Сумма;
			Иначе
				// создаем новую строку
				ТекущаяСтрокаТЧ = ТабличнаяЧасть.Добавить();
				РаботникиДляРасчетаПени.Удалить(ДанныеРасчетаПени.ФизЛицо);
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаТЧ, ДанныеРасчетаПени);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// заполним ИсчислениеПени
	Для Каждого Элемент Из РаботникиДляРасчетаПени Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.ФизЛицо = Элемент.Ключ;
		НоваяСтрока.МесяцНалоговогоПериода = Элемент.Значение.МесяцНалоговогоПериода;
		НоваяСтрока.ДатаНачала = Элемент.Значение.ДатаНачала;
		НоваяСтрока.ДатаОкончания = Элемент.Значение.ДатаОкончания;
	КонецЦикла;
	
	// свернем строки с одинаковыми реквизитам
	ТабличнаяЧасть.Свернуть("ФизЛицо, СтруктурнаяЕдиница, ПодразделениеОрганизации, МесяцНалоговогоПериода, ДатаНачала, ДатаОкончания", "Сумма");
	
	// округлим результат расчета - если расчеты производятся не до тиынок
	Если ПравилоОкругления.ПорядокОкругления <> Перечисления.ПорядкиОкругления.Окр0_01 Тогда
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.Сумма = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(СтрокаТЧ.Сумма, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		КонецЦикла;
	КонецЕсли;
	
	ТабличнаяЧастьДокумента.Загрузить(ТабличнаяЧасть);
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоДаннымРасчетаПениОПВиСО()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА СРЕДНЕГО ЗАРАБОТКА

Функция ПолучитьДатуНачалаРасчетаСреднегоЗаработкаТолькоПоРабочимДням() Экспорт

	Возврат '20071229';

КонецФункции

// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция РассчитатьСтрокуОтОбратногоПосле2019(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * ОбщегоНазначенияБКСерверПовтИсп.МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	ПрименятьКорректировкуПрочихНалоговВзносов = ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(ИсходныеДанные.Организация, ПериодРегистрации);
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаОПВ",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	УменьшеннаяСтавка.СтавкаОПВ = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН = 10;
	СтандартнаяСтавка.СтавкаОПВ = 10;
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для %1 расчет ""%2"" не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации'"),
							ИсходныеДанные.СотрудникНаименование,
							ИсходныеДанные.ВидРасчетаНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0),0);
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;		
		ПредоставлятьВычетОПВ						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,1,0);
		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПрочиеДоходыДляИПН							= 0;
		ПредоставлятьВычетОПВ						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода		
		ПрочиеДоходыДляОПВ 					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ 					= 0;
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			= ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийБезИПН	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			= 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	= 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	= 0;
		ПроцентКомпенсируемыхУдержанийБезИПНиОПВ	= 0;
		ПроцентПрочихКомпенсируемыхУдержаний		= 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
			
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ПредоставлятьВычетОПВ * ИсчисленныеОПВ - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			
			ПроцентИПН = 0.1;
				
			// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
			Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода
				И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
				
				Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
					Если ИсходныеДанные.ОбщаяСуммаНачислений >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
						 И ИсходныеДанные.ОбщаяСуммаНачислений <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
						 
						ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;		
				
			КонецЕсли;
			
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
			
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияИПН = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ОПВ, и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ*ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
	//	
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		ПрочийВычетПоИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, (БазаДляИсчисленияИПН + ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.ОбщаяСуммаНачислений), 0); //для включения сумм доп.вычетов.
		БазаДляИсчисленияИПН = ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочийВычетПоИПН;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0 Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	СуммаДоходаСотрудникаДоРасчета = ИсходныеДанные.ОбщаяСуммаНачислений + ИсходныеДанные.Размер + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				 И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;

	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		ПроцентИПН 				 = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;

		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		
		РезультирующийПроцентИПНиОПВ = ПризнакРасчетаИПН * ПроцентИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезИПНиОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + 
											ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВ -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - ПредоставлятьВычетОПВ * РезультатОПВ - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			ИЛИ ПрименятьКорректировкуПрочихНалоговВзносов И ИсходныеДанные.ОтОбратногоУчитыватьОПВ)
			И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				СуммаДоходаСотрудникаПослеРасчета = ?(ОсновноеНачисление, ИсходныеДанные.ОбщаяСуммаНачислений, 0) + Результат + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимо число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВ + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезИПНиОПВ + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция РассчитатьСтрокуОтОбратногоПосле2020(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * ОбщегоНазначенияБКСерверПовтИсп.МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	ПрименятьКорректировкуПрочихНалоговВзносов = ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(ИсходныеДанные.Организация, ПериодРегистрации);
	ПрименятьВычетВОСМС = ПрименятьВычетВОСМСДляФизическихЛицИГПХ(ИсходныеДанные.Организация, ПериодРегистрации);
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаОПВ",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	УменьшеннаяСтавка.СтавкаОПВ = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН =     ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0); 
	СтандартнаяСтавка.СтавкаОПВ = 10;
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьВОСМС			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Или КомпенсироватьВОСМС <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для %1 расчет ""%2"" не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации'"),
							ИсходныеДанные.СотрудникНаименование,
							ИсходныеДанные.ВидРасчетаНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0),0);
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;		
		ПредоставлятьВычетОПВ						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,1,0);
		Если ПрименятьВычетВОСМС Тогда 
			ПредоставлятьВычетВОСМС					= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,1,0);
		Иначе			
			ПредоставлятьВычетВОСМС					= 0;
		КонецЕсли;
		
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПрочиеДоходыДляИПН							= 0;
		ПредоставлятьВычетОПВ						= 0;
		ПредоставлятьВычетВОСМС						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода		
		ПрочиеДоходыДляОПВ 					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ 					= 0;
	КонецЕсли;
	
	// Данные для расчета ВОСМС
	Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
		ПризнакИсчисленияВОСМС 				= ?(ИсходныеДанные.ПризнакИсчисленияВОСМС, 1, 0);
		БазаДляИсчисленияВОСМС 				= ИсходныеДанные.БазаДляИсчисленияВОСМС;
		ПроцентВОСМС 						= ИсходныеДанные.ПроцентВОСМС; // ставка ВОСМС
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ?(ЗначениеЗаполнено(ИсходныеДанные.ПроцентВОСМС), ИсходныеДанные.ВОСМСДругогоРаботодателя / ИсходныеДанные.ПроцентВОСМС, 0);
											  
		РазмерОграниченияПоДоходамВОСМС 	= ИсходныеДанные.РазмерОграниченияПоДоходамВОСМС - КорректировкаОграничения;
											  
		МаксСуммаВОСМС 						= ПроцентВОСМС * РазмерОграниченияПоДоходамВОСМС; // ВОСМС с макс суммы облагаемого дохода		
		
		// для срабатывания максимального ограничения без тиын, округлим максимальную сумму
		Если (МаксСуммаВОСМС - Цел(МаксСуммаВОСМС)) > 0 Тогда
			
			МаксСуммаВОСМС = Окр(МаксСуммаВОСМС, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
		ПрочиеДоходыДляВОСМС 				= ИсходныеДанные.ПрочиеДоходыДляВОСМС;
		ПризнакПрименятьОкруглениеВОСМС	= 0;
		ИсчисленныйВОСМСПослеОкругления = 0;	
	Иначе
		// Если учет ВОСМС не нужен, то все по нулям
		ПризнакИсчисленияВОСМС 				= 0;
		БазаДляИсчисленияВОСМС 				= 0;
		РазмерОграниченияПоДоходамВОСМС 	= 0;
		ПроцентВОСМС 						= 0; // ставка ВОСМС
		МаксСуммаВОСМС 						= 0; // ВОСМС с макс суммы облагаемого дохода
		ПрочиеДоходыДляВОСМС 				= 0;
		ПризнакПрименятьОкруглениеВОСМС		= 0;
		ИсчисленныйВОСМСПослеОкругления 	= 0;	
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			  = ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоИПН / 100;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоОПВ / 100;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = 0;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = 0;
		ПроцентПрочихКомпенсируемыхУдержаний	  = 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	ПризнакПрименятьОграничениеПоДоходамВОСМС = 0; // если 1, то применяется ограничение по доходам, облагаемым ВОСМС
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
			
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ВОСМС
		ИсчисленныеВОСМС = 0;
		Если ПризнакИсчисленияВОСМС <> 0 Тогда
			
			ИсчисленныеВОСМС = Мин(ПроцентВОСМС * (БазаДляИсчисленияВОСМС - ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений), МаксСуммаВОСМС);
			
		КонецЕсли;
		
		ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ПредоставлятьВычетОПВ * ИсчисленныеОПВ - ПредоставлятьВычетВОСМС * ИсчисленныеВОСМС - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			
			ПроцентИПН = ИсходныеДанные.ПроцентИПН;
				
			// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
			Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода
				И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
				
				Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
					Если ИсходныеДанные.ОбщаяСуммаНачислений >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
						 И ИсходныеДанные.ОбщаяСуммаНачислений <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
						 
						 //При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
						 Если ИсходныеДанные.ПроцентИПН = 0 Тогда
							 ПроцентИПН = 0;
						 Иначе
							 ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
						 КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;		
				
			КонецЕсли;
			
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
			
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныеВОСМС - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ   = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияВОСМС = - ИсходныеДанные.НеОблагаемыйВОСМСДоходЗаМесяц + ПрочиеДоходыДляВОСМС;
		БазаДляИсчисленияИПН   = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ОПВ, и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ*ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		// чтобы из-за того, если для доплаты не стоит компенсация ВОСМС, не удержалось ВОСМС с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ВОСМС,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьВОСМС = 0 ИЛИ ИсходныеДанные.ОблагаетсяВОСМС = НеОблагаетсяЦеликом) И ИсчисленныеВОСМС <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеВОСМС;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяВОСМС = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ВОСМС, и отметим, что не надо рассчитывать ВОСМС
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетВОСМС*ИсчисленныеВОСМС;
				ПризнакИсчисленияВОСМС = 0;
			КонецЕсли;
		КонецЕсли;
	//	
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияВОСМС = ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений + ПрочиеДоходыДляВОСМС;
		ПрочийВычетПоИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, (БазаДляИсчисленияИПН + ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.ОбщаяСуммаНачислений), 0); //для включения сумм доп.вычетов.
		БазаДляИсчисленияИПН = ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочийВычетПоИПН;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если (ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0) Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакИсчисленияВОСМС = 1 Тогда
			
			// если данный вид ВОСМС не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияВОСМС = ?(ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом, ПризнакИсчисленияВОСМС, 0);
			ИсчисленныеВОСМС = Мин(ПроцентВОСМС * БазаДляИсчисленияВОСМС, МаксСуммаВОСМС);
			ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
			Если (ПризнакИсчисленияВОСМС = 0 И ИсчисленныеВОСМС <> 0) Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ВОСМС
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетВОСМС * ИсчисленныеВОСМС;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеВОСМС;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	СуммаДоходаСотрудникаДоРасчета = ИсходныеДанные.ОбщаяСуммаНачислений + ИсходныеДанные.Размер + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				 И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;

	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
			 //При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
			Если ИсходныеДанные.ПроцентИПН = 0 Тогда
				ПроцентИПН = 0;
			Иначе
				ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
			КонецЕсли;
		Иначе
			ПроцентИПН = 0;
		КонецЕсли;

		ПроцентВОСМС = ?(ИсходныеДанные.ОтОбратногоУчитыватьВОСМС, ИсходныеДанные.ПроцентВОСМС, 0);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентВОСМС = ПроцентВОСМС * ПризнакИсчисленияВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС);
		
		ФиксЧастьВОСМС			   = ПризнакИсчисленияВОСМС * (БазаДляИсчисленияВОСМС * ПроцентВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + 
														   ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС) + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;
		
		РезультирующийПроцентИПНиОПВиВОСМС = ПризнакРасчетаИПН * ПроцентИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ - ПредоставлятьВычетВОСМС * РезультирующийПроцентВОСМС);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ПредоставлятьВычетВОСМС * ФиксЧастьВОСМС - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентВОСМС = КомпенсироватьВОСМС - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоВОСМС + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
									 	 ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС +
											ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КоэффициентВОСМС * ФиксЧастьВОСМС + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВиВОСМС -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
					   	КоэффициентВОСМС * РезультирующийПроцентВОСМС - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		// Проверим граничные условия, при которых делали расчет
		КомпенсированоВОСМС = ПризнакИсчисленияВОСМС * ПроцентВОСМС * (БазаДляИсчисленияВОСМС + Результат) * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
			// Наличие облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияВОСМС И ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ВОСМС исчисляются
					
					Если БазаДляИсчисленияВОСМС + Результат > 0 Тогда
						Если ПризнакИсчисленияВОСМС <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 1;
					Иначе
						Если ПризнакИсчисленияВОСМС <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если КомпенсированоВОСМС >= МаксСуммаВОСМС
					ИЛИ (КомпенсированоВОСМС = МаксСуммаВОСМС
						И ПризнакПрименятьОграничениеПоДоходамВОСМС = 1) Тогда
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				// проверим наличие сотой части в исчисленном ВОСМС	
				ИначеЕсли (КомпенсированоВОСМС - Цел(КомпенсированоВОСМС)) > 0 Тогда
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ПризнакПрименятьОкруглениеВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = Окр(КомпенсированоВОСМС, 0, РежимОкругления.Окр15как20);
					РезультатПолучен = Ложь;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - ПредоставлятьВычетОПВ * РезультатОПВ - ПредоставлятьВычетВОСМС * КомпенсированоВОСМС - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			ИЛИ ПрименятьКорректировкуПрочихНалоговВзносов И ИсходныеДанные.ОтОбратногоУчитыватьОПВ
			ИЛИ ПрименятьКорректировкуПрочихНалоговВзносов И ИсходныеДанные.ОтОбратногоУчитыватьВОСМС)
			И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				СуммаДоходаСотрудникаПослеРасчета = ?(ОсновноеНачисление, ИсходныеДанные.ОбщаяСуммаНачислений, 0) + Результат + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимое число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВиВОСМС + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентВОСМС + ФиксЧастьВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийТолькоОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийТолькоИПН +
												(Результат - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
												(Результат - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезВОСМС +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеВОСМС + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  

// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
// Получает данные для расчета "от обратного" после 2019
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция РассчитатьСтрокуОтОбратногоПосле2021(СтрокаДвижений, ИсходныеДанные, ПериодРегистрации, КомментироватьРасчет)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	ЦелевойРазмер = 0;
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	// МРП получаем на начало финансового года, в соответствии с НК
	ОграничениеКорректировкиДохода25МРП = 25 * ОбщегоНазначенияБКСерверПовтИсп.МесячныйРасчетныйПоказатель(НачалоГода(ПериодРегистрации));
	
	РезультатПолучен = Ложь;
	
	// Если это расчет "от обратного" для основного начисления, то не учитываем прочие суммы доходов, т.к.
	// налоги/взносы будут компенсироваться только для самого основного начисления и включаемых в него видов расчета.
	// Если идет расчет "от обратного" для прочих доплат, то их считаем таким образом, чтобы компенсировать только 
	// ту часть налога/взноса, которая начислена на сумму доплаты.
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
			ОсновноеНачисление = Истина;
		Иначе
			ОсновноеНачисление = Ложь;
		КонецЕсли;
	Иначе
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// Если до этого никаких вообще начислений не было, то в любом случае считаем как "основное начисление"
	Если ИсходныеДанные.ОбщаяСуммаНачислений = 0 Тогда
		ОсновноеНачисление = Истина;
	КонецЕсли;
	
	// определим целевой размер
	Если СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоДням Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаДней = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноДней / ИсходныеДанные.НормаДней);
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеОтОбратногоПоЧасам Тогда
		ЦелевойРазмер = ?(ИсходныеДанные.НормаЧасов = 0, 0, СтрокаДвижений.Размер * ИсходныеДанные.ОтработаноЧасов / ИсходныеДанные.НормаЧасов);
	Иначе
		ЦелевойРазмер = СтрокаДвижений.Размер;
	КонецЕсли;

	ТаблицаСтавокНалогов = Новый ТаблицаЗначений;
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаС",  Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СуммаДоходаПо", Новый ОписаниеТипов("Число"));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаИПН",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	ТаблицаСтавокНалогов.Колонки.Добавить("СтавкаОПВ",     Новый ОписаниеТипов("Число"), Новый КвалификаторыЧисла(10, 1));
	УменьшеннаяСтавка = ТаблицаСтавокНалогов.Добавить();
	УменьшеннаяСтавка.СуммаДоходаС = 0;
	УменьшеннаяСтавка.СуммаДоходаПо = ОграничениеКорректировкиДохода25МРП;
	УменьшеннаяСтавка.СтавкаИПН = 1;
	УменьшеннаяСтавка.СтавкаОПВ = 1;
	СтандартнаяСтавка = ТаблицаСтавокНалогов.Добавить();
	СтандартнаяСтавка.СуммаДоходаС = ОграничениеКорректировкиДохода25МРП;
	// максимальная величина ресурса СуммаДохода
	СтандартнаяСтавка.СуммаДоходаПо = 999999999999999.99;
	СтандартнаяСтавка.СтавкаИПН =     ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, ИсходныеДанные.ПроцентИПН*100, 0); 
	СтандартнаяСтавка.СтавкаОПВ = 10;
	
	// запомним целевой размер текущей строки расчета
	СтрокаДвижений.ДополнительныеДанные = ЦелевойРазмер;
	
	Если ОсновноеНачисление Тогда
		// Увеличим целевой размер на размеры всех других расчетов "от обратного", введенных в текущем месяце,
		// их фактические результаты потом будут вычтены в конец расчета.
		ЦелевойРазмер = ЦелевойРазмер + ИсходныеДанные.РасчетОтОбратногоДополнительныеДанные;
	КонецЕсли;
	                      
	// Признаки компенсирования расчетом "от обратного" различных удержаний
	КомпенсироватьИПН 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, 1, 0);
	КомпенсироватьОПВ 			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ, 1, 0);
	КомпенсироватьВОСМС			= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС, 1, 0);
	КомпенсироватьУдержания 	= ?(ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания, 1, 0);
	
	Если КомпенсироватьИПН <> 0 Или КомпенсироватьОПВ <> 0 Или КомпенсироватьВОСМС <> 0 Тогда
		Если Не ИсходныеДанные.ОтражениеПоПериодуРегистрации Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для %1 расчет ""%2"" не возможен, т.к. в учетной политике по налоговому учету не установлен признак отражения налогов и взносов по периоду регистрации'"),
							ИсходныеДанные.СотрудникНаименование,
							ИсходныеДанные.ВидРасчетаНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Данные для расчета ИПН 
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		БазаДляИсчисленияИПН						= ИсходныеДанные.ОблагаемыйДоход;
		ОстатокВычета								= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,Макс(ИсходныеДанные.РазрешенныеНалоговыеВычеты, 0),0);
		ПрочиеДоходыДляИПН							= ИсходныеДанные.ПрочиеДоходыДляИПН;		
		ПредоставлятьВычетОПВ						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,1,0);
		ПредоставлятьВычетВОСМС						= ?(НЕ ИсходныеДанные.ФизЛицоНерезидент,1,0);
	Иначе
		// Если компенсация ИПН не нужна, то все по нулям
		БазаДляИсчисленияИПН						= 0;
		ОстатокВычета								= 0;
		ПрочиеДоходыДляИПН							= 0;
		ПредоставлятьВычетОПВ						= 0;
		ПредоставлятьВычетВОСМС						= 0;
	КонецЕсли;
	
	// Данные для расчета ОПВ
	Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
		ПризнакИсчисленияОПВ 				= ?(ИсходныеДанные.ПризнакИсчисленияОПВ, 1, 0);
		БазаДляИсчисленияОПВ 				= ИсходныеДанные.БазаДляИсчисленияОПВ;
		РазмерОграниченияПоДоходамОПВ 		= ИсходныеДанные.РазмерОграниченияПоДоходамОПВ;
		ПроцентОПВ 							= ИсходныеДанные.ПроцентОПВ; // ставка ОПВ
		МаксСуммаОПВ 						= ПроцентОПВ * РазмерОграниченияПоДоходамОПВ; // ОПВ с макс суммы облагаемого дохода		
		ПрочиеДоходыДляОПВ 					= ИсходныеДанные.ПрочиеДоходыДляОПВ;
	Иначе
		// Если учет ОПВ не нужен, то все по нулям
		ПризнакИсчисленияОПВ 				= 0;
		БазаДляИсчисленияОПВ 				= 0;
		РазмерОграниченияПоДоходамОПВ 		= 0;
		ПроцентОПВ 							= 0; // ставка ОПВ
		МаксСуммаОПВ 						= 0; // ОПВ с макс суммы облагаемого дохода
		ПрочиеДоходыДляОПВ 					= 0;
	КонецЕсли;
	
	// Данные для расчета ВОСМС
	Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
		ПризнакИсчисленияВОСМС 				= ?(ИсходныеДанные.ПризнакИсчисленияВОСМС, 1, 0);
		БазаДляИсчисленияВОСМС 				= ИсходныеДанные.БазаДляИсчисленияВОСМС;
		ПроцентВОСМС 						= ИсходныеДанные.ПроцентВОСМС; // ставка ВОСМС
		
		// Скорректируем размер ограничения на ранее исчисленные доходы
		КорректировкаОграничения 			= ?(ЗначениеЗаполнено(ИсходныеДанные.ПроцентВОСМС), ИсходныеДанные.ВОСМСДругогоРаботодателя / ИсходныеДанные.ПроцентВОСМС, 0);
											  
		РазмерОграниченияПоДоходамВОСМС 	= ИсходныеДанные.РазмерОграниченияПоДоходамВОСМС - КорректировкаОграничения;
											  
		МаксСуммаВОСМС 						= ПроцентВОСМС * РазмерОграниченияПоДоходамВОСМС; // ВОСМС с макс суммы облагаемого дохода		
		
		// для срабатывания максимального ограничения без тиын, округлим максимальную сумму
		Если (МаксСуммаВОСМС - Цел(МаксСуммаВОСМС)) > 0 Тогда
			
			МаксСуммаВОСМС = Окр(МаксСуммаВОСМС, 0, РежимОкругления.Окр15как20);
			
		КонецЕсли;
		
		ПрочиеДоходыДляВОСМС 				= ИсходныеДанные.ПрочиеДоходыДляВОСМС;
		ПризнакПрименятьОкруглениеВОСМС	= 0;
		ИсчисленныйВОСМСПослеОкругления = 0;	
	Иначе
		// Если учет ВОСМС не нужен, то все по нулям
		ПризнакИсчисленияВОСМС 				= 0;
		БазаДляИсчисленияВОСМС 				= 0;
		РазмерОграниченияПоДоходамВОСМС 	= 0;
		ПроцентВОСМС 						= 0; // ставка ВОСМС
		МаксСуммаВОСМС 						= 0; // ВОСМС с макс суммы облагаемого дохода
		ПрочиеДоходыДляВОСМС 				= 0;
		ПризнакПрименятьОкруглениеВОСМС		= 0;
		ИсчисленныйВОСМСПослеОкругления 	= 0;	
	КонецЕсли;
	
	// Данные по прочим погашаемым удержаниям
	Если ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		СуммаКомпенсируемыхУдержаний			  = ИсходныеДанные.СуммаКомпенсируемыхУдержаний;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоИПН / 100;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоОПВ / 100;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийТолькоВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезИПН / 100;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезОПВ / 100;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийБезВОСМС / 100;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = ИсходныеДанные.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС / 100;
		ПроцентПрочихКомпенсируемыхУдержаний		= ИсходныеДанные.ПроцентПрочихКомпенсируемыхУдержаний / 100;
	Иначе
		// Если удержания не компенсируются, то все по нулям
		СуммаКомпенсируемыхУдержаний			  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийТолькоВОСМС = 0;
		ПроцентКомпенсируемыхУдержанийБезИПН	  = 0;
		ПроцентКомпенсируемыхУдержанийБезОПВ	  = 0;
		ПроцентКомпенсируемыхУдержанийБезВОСМС	  = 0;
		ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС = 0;
		ПроцентПрочихКомпенсируемыхУдержаний	  = 0;
	КонецЕсли;
	
	// Сумма, которую надо начислить, чтобы с учетом включаемых начислений получить нужную сумму на руки
	ИскомаяСуммаНачислений = ЦелевойРазмер - ИсходныеДанные.СуммаВключаемыхНачислений;

	// округлим искомую сумму
	ИскомаяСуммаНачислений = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИскомаяСуммаНачислений, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
	
	Если НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьОПВ
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьВОСМС
			И НЕ ИсходныеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
		 
		Возврат ИскомаяСуммаНачислений;		
		
	КонецЕсли;
	
	ПризнакПрименятьОграничениеПоДоходамОПВ = 0; // если 1, то применяется ограничение по доходам, облагаемым ОПВ
	ПризнакПрименятьОграничениеПоДоходамВОСМС = 0; // если 1, то применяется ограничение по доходам, облагаемым ВОСМС
	НеОблагаетсяЦеликом = Справочники.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом;
	ПризнакРасчетаИПН = 1; // если 1, то считаем ИПН, если 0, то налог=0 (нет обл. доходов за месяц)
	
	// Если это расчет "от обратного" для доплат, то определяем сумму налога/взноса с уже начисленных доходов
	Если Не ОсновноеНачисление Тогда

		// Расчет ОПВ
		ИсчисленныеОПВ = 0;
		Если ПризнакИсчисленияОПВ <> 0 Тогда
			
			ИсчисленныеОПВ = Мин(ПроцентОПВ * (БазаДляИсчисленияОПВ - ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений), МаксСуммаОПВ);
			
		КонецЕсли;
		
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Расчет ВОСМС
		ИсчисленныеВОСМС = 0;
		Если ПризнакИсчисленияВОСМС <> 0 Тогда
			
			ИсчисленныеВОСМС = Мин(ПроцентВОСМС * (БазаДляИсчисленияВОСМС - ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений), МаксСуммаВОСМС);
			
		КонецЕсли;
		
		ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		
		// Расчет ИПН 
		ИсчисленныйИПН = 0;		
		ОблагаемаяИПНСумма = (БазаДляИсчисленияИПН - ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений) - ПредоставлятьВычетОПВ * ИсчисленныеОПВ - ПредоставлятьВычетВОСМС * ИсчисленныеВОСМС - ОстатокВычета;
		Если ОблагаемаяИПНСумма > 0 Тогда
			
			ПроцентИПН = ИсходныеДанные.ПроцентИПН;
				
			// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
			Если ПериодРегистрации >= ДатаПримененияКорректировкиДохода
				И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
				
				Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
					Если ИсходныеДанные.ОбщаяСуммаНачислений >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
						 И ИсходныеДанные.ОбщаяСуммаНачислений <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
						 
						 //При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
						 Если ИсходныеДанные.ПроцентИПН = 0 Тогда
							 ПроцентИПН = 0;
						 Иначе
							 ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
						 КонецЕсли;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;		
				
			КонецЕсли;
			
			ИсчисленныйИПН = ОблагаемаяИПНСумма * ПроцентИПН;
			ИсчисленныйИПН = Окр(ИсчисленныйИПН, 2);
			
		КонецЕсли;
		
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныйИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// При расчете "от обратного" для доплат ищем такую сумму, чтобы после удержания налога/взноса получил на руки 
		// такую же сумму, какую получил бы без доплаты, + чистый размер самой доплаты		
		// ИсходныеДанные.ОбщаяСуммаНачислений - уже включает ИсходныеДанные.СуммаВключаемыхНачислений
		СуммаНаРукиСПрочихНачислений = (ИсходныеДанные.ОбщаяСуммаНачислений) - ИсчисленныеОПВ - ИсчисленныеВОСМС - ИсчисленныйИПН;
		ИскомаяСуммаНачислений = ИскомаяСуммаНачислений + СуммаНаРукиСПрочихНачислений;
		БазаДляИсчисленияОПВ   = - ИсходныеДанные.НеОблагаемыйОПВДоходЗаМесяц + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияВОСМС = - ИсходныеДанные.НеОблагаемыйВОСМСДоходЗаМесяц + ПрочиеДоходыДляВОСМС;
		БазаДляИсчисленияИПН   = - ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц; // т.к. доход за месяц полностью будет входить в результат решения уравнения
	
		// чтобы из-за того, если для доплаты не стоит компенсация ОПВ, не удержалось ОПВ с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ОПВ,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьОПВ = 0 ИЛИ ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом) И ИсчисленныеОПВ <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяОПВ = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ОПВ, и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ*ИсчисленныеОПВ;
				ПризнакИсчисленияОПВ = 0;
			КонецЕсли;
		КонецЕсли;
		
		// чтобы из-за того, если для доплаты не стоит компенсация ВОСМС, не удержалось ВОСМС с основных начислений
		// или из-за того, что рассчитываемый вид сам по себе не облагается ВОСМС,
		// включим его дополнительно как компенсируемые удержания суммой
		Если (КомпенсироватьВОСМС = 0 ИЛИ ИсходныеДанные.ОблагаетсяВОСМС = НеОблагаетсяЦеликом) И ИсчисленныеВОСМС <> 0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеВОСМС;
			КомпенсироватьУдержания = 1;
			Если ИсходныеДанные.ОблагаетсяВОСМС = НеОблагаетсяЦеликом Тогда
				// вычтем из базы ИПН суммы взносов, если предоставляется вычет по ВОСМС, и отметим, что не надо рассчитывать ВОСМС
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетВОСМС*ИсчисленныеВОСМС;
				ПризнакИсчисленияВОСМС = 0;
			КонецЕсли;
		КонецЕсли;
	//	
		Если КомпенсироватьИПН = 0 И ИсчисленныйИПН <>0 Тогда
			СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныйИПН;
			КомпенсироватьУдержания = 1;
		КонецЕсли;
		
	Иначе
		// если основное начисление (за отработанное время)
		БазаДляИсчисленияОПВ = ИсходныеДанные.ОблагаемыйОПВДоходВключаемыхНачислений + ПрочиеДоходыДляОПВ;
		БазаДляИсчисленияВОСМС = ИсходныеДанные.ОблагаемыйВОСМСДоходВключаемыхНачислений + ПрочиеДоходыДляВОСМС;
		ПрочийВычетПоИПН = ?(ИсходныеДанные.ОтОбратногоКомпенсироватьИПН, (БазаДляИсчисленияИПН + ИсходныеДанные.НеОблагаемыйИПНДоходЗаМесяц - ИсходныеДанные.ОбщаяСуммаНачислений), 0); //для включения сумм доп.вычетов.
		БазаДляИсчисленияИПН = ИсходныеДанные.ОблагаемыйИПНДоходВключаемыхНачислений + ПрочийВычетПоИПН;
		
		Если ПризнакИсчисленияОПВ = 1 Тогда
			
			// если данный вид ОПВ не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияОПВ = ?(ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом, 1, 0);
			ИсчисленныеОПВ = Мин(ПроцентОПВ * БазаДляИсчисленияОПВ, МаксСуммаОПВ);
			Если (ПризнакИсчисленияОПВ = 0 И ИсчисленныеОПВ <> 0) Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ОПВ
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ИсчисленныеОПВ;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеОПВ;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
		Если ПризнакИсчисленияВОСМС = 1 Тогда
			
			// если данный вид ВОСМС не облагается, но база для исчисления с других видов есть
			ПризнакИсчисленияВОСМС = ?(ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом, ПризнакИсчисленияВОСМС, 0);
			ИсчисленныеВОСМС = Мин(ПроцентВОСМС * БазаДляИсчисленияВОСМС, МаксСуммаВОСМС);
			ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(ИсчисленныеВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
			Если (ПризнакИсчисленияВОСМС = 0 И ИсчисленныеВОСМС <> 0) Тогда
				// вычтем из базы ИПН суммы взносов и отметим, что не надо рассчитывать ВОСМС
				БазаДляИсчисленияИПН = БазаДляИсчисленияИПН - ПредоставлятьВычетВОСМС * ИсчисленныеВОСМС;
				СуммаКомпенсируемыхУдержаний = СуммаКомпенсируемыхУдержаний + ИсчисленныеВОСМС;
				КомпенсироватьУдержания = 1;
			КонецЕсли;			
		КонецЕсли;
		
	КонецЕсли;
	
	ШагИтерации = 0;	
	МаксимальноеЧислоШагов = 100;
	
	// Определим первоначально строку ставок ИПН 
	СуммаДоходаСотрудникаДоРасчета = ИсходныеДанные.ОбщаяСуммаНачислений + ИсходныеДанные.Размер + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
	
	Если НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
		ИндексСтавки = 0;
		Для ИндексСтавки = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
			// если сумма сотрудника до расчета налогов уже выше предела, то для расчета сразу используем ставку 10%
			Если СуммаДоходаСотрудникаДоРасчета >= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаС 
				 И СуммаДоходаСотрудникаДоРасчета <= ТаблицаСтавокНалогов[ИндексСтавки].СуммаДоходаПо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// для нерезидентов используем обычную ставку налогов
		ИндексСтавки = 1;
		
	КонецЕсли;

	Пока Не РезультатПолучен И (ШагИтерации < МаксимальноеЧислоШагов) Цикл
		
		ШагИтерации = ШагИтерации + 1;
		РезультатПолучен = Истина;		
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда
			 //При введении ставки 0%, если доход меньше 25 МРП всегда ставка у нас будет 0%
			Если ИсходныеДанные.ПроцентИПН = 0 Тогда
				ПроцентИПН = 0;
			Иначе
				ПроцентИПН = ТаблицаСтавокНалогов[ИндексСтавки].СтавкаИПН / 100;
			КонецЕсли;
		Иначе
			ПроцентИПН = 0;
		КонецЕсли;

		ПроцентВОСМС = ?(ИсходныеДанные.ОтОбратногоУчитыватьВОСМС, ИсходныеДанные.ПроцентВОСМС, 0);
		
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентОПВ = ПроцентОПВ * ПризнакИсчисленияОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ);
		
		ФиксЧастьОПВ			 = ПризнакИсчисленияОПВ * (БазаДляИсчисленияОПВ * ПроцентОПВ * (1 - ПризнакПрименятьОграничениеПоДоходамОПВ) + 
														   ПризнакПрименятьОграничениеПоДоходамОПВ * МаксСуммаОПВ);
		// Вычисляем вспомогательные переменные
		РезультирующийПроцентВОСМС = ПроцентВОСМС * ПризнакИсчисленияВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС);
		
		ФиксЧастьВОСМС			   = ПризнакИсчисленияВОСМС * (БазаДляИсчисленияВОСМС * ПроцентВОСМС * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + 
														   ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС) + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;
		
		РезультирующийПроцентИПНиОПВиВОСМС = ПризнакРасчетаИПН * ПроцентИПН * (1 - ПредоставлятьВычетОПВ * РезультирующийПроцентОПВ - ПредоставлятьВычетВОСМС * РезультирующийПроцентВОСМС);
											
		ФиксЧастьИПН			= ПризнакРасчетаИПН * ПроцентИПН * (БазаДляИсчисленияИПН - ПредоставлятьВычетОПВ * ФиксЧастьОПВ - ПредоставлятьВычетВОСМС * ФиксЧастьВОСМС - ОстатокВычета);
		
		КоэффициентИПН = КомпенсироватьИПН - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентОПВ = КомпенсироватьОПВ - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезВОСМС);
		КоэффициентВОСМС = КомпенсироватьВОСМС - КомпенсироватьУдержания * (ПроцентКомпенсируемыхУдержанийТолькоВОСМС + ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ);
		ПроцентКомпенсируемыхУдержаний = ПроцентКомпенсируемыхУдержанийТолькоИПН + ПроцентКомпенсируемыхУдержанийТолькоОПВ + ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
									 	 ПроцентКомпенсируемыхУдержанийБезИПН + ПроцентКомпенсируемыхУдержанийБезОПВ + ПроцентКомпенсируемыхУдержанийБезВОСМС +
											ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + ПроцентПрочихКомпенсируемыхУдержаний;
								  		
		Числитель = (ИскомаяСуммаНачислений + 
					КоэффициентИПН * ФиксЧастьИПН +
					КоэффициентОПВ * ФиксЧастьОПВ + 
					КоэффициентВОСМС * ФиксЧастьВОСМС + 
					КомпенсироватьУдержания * СуммаКомпенсируемыхУдержаний);
					
		Знаменатель = (1 - 
	     				КоэффициентИПН * РезультирующийПроцентИПНиОПВиВОСМС -
					   	КоэффициентОПВ * РезультирующийПроцентОПВ - 
					   	КоэффициентВОСМС * РезультирующийПроцентВОСМС - 
						КомпенсироватьУдержания * ПроцентКомпенсируемыхУдержаний);
								  		
		Результат = ?(Знаменатель <> 0, Числитель / Знаменатель, 0);
		Результат = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		// Проверим граничные условия, при которых делали расчет
		РезультатОПВ = ПризнакИсчисленияОПВ * ПроцентОПВ * (БазаДляИсчисленияОПВ + Результат);

		// Проверим граничные условия, при которых делали расчет
		КомпенсированоВОСМС = ПризнакИсчисленияВОСМС * ПроцентВОСМС * (БазаДляИсчисленияВОСМС + Результат) * (1 - ПризнакПрименятьОграничениеПоДоходамВОСМС - ПризнакПрименятьОкруглениеВОСМС) + ПризнакПрименятьОграничениеПоДоходамВОСМС * МаксСуммаВОСМС + ПризнакПрименятьОкруглениеВОСМС * ИсчисленныйВОСМСПослеОкругления;

		Если ИсходныеДанные.ОтОбратногоУчитыватьОПВ Тогда
			// Наличие облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияОПВ И ИсходныеДанные.ОблагаетсяОПВ <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ОПВ исчисляются
					
					Если БазаДляИсчисленияОПВ + Результат > 0 Тогда
						Если ПризнакИсчисленияОПВ <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 1;
					Иначе
						Если ПризнакИсчисленияОПВ <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияОПВ = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ОПВ доходов
			Если РезультатПолучен Тогда
				Если РезультатОПВ > МаксСуммаОПВ Тогда
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 1;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамОПВ <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамОПВ = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоУчитыватьВОСМС Тогда
			// Наличие облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если ИсходныеДанные.ПризнакИсчисленияВОСМС И ИсходныеДанные.ОблагаетсяВОСМС <> НеОблагаетсяЦеликом Тогда 
					// для данного работнику и с данного вида начисления ВОСМС исчисляются
					
					Если БазаДляИсчисленияВОСМС + Результат > 0 Тогда
						Если ПризнакИсчисленияВОСМС <> 1 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 1;
					Иначе
						Если ПризнакИсчисленияВОСМС <> 0 Тогда
							РезультатПолучен = Ложь;
						КонецЕсли;
						ПризнакИсчисленияВОСМС = 0;
					КонецЕсли;
										
				КонецЕсли;
			КонецЕсли;
		
			// Макс сумма облагаемых ВОСМС доходов
			Если РезультатПолучен Тогда
				Если КомпенсированоВОСМС >= МаксСуммаВОСМС
					ИЛИ (КомпенсированоВОСМС = МаксСуммаВОСМС
						И ПризнакПрименятьОграничениеПоДоходамВОСМС = 1) Тогда
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;	
				// проверим наличие сотой части в исчисленном ВОСМС	
				ИначеЕсли (КомпенсированоВОСМС - Цел(КомпенсированоВОСМС)) > 0 Тогда
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ПризнакПрименятьОкруглениеВОСМС = 1;
					ИсчисленныйВОСМСПослеОкругления = Окр(КомпенсированоВОСМС, 0, РежимОкругления.Окр15как20);
					РезультатПолучен = Ложь;
				Иначе
					Если ПризнакПрименятьОграничениеПоДоходамВОСМС <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакПрименятьОграничениеПоДоходамВОСМС = 0;
					ИсчисленныйВОСМСПослеОкругления = 0;
					ПризнакПрименятьОкруглениеВОСМС = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИсходныеДанные.ОтОбратногоКомпенсироватьИПН Тогда 
			// Учтем граничные условия, возникающие при расчете ИПН
			
			// проверка на то, чтобы ИПН не был отрицательным, если обл. доходы за месяц < 0
			Если РезультатПолучен Тогда
				ОблагаемаяИПНСумма = БазаДляИсчисленияИПН + Результат - ПредоставлятьВычетОПВ * РезультатОПВ - ПредоставлятьВычетВОСМС * КомпенсированоВОСМС - ОстатокВычета;

				Если ОблагаемаяИПНСумма < 0 Тогда
					// ранее налог считался, но облагаемая сумма за месяц < 0 - на следующем шаге не считаем
					Если ПризнакРасчетаИПН <> 0 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 0;
				Иначе
					// ранее налог не считался, но теперь облагаемая сумма > 0 и налог есть с чего считать
					Если ПризнакРасчетаИПН <> 1 Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ПризнакРасчетаИПН = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Соответствие общего дохода сотрудника применямой ставке 
		Если РезультатПолучен И (ИсходныеДанные.ОтОбратногоКомпенсироватьИПН
			ИЛИ ИсходныеДанные.ОтОбратногоУчитыватьОПВ
			ИЛИ ИсходныеДанные.ОтОбратногоУчитыватьВОСМС)
			И НЕ ИсходныеДанные.ФизЛицоНерезидент Тогда
		
				
			ВремИндекс = 0;
			
			Для ВремИндекс = 0 По ТаблицаСтавокНалогов.Количество() - 1 Цикл
				
				СуммаДоходаСотрудникаПослеРасчета = ?(ОсновноеНачисление, ИсходныеДанные.ОбщаяСуммаНачислений, 0) + Результат + ИсходныеДанные.ОбщаяСуммаПрочиеДоходы;
				
				Если СуммаДоходаСотрудникаПослеРасчета >= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаС
					 И СуммаДоходаСотрудникаПослеРасчета <= ТаблицаСтавокНалогов[ВремИндекс].СуммаДоходаПо Тогда
					
					Если ВремИндекс <> ИндексСтавки Тогда
						РезультатПолучен = Ложь;
					КонецЕсли;
					ИндексСтавки = ВремИндекс;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если Не РезультатПолучен Тогда
		// вышли из цикла по превышению макс допустимого числа шагов
		Сообщить(""+СтрокаДвижений.Физлицо + "; " + ВидРасчета + ": Превышено допустимое число шагов итерации ", СтатусСообщения.Важное);
	Иначе
		// Из-за округления могут получиться лишние тиынки
		ИсчисленныйИПН = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентИПНиОПВиВОСМС + ФиксЧастьИПН, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеОПВ = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентОПВ + ФиксЧастьОПВ, ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		ИсчисленныеВОСМС = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(Результат * РезультирующийПроцентВОСМС + ФиксЧастьВОСМС, Перечисления.ПорядкиОкругления.Окр1, Перечисления.МетодыОкругления.ПоАрифметическимПравилам);
		ИсчисленныеУдержания = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(КомпенсироватьУдержания * (Результат * ПроцентПрочихКомпенсируемыхУдержаний + 
												(Результат - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийТолькоОПВ +
												(Результат - ИсчисленныйИПН) * ПроцентКомпенсируемыхУдержанийТолькоИПН +
												(Результат - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийТолькоВОСМС +
												(Результат - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезИПН +
												(Результат - ИсчисленныйИПН - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийБезОПВ +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ) * ПроцентКомпенсируемыхУдержанийБезВОСМС +
												(Результат - ИсчисленныйИПН - ИсчисленныеОПВ - ИсчисленныеВОСМС) * ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС + 
												СуммаКомпенсируемыхУдержаний), ИсходныеДанные.ПорядокОкругления, ИсходныеДанные.МетодОкругления);
		
		ОбщаяСуммаКомпенсируемыхУдержаний = ИсчисленныйИПН + ИсчисленныеОПВ + ИсчисленныеВОСМС + ИсчисленныеУдержания;
		Разность = ИскомаяСуммаНачислений - (Результат - ОбщаяСуммаКомпенсируемыхУдержаний);
		
		Если Разность > -1 И Разность < 1 Тогда
			Результат = Результат + Разность;
		КонецЕсли;
		
		Если Не ОсновноеНачисление Тогда
			Результат = Результат - ИсходныеДанные.ОбщаяСуммаНачислений; 
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ?(РезультатПолучен, Результат, 0);
	
КонецФункции  



// Получает данные для расчета "от обратного" после 2018
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратногоПосле2019(НеобходимыеДанные, 
													 Организация, 
													 ПериодРегистрации, 
													 Запрос, 
													 Сотрудник = Неопределено)

    УстановитьПривилегированныйРежим(Истина);
    
    ИмяИсточникаДокумента = "Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления";
	
	Условие = "Ссылка = &парамРегистратор";
    //ВнешнееУсловие = "Основной.Ссылка = &парамРегистратор";
	ВнешнееУсловие = "";
    Если Сотрудник <> Неопределено Тогда
    	Условие = Условие + " И Физлицо В (&Физлица)";
    	ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&Физлица)";
    	Запрос.УстановитьПараметр("Физлица", Сотрудник.ФизЛицо);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьНачислений", Запрос.Параметры.ДанныеБаза);
	Запрос.УстановитьПараметр("Организация", Организация);
    
	/////////////////////////////////////////////////////////////////////
	// Далее идут тексты запросов для расчета "от обратного"
	
	ДанныеТекущегоРегистратора = "
    |ВЫБРАТЬ  РАЗРЕШЕННЫЕ
    |	Источник.Сотрудник,
	|	Источник.НомерСтроки Как НомерСтроки,
	|	Источник.Физлицо,
	|	Источник.ВидРасчета,
	|	Источник.Размер,
	|	Источник.Результат,
	|	Источник.ОтработаноДней,
	|	Источник.ОтработаноЧасов,
	|	Источник.ДатаНачала,
	|	Источник.ДатаОкончания,
	|	Источник.СпособОтраженияВБухучете,
	|	Источник.ДополнительныеДанные, 
	|   &Организация Как Организация
    |
    |ПОМЕСТИТЬ ВТ_ДанныеТекущегоРегистратора
	|ИЗ
    |	&ТабличнаяЧастьНачислений КАК Источник
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо,
	|	Организация,
	|	ВидРасчета
    |";
    			
	Запрос.Текст = ДанныеТекущегоРегистратора;
	Запрос.Выполнить();
		
    ИмяИсточника = "ВТ_ДанныеТекущегоРегистратора";

    
    РасчетОтОбратногоПоляТекст = ""; // строка с полями запроса
    РасчетОтОбратногоСоединенияТекст = ""; // строка с соединениями в запросе		
    
    ИмяПВР = "ОсновныеНачисленияОрганизаций";
       
    // Поля, необходимые для расчета "от обратного" 
    РасчетОтОбратногоПоляТекст = "
    |ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьИПН,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьУдержания, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьУдержания,
    |Основной.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
    |Основной.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН
    |";
    			
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоход, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоход,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС,
    	|&СтавкаИПН КАК ПроцентИПН
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаИПН", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ПериодРегистрации) / 100);
    КонецЕсли;
    			
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&ФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаБезПраваНаПенсию)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаИнвалидыБессрочно) ТОГДА ЛОЖЬ
    	|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияОПВ,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.БазаДляИсчисленияОПВ, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйОПВДоход, 0) КАК БазаДляИсчисленияОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляОПВ,
    	|&РазмерОграниченияПоДоходамОПВ КАК РазмерОграниченияПоДоходамОПВ,
    	|&СтавкаОПВ КАК ПроцентОПВ
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаОПВ", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний, 0) КАК СуммаКомпенсируемыхУдержаний,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний, 0) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|";
    КонецЕсли;
    			
    РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйИПНДоход, 0) КАК НеОблагаемыйИПНДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйОПВДоход, 0) КАК НеОблагаемыйОПВДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйИПНДоходВключаемыхНачислений, 0) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйОПВДоходВключаемыхНачислений, 0) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОбщаяСуммаНачислений, 0) КАК ОбщаяСуммаНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ПрочиеДоходы, 0) КАК ОбщаяСуммаПрочиеДоходы,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.СуммаВключаемыхНачислений, 0) КАК СуммаВключаемыхНачислений,
    |ЕСТЬNULL(ФизлицаНеРезиденты.ФизЛицоНерезидент, ЛОЖЬ) КАК ФизЛицоНерезидент,
   	|ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ДополнительныеДанные, 0) КАК РасчетОтОбратногоДополнительныеДанные
    |";
    
    // Далее идут тексты запросов по аналогии с функциями ПолучитьДанныеДляРасчетаИПН() и ПолучитьДанныеДляРасчетаОПВ().
    // Отличие по всем текстам в том, что в ПолучитьДанныеДляРасчетаИПН() используется &СписокФизЛиц,
    // а в расчете "от обратного" &парамРасчетОтОбратногоСписокФизЛиц.
    // В данном расчете предполагается, что расчет ИПН и ОПВ будет производится с установленным
    // в учетной политике по налоговому учету флажке ОтражениеПоПериодуРегистрации - все данные выбираются по ПериодРегистрации

    Запрос.УстановитьПараметр("ПериодРегистрации", 			ПериодРегистрации);
    Запрос.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("ПустаяДата", 				'00010101');
    Запрос.УстановитьПараметр("ОбособленноеПодразделение", 	Организация);
    Запрос.УстановитьПараметр("ГоловнаяОрганизация", 		ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
    
    Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
    	Запрос.УстановитьПараметр("Налогоплательщик", 		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация, Организация, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
    Иначе
    	Запрос.УстановитьПараметр("Налогоплательщик", 		Организация);
    КонецЕсли;
    
    // Список видов расчета "от обратного"
    ВидыРасчетаОтОбратногоТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ 
    |	Основной.ВидРасчета
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
	|	 Основной.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
    |";
    	
    Запрос.Текст = ВидыРасчетаОтОбратногоТекст;
    Запрос.УстановитьПараметр("ВидыРасчетаОтОбратного", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));

    // Периоды
    // Таблица список физлиц, по которым необходимо выполнить расчет налога или взносов
    // Поля:
    //		Физлицо
    СписокФизЛицТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ФизЛицо
    |
    |ПОМЕСТИТЬ ВТ_СписокФизЛиц
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";
    			
    Запрос.Текст = СписокФизЛицТекст;
    Запрос.Выполнить();
    СписокФизЛицТекст = "ВТ_СписокФизЛиц";
    
    // Периоды
    // Таблица список периодов-физлиц, по которым необходимо выполнить расчет налога или взноса
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Основной.ФизЛицо,
    |	&ПериодРегистрации КАК Период
    |
    |ПОМЕСТИТЬ ВТ_ПериодыРасчетаОтОбратного
    |ИЗ
    |	" + СписокФизЛицТекст + " КАК Основной
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";		   
    Запрос.Текст = ПериодыТекст;
    Запрос.Выполнить();
    ПериодыТекст = "ВТ_ПериодыРасчетаОтОбратного";
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаНеРезиденты = "ВЫБРАТЬ РАЗЛИЧНЫЕ
     |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо,
     |	ИСТИНА КАК ФизЛицоНерезидент
     |ПОМЕСТИТЬ ВТФизлицаНеРезиденты
     |ИЗ
     |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
     |			&ПериодРегистрации,
     |			ФизЛицо В
     |				(ВЫБРАТЬ
     |					СписокФизЛиц.ФизЛицо
     |				ИЗ
     |					ВТ_СписокФизЛиц КАК СписокФизЛиц)) КАК ГражданствоФизЛиц
     |ГДЕ
     |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
     |
     |ИНДЕКСИРОВАТЬ ПО
     |	ГражданствоФизЛиц.ФизЛицо";
	
	Запрос.Текст = ФизлицаНеРезиденты;
	Запрос.Выполнить();
	ФизлицаНеРезидентыТекст = "ВТФизлицаНеРезиденты";
	
	// Списки видов расчета, категория расчета которых меньше текущей  (т.е. уже посчитанные)
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПВР.Ссылка
    |ИЗ
    |	ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |ГДЕ
    |	ПВР.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    |	И ПВР.СпособРасчета НЕ В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.УстановитьПараметр("УжеРассчитанныеВидыРасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
    // ОсновныеИДополнительныеНачисления
    // Поля:
    //		ФизЛицо
    //		ВидРасчета
    //		Результат
    //	Описание:
    // Выбирает начисления за период регистрации по физлицам, для которых выполняется расчет "от обратного"
    ОсновныеИДополнительныеНачисленияТекст = "
    |ВЫБРАТЬ
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета,
    |	СУММА(ОсновныеНачисления.Результат) КАК Результат,
    |	СУММА(ОсновныеНачисления.ДополнительныеДанные) КАК ДополнительныеДанные,
    |	СУММА(ОсновныеНачисления.Результат) КАК СуммаНачислений,
    |	СУММА(ОсновныеНачисления.ПрочиеДоходы) КАК ПрочиеДоходы
    |
    |ПОМЕСТИТЬ ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		ОсновныеНачисления.ФизЛицо,
    |		ОсновныеНачисления.ВидРасчета,
    |		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
    |		ОсновныеНачисления.Результат,
    |		ОсновныеНачисления.ДополнительныеДанные,
    |		0 КАК ПрочиеДоходы
    |	ИЗ
    |		" + ИмяИсточникаДокумента + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
    |		ВЫБОР
    |			КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
    |				ТОГДА ОсновныеНачисления.Ссылка.Проведен
    |			ИНАЧЕ ИСТИНА
    |		КОНЕЦ
    |		И ВЫБОР
    |			КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |				ТОГДА ОсновныеНачисления.Ссылка.Организация
    |			ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
    |		КОНЕЦ = &парамГоловнаяОрганизация
    |		И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
    |		И (ОсновныеНачисления.Ссылка <> &парамРегистратор)
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
    |		ОсновныеНачисления.ФизЛицо,
    |		ОсновныеНачисления.ВидРасчета,
    |		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
    |		ОсновныеНачисления.Результат,
    |		ОсновныеНачисления.ДополнительныеДанные,
    |		0 КАК ПрочиеДоходы
    |	ИЗ
    |		" + ИмяИсточника + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
    |		ВЫБОР
    |			КОГДА ОсновныеНачисления.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |				ТОГДА ОсновныеНачисления.Организация
    |			ИНАЧЕ ОсновныеНачисления.Организация.ГоловнаяОрганизация
    |		КОНЕЦ = &парамГоловнаяОрганизация
	|		И ОсновныеНачисления.ВидРасчета В (&УжеРассчитанныеВидыРасчета)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОсновныеНачисления.ФизЛицо,
	|		ОсновныеНачисления.ВидРасчета,
	|		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
	|		0,
	|		0,
	|		ОсновныеНачисления.СуммаДохода
	|	ИЗ
	|		Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения.СведенияОДоходах КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
	|				ТОГДА ОсновныеНачисления.Ссылка.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ВЫБОР
	|			КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
	|				ТОГДА ОсновныеНачисления.Ссылка.Организация
	|			ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &парамГоловнаяОрганизация
	|		И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|		И (ОсновныеНачисления.Ссылка <> &парамРегистратор
	|			ИЛИ (ОсновныеНачисления.Ссылка = &парамРегистратор
	|					И ОсновныеНачисления.ВидРасчета В (&УжеРассчитанныеВидыРасчета)))
    |	) КАК ОсновныеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.ВидРасчета
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |";
    Запрос.Текст = ОсновныеИДополнительныеНачисленияТекст;
    Запрос.Выполнить();
    ОсновныеИДополнительныеНачисленияТекст = "ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного";
	
#Область КомпенсироватьИПН 	
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		
		ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	" + ПериодыТекст + " КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_Периоды.Физлицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	" + ПериодыТекст + " КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_Периоды.Физлицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Вычеты.МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|";
		
		Запрос.Текст = ВычетыФизЛицТекст;
		Запрос.Выполнить();
		
		РасчетныеПоказателиТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Периоды.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыВГодах
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
			|ИЗ
			|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода,
			|	ВТ_ПериодыРасчетныхПоказателей.Физлицо,
			|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
			|	РегламентированныеРасчетныеПоказатели.РазмерМРП
			|ПОМЕСТИТЬ ВТ_РазмерыМЗП
			|ИЗ
			|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
			|";
			
		Запрос.Текст = РасчетныеПоказателиТекст;
		Запрос.Выполнить();
		
		РазмерыПрочихВычетовТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
			|	ВТ_НастройкиВычетов.ФизическоеЛицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	ПрочиеВычетыФизическихЛицИПН.Размер
			|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
			|ИЗ
			|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
			|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
			|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
			|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
			|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
			|";
			
		Запрос.Текст = РазмерыПрочихВычетовТекст;
		Запрос.Выполнить();
		
		НастройкиИРазмерыВычетовТекст = 
		   "ВЫБРАТЬ
			|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
			|	ВТ_НастройкиВычетов.ФизическоеЛицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	ВТ_НастройкиВычетов.Приоритет,
			|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
			|	ВТ_НастройкиВычетов.ВидВзносов,
			|	ВТ_НастройкиВычетов.ПределВычета,
			|	ВТ_НастройкиВычетов.ПериодПредоставления,
			|	ВТ_НастройкиВычетов.МесяцВводаВычета,
			|	ВТ_РазмерыМЗП.РазмерМЗП,
			|	ВТ_РазмерыМЗП.РазмерМРП,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
			|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
			|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
			|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМРП, 0)
			|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
			|				КОНЕЦ
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			|			ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РазмерВычета,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
			|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
			|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
			|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМРП, 0)
			|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммовойПределВычета
			|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
			|ИЗ
			|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗП КАК ВТ_РазмерыМЗП
			|		ПО ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыМЗП.Физлицо
			|			И (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗП.ГодНалоговогоПериода)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
			|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
			|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
			|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета";
		
		Запрос.Текст = НастройкиИРазмерыВычетовТекст;
		Запрос.Выполнить();
		
		НакопленныеДанныеПоВычетамТекст = 
			"ВЫБРАТЬ
			|	Периоды.Период КАК Период,
			|	Периоды.ФизЛицо КАК ФизЛицо,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|				ТОГДА РаботникиОрганизации.Период
			|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|		КОНЕЦ) КАК ДатаПриема
			|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
			|ИЗ
			|	" + ПериодыТекст + " КАК Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
			|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
			|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
			|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
			|
			|СГРУППИРОВАТЬ ПО
			|	Периоды.Период,
			|	Периоды.ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанные
			|ИЗ
			|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &КонецПериодаРегистрации, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
			|		ПО ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
			|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
			|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
			|И (ВЫБОР
			|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
			|			КОНЕЦ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	0,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
			|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
			|		ИНАЧЕ 0
			|	КОНЕЦ
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
			|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
			|			И ВТ_Периоды.Физлицо = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ПО (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
			|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
			|ИЗ
			|	ВТ_НакопленныеДанные КАК ВТ_НакопленныеДанныеПоВычетам
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета";
			
		Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
		Запрос.Выполнить();

		ПрименяемыеВычетыТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВычета КАК ВидВычета,
			|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
			|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета КАК ПредоставлениеВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов КАК ВидВзносов,
			|	ВТ_НастройкиИРазмерыВычетов.ПределВычета КАК ПределВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления КАК ПериодПредоставления,
			|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета КАК МесяцВводаВычета,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП КАК РазмерМЗП,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета КАК РазмерВычета,
			|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета КАК СуммовойПределВычета,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
			|				ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_НастройкиИРазмерыВычетов.ПределВычета > 0
			|						ТОГДА ВЫБОР
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РазрешенныйВычетВТекущемПериоде,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ОстатокВычетаЗаПрошлыеМесяцы
			|ПОМЕСТИТЬ ВТ_ДанныеДляРасчетаВычетов
			|ИЗ
			|	ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
			|		ПО ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
			|			И ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
			|			И ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ВТ_ДанныеДляРасчетаВычетов.РазрешенныйВычетВТекущемПериоде + ВТ_ДанныеДляРасчетаВычетов.ОстатокВычетаЗаПрошлыеМесяцы) КАК РазрешенныеНалоговыеВычеты,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетОПВ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетВОСМС
			|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
			|ИЗ
			|	ВТ_ДанныеДляРасчетаВычетов КАК ВТ_ДанныеДляРасчетаВычетов
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо";
			
		Запрос.Текст = ПрименяемыеВычетыТекст;
		Запрос.Выполнить();
		
		ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычеты";
	
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		СуммаДоходаОборот
    	//		СуммаВычетаОборот
     	//		ОблагаемыйДоходЗаМесяц
    	//		ПрочиеДоходы
	   	//
    	//	Описание:
    	// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
    			
    	// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    	// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    	// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем. 
    	// Т.к. расчет "от обратного" поддерживается только при учетной политикой с ОтражениемПоПериодуРегистрации,
    	// то в регистрах Период, ПериодРегистрации и МесяцНалоговогоПериода всегда совпадают, поэтому 
    	// устанавливаем отборы по Периоду, т.к. по нему система автоматически создает индекс.
    	ДоходыТекст = 
	    	"ВЫБРАТЬ
	    	|	ИПНОбороты.Физлицо КАК ФизЛицо,
	    	|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	    	|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	    	|	СУММА(ВЫБОР
	    	|			КОГДА ИПНОбороты.НачисленоВТекущейОрганизации
	    	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
	    	|			ИНАЧЕ 0
	    	|		КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
	    	|	СУММА(ИПНОбороты.ПрочиеДоходы) КАК ПрочиеДоходы,
	    	|	СУММА(ИПНОбороты.ПримененнаяЛьгота) КАК ПримененнаяЛьгота
	    	|
	    	|ПОМЕСТИТЬ ВТ_ДоходыРасчетаОтОбратного
	    	|ИЗ
	    	|	(ВЫБРАТЬ
	    	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	    	|		ВЫБОР 
	    	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	    	|				ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) 
	    	|			ИНАЧЕ 0 
	    	|		КОНЕЦ КАК СуммаДоходаОборот,
	    	|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
	    	|		СУММА(ВЫБОР
	    	|				КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
			|					И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	    	|					ТОГДА ИПНСведенияОДоходах.СуммаДохода - ИПНСведенияОДоходах.СуммаВычета
	    	|				ИНАЧЕ 0
	    	|			КОНЕЦ) КАК ПрочиеДоходы,
	    	|		ВЫБОР
	    	|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	    	|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
	    	|				ТОГДА ЛОЖЬ
	    	|			ИНАЧЕ ИСТИНА
	    	|		КОНЕЦ КАК НачисленоВТекущейОрганизации,
	    	|		СУММА(ИПНСведенияОДоходах.ПримененнаяЛьгота) КАК ПримененнаяЛьгота
	    	|	ИЗ
	    	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	    	|
	    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|			ПО ИПНСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
	    	|	
	    	|	ГДЕ
	    	|		ИПНСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	    	|		И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	    	|		И ИПНСведенияОДоходах.Регистратор <> &парамРегистратор
	    	|		И НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
	    	|		И ИПНСведенияОДоходах.Активность
	    	|	
	    	|	СГРУППИРОВАТЬ ПО
	    	|		ИПНСведенияОДоходах.ФизЛицо,
	    	|		ИПНСведенияОДоходах.СпособНалогообложения,
	    	|		ИПНСведенияОДоходах.Регистратор) КАК ИПНОбороты
	    	|СГРУППИРОВАТЬ ПО
    		|	ИПНОбороты.Физлицо";
			
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыРасчетаОтОбратного";
    			
    			
    	БазаДляИсчисленияИПНТекст = "
	    	|ВЫБРАТЬ
	    	|	СписокФизЛиц.ФизЛицо,
	    	|	ЕСТЬNULL(Доходы.СуммаДоходаОборот, 0) - ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0) КАК ОблагаемыйДоход,
	    	|	ЕСТЬNULL(Доходы.ПрочиеДоходы, 0) КАК ПрочиеДоходы,
	    	|	ЕСТЬNULL(Доходы.ПримененнаяЛьгота, 0) КАК ПримененнаяЛьгота,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС
	    	|
	    	|ПОМЕСТИТЬ ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного
	    	|ИЗ
	    	|	" + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|
	    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК Доходы
	    	|		ПО СписокФизЛиц.ФизЛицо = Доходы.ФизЛицо
	    	|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
			|		ПО СписокФизЛиц.ФизЛицо = ПрименяемыеВычеты.ФизическоеЛицо
			|
	    	|ИНДЕКСИРОВАТЬ ПО
	    	|	СписокФизЛиц.ФизЛицо
	    	|";
    	
    	Запрос.Текст = БазаДляИсчисленияИПНТекст;
    	Запрос.Выполнить();
    	БазаДляИсчисленияИПНТекст = "ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + БазаДляИсчисленияИПНТекст;

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
	    	|ЛЕВОЕ СОЕДИНЕНИЕ " + БазаДляИсчисленияИПНТекст + " КАК РасчетОтОбратногоДанныеИПН
	    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
	    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
	    	|";

		КонецЕсли;
#КонецОбласти		
            
#Область КомпенсироватьОПВ
	Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    			
    	СписокГруппИнвалидности = Новый СписокЗначений;
    	СписокГруппИнвалидности.Добавить("I");
    	СписокГруппИнвалидности.Добавить("II");
    			
    	Запрос.УстановитьПараметр("СписокГруппИнвалидности",  СписокГруппИнвалидности);
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
    	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|	СУММА(ВЫБОР
		|			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаДляИсчисленияОПВ,
    	|	СУММА(ВЫБОР
    	|			КОГДА ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|				И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
    	|			ИНАЧЕ 0
    	|		КОНЕЦ) КАК ПрочиеДоходы
    	|
    	|ПОМЕСТИТЬ ВТ_ДоходыОПВРасчетаОтОбратного
    	|ИЗ
    	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ОПВСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|ГДЕ
    	|	ОПВСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
    	|	И ОПВСведенияОДоходах.Налогоплательщик = &Налогоплательщик
    	|	И ОПВСведенияОДоходах.Активность
    	|	
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо";
    	
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыОПВРасчетаОтОбратного";

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц. Поэтому запроса к ОПВРасчетыСФондами вообще не требуется.

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказатели.РазмерМЗП * 50 КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НачалоГода) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", 0);
    	КонецЕсли;

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаБезПраваНаПенсиюТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
    			
    	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
    	Запрос.УстановитьПараметр("ФизЛицаБезПраваНаПенсию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаПенсионеры
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц достигших пенсионный возраст
    	ФизлицаПенсионерыТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОПенсионномОбеспеченииФизЛиц
    	|
    	|ГДЕ
    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
    		
    	Запрос.Текст = ФизлицаПенсионерыТекст;
    	Запрос.УстановитьПараметр("ФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	// ФизлицаИнвалидыБессрочно
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыБессрочноТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
    	|	И СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&СписокГруппИнвалидности)
    	|	И СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    	|";
    		
    	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
    	Запрос.УстановитьПараметр("ФизЛицаИнвалидыБессрочно", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК РасчетОтОбратногоДанныеОПВ
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеОПВ.ФизЛицо
    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    	|";

   КонецЕсли;
   
 #КонецОбласти  
 
#Область КомпенсироватьУдержания
   Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
           
    	// для списка погашамых удержаний определим общую сумму
    	Запрос.УстановитьПараметр("СпособыРасчетаФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());

    	// ПлановыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидРасчета
    	//		ВидСтроки
    	//		Размер
    	//	Описание:
    	// Выбирает плановые и фактические удержания за период регистрации для физлиц, по которым производится расчет "от обратного".
    	// Фактические удержания берем только те, что введены как разовые, чтобы не задублировать плановые, если уже создан и проведен
    	// документ "Расчет ИПН, ОПВ и удержаний" и заново пересчитывают "от обратного"
    		
    	ПлановыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.Период < &ПериодРегистрации ТОГДА &ПериодРегистрации
    	|		ИНАЧЕ ПлановыеУдержания.Период
    	|	КОНЕЦ КАК ДатаНачала,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
    	|				И ПлановыеУдержания.ПериодЗавершения <= &КонецПериодаРегистрации
    	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
    	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации))
    	|	КОНЕЦ КАК ДатаОкончания
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ПлановыеУдержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
    	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
    	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
    	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
    	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
    	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
    	|			И СледующиеПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|
    	|ГДЕ
    	|	ПлановыеУдержания.Организация = &ГоловнаяОрганизация
    	|	И ПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|	И ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
    	|				И ПлановыеУдержания.ПериодЗавершения < &ПериодРегистрации ТОГДА ПлановыеУдержания.ДействиеЗавершения
    	|		ИНАЧЕ ПлановыеУдержания.Действие
    	|	  КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
    	|	И ПлановыеУдержания.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|	ПлановыеУдержания.Период,
    	|	ПлановыеУдержания.ПериодЗавершения
    	|
    	|ИМЕЮЩИЕ
    	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации)) >= &ПериодРегистрации
    	|";
    	Запрос.Текст = ПлановыеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеУдержанияТекст = "ВТ_ПлановыеУдержанияРасчетаОтОбратного";
       
    	// В качестве фактических берем только те, что зарегистрированы как 
    	// разовые, т.к. все остальные будут взяты из плановых
    	ПлановыеИФактическиеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
    	|	Удержания.ВидСтроки,
    	|	СУММА(Удержания.Результат) КАК Результат,
    	|	СУММА(Удержания.Размер) КАК Размер
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|			ПлановыеУдержания.ФизЛицо,
    	|			ПлановыеУдержания.ВидРасчета,
    	|			""ПлановыеУдержания"" КАК ВидСтроки,
    	|			0 КАК Результат,
    	|			ПлановыеУдержания.Размер
    	|		ИЗ
    	|			" + ПлановыеУдержанияТекст + " КАК ПлановыеУдержания
    	|
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|	
    	|	ВЫБРАТЬ
    	|		Удержания.ФизЛицо,
    	|		Удержания.ВидРасчета,
    	|		""ФактическиеУдержания"" КАК ВидСтроки,
    	|		Удержания.Результат,
    	|		Удержания.Размер
    	|	ИЗ
    	|		Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
    	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
    	|			ПО Удержания.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация		
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО Удержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ГДЕ
    	|		Удержания.Ссылка.Проведен
    	|		И ВЫБОР
    	|			КОГДА Удержания.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    	|				ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
    	|				ТОГДА Удержания.Ссылка.Организация
    	|			ИНАЧЕ Удержания.Ссылка.Организация.ГоловнаяОрганизация
    	|		КОНЕЦ = &ГоловнаяОрганизация 
    	|		И Удержания.Ссылка.ПериодРегистрации = &ПериодРегистрации
    	|		И Удержания.Результат <> 0
    	|	) КАК Удержания
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета,
    	|	Удержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Удержания.ФизЛицо
    	|";
    	Запрос.Текст = ПлановыеИФактическиеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеИФактическиеУдержанияТекст = "ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного";
           		
    	// КомпенсируемыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидУдержания
    	//		Результат
    	//		Размер
    	//	Описание:
    	// Рассчитывает результат по каждому компенсируемому виду удержаний 
    	КомпенсируемыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета КАК ВидРасчетаОтОбратного,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета КАК ВидУдержания,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки,
    	|
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ФактическиеУдержания""
    	|					ТОГДА ПлановыеИФактическиеУдержания.Результат
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета В (&СпособыРасчетаФиксированнойСуммой)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) 
    	|	+
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) / 100 * 
    	|	СУММА(ЕСТЬNULL(ОсновныеИДополнительныеНачисления.Результат, 0)) КАК СуммаКомпенсируемыхУдержаний,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|
    	|ПОМЕСТИТЬ ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	" + ИмяИсточника + " КАК Основной
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПлановыеИФактическиеУдержанияТекст + " КАК ПлановыеИФактическиеУдержания
    	|		ПО Основной.ФизЛицо = ПлановыеИФактическиеУдержания.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
    	|		ПО ПлановыеИФактическиеУдержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
    	|		   И ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|		   И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    	|		ПО ПлановыеИФактическиеУдержания.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо
    	|		   И БазовыеВидыРасчета.ВидРасчета = ОсновныеИДополнительныеНачисления.ВидРасчета
    	|
    	|ГДЕ
       	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
		|	" + ВнешнееУсловие + " 
		|
    	|СГРУППИРОВАТЬ ПО
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета
    	|";
    	Запрос.Текст = КомпенсируемыеУдержанияТекст;
    	Запрос.Выполнить();
    	КомпенсируемыеУдержанияТекст = "ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного";
           		
    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    	|						КомпенсируемыеУдержания.НомерСтроки,
    	|						СУММА(КомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний) КАК СуммаКомпенсируемыхУдержаний,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПНиОПВ) КАК ПроцентКомпенсируемыхУдержанийБезИПНиОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|					ИЗ
    	|						" + КомпенсируемыеУдержанияТекст + " КАК КомпенсируемыеУдержания
    	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка КАК ВидРасчетаОтОбратного,
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|												ИЗ
    	|													ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    	|							ПО КомпенсируемыеУдержания.ВидРасчетаОтОбратного = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчетаОтОбратного 
    	|							   И КомпенсируемыеУдержания.ВидУдержания = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|					СГРУППИРОВАТЬ ПО 
    	|						КомпенсируемыеУдержания.НомерСтроки
    	|					) КАК РасчетОтОбратногоКомпенсируемыеУдержания
    	|	ПО Основной.НомерСтроки = РасчетОтОбратногоКомпенсируемыеУдержания.НомерСтроки
    	|";
    КонецЕсли;
	
#КонецОбласти	
	

#Область ПрочиеНачисления	
    // Разделим прочие начисления на включаемые внутрь расчета "от обратного" и начисляемые "сверху"
    РасчетОтОбратногоПрочиеНачисленияТекст = "
    |ВЫБРАТЬ
    |	Основной.НомерСтроки,
    |	СУММА(ОсновныеИДополнительныеНачисления.СуммаНачислений) КАК ОбщаяСуммаНачислений,
    |	СУММА(ОсновныеИДополнительныеНачисления.ПрочиеДоходы) КАК ПрочиеДоходы,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL) 
    |				ТОГДА ОсновныеИДополнительныеНачисления.СуммаНачислений
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК СуммаВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |				ТОГДА ОсновныеИДополнительныеНачисления.ДополнительныеДанные
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ДополнительныеДанные
    |
    |ПОМЕСТИТЬ ВТ_ПрочиеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    |		ПО Основной.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо 
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |							Ссылка КАК Ссылка,
    |							ВидРасчета КАК ВидРасчета
    |				  	  ИЗ
    |							ПланВидовРасчета." + ИмяПВР + ".ВключаемыеВРасчетОтОбратногоВидыНачислений 
    |
    |					  ОБЪЕДИНИТЬ
    |
    |					  // чтобы учитывать предоставляемые вычеты по ИПН только один раз в месяце
    |					  // даже если были несколько строк расчетов 'от обратного' в разные моменты в месяце,
    |					  // включаем прочие виды 'от обратного' в качестве включаемых для данного
    |					  ВЫБРАТЬ
    |							Основной.ВидРасчета КАК Ссылка,
    |							ПВР.Ссылка КАК ВидРасчета
    |					  ИЗ
    |							" + ИмяИсточника + " КАК Основной
    |							ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |								ПО ПВР.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |					  ГДЕ
    |							 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |							И Основной.ВидРасчета.ЗачетОтработанногоВремени
	|							" + ВнешнееУсловие + " 
    |                   ) КАК ВключаемыеВРасчетОтОбратногоВидыНачислений
    |		ПО Основной.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.Ссылка
    |			   И ОсновныеИДополнительныеНачисления.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета
    |ГДЕ
	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
     |
    |СГРУППИРОВАТЬ ПО
    |	Основной.НомерСтроки
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Основной.НомерСтроки";
    Запрос.Текст = РасчетОтОбратногоПрочиеНачисленияТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоПрочиеНачисленияТекст = "ВТ_ПрочиеНачисленияРасчетаОтОбратного";

#КонецОбласти

#Область ДанныеТекущегоРегистратора
    // определим облагаемые ИПН и ОПВ доходы, начисленные текущий регистратором,
    // т.к. их еще нет в ИПНСведенияОДоходах и ОПВСведенияОДоходах
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "
    |ВЫБРАТЬ
    |	Начисления.ФизЛицо,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |	  	КОНЕЦ) КАК ОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход
    |
    |ПОМЕСТИТЬ ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		Основной.ФизЛицо,
    |		Основной.ВидРасчета,
    |		Основной.Результат
    |	ИЗ
    |		" + ИмяИсточника + " КАК Основной
    |
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |			ПО Основной.ФизЛицо = СписокФизЛиц.ФизЛицо
    |	ГДЕ
    |		Основной.ВидРасчета В (&УжеРассчитанныеВидыРасчета)
    |	) КАК Начисления
    |
    |СГРУППИРОВАТЬ ПО
    |	Начисления.ФизЛицо
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Начисления.ФизЛицо";
    Запрос.Текст = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного";
   
   
 #КонецОбласти
 
    // общие для любого вида компенсируемых удержаний данные
    РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодРегистрации, Организация = &ОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
    |	ПО ИСТИНА
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоПрочиеНачисленияТекст + " КАК РасчетОтОбратногоПрочиеНачисления
    |	ПО Основной.НомерСтроки = РасчетОтОбратногоПрочиеНачисления.НомерСтроки
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст + " КАК РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора
    |	ПО Основной.ФизЛицо = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ФизЛицо
    |	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |
    |// определим компенсируемые удержания для каждого вида расчета от обратного
    |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |		КомпенсируемыеУдержания.Ссылка КАК ВидРасчета,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьИПН,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьОПВ,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета НЕ В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьУдержания
    |	ИЗ
    |		ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеУдержания
    |	ГДЕ
    |		КомпенсируемыеУдержания.Ссылка В (&ВидыРасчетаОтОбратного)
    |	СГРУППИРОВАТЬ ПО
    |		КомпенсируемыеУдержания.Ссылка) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    |ПО Основной.ВидРасчета = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаНеРезидентыТекст + " КАК ФизлицаНеРезиденты
    |	ПО ФизлицаНеРезиденты.ФизЛицо = Основной.ФизЛицо
    |
    |";
           	
    
    СтруктураТекстЗапроса = Новый Структура("РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст", 
    										 РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст);
    
    Возврат СтруктураТекстЗапроса;
	
КонецФункции 

// Получает данные для расчета "от обратного" после 2020
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
//	НеобходимыеДанные - Структура с элементами 
//			ОтОбратногоКомпенсироватьИПН,
//			ОтОбратногоКомпенсироватьОПВ,
//			ОтОбратногоКомпенсироватьУдержания,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//
// Возвращает результат запроса
Функция ПолучитьДанныеДляРасчетаОтОбратногоПосле2020(НеобходимыеДанные, 
													 Организация, 
													 ПериодРегистрации, 
													 Запрос, 
													 Сотрудник = Неопределено)

    УстановитьПривилегированныйРежим(Истина);
    
    ИмяИсточникаДокумента = "Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления";
	
	Условие = "Ссылка = &парамРегистратор";
    //ВнешнееУсловие = "Основной.Ссылка = &парамРегистратор";
	ВнешнееУсловие = "";
    Если Сотрудник <> Неопределено Тогда
    	Условие = Условие + " И Физлицо В (&Физлица)";
    	ВнешнееУсловие = ВнешнееУсловие + " И Основной.Физлицо В (&Физлица)";
    	Запрос.УстановитьПараметр("Физлица", Сотрудник.ФизЛицо);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТабличнаяЧастьНачислений", Запрос.Параметры.ДанныеБаза);
	Запрос.УстановитьПараметр("Организация", Организация);
    
	/////////////////////////////////////////////////////////////////////
	// Далее идут тексты запросов для расчета "от обратного"
	
	ДанныеТекущегоРегистратора = "
    |ВЫБРАТЬ  РАЗРЕШЕННЫЕ
    |	Источник.Сотрудник,
	|	Источник.НомерСтроки Как НомерСтроки,
	|	Источник.Физлицо,
	|	Источник.ВидРасчета,
	|	Источник.Размер,
	|	Источник.Результат,
	|	Источник.ОтработаноДней,
	|	Источник.ОтработаноЧасов,
	|	Источник.ДатаНачала,
	|	Источник.ДатаОкончания,
	|	Источник.СпособОтраженияВБухучете,
	|	Источник.ДополнительныеДанные, 
	|   &Организация Как Организация
    |
    |ПОМЕСТИТЬ ВТ_ДанныеТекущегоРегистратора
	|ИЗ
    |	&ТабличнаяЧастьНачислений КАК Источник
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо,
	|	Организация,
	|	ВидРасчета
    |";
    			
	Запрос.Текст = ДанныеТекущегоРегистратора;
	Запрос.Выполнить();
		
    ИмяИсточника = "ВТ_ДанныеТекущегоРегистратора";

    
    РасчетОтОбратногоПоляТекст = ""; // строка с полями запроса
    РасчетОтОбратногоСоединенияТекст = ""; // строка с соединениями в запросе		
    
    ИмяПВР = "ОсновныеНачисленияОрганизаций";
       
    // Поля, необходимые для расчета "от обратного" 
    РасчетОтОбратногоПоляТекст = "
    |ЕСТЬNULL(УчетнаяПолитикаНУ.ОтражениеПоПериодуРегистрации, ЛОЖЬ) КАК ОтражениеПоПериодуРегистрации,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьИПН,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьВОСМС, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьВОСМС,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьОПВ, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьОПВ,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьИПН, 0) > 0 
    |			ИЛИ ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьВОСМС, 0) > 0
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоУчитыватьВОСМС,
    |ВЫБОР 
    |	КОГДА ЕСТЬNULL(КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.КомпенсироватьУдержания, 0) > 0 
    |		ТОГДА ИСТИНА 
    |	ИНАЧЕ ЛОЖЬ 
    |КОНЕЦ КАК ОтОбратногоКомпенсироватьУдержания,
    |Основной.ВидРасчета.ОблагаетсяОПВ КАК ОблагаетсяОПВ,
    |Основной.ВидРасчета.ОблагаетсяИПН КАК ОблагаетсяИПН,
    |Основной.ВидРасчета.ОблагаетсяВОСМС КАК ОблагаетсяВОСМС
    |";
    			
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ОблагаемыйДоход, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйИПНДоход, 0) КАК ОблагаемыйДоход,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеИПН.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС,
    	|&СтавкаИПН КАК ПроцентИПН
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаИПН", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ПериодРегистрации) / 100);
    КонецЕсли;
    			
    Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&ФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаБезПраваНаПенсию)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаИнвалидыБессрочно) ТОГДА ЛОЖЬ
    	|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияОПВ,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.БазаДляИсчисленияОПВ, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйОПВДоход, 0) КАК БазаДляИсчисленияОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеОПВ.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляОПВ,
    	|&РазмерОграниченияПоДоходамОПВ КАК РазмерОграниченияПоДоходамОПВ,
    	|&СтавкаОПВ КАК ПроцентОПВ
    	|";
    		
    	Запрос.УстановитьПараметр("СтавкаОПВ", ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Организация, Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы, ПериодРегистрации) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоУчитыватьВОСМС Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ВЫБОР
    	|	КОГДА Основной.ФизЛицо В (&ФизлицаПенсионеры)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаНеПодлежитСоциальномуМедицинскомуСтрахованию)
    	|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаУчастникиВОВ)
		|		  ИЛИ Основной.ФизЛицо В (&ФизЛицаИнвалиды) ТОГДА ЛОЖЬ
		|	ИНАЧЕ ИСТИНА
    	|КОНЕЦ КАК ПризнакИсчисленияВОСМС,				
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеВОСМС.БазаДляИсчисленияВОСМС, 0) + ЕСТЬNULL(РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ОблагаемыйВОСМСДоход, 0) КАК БазаДляИсчисленияВОСМС,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеВОСМС.ПрочиеДоходы, 0) КАК ПрочиеДоходыДляВОСМС,
    	|ЕСТЬNULL(РасчетОтОбратногоДанныеВОСМС.ВОСМСДругогоРаботодателя, 0) КАК ВОСМСДругогоРаботодателя,
    	|&РазмерОграниченияПоДоходамВОСМС КАК РазмерОграниченияПоДоходамВОСМС,
		|&СтавкаВОСМС КАК ПроцентВОСМС
    	|";
		
    	Запрос.УстановитьПараметр("СтавкаВОСМС", ПроцедурыНалоговогоУчета.ПолучитьСтавкуОСМС(ПериодРегистрации, "Взносы", , Организация) / 100);
    КонецЕсли;

    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
    	РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний, 0) КАК СуммаКомпенсируемыхУдержаний,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоИПН, 0) КАК ПроцентКомпенсируемыхУдержанийТолькоИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийТолькоОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоВОСМС, 0) КАК ПроцентКомпенсируемыхУдержанийТолькоВОСМС,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН, 0) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ, 0) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезВОСМС, 0) КАК ПроцентКомпенсируемыхУдержанийБезВОСМС,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС, 0) КАК ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС,
    	|ЕСТЬNULL(РасчетОтОбратногоКомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний, 0) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|";
    КонецЕсли;
    			
    РасчетОтОбратногоПоляТекст = РасчетОтОбратногоПоляТекст + ",
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйИПНДоход, 0) КАК НеОблагаемыйИПНДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйОПВДоход, 0) КАК НеОблагаемыйОПВДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.НеОблагаемыйВОСМСДоход, 0) КАК НеОблагаемыйВОСМСДоходЗаМесяц,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйИПНДоходВключаемыхНачислений, 0) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйОПВДоходВключаемыхНачислений, 0) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОблагаемыйВОСМСДоходВключаемыхНачислений, 0) КАК ОблагаемыйВОСМСДоходВключаемыхНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ОбщаяСуммаНачислений, 0) КАК ОбщаяСуммаНачислений,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ПрочиеДоходы, 0) КАК ОбщаяСуммаПрочиеДоходы,
    |ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.СуммаВключаемыхНачислений, 0) КАК СуммаВключаемыхНачислений,
    |ЕСТЬNULL(ФизлицаНеРезиденты.ФизЛицоНерезидент, ЛОЖЬ) КАК ФизЛицоНерезидент,
   	|ЕСТЬNULL(РасчетОтОбратногоПрочиеНачисления.ДополнительныеДанные, 0) КАК РасчетОтОбратногоДополнительныеДанные
    |";
    
    // Далее идут тексты запросов по аналогии с функциями ПолучитьДанныеДляРасчетаИПН() и ПолучитьДанныеДляРасчетаОПВ().
    // Отличие по всем текстам в том, что в ПолучитьДанныеДляРасчетаИПН() используется &СписокФизЛиц,
    // а в расчете "от обратного" &парамРасчетОтОбратногоСписокФизЛиц.
    // В данном расчете предполагается, что расчет ИПН и ОПВ будет производится с установленным
    // в учетной политике по налоговому учету флажке ОтражениеПоПериодуРегистрации - все данные выбираются по ПериодРегистрации

    Запрос.УстановитьПараметр("ПериодРегистрации", 			ПериодРегистрации);
    Запрос.УстановитьПараметр("КонецПериодаРегистрации", 	КонецМесяца(ПериодРегистрации));
    Запрос.УстановитьПараметр("НачалоГода", 				НачалоГода(ПериодРегистрации));
    Запрос.УстановитьПараметр("ПустаяДата", 				'00010101');
    Запрос.УстановитьПараметр("ОбособленноеПодразделение", 	Организация);
    Запрос.УстановитьПараметр("ГоловнаяОрганизация", 		ОбщегоНазначенияБКВызовСервера.ГоловнаяОрганизацияДляУчетаЗарплаты(Организация));
    
    Если Константы.ПоддержкаРаботыСоСтруктурнымиПодразделениями.Получить() Тогда
    	Запрос.УстановитьПараметр("Налогоплательщик", 		ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.ПолучитьНалогоплательщикаСтруктурнойЕдиницы(Организация, Организация, Перечисления.РазделыНалоговогоУчета.НалогиСЗаработнойПлаты));
    Иначе
    	Запрос.УстановитьПараметр("Налогоплательщик", 		Организация);
    КонецЕсли;
    
    // Список видов расчета "от обратного"
    ВидыРасчетаОтОбратногоТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ 
    |	Основной.ВидРасчета
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
	|	 Основной.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
    |";
    	
    Запрос.Текст = ВидыРасчетаОтОбратногоТекст;
    Запрос.УстановитьПараметр("ВидыРасчетаОтОбратного", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));

    // Периоды
    // Таблица список физлиц, по которым необходимо выполнить расчет налога или взносов
    // Поля:
    //		Физлицо
    СписокФизЛицТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
    |	Основной.ФизЛицо
    |
    |ПОМЕСТИТЬ ВТ_СписокФизЛиц
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |ГДЕ
	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";
    			
    Запрос.Текст = СписокФизЛицТекст;
    Запрос.Выполнить();
    СписокФизЛицТекст = "ВТ_СписокФизЛиц";
    
    // Периоды
    // Таблица список периодов-физлиц, по которым необходимо выполнить расчет налога или взноса
    // Поля:
    //		Период
    //		Физлицо
    ПериодыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
    |	Основной.ФизЛицо,
    |	&ПериодРегистрации КАК Период
    |
    |ПОМЕСТИТЬ ВТ_ПериодыРасчетаОтОбратного
    |ИЗ
    |	" + СписокФизЛицТекст + " КАК Основной
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ФизЛицо
    |";		   
    Запрос.Текст = ПериодыТекст;
    Запрос.Выполнить();
    ПериодыТекст = "ВТ_ПериодыРасчетаОтОбратного";
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаНеРезиденты = "ВЫБРАТЬ РАЗЛИЧНЫЕ
     |	ГражданствоФизЛиц.ФизЛицо КАК ФизЛицо,
     |	ИСТИНА КАК ФизЛицоНерезидент
     |ПОМЕСТИТЬ ВТФизлицаНеРезиденты
     |ИЗ
     |	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
     |			&ПериодРегистрации,
     |			ФизЛицо В
     |				(ВЫБРАТЬ
     |					СписокФизЛиц.ФизЛицо
     |				ИЗ
     |					ВТ_СписокФизЛиц КАК СписокФизЛиц)) КАК ГражданствоФизЛиц
     |ГДЕ
     |	ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК
     |
     |ИНДЕКСИРОВАТЬ ПО
     |	ГражданствоФизЛиц.ФизЛицо";
	
	Запрос.Текст = ФизлицаНеРезиденты;
	Запрос.Выполнить();
	ФизлицаНеРезидентыТекст = "ВТФизлицаНеРезиденты";
	
	// Списки видов расчета, категория расчета которых меньше текущей  (т.е. уже посчитанные)
    Запрос.Текст = "
    |ВЫБРАТЬ
    |	ПВР.Ссылка
    |ИЗ
    |	ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |ГДЕ
    |	ПВР.СпособРасчета <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    |	И ПВР.СпособРасчета НЕ В (&парамСписокСпособовРасчетаОтОбратного)
    |";
    	
    Запрос.УстановитьПараметр("УжеРассчитанныеВидыРасчета", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
    
    // ОсновныеИДополнительныеНачисления
    // Поля:
    //		ФизЛицо
    //		ВидРасчета
    //		Результат
    //	Описание:
    // Выбирает начисления за период регистрации по физлицам, для которых выполняется расчет "от обратного"
    ОсновныеИДополнительныеНачисленияТекст = "
    |ВЫБРАТЬ
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета,
    |	СУММА(ОсновныеНачисления.Результат) КАК Результат,
    |	СУММА(ОсновныеНачисления.ДополнительныеДанные) КАК ДополнительныеДанные,
    |	СУММА(ОсновныеНачисления.Результат) КАК СуммаНачислений,
    |	СУММА(ОсновныеНачисления.ПрочиеДоходы) КАК ПрочиеДоходы
    |
    |ПОМЕСТИТЬ ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		ОсновныеНачисления.ФизЛицо,
    |		ОсновныеНачисления.ВидРасчета,
    |		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
    |		ОсновныеНачисления.Результат,
    |		ОсновныеНачисления.ДополнительныеДанные,
    |		0 КАК ПрочиеДоходы
    |	ИЗ
    |		" + ИмяИсточникаДокумента + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
    |		ВЫБОР
    |			КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
    |				ТОГДА ОсновныеНачисления.Ссылка.Проведен
    |			ИНАЧЕ ИСТИНА
    |		КОНЕЦ
    |		И ВЫБОР
    |			КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |				ТОГДА ОсновныеНачисления.Ссылка.Организация
    |			ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
    |		КОНЕЦ = &парамГоловнаяОрганизация
    |		И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
    |		И (ОсновныеНачисления.Ссылка <> &парамРегистратор)
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
    |		ОсновныеНачисления.ФизЛицо,
    |		ОсновныеНачисления.ВидРасчета,
    |		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
    |		ОсновныеНачисления.Результат,
    |		ОсновныеНачисления.ДополнительныеДанные,
    |		0 КАК ПрочиеДоходы
    |	ИЗ
    |		" + ИмяИсточника + " КАК ОсновныеНачисления
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
    |			ПО ОсновныеНачисления.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
    |		ВЫБОР
    |			КОГДА ОсновныеНачисления.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    |				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
    |				ТОГДА ОсновныеНачисления.Организация
    |			ИНАЧЕ ОсновныеНачисления.Организация.ГоловнаяОрганизация
    |		КОНЕЦ = &парамГоловнаяОрганизация
	|		И ОсновныеНачисления.ВидРасчета В (&УжеРассчитанныеВидыРасчета)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОсновныеНачисления.ФизЛицо,
	|		ОсновныеНачисления.ВидРасчета,
	|		ЛОЖЬ КАК ЯвляетсяПрочимДоходом,
	|		0,
	|		0,
	|		ОсновныеНачисления.СуммаДохода
	|	ИЗ
	|		Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения.СведенияОДоходах КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналуОрганизаций КАК УчетнаяПолитикаПоПерсоналуОрганизаций
	|			ПО ОсновныеНачисления.Ссылка.Организация = УчетнаяПолитикаПоПерсоналуОрганизаций.Организация
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	|			ПО ОсновныеНачисления.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|	ГДЕ
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.Ссылка <> &парамРегистратор
	|				ТОГДА ОсновныеНачисления.Ссылка.Проведен
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		И ВЫБОР
	|			КОГДА ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ (НЕ УчетнаяПолитикаПоПерсоналуОрганизаций.ВестиУчетПоГоловнойОрганизации)
	|				ТОГДА ОсновныеНачисления.Ссылка.Организация
	|			ИНАЧЕ ОсновныеНачисления.Ссылка.Организация.ГоловнаяОрганизация
	|		КОНЕЦ = &парамГоловнаяОрганизация
	|		И ОсновныеНачисления.Ссылка.ПериодРегистрации = &парамПериодРегистрации
	|		И (ОсновныеНачисления.Ссылка <> &парамРегистратор
	|			ИЛИ (ОсновныеНачисления.Ссылка = &парамРегистратор
	|					И ОсновныеНачисления.ВидРасчета В (&УжеРассчитанныеВидыРасчета)))
    |	) КАК ОсновныеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.ВидРасчета
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	ОсновныеНачисления.ФизЛицо,
    |	ОсновныеНачисления.ВидРасчета
    |";
    Запрос.Текст = ОсновныеИДополнительныеНачисленияТекст;
    Запрос.Выполнить();
    ОсновныеИДополнительныеНачисленияТекст = "ВТ_ОсновныеИДополнительныеНачисленияРасчетаОтОбратного";
	
#Область КомпенсироватьИПН 	
    Если НеобходимыеДанные.ОтОбратногоКомпенсироватьИПН Тогда
		
		ВычетыФизЛицТекст = 
		"ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ПрименениеВычетовИПН.Период) КАК Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_ПериодыПримененияВычетов
		|ИЗ
		|	" + ПериодыТекст + " КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_Периоды.Физлицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И ВТ_Периоды.Период >= ПрименениеВычетовИПН.Период
		|			И (ПрименениеВычетовИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ПрименениеВычетовИПН.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода,
		|	ПрименениеВычетовИПН.ФизическоеЛицо,
		|	ПрименениеВычетовИПН.Организация,
		|	ПрименениеВычетовИПН.ДействуетПо
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетовИПН
		|ИЗ
		|	ВТ_ПериодыПримененияВычетов КАК ВТ_ПериодыПримененияВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименениеВычетовИПН КАК ПрименениеВычетовИПН
		|		ПО ВТ_ПериодыПримененияВычетов.Период = ПрименениеВычетовИПН.Период
		|			И ВТ_ПериодыПримененияВычетов.ФизическоеЛицо = ПрименениеВычетовИПН.ФизическоеЛицо
		|			И (ПрименениеВычетовИПН.Активность)
		|ГДЕ
		|	ПрименениеВычетовИПН.Организация = &Налогоплательщик
		|	И ВЫБОР
		|			КОГДА ПрименениеВычетовИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыПримененияВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ПрименениеВычетовИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
		|	МАКСИМУМ(ВычетыФизическихЛицИПН.Период) КАК ПериодВычета,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|ПОМЕСТИТЬ ВТ_ПериодыВычетов
		|ИЗ
		|	" + ПериодыТекст + " КАК ВТ_Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_Периоды.Физлицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_Периоды.Период >= ВычетыФизическихЛицИПН.Период
		|			И (ВычетыФизическихЛицИПН.Активность)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Периоды.Период,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|	ВычетыФизическихЛицИПН.ФизическоеЛицо,
		|	ВычетыФизическихЛицИПН.ВидВычета,
		|	ВычетыФизическихЛицИПН.ДействуетПо,
		|	ВТ_ПериодыВычетов.ПериодВычета КАК МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_Вычеты
		|ИЗ
		|	ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВычетыФизическихЛицИПН КАК ВычетыФизическихЛицИПН
		|		ПО ВТ_ПериодыВычетов.ФизическоеЛицо = ВычетыФизическихЛицИПН.ФизическоеЛицо
		|			И ВТ_ПериодыВычетов.ВидВычета = ВычетыФизическихЛицИПН.ВидВычета
		|			И (ВычетыФизическихЛицИПН.Активность)
		|			И ВТ_ПериодыВычетов.ПериодВычета = ВычетыФизическихЛицИПН.Период
		|ГДЕ
		|	ВычетыФизическихЛицИПН.ПредоставлятьВычет
		|	И ВЫБОР
		|			КОГДА ВычетыФизическихЛицИПН.ДействуетПо = &ПустаяДата
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(ВычетыФизическихЛицИПН.ДействуетПо, МЕСЯЦ)
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////
		|//Размеры предела
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыПределов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	ПериодыПределов.ВидВычета КАК ВидВычета,
		|	РазмерыВычетовИПН.ВидПределаВычета КАК ВидПределаВычета,
		|	РазмерыВычетовИПН.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерыПределовПосле2018
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета КАК ВидВычета,
		|		МАКСИМУМ(РазмерыВычетовИПН.Период) КАК Период
		|	ИЗ
		|		ВТ_ПериодыВычетов КАК ВТ_ПериодыВычетов
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|			ПО (РазмерыВычетовИПН.ВидВычетаИПН = ВТ_ПериодыВычетов.ВидВычета)
		|				И (РазмерыВычетовИПН.Период <= НАЧАЛОПЕРИОДА(ВТ_ПериодыВычетов.МесяцНалоговогоПериода, ГОД))
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТ_ПериодыВычетов.МесяцНалоговогоПериода,
		|		ВТ_ПериодыВычетов.ВидВычета) КАК ПериодыПределов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыВычетовИПН КАК РазмерыВычетовИПН
		|		ПО ПериодыПределов.Период = РазмерыВычетовИПН.Период
		|			И ПериодыПределов.ВидВычета = РазмерыВычетовИПН.ВидВычетаИПН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Вычеты.МесяцНалоговогоПериода,
		|	ВТ_Вычеты.ФизическоеЛицо,
		|	ВТ_Вычеты.ВидВычета,
		|	ВычетыИПН.Приоритет,
		|	ВычетыИПН.ПредоставлениеВычета,
		|	ВычетыИПН.ВидВзносов,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.ВидПределаВычета, ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МЗП)) КАК ВидПределаВычета,
		|	ЕСТЬNULL(РазмерыПределовПосле2018.Размер, ВычетыИПН.ПределВычета) КАК ПределВычета,
		|	ВычетыИПН.ПериодПредоставления,
		|	ВТ_Вычеты.МесяцВводаВычета
		|ПОМЕСТИТЬ ВТ_НастройкиВычетов
		|ИЗ
		|	ВТ_Вычеты КАК ВТ_Вычеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетовИПН КАК ВТ_ПрименениеВычетовИПН
		|		ПО ВТ_Вычеты.МесяцНалоговогоПериода = ВТ_ПрименениеВычетовИПН.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.ФизическоеЛицо = ВТ_ПрименениеВычетовИПН.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВычетыИПН КАК ВычетыИПН
		|		ПО ВТ_Вычеты.ВидВычета = ВычетыИПН.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыПределовПосле2018 КАК РазмерыПределовПосле2018
		|		ПО ВТ_Вычеты.ВидВычета = РазмерыПределовПосле2018.ВидВычета
		|			И ВТ_Вычеты.МесяцНалоговогоПериода = РазмерыПределовПосле2018.МесяцНалоговогоПериода
		|			И ВТ_Вычеты.МесяцНалоговогоПериода >= ДАТАВРЕМЯ(2019, 1, 1, 0, 0, 0)
		|";
		
		Запрос.Текст = ВычетыФизЛицТекст;
		Запрос.Выполнить();
		
		РасчетныеПоказателиТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_Периоды.Физлицо,
			|	НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) КАК ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыВГодах
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(РегламентированныеРасчетныеПоказатели.Период) КАК Период,
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|ПОМЕСТИТЬ ВТ_ПериодыРасчетныхПоказателей
			|ИЗ
			|	ВТ_ПериодыВГодах КАК ВТ_ПериодыВГодах
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыВГодах.ГодНалоговогоПериода >= РегламентированныеРасчетныеПоказатели.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ПериодыВГодах.Физлицо,
			|	ВТ_ПериодыВГодах.ГодНалоговогоПериода
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ПериодыРасчетныхПоказателей.ГодНалоговогоПериода,
			|	ВТ_ПериодыРасчетныхПоказателей.Физлицо,
			|	РегламентированныеРасчетныеПоказатели.РазмерМЗП,
			|	РегламентированныеРасчетныеПоказатели.РазмерМРП
			|ПОМЕСТИТЬ ВТ_РазмерыМЗП
			|ИЗ
			|	ВТ_ПериодыРасчетныхПоказателей КАК ВТ_ПериодыРасчетныхПоказателей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РегламентированныеРасчетныеПоказатели
			|		ПО ВТ_ПериодыРасчетныхПоказателей.Период = РегламентированныеРасчетныеПоказатели.Период
			|";
			
		Запрос.Текст = РасчетныеПоказателиТекст;
		Запрос.Выполнить();
		
		РазмерыПрочихВычетовТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
			|	ВТ_НастройкиВычетов.ФизическоеЛицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	ПрочиеВычетыФизическихЛицИПН.Размер
			|ПОМЕСТИТЬ ВТ_РазмерыПрочихВычетов
			|ИЗ
			|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрочиеВычетыФизическихЛицИПН КАК ПрочиеВычетыФизическихЛицИПН
			|		ПО ВТ_НастройкиВычетов.МесяцВводаВычета = ПрочиеВычетыФизическихЛицИПН.Период
			|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ПрочиеВычетыФизическихЛицИПН.ФизическоеЛицо
			|			И ВТ_НастройкиВычетов.ВидВычета = ПрочиеВычетыФизическихЛицИПН.ВидВычета
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода >= ПрочиеВычетыФизическихЛицИПН.ДействуетС
			|			И ВТ_НастройкиВычетов.МесяцНалоговогоПериода <= ПрочиеВычетыФизическихЛицИПН.ДействуетПо
			|			И (ПрочиеВычетыФизическихЛицИПН.Активность)
			|";
			
		Запрос.Текст = РазмерыПрочихВычетовТекст;
		Запрос.Выполнить();
		
		НастройкиИРазмерыВычетовТекст = 
		"ВЫБРАТЬ
		|	ВТ_НастройкиВычетов.МесяцНалоговогоПериода,
		|	ВТ_НастройкиВычетов.ФизическоеЛицо,
		|	ВТ_НастройкиВычетов.ВидВычета,
		|	ВТ_НастройкиВычетов.Приоритет,
		|	ВТ_НастройкиВычетов.ПредоставлениеВычета,
		|	ВТ_НастройкиВычетов.ВидВзносов,
		|	ВТ_НастройкиВычетов.ПределВычета,
		|	ВТ_НастройкиВычетов.ПериодПредоставления,
		|	ВТ_НастройкиВычетов.МесяцВводаВычета,
		|	ВТ_РазмерыМЗП.РазмерМЗП,
		|	ВТ_РазмерыМЗП.РазмерМРП,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
		|				КОНЕЦ
		
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
		|			ТОГДА ЕСТЬNULL(ВТ_РазмерыПрочихВычетов.Размер, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерВычета,
		|	ВЫБОР
		|		КОГДА ВТ_НастройкиВычетов.ПредоставлениеВычета В (ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный), ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам))
		|			ТОГДА ВТ_НастройкиВычетов.ПределВычета * ВЫБОР
		|					КОГДА ВТ_НастройкиВычетов.ВидПределаВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПределовВычетовИКорректировокДоходов.МРП)
		|						ТОГДА ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМРП, 0)
		|					ИНАЧЕ ЕСТЬNULL(ВТ_РазмерыМЗП.РазмерМЗП, 0)
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммовойПределВычета
		|ПОМЕСТИТЬ ВТ_НастройкиИРазмерыВычетов
		|ИЗ
		|	ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыМЗП КАК ВТ_РазмерыМЗП
		|		ПО ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыМЗП.Физлицо
		|			И (НАЧАЛОПЕРИОДА(ВТ_НастройкиВычетов.МесяцНалоговогоПериода, ГОД) = ВТ_РазмерыМЗП.ГодНалоговогоПериода)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РазмерыПрочихВычетов КАК ВТ_РазмерыПрочихВычетов
		|		ПО ВТ_НастройкиВычетов.МесяцНалоговогоПериода = ВТ_РазмерыПрочихВычетов.МесяцНалоговогоПериода
		|			И ВТ_НастройкиВычетов.ФизическоеЛицо = ВТ_РазмерыПрочихВычетов.ФизическоеЛицо
		|			И ВТ_НастройкиВычетов.ВидВычета = ВТ_РазмерыПрочихВычетов.ВидВычета";
		
		Запрос.Текст = НастройкиИРазмерыВычетовТекст;
		Запрос.Выполнить();
		
		НакопленныеДанныеПоВычетамТекст = 
			"ВЫБРАТЬ
			|	Периоды.Период КАК Период,
			|	Периоды.ФизЛицо КАК ФизЛицо,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА РаботникиОрганизации.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
			|				ТОГДА РаботникиОрганизации.Период
			|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
			|		КОНЕЦ) КАК ДатаПриема
			|ПОМЕСТИТЬ ВТ_КадровыеПериодыРаботников
			|ИЗ
			|	" + ПериодыТекст + " КАК Периоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|		ПО Периоды.ФизЛицо = РаботникиОрганизации.Сотрудник.Физлицо
			|			И (РаботникиОрганизации.Организация = &ГоловнаяОрганизация)
			|			И (РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|			И (РаботникиОрганизации.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ))
			|			И (РаботникиОрганизации.ПричинаИзмененияСостояния В (ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу), ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)))
			|
			|СГРУППИРОВАТЬ ПО
			|	Периоды.Период,
			|	Периоды.ФизЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период КАК МесяцНалоговогоПериода,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВЫБОР
			|			КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД)
			|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанные
			|ИЗ
			|	ВТ_КадровыеПериодыРаботников КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(&НачалоГода, &КонецПериодаРегистрации, Месяц, ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
			|		ПО ВТ_Периоды.Физлицо = СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо
			|			И ВТ_Периоды.Период >= СведенияОбИсчисленииВычетовИПНОбороты.Период
			|			И (НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, ГОД))
			|И (ВЫБОР
			|				КОГДА СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо ССЫЛКА Справочник.Контрагенты
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ НАЧАЛОПЕРИОДА(ВТ_Периоды.ДатаПриема, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
			|			КОНЕЦ)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	СведенияОбИсчисленииВычетовИПНОбороты.ВидВычета
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_Периоды.Период,
			|	ВТ_Периоды.Физлицо,
			|	ВТ_НастройкиВычетов.ВидВычета,
			|	0,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ВТ_Периоды.Период, ГОД) = НАЧАЛОПЕРИОДА(СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода, ГОД)
			|			ТОГДА СведенияПредыдущегоМестаРаботыФизЛиц.ПримененнаяЛьгота
			|		ИНАЧЕ 0
			|	КОНЕЦ
			|ИЗ
			|	" + ПериодыТекст + " КАК ВТ_Периоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
			|		ПО ВТ_Периоды.Период >= СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода
			|			И ВТ_Периоды.Физлицо = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НастройкиВычетов КАК ВТ_НастройкиВычетов
			|		ПО (ВТ_НастройкиВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный))
			|			И (ВТ_НастройкиВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода) КАК РазрешенныйВычетСНачалаГода,
			|	СУММА(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода) КАК ПримененныйВычетСНачалаГода
			|ПОМЕСТИТЬ ВТ_НакопленныеДанныеПоВычетам
			|ИЗ
			|	ВТ_НакопленныеДанные КАК ВТ_НакопленныеДанныеПоВычетам
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода,
			|	ВТ_НакопленныеДанныеПоВычетам.Физлицо,
			|	ВТ_НакопленныеДанныеПоВычетам.ВидВычета";
			
		Запрос.Текст = НакопленныеДанныеПоВычетамТекст;
		Запрос.Выполнить();

		ПрименяемыеВычетыТекст = 
			"ВЫБРАТЬ
			|	ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
			|	ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВычета КАК ВидВычета,
			|	ВТ_НастройкиИРазмерыВычетов.Приоритет КАК Приоритет,
			|	ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета КАК ПредоставлениеВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ВидВзносов КАК ВидВзносов,
			|	ВТ_НастройкиИРазмерыВычетов.ПределВычета КАК ПределВычета,
			|	ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления КАК ПериодПредоставления,
			|	ВТ_НастройкиИРазмерыВычетов.МесяцВводаВычета КАК МесяцВводаВычета,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерМЗП КАК РазмерМЗП,
			|	ВТ_НастройкиИРазмерыВычетов.РазмерВычета КАК РазмерВычета,
			|	ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета КАК СуммовойПределВычета,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) КАК РазрешенныйВычетСНачалаГода,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ПримененныйВычетСНачалаГода,
			|	ВЫБОР
			|		КОГДА ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.Стандартный)
			|				ИЛИ ВТ_НастройкиИРазмерыВычетов.ПредоставлениеВычета = ЗНАЧЕНИЕ(Перечисление.ВидыПредоставленияВычетов.ПоПериодическимПлатежам)
			|			ТОГДА ВЫБОР
			|					КОГДА ВТ_НастройкиИРазмерыВычетов.ПределВычета > 0
			|						ТОГДА ВЫБОР
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахМесяца)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								КОГДА ВТ_НастройкиИРазмерыВычетов.ПериодПредоставления = ЗНАЧЕНИЕ(Перечисление.ПериодыРасчетаВычетовИКорректировокДоходов.ВПределахКалендарногоГода)
			|									ТОГДА ВЫБОР
			|											КОГДА ВТ_НастройкиИРазмерыВычетов.РазмерВычета > ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|												ТОГДА ВТ_НастройкиИРазмерыВычетов.СуммовойПределВычета - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0)
			|											ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|										КОНЕЦ
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ ВТ_НастройкиИРазмерыВычетов.РазмерВычета
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК РазрешенныйВычетВТекущемПериоде,
			|	ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.РазрешенныйВычетСНачалаГода, 0) - ЕСТЬNULL(ВТ_НакопленныеДанныеПоВычетам.ПримененныйВычетСНачалаГода, 0) КАК ОстатокВычетаЗаПрошлыеМесяцы
			|ПОМЕСТИТЬ ВТ_ДанныеДляРасчетаВычетов
			|ИЗ
			|	ВТ_НастройкиИРазмерыВычетов КАК ВТ_НастройкиИРазмерыВычетов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НакопленныеДанныеПоВычетам КАК ВТ_НакопленныеДанныеПоВычетам
			|		ПО ВТ_НастройкиИРазмерыВычетов.МесяцНалоговогоПериода = ВТ_НакопленныеДанныеПоВычетам.МесяцНалоговогоПериода
			|			И ВТ_НастройкиИРазмерыВычетов.ФизическоеЛицо = ВТ_НакопленныеДанныеПоВычетам.Физлицо
			|			И ВТ_НастройкиИРазмерыВычетов.ВидВычета = ВТ_НакопленныеДанныеПоВычетам.ВидВычета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ВТ_ДанныеДляРасчетаВычетов.РазрешенныйВычетВТекущемПериоде + ВТ_ДанныеДляРасчетаВычетов.ОстатокВычетаЗаПрошлыеМесяцы) КАК РазрешенныеНалоговыеВычеты,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетОПВ,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ВТ_ДанныеДляРасчетаВычетов.ВидВзносов = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ) КАК ПредоставлятьВычетВОСМС
			|ПОМЕСТИТЬ ВТ_ПрименяемыеВычеты
			|ИЗ
			|	ВТ_ДанныеДляРасчетаВычетов КАК ВТ_ДанныеДляРасчетаВычетов
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ДанныеДляРасчетаВычетов.ФизическоеЛицо";
			
		Запрос.Текст = ПрименяемыеВычетыТекст;
		Запрос.Выполнить();
		
		ПрименяемыеВычетыТекст = "ВТ_ПрименяемыеВычеты";
	
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		СуммаДоходаОборот
    	//		СуммаВычетаОборот
     	//		ОблагаемыйДоходЗаМесяц
    	//		ПрочиеДоходы
	   	//
    	//	Описание:
    	// Выбирает общую сумму доходов и облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
    			
    	// Здесь не учитываем доходы, записанные текущим регистратором, т.к. при проведении по ИПНСведенияОДоходах
    	// они были еще в процессе расчета и их прибавим позже. А также отдельно выделяем доходы, начисленные в данной 
    	// организации за текущий месяц, которые прошли через начисления, прочие доходы не выделяем. 
    	// Т.к. расчет "от обратного" поддерживается только при учетной политикой с ОтражениемПоПериодуРегистрации,
    	// то в регистрах Период, ПериодРегистрации и МесяцНалоговогоПериода всегда совпадают, поэтому 
    	// устанавливаем отборы по Периоду, т.к. по нему система автоматически создает индекс.
    	ДоходыТекст = 
	    	"ВЫБРАТЬ
	    	|	ИПНОбороты.Физлицо КАК ФизЛицо,
	    	|	СУММА(ИПНОбороты.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	    	|	СУММА(ИПНОбороты.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	    	|	СУММА(ВЫБОР
	    	|			КОГДА ИПНОбороты.НачисленоВТекущейОрганизации
	    	|				ТОГДА ИПНОбороты.СуммаДоходаОборот - ИПНОбороты.СуммаВычетаОборот
	    	|			ИНАЧЕ 0
	    	|		КОНЕЦ) КАК ОблагаемыйДоходЗаМесяц,
	    	|	СУММА(ИПНОбороты.ПрочиеДоходы) КАК ПрочиеДоходы,
	    	|	СУММА(ИПНОбороты.ПримененнаяЛьгота) КАК ПримененнаяЛьгота
	    	|
	    	|ПОМЕСТИТЬ ВТ_ДоходыРасчетаОтОбратного
	    	|ИЗ
	    	|	(ВЫБРАТЬ
	    	|		ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
	    	|		ВЫБОР 
	    	|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	    	|				ТОГДА СУММА(ИПНСведенияОДоходах.СуммаДохода) 
	    	|			ИНАЧЕ 0 
	    	|		КОНЕЦ КАК СуммаДоходаОборот,
	    	|		СУММА(ИПНСведенияОДоходах.СуммаВычета) КАК СуммаВычетаОборот,
	    	|		СУММА(ВЫБОР
	    	|				КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
			|					И ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	    	|					ТОГДА ИПНСведенияОДоходах.СуммаДохода - ИПНСведенияОДоходах.СуммаВычета
	    	|				ИНАЧЕ 0
	    	|			КОНЕЦ) КАК ПрочиеДоходы,
	    	|		ВЫБОР
	    	|			КОГДА ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
	    	|					ИЛИ ИПНСведенияОДоходах.Регистратор ССЫЛКА Документ.РасчетНалоговПриПоступленииАктивовУслуг
	    	|				ТОГДА ЛОЖЬ
	    	|			ИНАЧЕ ИСТИНА
	    	|		КОНЕЦ КАК НачисленоВТекущейОрганизации,
	    	|		СУММА(ИПНСведенияОДоходах.ПримененнаяЛьгота) КАК ПримененнаяЛьгота
	    	|	ИЗ
	    	|		РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
	    	|
	    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|			ПО ИПНСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
	    	|	
	    	|	ГДЕ
	    	|		ИПНСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
	    	|		И ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик
	    	|		И ИПНСведенияОДоходах.Регистратор <> &парамРегистратор
	    	|		И НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
	    	|		И ИПНСведенияОДоходах.Активность
	    	|	
	    	|	СГРУППИРОВАТЬ ПО
	    	|		ИПНСведенияОДоходах.ФизЛицо,
	    	|		ИПНСведенияОДоходах.СпособНалогообложения,
	    	|		ИПНСведенияОДоходах.Регистратор) КАК ИПНОбороты
	    	|СГРУППИРОВАТЬ ПО
    		|	ИПНОбороты.Физлицо";
			
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыРасчетаОтОбратного";
    			
    			
    	БазаДляИсчисленияИПНТекст = "
	    	|ВЫБРАТЬ
	    	|	СписокФизЛиц.ФизЛицо,
	    	|	ЕСТЬNULL(Доходы.СуммаДоходаОборот, 0) - ЕСТЬNULL(Доходы.СуммаВычетаОборот, 0) КАК ОблагаемыйДоход,
	    	|	ЕСТЬNULL(Доходы.ПрочиеДоходы, 0) КАК ПрочиеДоходы,
	    	|	ЕСТЬNULL(Доходы.ПримененнаяЛьгота, 0) КАК ПримененнаяЛьгота,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.РазрешенныеНалоговыеВычеты, 0) КАК РазрешенныеНалоговыеВычеты,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетОПВ, Ложь) КАК ПредоставлятьВычетОПВ,
	    	|	ЕСТЬNULL(ПрименяемыеВычеты.ПредоставлятьВычетВОСМС, Ложь) КАК ПредоставлятьВычетВОСМС
	    	|
	    	|ПОМЕСТИТЬ ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного
	    	|ИЗ
	    	|	" + СписокФизЛицТекст + " КАК СписокФизЛиц
	    	|
	    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК Доходы
	    	|		ПО СписокФизЛиц.ФизЛицо = Доходы.ФизЛицо
	    	|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПрименяемыеВычетыТекст + " КАК ПрименяемыеВычеты
			|		ПО СписокФизЛиц.ФизЛицо = ПрименяемыеВычеты.ФизическоеЛицо
			|
	    	|ИНДЕКСИРОВАТЬ ПО
	    	|	СписокФизЛиц.ФизЛицо
	    	|";
    	
    	Запрос.Текст = БазаДляИсчисленияИПНТекст;
    	Запрос.Выполнить();
    	БазаДляИсчисленияИПНТекст = "ВТ_БазаДляИсчисленияИПНРасчетаОтОбратного";
    	Запрос.Текст = "ВЫБРАТЬ * ИЗ " + БазаДляИсчисленияИПНТекст;

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
	    	|ЛЕВОЕ СОЕДИНЕНИЕ " + БазаДляИсчисленияИПНТекст + " КАК РасчетОтОбратногоДанныеИПН
	    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеИПН.ФизЛицо
	    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
	    	|";

		КонецЕсли;
#КонецОбласти		
            
#Область КомпенсироватьОПВ
	Если НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
    			
    	СписокГруппИнвалидности = Новый СписокЗначений;
    	СписокГруппИнвалидности.Добавить("I");
    	СписокГруппИнвалидности.Добавить("II");
    			
    	Запрос.УстановитьПараметр("СписокГруппИнвалидности",  СписокГруппИнвалидности);
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
    	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
    	|	СУММА(ВЫБОР
		|			КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК БазаДляИсчисленияОПВ,
    	|	СУММА(ВЫБОР
    	|			КОГДА ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|				И ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ОПВСведенияОДоходах.СуммаДохода - ОПВСведенияОДоходах.СуммаВычета
    	|			ИНАЧЕ 0
    	|		КОНЕЦ) КАК ПрочиеДоходы
    	|
    	|ПОМЕСТИТЬ ВТ_ДоходыОПВРасчетаОтОбратного
    	|ИЗ
    	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ОПВСведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|ГДЕ
    	|	ОПВСведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
    	|	И ОПВСведенияОДоходах.Налогоплательщик = &Налогоплательщик
    	|	И ОПВСведенияОДоходах.Активность
    	|	
    	|СГРУППИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	ОПВСведенияОДоходах.ФизЛицо";
    	
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыОПВРасчетаОтОбратного";

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ОПВРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц. Поэтому запроса к ОПВРасчетыСФондами вообще не требуется.

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказатели.РазмерМЗП * 50 КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НачалоГода) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамОПВ", 0);
    	КонецЕсли;

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаБезПраваНаПенсиюТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)";
    			
    	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
    	Запрос.УстановитьПараметр("ФизЛицаБезПраваНаПенсию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаПенсионеры
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц достигших пенсионный возраст
    	ФизлицаПенсионерыТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОПенсионномОбеспеченииФизЛиц
    	|
    	|ГДЕ
    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
    		
    	Запрос.Текст = ФизлицаПенсионерыТекст;
    	Запрос.УстановитьПараметр("ФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	// ФизлицаИнвалидыБессрочно
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыБессрочноТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
    	|	И СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&СписокГруппИнвалидности)
    	|	И СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1, 1, 1)
    	|";
    		
    	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
    	Запрос.УстановитьПараметр("ФизЛицаИнвалидыБессрочно", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК РасчетОтОбратногоДанныеОПВ
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеОПВ.ФизЛицо
    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    	|";

   КонецЕсли;
   
 #КонецОбласти  
 
 #Область КомпенсироватьВОСМС
	Если НеобходимыеДанные.ОтОбратногоУчитыватьВОСМС Тогда
    			
    	// Доходы
    	//	Поля:
    	//		ФизЛицо
    	//		Период
    	//		ОблагаемыйДоход
    	//
    	//	Описание:
    	// Выбирает облагаемые взносами доходы за периоды по физлицам
    		
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то доходы всегда выбираются только за расчетный месяц. Отдельно выделим прочие доходы, зарегистрированные в обход начислений.
    	ДоходыТекст = "
    	|ВЫБРАТЬ
		|	ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
		|   СУММА(ВОСМССведенияОДоходах.БазаДляИсчисленияВОСМС) КАК БазаДляИсчисленияВОСМС,
		|   СУММА(ВОСМССведенияОДоходах.ПрочиеДоходы) КАК ПрочиеДоходы,
		|   СУММА(ВОСМССведенияОДоходах.ВОСМСДругогоРаботодателя) КАК ВОСМСДругогоРаботодателя
    	|ПОМЕСТИТЬ ВТ_ДоходыВОСМСРасчетаОтОбратного
		|ИЗ
		|	(ВЫБРАТЬ
    	|		ВОСМССведенияОДоходах.ФизЛицо КАК Физлицо,
    	|		ВЫБОР
		|				КОГДА ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|					ТОГДА ВОСМССведенияОДоходах.СуммаДохода - ВОСМССведенияОДоходах.СуммаВычета
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК БазаДляИсчисленияВОСМС,
    	|		ВЫБОР
    	|				КОГДА ВОСМССведенияОДоходах.Регистратор ССЫЛКА Документ.РегистрацияПрочихДоходовВЦеляхНалогообложения
    	|					И ВОСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|					ТОГДА ВОСМССведенияОДоходах.СуммаДохода - ВОСМССведенияОДоходах.СуммаВычета
    	|				ИНАЧЕ 0
    	|			КОНЕЦ КАК ПрочиеДоходы,
		|		0 КАК ВОСМСДругогоРаботодателя
    	|	ИЗ
    	|		РегистрНакопления.ВОСМССведенияОДоходах КАК ВОСМССведенияОДоходах
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО ВОСМССведенияОДоходах.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|	
    	|	ГДЕ
    	|		ВОСМССведенияОДоходах.Период МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
    	|		И ВОСМССведенияОДоходах.Налогоплательщик = &Налогоплательщик
    	|		И ВОСМССведенияОДоходах.Активность
    	|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		СписокФизЛиц.Физлицо,
		|		0,
		|		0,
		|		СведенияПредыдущегоМестаРаботыФизЛиц.ВОСМС
		|	ИЗ
		|		" + СписокФизЛицТекст + " КАК СписокФизЛиц
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияПредыдущегоМестаРаботыФизЛиц КАК СведенияПредыдущегоМестаРаботыФизЛиц
		|				ПО СписокФизЛиц.Физлицо = СведенияПредыдущегоМестаРаботыФизЛиц.ФизЛицо
    	|	ГДЕ
    	|		СведенияПредыдущегоМестаРаботыФизЛиц.МесяцНалоговогоПериода МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
    	|		И СведенияПредыдущегоМестаРаботыФизЛиц.Налогоплательщик = &Налогоплательщик) КАК ВОСМССведенияОДоходах
		|
    	|СГРУППИРОВАТЬ ПО
    	|	ВОСМССведенияОДоходах.ФизЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
    	|	ВОСМССведенияОДоходах.ФизЛицо";
    	
    	Запрос.Текст = ДоходыТекст;
    	Запрос.Выполнить();
    	ДоходыТекст = "ВТ_ДоходыВОСМСРасчетаОтОбратного";

    	// Здесь не берем имеющийся за МесяцНалоговогоПериода в ВОСМСРасчетыСФондами взнос, т.к. перерасчитываем заново,
    	// иначе придется постоянно следить, чтобы предыдущий документ с расчетом ИПН, ОПВ и удержаний был непроведенным.
    	// Поскольку расчет ведется только при установленном признаке УчетнаяПолитикаПоНалоговомуУчету.ОтражениеПоПериодуРегистрации
    	// то ранее исчисленные взносы всегда выбираются только за расчетный месяц. Поэтому запроса к ВОСМСРасчетыСФондами вообще не требуется.

    	// РазмерОграниченияПоДоходам
    	РазмерОграниченияПоДоходамТекст = "
    	|ВЫБРАТЬ
    	|	РасчетныеПоказатели.РазмерМЗП * 10 КАК ОграничениеПоДоходам
    	|ИЗ
    	|	РегистрСведений.РегламентированныеРасчетныеПоказатели.СрезПоследних(&НачалоГода) КАК РасчетныеПоказатели
    	|";
    		
    	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
    	Выборка = Запрос.Выполнить().Выбрать();
    	Если Выборка.Следующий() Тогда
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамВОСМС", Выборка.ОграничениеПоДоходам);
    	Иначе
    		Запрос.УстановитьПараметр("РазмерОграниченияПоДоходамВОСМС", 0);
    	КонецЕсли;

    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаНеПодлежитСоциальномуМедицинскомуСтрахованиюТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)";
    			
    	Запрос.Текст = ФизлицаНеПодлежитСоциальномуМедицинскомуСтрахованиюТекст;
    	Запрос.УстановитьПараметр("ФизЛицаНеПодлежитСоциальномуМедицинскомуСтрахованию", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
    	// ФизлицаБезПраваНаПенсию
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц не имеющих право на пенсионное обеспечение
    	ФизлицаНеЯвляетсяНалоговымРезидентомРКТекст = "
    	|ВЫБРАТЬ
    	|	ГражданствоФизЛиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ГражданствоФизЛиц
    	|
    	|ГДЕ
    	|	(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК)";
    			
    	Запрос.Текст = ФизлицаНеЯвляетсяНалоговымРезидентомРКТекст;
    	Запрос.УстановитьПараметр("ФизЛицаНеРезиденты", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
    		
 		Если НЕ НеобходимыеДанные.ОтОбратногоУчитыватьОПВ Тогда
	 	  	// ФизлицаПенсионеры
	    	//	Поля:
	    	//		Физлицо
	    	//
	    	//	Описание:
	    	//	список физлиц достигших пенсионный возраст
	    	ФизлицаПенсионерыТекст = "
	    	|ВЫБРАТЬ
	    	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	    	|ИЗ
	    	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(
	    	|						&КонецПериодаРегистрации, 
	    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОПенсионномОбеспеченииФизЛиц
	    	|
	    	|ГДЕ
	    	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)";
	    		
	    	Запрос.Текст = ФизлицаПенсионерыТекст;
	    	Запрос.УстановитьПараметр("ФизЛицаПенсионеры", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

		КонецЕсли;
		
    	// ФизлицаИнвалиды
    	//	Поля:
    	//		Физлицо
    	//
    	//	Описание:
    	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
    	ФизлицаИнвалидыТекст = "
    	|ВЫБРАТЬ
    	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
    	|ИЗ
    	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(
    	|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОбИнвалидностиФизлиц
    	|
    	|ГДЕ
    	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)
		|	И (СведенияОбИнвалидностиФизлиц.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ &КонецПериодаРегистрации <= КОНЕЦПЕРИОДА(СведенияОбИнвалидностиФизлиц.СрокДействияСправки, МЕСЯЦ))
		|";
    		
    	Запрос.Текст = ФизлицаИнвалидыТекст;
    	Запрос.УстановитьПараметр("ФизЛицаИнвалиды", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));

		// ФизлицаУчастникиВОВ
		//	Поля:
		//		Физлицо
		//
		//	Описание:
		//	список физлиц участников и инвалидов ВОВ
		ФизлицаУчастникиВОВТекст = "
	    |ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
		|ИЗ
		|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(
		|						&КонецПериодаРегистрации, 
    	|						ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СведенияОФизлицахУчастникахВОВ
		|
		|ГДЕ
		|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
		|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
		|";
		Запрос.Текст = ФизлицаУчастникиВОВТекст;
    	Запрос.УстановитьПараметр("ФизЛицаУчастникиВОВ", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		
		РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ " + ДоходыТекст + " КАК РасчетОтОбратногоДанныеВОСМС
    	|	ПО Основной.ФизЛицо = РасчетОтОбратногоДанныеВОСМС.ФизЛицо
    	|	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
 		|
   		|";

   КонецЕсли;
   
#КонецОбласти  

#Область КомпенсироватьУдержания
   Если НеобходимыеДанные.ОтОбратногоКомпенсироватьУдержания Тогда
           
    	// для списка погашамых удержаний определим общую сумму
    	Запрос.УстановитьПараметр("СпособыРасчетаФиксированнойСуммой", ПроведениеРасчетовСервер.ПолучитьСписокСпособовРасчетовФиксированнойСуммой());

    	// ПлановыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидРасчета
    	//		ВидСтроки
    	//		Размер
    	//	Описание:
    	// Выбирает плановые и фактические удержания за период регистрации для физлиц, по которым производится расчет "от обратного".
    	// Фактические удержания берем только те, что введены как разовые, чтобы не задублировать плановые, если уже создан и проведен
    	// документ "Расчет ИПН, ОПВ и удержаний" и заново пересчитывают "от обратного"
    		
    	ПлановыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.Период < &ПериодРегистрации ТОГДА &ПериодРегистрации
    	|		ИНАЧЕ ПлановыеУдержания.Период
    	|	КОНЕЦ КАК ДатаНачала,
    	|
    	|	ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1)
    	|				И ПлановыеУдержания.ПериодЗавершения <= &КонецПериодаРегистрации
    	|			ТОГДА КОНЕЦПЕРИОДА(ПлановыеУдержания.ПериодЗавершения, ДЕНЬ)
    	|		ИНАЧЕ МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации))
    	|	КОНЕЦ КАК ДатаОкончания
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК ПлановыеУдержания
    	|
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|		ПО ПлановыеУдержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций КАК СледующиеПлановыеУдержания
    	|		ПО ПлановыеУдержания.Организация = СледующиеПлановыеУдержания.Организация
    	|			И ПлановыеУдержания.Физлицо = СледующиеПлановыеУдержания.Физлицо
    	|			И ПлановыеУдержания.ВидРасчета = СледующиеПлановыеУдержания.ВидРасчета
    	|			И ПлановыеУдержания.ДокументОснование = СледующиеПлановыеУдержания.ДокументОснование
    	|			И СледующиеПлановыеУдержания.Период > ПлановыеУдержания.Период
    	|			И СледующиеПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|
    	|ГДЕ
    	|	ПлановыеУдержания.Организация = &ГоловнаяОрганизация
    	|	И ПлановыеУдержания.Период <= &КонецПериодаРегистрации
    	|	И ВЫБОР
    	|		КОГДА ПлановыеУдержания.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1) 
    	|				И ПлановыеУдержания.ПериодЗавершения < &ПериодРегистрации ТОГДА ПлановыеУдержания.ДействиеЗавершения
    	|		ИНАЧЕ ПлановыеУдержания.Действие
    	|	  КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
    	|	И ПлановыеУдержания.Активность
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	ПлановыеУдержания.ФизЛицо,
    	|	ПлановыеУдержания.ВидРасчета,
    	|	ПлановыеУдержания.Размер,
    	|	ПлановыеУдержания.Период,
    	|	ПлановыеУдержания.ПериодЗавершения
    	|
    	|ИМЕЮЩИЕ
    	|	МИНИМУМ(ЕСТЬNULL(ДОБАВИТЬКДАТЕ(СледующиеПлановыеУдержания.Период, ДЕНЬ, -1), &КонецПериодаРегистрации)) >= &ПериодРегистрации
    	|";
    	Запрос.Текст = ПлановыеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеУдержанияТекст = "ВТ_ПлановыеУдержанияРасчетаОтОбратного";
       
    	// В качестве фактических берем только те, что зарегистрированы как 
    	// разовые, т.к. все остальные будут взяты из плановых
    	ПлановыеИФактическиеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета КАК СпособРасчета,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыИПН КАК ВычитатьИзБазыИПН,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыОПВ КАК ВычитатьИзБазыОПВ,
    	|	Удержания.ВидРасчета.ВычитатьИзБазыВОСМС КАК ВычитатьИзБазыВОСМС,
    	|	Удержания.ВидСтроки,
    	|	СУММА(Удержания.Результат) КАК Результат,
    	|	СУММА(Удержания.Размер) КАК Размер
    	|
    	|ПОМЕСТИТЬ ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	(ВЫБРАТЬ
    	|			ПлановыеУдержания.ФизЛицо,
    	|			ПлановыеУдержания.ВидРасчета,
    	|			""ПлановыеУдержания"" КАК ВидСтроки,
    	|			0 КАК Результат,
    	|			ПлановыеУдержания.Размер
    	|		ИЗ
    	|			" + ПлановыеУдержанияТекст + " КАК ПлановыеУдержания
    	|
    	|	ОБЪЕДИНИТЬ ВСЕ
    	|	
    	|	ВЫБРАТЬ
    	|		Удержания.ФизЛицо,
    	|		Удержания.ВидРасчета,
    	|		""ФактическиеУдержания"" КАК ВидСтроки,
    	|		Удержания.Результат,
    	|		Удержания.Размер
    	|	ИЗ
    	|		Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК Удержания
    	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации КАК ВТ_УчетнаяПолитикаПоПерсоналуОрганизации
    	|			ПО Удержания.Ссылка.Организация = ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.Организация		
    	|
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    	|			ПО Удержания.ФизЛицо = СписокФизЛиц.ФизЛицо
    	|
    	|	ГДЕ
    	|		Удержания.Ссылка.Проведен
    	|		И ВЫБОР
    	|			КОГДА Удержания.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
    	|				ИЛИ (НЕ ВТ_УчетнаяПолитикаПоПерсоналуОрганизации.ВедениеУчетаПоГоловнойОрганизации)
    	|				ТОГДА Удержания.Ссылка.Организация
    	|			ИНАЧЕ Удержания.Ссылка.Организация.ГоловнаяОрганизация
    	|		КОНЕЦ = &ГоловнаяОрганизация 
    	|		И Удержания.Ссылка.ПериодРегистрации = &ПериодРегистрации
    	|		И Удержания.Результат <> 0
    	|	) КАК Удержания
    	|
    	|СГРУППИРОВАТЬ ПО
    	|	Удержания.ФизЛицо,
    	|	Удержания.ВидРасчета,
    	|	Удержания.ВидРасчета.СпособРасчета,
    	|	Удержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Удержания.ФизЛицо
    	|";
    	Запрос.Текст = ПлановыеИФактическиеУдержанияТекст;
    	Запрос.Выполнить();
    	ПлановыеИФактическиеУдержанияТекст = "ВТ_ПлановыеИФактическиеУдержанияРасчетаОтОбратного";
           		
    	// КомпенсируемыеУдержания
    	// Поля:
    	//		ФизЛицо
    	//		ВидУдержания
    	//		Результат
    	//		Размер
    	//	Описание:
    	// Рассчитывает результат по каждому компенсируемому виду удержаний 
    	КомпенсируемыеУдержанияТекст = "
    	|ВЫБРАТЬ
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета КАК ВидРасчетаОтОбратного,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета КАК ВидУдержания,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки,
    	|
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ФактическиеУдержания""
    	|					ТОГДА ПлановыеИФактическиеУдержания.Результат
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета В (&СпособыРасчетаФиксированнойСуммой)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) 
    	|	+
    	|	МАКСИМУМ(ВЫБОР
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|			КОНЕЦ) / 100 * 
    	|	СУММА(ЕСТЬNULL(ОсновныеИДополнительныеНачисления.Результат, 0)) КАК СуммаКомпенсируемыхУдержаний,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийТолькоИПН,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийТолькоОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийТолькоВОСМС,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийБезВОСМС,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС,
    	|
    	|	МАКСИМУМ(ВЫБОР 
    	|				КОГДА ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|					  И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыИПН
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыОПВ
    	|					  И НЕ ПлановыеИФактическиеУдержания.ВычитатьИзБазыВОСМС
    	|				  	  И БазовыеВидыРасчета.ВидРасчета = Основной.ВидРасчета
    	|					ТОГДА ПлановыеИФактическиеУдержания.Размер
    	|				ИНАЧЕ 0
    	|		  	 КОНЕЦ) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|
    	|ПОМЕСТИТЬ ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного
    	|ИЗ
    	|	" + ИмяИсточника + " КАК Основной
    	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПлановыеИФактическиеУдержанияТекст + " КАК ПлановыеИФактическиеУдержания
    	|		ПО Основной.ФизЛицо = ПлановыеИФактическиеУдержания.ФизЛицо
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
    	|		ПО ПлановыеИФактическиеУдержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
    	|		   И ПлановыеИФактическиеУдержания.ВидСтроки = ""ПлановыеУдержания""
    	|		   И ПлановыеИФактическиеУдержания.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом)
    	|
    	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    	|		ПО ПлановыеИФактическиеУдержания.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо
    	|		   И БазовыеВидыРасчета.ВидРасчета = ОсновныеИДополнительныеНачисления.ВидРасчета
    	|
    	|ГДЕ
       	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
		|	" + ВнешнееУсловие + " 
		|
    	|СГРУППИРОВАТЬ ПО
    	|	Основной.НомерСтроки,
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ФизЛицо,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидСтроки
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	Основной.ВидРасчета,
    	|	ПлановыеИФактическиеУдержания.ВидРасчета
    	|";
    	Запрос.Текст = КомпенсируемыеУдержанияТекст;
    	Запрос.Выполнить();
    	КомпенсируемыеУдержанияТекст = "ВТ_КомпенсируемыеУдержанияРасчетаОтОбратного";
           		
    	РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    	|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    	|						КомпенсируемыеУдержания.НомерСтроки,
    	|						СУММА(КомпенсируемыеУдержания.СуммаКомпенсируемыхУдержаний) КАК СуммаКомпенсируемыхУдержаний,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоИПН) КАК ПроцентКомпенсируемыхУдержанийТолькоИПН,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоОПВ) КАК ПроцентКомпенсируемыхУдержанийТолькоОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийТолькоВОСМС) КАК ПроцентКомпенсируемыхУдержанийТолькоВОСМС,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезИПН) КАК ПроцентКомпенсируемыхУдержанийБезИПН,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезОПВ) КАК ПроцентКомпенсируемыхУдержанийБезОПВ,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийБезВОСМС) КАК ПроцентКомпенсируемыхУдержанийБезВОСМС,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС) КАК ПроцентКомпенсируемыхУдержанийИПНиОПВиВОСМС,
    	|						СУММА(КомпенсируемыеУдержания.ПроцентПрочихКомпенсируемыхУдержаний) КАК ПроцентПрочихКомпенсируемыхУдержаний
    	|					ИЗ
    	|						" + КомпенсируемыеУдержанияТекст + " КАК КомпенсируемыеУдержания
    	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.Ссылка КАК ВидРасчетаОтОбратного,
    	|													КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|												ИЗ
    	|													ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    	|							ПО КомпенсируемыеУдержания.ВидРасчетаОтОбратного = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчетаОтОбратного 
    	|							   И КомпенсируемыеУдержания.ВидУдержания = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    	|					СГРУППИРОВАТЬ ПО 
    	|						КомпенсируемыеУдержания.НомерСтроки
    	|					) КАК РасчетОтОбратногоКомпенсируемыеУдержания
    	|	ПО Основной.НомерСтроки = РасчетОтОбратногоКомпенсируемыеУдержания.НомерСтроки
    	|";
    КонецЕсли;
	
#КонецОбласти	
	

#Область ПрочиеНачисления	
    // Разделим прочие начисления на включаемые внутрь расчета "от обратного" и начисляемые "сверху"
    РасчетОтОбратногоПрочиеНачисленияТекст = "
    |ВЫБРАТЬ
    |	Основной.НомерСтроки,
    |	СУММА(ОсновныеИДополнительныеНачисления.СуммаНачислений) КАК ОбщаяСуммаНачислений,
    |	СУММА(ОсновныеИДополнительныеНачисления.ПрочиеДоходы) КАК ПрочиеДоходы,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйВОСМСДоход,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL) 
    |				ТОГДА ОсновныеИДополнительныеНачисления.СуммаНачислений
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК СуммаВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйИПНДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА НЕ (ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета ЕСТЬ NULL)
    |					И ОсновныеИДополнительныеНачисления.ВидРасчета.ОблагаетсяВОСМС <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
    |				ТОГДА ОсновныеИДополнительныеНачисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйВОСМСДоходВключаемыхНачислений,
    |	СУММА(ВЫБОР
    |			КОГДА ОсновныеИДополнительныеНачисления.ВидРасчета.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |				ТОГДА ОсновныеИДополнительныеНачисления.ДополнительныеДанные
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ДополнительныеДанные
    |
    |ПОМЕСТИТЬ ВТ_ПрочиеНачисленияРасчетаОтОбратного
    |ИЗ
    |	" + ИмяИсточника + " КАК Основной
    |
    |	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОсновныеИДополнительныеНачисленияТекст + " КАК ОсновныеИДополнительныеНачисления
    |		ПО Основной.ФизЛицо = ОсновныеИДополнительныеНачисления.ФизЛицо 
    |
    |	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
    |							Ссылка КАК Ссылка,
    |							ВидРасчета КАК ВидРасчета
    |				  	  ИЗ
    |							ПланВидовРасчета." + ИмяПВР + ".ВключаемыеВРасчетОтОбратногоВидыНачислений 
    |
    |					  ОБЪЕДИНИТЬ
    |
    |					  // чтобы учитывать предоставляемые вычеты по ИПН только один раз в месяце
    |					  // даже если были несколько строк расчетов 'от обратного' в разные моменты в месяце,
    |					  // включаем прочие виды 'от обратного' в качестве включаемых для данного
    |					  ВЫБРАТЬ
    |							Основной.ВидРасчета КАК Ссылка,
    |							ПВР.Ссылка КАК ВидРасчета
    |					  ИЗ
    |							" + ИмяИсточника + " КАК Основной
    |							ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета." + ИмяПВР + " КАК ПВР
    |								ПО ПВР.СпособРасчета В (&парамСписокСпособовРасчетаОтОбратного)
    |					  ГДЕ
    |							 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |							И Основной.ВидРасчета.ЗачетОтработанногоВремени
	|							" + ВнешнееУсловие + " 
    |                   ) КАК ВключаемыеВРасчетОтОбратногоВидыНачислений
    |		ПО Основной.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.Ссылка
    |			   И ОсновныеИДополнительныеНачисления.ВидРасчета = ВключаемыеВРасчетОтОбратногоВидыНачислений.ВидРасчета
    |ГДЕ
	|	 Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |	" + ВнешнееУсловие + "
     |
    |СГРУППИРОВАТЬ ПО
    |	Основной.НомерСтроки
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Основной.НомерСтроки";
    Запрос.Текст = РасчетОтОбратногоПрочиеНачисленияТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоПрочиеНачисленияТекст = "ВТ_ПрочиеНачисленияРасчетаОтОбратного";

#КонецОбласти

#Область ДанныеТекущегоРегистратора
    // определим облагаемые ИПН и ОПВ доходы, начисленные текущий регистратором,
    // т.к. их еще нет в ИПНСведенияОДоходах и ОПВСведенияОДоходах
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "
    |ВЫБРАТЬ
    |	Начисления.ФизЛицо,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |	  	КОНЕЦ) КАК ОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяИПН = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйИПНДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяОПВ = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйОПВДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяВОСМС <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК ОблагаемыйВОСМСДоход,
    |	СУММА(ВЫБОР
    |			КОГДА Начисления.ВидРасчета.ОблагаетсяВОСМС = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
    |				ТОГДА Начисления.Результат
    |			ИНАЧЕ 0
    |		КОНЕЦ) КАК НеОблагаемыйВОСМСДоход
    |
    |ПОМЕСТИТЬ ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного
    |ИЗ
    |	(ВЫБРАТЬ
    |		Основной.ФизЛицо,
    |		Основной.ВидРасчета,
    |		Основной.Результат
    |	ИЗ
    |		" + ИмяИсточника + " КАК Основной
    |
    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК СписокФизЛиц
    |			ПО Основной.ФизЛицо = СписокФизЛиц.ФизЛицо
    |	ГДЕ
    |		Основной.ВидРасчета В (&УжеРассчитанныеВидыРасчета)
    |	) КАК Начисления
    |
    |СГРУППИРОВАТЬ ПО
    |	Начисления.ФизЛицо
    |
    |ИНДЕКСИРОВАТЬ ПО
    |	Начисления.ФизЛицо";
    Запрос.Текст = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст;
    Запрос.Выполнить();
    РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст = "ВТ_БазаИсчисленияТекущегоРегистратораРасчетаОтОбратного";
   
   
 #КонецОбласти
 
    // общие для любого вида компенсируемых удержаний данные
    РасчетОтОбратногоСоединенияТекст = РасчетОтОбратногоСоединенияТекст + "
    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&ПериодРегистрации, Организация = &ОбособленноеПодразделение) КАК УчетнаяПолитикаНУ
    |	ПО ИСТИНА
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоПрочиеНачисленияТекст + " КАК РасчетОтОбратногоПрочиеНачисления
    |	ПО Основной.НомерСтроки = РасчетОтОбратногоПрочиеНачисления.НомерСтроки
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетОтОбратногоБазаИсчисленияТекущегоРегистратораТекст + " КАК РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора
    |	ПО Основной.ФизЛицо = РасчетОтОбратногоБазаИсчисленияТекущегоРегистратора.ФизЛицо
    |	   И Основной.ВидРасчета В (&ВидыРасчетаОтОбратного)
    |
    |// определим компенсируемые удержания для каждого вида расчета от обратного
    |ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
    |		КомпенсируемыеУдержания.Ссылка КАК ВидРасчета,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог)
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьИПН,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьОПВ,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьВОСМС,
    |		СУММА(ВЫБОР 
    |				КОГДА КомпенсируемыеУдержания.ВидРасчета НЕ В (ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы), 
    |																ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ВзносыОбязательноеСоциальноеМедицинскоеСтрахование)) 
    |					ТОГДА 1 
    |				ИНАЧЕ 0 
    |			КОНЕЦ) КАК КомпенсироватьУдержания
    |	ИЗ
    |		ПланВидовРасчета." + ИмяПВР + ".КомпенсируемыеРасчетомОтОбратногоВидыУдержаний КАК КомпенсируемыеУдержания
    |	ГДЕ
    |		КомпенсируемыеУдержания.Ссылка В (&ВидыРасчетаОтОбратного)
    |	СГРУППИРОВАТЬ ПО
    |		КомпенсируемыеУдержания.Ссылка) КАК КомпенсируемыеРасчетомОтОбратногоВидыУдержаний
    |ПО Основной.ВидРасчета = КомпенсируемыеРасчетомОтОбратногоВидыУдержаний.ВидРасчета
    |
    |ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаНеРезидентыТекст + " КАК ФизлицаНеРезиденты
    |	ПО ФизлицаНеРезиденты.ФизЛицо = Основной.ФизЛицо
    |
    |";
           	
    
    СтруктураТекстЗапроса = Новый Структура("РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст", 
    										 РасчетОтОбратногоПоляТекст, РасчетОтОбратногоСоединенияТекст);
    
    Возврат СтруктураТекстЗапроса;
	
КонецФункции 

// Получить данные для расчета ИПН, по правилам 2018 года:
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2019(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("Налогоплательщик", 			   	Налогоплательщик);
	Запрос.УстановитьПараметр("ПериодРегистрации", 		   		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				Регистратор);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета",				'20180101');
	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", 	 Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20180101'));
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20180101235959'));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	 Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ " + СписокФизЛицТекст + " КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
	КонецЕсли;
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ГражданствоФизЛицТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК
	|
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ФизЛицо,
	|		Периоды.Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО ВЫБОР
	|					КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА Периоды.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ Периоды.ФизЛицо 
	|				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|				И ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВЫБОР 
	|				КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА Периоды.ФизЛицо.ФизЛицо
	|				ИНАЧЕ Периоды.ФизЛицо
	|			КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|			И Периоды.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период";

	Запрос.Текст = ГражданствоФизЛицТекст;
	Запрос.Выполнить();
	ГражданствоФизЛицТекст = "ВТ_ГражданствоФизЛиц";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, объект исчисления по физлицам из СписокФизлиц
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_ДоходыВременная
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДохода
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_ДоходыВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыВременная.Период КАК Период,
		|	ДоходыВременная.Физлицо КАК Физлицо,
		|	ДоходыВременная.ОблагаемыйДоход КАК ОблагаемыйДоход,
		|	ДоходыВременная.СуммаДоходаВсего,
		|	ДоходыВременная.СуммаНеоблагаемогоДохода,
		|	ДоходыВременная.СуммаДоходаОборот,
		|	ДоходыВременная.СуммаВычетаОборот,
		|	ДоходыВременная.ИсчисленнаяОблагаемаяБазаОборот,
		|	ДоходыВременная.ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	ВТ_ДоходыВременная КАК ДоходыВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДохода.Период,
		|	СотрудникиБезДохода.Физлицо,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДохода КАК СотрудникиБезДохода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоходыВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДохода";
		
	Иначе
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|";
		
	КонецЕсли;
	

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалогЗаМесяц	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалогЗаМесяц	
	|
	|ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.Налогоплательщик = &Налогоплательщик
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "И ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор", "") + "
	|	И ИПНРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТ_ИПНРасчетыСБюджетом";

	// ВычетыИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//		ПримененныйВычет
	//		РазрешенныйВычет
	//
	//	Описание:
	//	Выбирает примененные вычеты за период 
	ВычетыИПНТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ) КАК Период,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо КАК ФизЛицо,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот) КАК ПримененныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныеВычетыВТекущемРасчете,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот) КАК РазрешенныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныеВычетыВТекущемРасчете
	|ПОМЕСТИТЬ ВТ_ВычетыИПН
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&ПервыйМесяцНалоговогоПериода,
	|			&ПоследнийМесяцНалоговогоПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ВычетыИПНТекст;
	Запрос.Выполнить();
	ВычетыИПНТекст = "ВТ_ВычетыИПН";

	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		ОблагаемыйДоход
	//		РанееИсчисленнаяОблагаемаяБаза
	//		РанееИсчисленныйНалог
	//	
	//	Описание:
	//	Выбирает примененные вычеты, доход и исчисленный налог 
	//	и производит расчет налога
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеоблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	Доходы.ПримененнаяЛьготаОборот КАК РанееПримененнаяЛьгота,
	|	ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалогЗаМесяц, 0) КАК РанееИсчисленныйНалог,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычеты, 0) КАК ПримененныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычетыВТекущемРасчете, 0) КАК ПримененныеВычетыВТекущемРасчете,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычеты, 0) КАК РазрешенныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычетыВТекущемРасчете, 0) КАК РазрешенныеВычетыВТекущемРасчете,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ИЛИ ТИПЗНАЧЕНИЯ(Доходы.ФизЛицо) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеПрименятьКорректировкуПоПрочимПризнакам
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО Доходы.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|			И Доходы.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВычетыИПНТекст + " КАК ВычетыИПН
	|		ПО Доходы.ФизЛицо = ВычетыИПН.ФизЛицо
	|			И Доходы.Период = ВычетыИПН.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ГражданствоФизЛицТекст + " КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.ФизЛицо = Доходы.ФизЛицо
	|			И ГражданствоФизЛиц.Период = Доходы.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Получить данные для расчета ИПН, по правилам 2020 года:
//	1. Вычеты предоставляются по заявлению, все переносятся в пределах календарного года
//	2. Разрешенные и примененные суммы вычетов хранятся в регистре СведенияОбИсчисленииВычетовИПН
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей ИПН
//
// Возвращаемое значение:
//  Выборка из результата запроса
//
Функция ПолучитьДанныеДляРасчетаИПНПосле2020(ПервыйМесяцНалоговогоПериода, ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, ГоловнаяОрганизация,
												Регистратор, Знач СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредоставлятьВычетВМесяцеОтсутствияДохода = УчетнаяПолитикаСервер.ПредоставлятьВычетВМесяцеОтсутствияДохода(Налогоплательщик, ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	Запрос.УстановитьПараметр("Налогоплательщик", 			   	Налогоплательщик);
	Запрос.УстановитьПараметр("ПериодРегистрации", 		   		НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 				Регистратор);
	Запрос.УстановитьПараметр("ДатаНачалаРасчета",				'20180101');
	Запрос.УстановитьПараметр("ПервыйМесяцНалоговогоПериода", 	 Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20180101'));
	Запрос.УстановитьПараметр("ПоследнийМесяцНалоговогоПериода", Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20180101235959'));

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	 Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов-физлиц по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_ПериодыВрем
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|;
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Период КАК Период,
		|	Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_ПериодыВрем КАК Периоды
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ПериодРегистрации,
		|	Периоды.ФизЛицо
		|ИЗ " + СписокФизЛицТекст + " КАК Периоды
		|ГДЕ
		|	Периоды.ФизЛицо НЕ В(ВЫБРАТЬ РАЗЛИЧНЫЕ Т.ФизЛицо ИЗ ВТ_ПериодыВрем КАК Т)
		|
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
		Запрос.Текст = "УНИЧТОЖИТЬ ВТ_ПериодыВрем";
		Запрос.Выполнить();
		
	Иначе
		ПериодыТекст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо
		|
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах КАК ИПНСведенияОДоходах
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
		|		ПО Работники.Физлицо = ИПНСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ИПНСведенияОДоходах.ПериодРегистрации = &ПериодРегистрации И
		|	ИПНСведенияОДоходах.Налогоплательщик = &Налогоплательщик И
		|	ИПНСведенияОДоходах.Период >= &ДатаНачалаРасчета И
		|	ИПНСведенияОДоходах.Активность
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|";
		
		Запрос.Текст = ПериодыТекст;
		Запрос.Выполнить();
		ПериодыТекст = "ВТ_Периоды";
		
	КонецЕсли;
	
	// ФизлицаНеРезиденты
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-нерезидентов
	ГражданствоФизЛицТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Периоды.ФизЛицо,
	|	Периоды.Период,
	|	ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ) КАК НеЯвляетсяНалоговымРезидентомРК
	|
	|ПОМЕСТИТЬ ВТ_ГражданствоФизЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.ФизЛицо,
	|		Периоды.Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|	ИЗ
	|		" + ПериодыТекст + " КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО ВЫБОР
	|					КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА Периоды.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ Периоды.ФизЛицо 
	|				КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|				И ГражданствоФизЛиц.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ВЫБОР 
	|				КОГДА Периоды.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА Периоды.ФизЛицо.ФизЛицо
	|				ИНАЧЕ Периоды.ФизЛицо
	|			КОНЕЦ = ГражданствоФизЛиц.ФизЛицо
	|			И Периоды.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.Период";

	Запрос.Текст = ГражданствоФизЛицТекст;
	Запрос.Выполнить();
	ГражданствоФизЛицТекст = "ВТ_ГражданствоФизЛиц";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//		ИсчисленнаяОблагаемаяБазаОборот
	//
	//	Описание:
	// Выбирает общую сумму доходов, облагаемые налогом доходы, объект исчисления по физлицам из СписокФизлиц
	Если ПредоставлятьВычетВМесяцеОтсутствияДохода Тогда
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_ДоходыВременная
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Периоды.Период КАК Период,
		|	ВТ_Периоды.ФизЛицо КАК Физлицо
		|ПОМЕСТИТЬ ВТ_СотрудникиБезДохода
		|ИЗ
		|	ВТ_Периоды КАК ВТ_Периоды
		|ГДЕ
		|	НЕ ВТ_Периоды.Физлицо В
		|				(ВЫБРАТЬ
		|					Т.Физлицо
		|				ИЗ
		|					ВТ_ДоходыВременная КАК Т)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоходыВременная.Период КАК Период,
		|	ДоходыВременная.Физлицо КАК Физлицо,
		|	ДоходыВременная.ОблагаемыйДоход КАК ОблагаемыйДоход,
		|	ДоходыВременная.СуммаДоходаВсего,
		|	ДоходыВременная.СуммаНеоблагаемогоДохода,
		|	ДоходыВременная.СуммаДоходаОборот,
		|	ДоходыВременная.СуммаВычетаОборот,
		|	ДоходыВременная.ИсчисленнаяОблагаемаяБазаОборот,
		|	ДоходыВременная.ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	ВТ_ДоходыВременная КАК ДоходыВременная
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиБезДохода.Период,
		|	СотрудникиБезДохода.Физлицо,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	ВТ_СотрудникиБезДохода КАК СотрудникиБезДохода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоходыВременная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_СотрудникиБезДохода";
		
	Иначе
		
		ДоходыТекст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
		|	ИПНСведенияОДоходах.ФизЛицо КАК Физлицо,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) - СУММА(ИПНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
		|	СУММА(ИПНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	СУММА(ВЫБОР
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот
		|			КОГДА НЕ(ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН)
		|				ТОГДА ИПНСведенияОДоходах.СуммаВычетаОборот
		|			ИНАЧЕ 0
		|		  КОНЕЦ) КАК СуммаНеоблагаемогоДохода,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
		|				ТОГДА ИПНСведенияОДоходах.СуммаДоходаОборот 
		|			ИНАЧЕ 0 
		|		  КОНЕЦ) КАК СуммаДоходаОборот,
		|	СУММА(ВЫБОР 
		|			КОГДА ИПНСведенияОДоходах.ВидРасчета ССЫЛКА Справочник.ВычетыИПН 
		|				ТОГДА 0
		|			ИНАЧЕ ИПНСведенияОДоходах.СуммаВычетаОборот
		|		  КОНЕЦ) КАК СуммаВычетаОборот,
		|	СУММА(ИПНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБазаОборот,
		|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК ПримененнаяЛьготаОборот
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
		|							&ПервыйМесяцНалоговогоПериода,
		|							&ПоследнийМесяцНалоговогоПериода,
		|							МЕСЯЦ,
		|							Налогоплательщик = &Налогоплательщик
		|							И ПериодРегистрации <= &ПериодРегистрации
		|							И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК ИПНСведенияОДоходах
		|
		|
		|СГРУППИРОВАТЬ ПО
		|	ИПНСведенияОДоходах.Физлицо,
		|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	Период
		|";
		
	КонецЕсли;
	

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
	
	// ИПНРасчетыСБюджетом
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалогЗаМесяц	
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру ИПНРасчетыСБюджетом) для СписокФизлиц
	ИПНРасчетыСБюджетомТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНРасчетыСБюджетом.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНРасчетыСБюджетом.Налог) КАК ИсчисленныйНалогЗаМесяц	
	|
	|ПОМЕСТИТЬ ВТ_ИПНРасчетыСБюджетом
	|ИЗ
	|	РегистрНакопления.ИПНРасчетыСБюджетом КАК ИПНРасчетыСБюджетом
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНРасчетыСБюджетом.ФизЛицо
	|
	|ГДЕ
	|	ИПНРасчетыСБюджетом.МесяцНалоговогоПериода >= &ПервыйМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.МесяцНалоговогоПериода <= &ПоследнийМесяцНалоговогоПериода
	|	И ИПНРасчетыСБюджетом.Налогоплательщик = &Налогоплательщик
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "И ИПНРасчетыСБюджетом.Регистратор <> &парамРегистратор", "") + "
	|	И ИПНРасчетыСБюджетом.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ИПНРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ИПНРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ИПНРасчетыСБюджетом.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ИПНРасчетыСБюджетом.ФизЛицо	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНРасчетыСБюджетом.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНРасчетыСБюджетом.МесяцНалоговогоПериода, МЕСЯЦ)
	|";

	Запрос.Текст = ИПНРасчетыСБюджетомТекст;
	Запрос.Выполнить();
	ИПНРасчетыСБюджетомТекст = "ВТ_ИПНРасчетыСБюджетом";

	// ВычетыИПН
	//	Поля:
	//		Период
	//		ФизЛицо
	//		ПримененныйВычет
	//		РазрешенныйВычет
	//
	//	Описание:
	//	Выбирает примененные вычеты за период 
	ВычетыИПНТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ) КАК Период,
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо КАК ФизЛицо,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот) КАК ПримененныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.ПримененныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныеВычетыВТекущемРасчете,
	|	СУММА(СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот) КАК РазрешенныеВычеты,
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОбИсчисленииВычетовИПНОбороты.Регистратор = &парамРегистратор
	|				ТОГДА СведенияОбИсчисленииВычетовИПНОбороты.РазрешенныйВычетОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазрешенныеВычетыВТекущемРасчете
	|ПОМЕСТИТЬ ВТ_ВычетыИПН
	|ИЗ
	|	РегистрНакопления.СведенияОбИсчисленииВычетовИПН.Обороты(
	|			&ПервыйМесяцНалоговогоПериода,
	|			&ПоследнийМесяцНалоговогоПериода,
	|			Регистратор,
	|			Налогоплательщик = &Налогоплательщик
	|				И ПериодРегистрации <= &ПериодРегистрации) КАК СведенияОбИсчисленииВычетовИПНОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОбИсчисленииВычетовИПНОбороты.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(СведенияОбИсчисленииВычетовИПНОбороты.Период, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ВычетыИПНТекст;
	Запрос.Выполнить();
	ВычетыИПНТекст = "ВТ_ВычетыИПН";

	// ИсчисленныйИПН	
	//	Поля:
	//		Физлицо
	//		Период
	//		ОблагаемыйДоход
	//		СуммаДоходаВсего
	//		СуммаНеоблагаемогоДохода
	//		ОблагаемыйДоход
	//		РанееИсчисленнаяОблагаемаяБаза
	//		РанееИсчисленныйНалог
	//	
	//	Описание:
	//	Выбирает примененные вычеты, доход и исчисленный налог 
	//	и производит расчет налога
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеоблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБазаОборот КАК РанееИсчисленнаяОблагаемаяБаза,
	|	Доходы.ПримененнаяЛьготаОборот КАК РанееПримененнаяЛьгота,
	|	ЕСТЬNULL(ИПНРасчетыСБюджетом.ИсчисленныйНалогЗаМесяц, 0) КАК РанееИсчисленныйНалог,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычеты, 0) КАК ПримененныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.ПримененныеВычетыВТекущемРасчете, 0) КАК ПримененныеВычетыВТекущемРасчете,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычеты, 0) КАК РазрешенныеВычеты,
	|	ЕСТЬNULL(ВычетыИПН.РазрешенныеВычетыВТекущемРасчете, 0) КАК РазрешенныеВычетыВТекущемРасчете,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.НеЯвляетсяНалоговымРезидентомРК, ЛОЖЬ)
	|			ИЛИ ТИПЗНАЧЕНИЯ(Доходы.ФизЛицо) = ТИП(Справочник.Контрагенты)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеПрименятьКорректировкуПоПрочимПризнакам
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНРасчетыСБюджетомТекст + " КАК ИПНРасчетыСБюджетом
	|		ПО Доходы.ФизЛицо = ИПНРасчетыСБюджетом.ФизЛицо
	|			И Доходы.Период = ИПНРасчетыСБюджетом.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВычетыИПНТекст + " КАК ВычетыИПН
	|		ПО Доходы.ФизЛицо = ВычетыИПН.ФизЛицо
	|			И Доходы.Период = ВычетыИПН.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ГражданствоФизЛицТекст + " КАК ГражданствоФизЛиц
	|		ПО ГражданствоФизЛиц.ФизЛицо = Доходы.ФизЛицо
	|			И ГражданствоФизЛиц.Период = Доходы.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Получить данные для расчета ОПВ по ставке 10%
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОПВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОПВДо2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидОПВ", 			Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОПВСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ОПВСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОПВСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");

	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');

	// ФизлицаБезПраваНаПенсию
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаБезПраваНаПенсиюТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
	Запрос.Выполнить();
	ФизлицаБезПраваНаПенсиюТекст = "ВТФизЛицаБезПраваНаПенсию";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизЛицаПенсионеры";

	// ФизлицаИнвалидыБессрочно
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
	ФизлицаИнвалидыБессрочноТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаИнвалидыБессрочно
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец) КАК СведенияОбИнвалидностиФизлиц
	|
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид И
	|	СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&парамСписокГруппИнвалидности) И
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки = &парамПустаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыБессрочноТекст = "ВТФизлицаИнвалидыБессрочно";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет взносов
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаИнвалидыБессрочно.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТПериоды	
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезПраваНаПенсиюТекст + " КАК ФизлицаБезПраваНаПенсию
	|		ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ  = ФизлицаБезПраваНаПенсию.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыБессрочноТекст + " КАК ФизлицаИнвалидыБессрочно
	|		ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаИнвалидыБессрочно.ФизЛицо 
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И ОПВСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ОПВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОПВОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.СуммаДоходаОборот) -	СУММА(ОПВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОПВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|	ИЗ
	|		РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					Регистратор,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОПВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
 	|			ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо 
 	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|	ГДЕ
	|		НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете		
 	|
	|	СГРУППИРОВАТЬ ПО
	|		ОПВСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОПВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВОбороты.Период,
	|	ОПВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
	
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц

	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И", "") + "
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";

	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 75, 0) КАК ОграничениеПоДоходам
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";

	ТипЗначенияОПВТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемый доход за месяц
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база
	ПолеОблагаемаяБазаЗаМесяц = 
	"ВЫБОР 
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" < 0)
	|					ТОГДА 0
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|					ТОГДА " + ПолеОблагаемыйДоходЗаМесяц +"
	|				ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +"
	|		   КОНЕЦ";
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" < 0)
	|					ТОГДА 0
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" < "+ ПолеРазмерОграниченияПоДоходам + ")
	|					ТОГДА " + ПолеОблагаемыйДоходЗаМесяц +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|		   КОНЕЦ КАК " + ТипЗначенияОПВТекст + "))";
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// ИсчисленныйОПВ
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет взносов

	ИсчисленныйОПВТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезПраваНаПенсию,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизЛицаИнвалида,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " - " + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК ОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеВзносыИсчисленные + " КАК ВзносЗаПериод,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееИсчисленныйВзнос,
	|	" + ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные + " КАК ВзносИсчисленный
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период
	|";

	Запрос.Текст = ИсчисленныйОПВТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаОПВ()

// Получить данные для расчета ОПВ по ставке 10%
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОПВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОПВПосле2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидОПВ", 			Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	РеквизитыНалогоплательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель);

	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОПВСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ОПВСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОПВСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");

	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');

	// ФизлицаБезПраваНаПенсию
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаБезПраваНаПенсиюТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
	Запрос.Выполнить();
	ФизлицаБезПраваНаПенсиюТекст = "ВТФизЛицаБезПраваНаПенсию";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизЛицаПенсионеры";

	// ФизлицаИнвалидыБессрочно
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
	ФизлицаИнвалидыБессрочноТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаИнвалидыБессрочно
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец) КАК СведенияОбИнвалидностиФизлиц
	|
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид И
	|	СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&парамСписокГруппИнвалидности) И
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки = &парамПустаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыБессрочноТекст = "ВТФизлицаИнвалидыБессрочно";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет взносов
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаИнвалидыБессрочно.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТПериоды	
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезПраваНаПенсиюТекст + " КАК ФизлицаБезПраваНаПенсию
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ  = ФизлицаБезПраваНаПенсию.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыБессрочноТекст + " КАК ФизлицаИнвалидыБессрочно
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаИнвалидыБессрочно.ФизЛицо 
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И ОПВСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ОПВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОПВОбороты.Период КАК Период,
	|	СУММА(ОПВОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) -	СУММА(ОПВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ОПВСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОПВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|	ИЗ
	|		РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					Регистратор,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОПВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
 	|			ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо 
 	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|	ГДЕ
	|		НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете		
 	|
	|	СГРУППИРОВАТЬ ПО
	|		ОПВСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОПВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВОбороты.Период,
	|	ОПВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
	
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц

	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И", "") + "
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";

	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК МинимальноеОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 50, 0) КАК ОграничениеПоДоходам
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	 //СведенияОбИндивидуальномПредпринимателе
	 
	 СведенияОбИндивидуальномПредпринимателеТекст = 
	 "ВЫБРАТЬ
	 |	ЕСТЬNULL(Организации.ИндивидуальныйПредприниматель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ИндивидуальныйПредприниматель
	 |ПОМЕСТИТЬ ВТСведенияОбИндивидуальномПредпринимателе
	 |ИЗ
	 |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодРегистрации, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПервых
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	 |		ПО УчетнаяПолитикаНалоговыйУчетСрезПервых.Организация = Организации.Ссылка
	 |ГДЕ
	 |	Организации.Ссылка = &парамНалогоплательщик
	 |	И ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПервых.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП, Ложь)";
	 
	 Запрос.Текст = СведенияОбИндивидуальномПредпринимателеТекст;
	 Запрос.Выполнить();
	 СведенияОбИндивидуальномПредпринимателеТекст = "ВТСведенияОбИндивидуальномПредпринимателе";
	
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";

	ТипЗначенияОПВТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемый доход за месяц
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	// минимальное ограничение по доходам
	ПолеРазмерМинимальногоОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.МинимальноеОграничениеПоДоходам, 0)";
	
	// облагаемая база
	ПолеОблагаемаяБазаЗаМесяц = 
	"ВЫБОР 
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" <= 0)
	|					ТОГДА 0
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты И (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерМинимальногоОграниченияПоДоходам+ ")
	|					ТОГДА " + ПолеРазмерМинимальногоОграниченияПоДоходам + "
	|				КОГДА НЕ СведенияОбИндивидуальномПредпринимателе.ИндивидуальныйПредприниматель ЕСТЬ NULL И (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерМинимальногоОграниченияПоДоходам+ ")
	|					ТОГДА " + ПолеРазмерМинимальногоОграниченияПоДоходам + "
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерОграниченияПоДоходам + ")
	|					ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + "
	|				ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам + "
	|		   КОНЕЦ";
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц +" <= 0)
	|					ТОГДА 0
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты И (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерМинимальногоОграниченияПоДоходам+ ")
	|					ТОГДА " + ПолеРазмерМинимальногоОграниченияПоДоходам + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				КОГДА НЕ СведенияОбИндивидуальномПредпринимателе.ИндивидуальныйПредприниматель ЕСТЬ NULL И (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерМинимальногоОграниченияПоДоходам+ ")
	|					ТОГДА " + ПолеРазмерМинимальногоОграниченияПоДоходам + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				КОГДА (" + ПолеОблагаемыйДоходЗаМесяц + " < "+ ПолеРазмерОграниченияПоДоходам + ")
	|					ТОГДА (" + ПолеОблагаемыйДоходЗаМесяц + ") * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|		   КОНЕЦ КАК " + ТипЗначенияОПВТекст + "))";
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// ИсчисленныйОПВ
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет взносов

	ИсчисленныйОПВТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезПраваНаПенсию,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизЛицаИнвалида,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " - " + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК ОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеВзносыИсчисленные + " КАК ВзносЗаПериод,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееИсчисленныйВзнос,
	|	" + ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные + " КАК ВзносИсчисленный
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОбИндивидуальномПредпринимателеТекст+" КАК СведенияОбИндивидуальномПредпринимателе
	|		ПО ДоходыЗаМесяц.Физлицо = СведенияОбИндивидуальномПредпринимателе.ИндивидуальныйПредприниматель
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период
	|";

	Запрос.Текст = ИсчисленныйОПВТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаОПВ()

// Получить данные для расчета ОПВ по ставке 10%
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОПВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОПВПосле2020(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ДополнительныеПараметрыЗапроса = Неопределено, ЭтоРасчетПервойПоловиныМесяца = Ложь) Экспорт
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидОПВ", 			Справочники.НалогиСборыОтчисления.ОбязательныеПенсионныеВзносы);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамПустойВидДохода", 	Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	РеквизитыНалогоплательщика = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Запрос.УстановитьПараметр("парамИндивидуальныйПредприниматель", РеквизитыНалогоплательщика.ИндивидуальныйПредприниматель);
	
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОПВСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ОПВСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОПВСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	СписокГруппИнвалидности = Новый СписокЗначений;
	СписокГруппИнвалидности.Добавить("I");
	СписокГруппИнвалидности.Добавить("II");

	Запрос.УстановитьПараметр("парамИнвалид", Перечисления.ОтношениеКИнвалидности.Инвалид);
	Запрос.УстановитьПараметр("парамСписокГруппИнвалидности",  СписокГруппИнвалидности);
	Запрос.УстановитьПараметр("парамПустаяДата", '00010101');

	// ФизлицаБезПраваНаПенсию
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаБезПраваНаПенсиюТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
	Запрос.Выполнить();
	ФизлицаБезПраваНаПенсиюТекст = "ВТФизЛицаБезПраваНаПенсию";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизЛицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизЛицаПенсионеры";

	// ФизлицаИнвалидыБессрочно
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов I и II группы, у которых инвалидность установлена бессрочно
	ФизлицаИнвалидыБессрочноТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаИнвалидыБессрочно
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец) КАК СведенияОбИнвалидностиФизлиц
	|
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = &парамИнвалид И
	|	СведенияОбИнвалидностиФизлиц.ГруппаИнвалидности В (&парамСписокГруппИнвалидности) И
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки = &парамПустаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Текст = ФизлицаИнвалидыБессрочноТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыБессрочноТекст = "ВТФизлицаИнвалидыБессрочно";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет взносов
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаИнвалидыБессрочно.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТПериоды	
	|ИЗ
	|	РегистрНакопления.ОПВСведенияОДоходах КАК ОПВСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезПраваНаПенсиюТекст + " КАК ФизлицаБезПраваНаПенсию
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ  = ФизлицаБезПраваНаПенсию.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыБессрочноТекст + " КАК ФизлицаИнвалидыБессрочно
	|			ПО ВЫБОР
	|					КОГДА ОПВСведенияОДоходах.ФизЛицо ССЫЛКА Справочник.Контрагенты
	|						ТОГДА ОПВСведенияОДоходах.ФизЛицо.ФизЛицо 
	|					ИНАЧЕ ОПВСведенияОДоходах.ФизЛицо  КОНЕЦ = ФизлицаИнвалидыБессрочно.ФизЛицо 
	|
	|ГДЕ
	|	ОПВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОПВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|	И ОПВСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// получим физлиц и контрагентов в виде соответствия для определения дохода по другому виду
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокФизЛиц.ФизЛицо КАК ФизЛицо,
	|	Контрагенты.Ссылка КАК КонтрагентФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезПраваНаПенсию,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизЛицаИнвалида
	|ПОМЕСТИТЬ ВТ_СоответствиеКонтрагентовИФизЛиц
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.ФизЛицо = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.ФизическиеЛица
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	СписокФизЛиц.ФизЛицо,
	|	Контрагенты.ФизЛицо,
	|	СписокФизЛиц.Период КАК Период,
	|	СписокФизЛиц.ПризнакФизЛицаБезПраваНаПенсию,
	|	СписокФизЛиц.ПризнакФизЛицаПенсионера,
	|	СписокФизЛиц.ПризнакФизЛицаИнвалида
	|ИЗ
	|	ВТПериоды КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Контрагенты.Ссылка = СписокФизЛиц.ФизЛицо
	|
	|ГДЕ
	|	СписокФизЛиц.ФизЛицо ССЫЛКА Справочник.Контрагенты 
	|";
	Запрос.Выполнить();

	// ДоходыПоДругимВидамТекст
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	ОПВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОПВОбороты.Период КАК Период,
	|	СУММА(ОПВОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(ОПВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТДоходыПоДругимВидам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ОПВСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОПВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|	ИЗ
	|		РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					Регистратор,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОПВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК Работники
 	|			ПО Работники.КонтрагентФизЛицо = ОПВСведенияОДоходах.ФизЛицо 
 	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|	ГДЕ
	|		НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете		
 	|
	|	СГРУППИРОВАТЬ ПО
	|		Работники.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОПВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВОбороты.Период,
	|	ОПВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыПоДругимВидамТекст;
	Запрос.Выполнить();
	ДоходыПоДругимВидамТекст = "ВТДоходыПоДругимВидам";
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ОПВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОПВОбороты.Период КАК Период,
	|	СУММА(ОПВОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) -	СУММА(ОПВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ОПВОбороты.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОПВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ОПВСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОПВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОПВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОПВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаИнвалида) КАК ПризнакФизЛицаИнвалида
	|	ИЗ
	|		РегистрНакопления.ОПВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					Регистратор,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОПВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
 	|			ПО Работники.Физлицо = ОПВСведенияОДоходах.ФизЛицо 
 	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)
	|	ГДЕ
	|		НЕ ОПВСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете		
 	|
	|	СГРУППИРОВАТЬ ПО
	|		ОПВСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОПВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОПВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВОбороты.Период,
	|	ОПВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
	
	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц

	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И", "") + "
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТОПВРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц

	ОПВРасчетыСФондамиПоДругимВидамТекст = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаИнвалида) = 0
	|			ТОГДА СУММА(ОПВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|ПОМЕСТИТЬ ВТОПВРасчетыСФондамиПоДругимВидам
	|
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоответствиеКонтрагентовИФизЛиц КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.КонтрагентФизЛицо = ОПВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	" + ?(НЕ ЭтоРасчетПервойПоловиныМесяца, "ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И", "") + "
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	РаботникиОрганизации.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОПВРасчетыСФондамиПоДругимВидамТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиПоДругимВидамТекст = "ВТОПВРасчетыСФондамиПоДругимВидам";

	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления взносов
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК МинимальноеОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 50, 0) КАК ОграничениеПоДоходам
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	 //СведенияОбИндивидуальномПредпринимателе
	 
	 СведенияОбИндивидуальномПредпринимателеТекст = 
	 "ВЫБРАТЬ
	 |	ЕСТЬNULL(Организации.ИндивидуальныйПредприниматель, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ИндивидуальныйПредприниматель
	 |ПОМЕСТИТЬ ВТСведенияОбИндивидуальномПредпринимателе
	 |ИЗ
	 |	РегистрСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(&парамПериодРегистрации, ) КАК УчетнаяПолитикаНалоговыйУчетСрезПервых
	 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	 |		ПО УчетнаяПолитикаНалоговыйУчетСрезПервых.Организация = Организации.Ссылка
	 |ГДЕ
	 |	Организации.Ссылка = &парамНалогоплательщик
	 |	И ЕСТЬNULL(УчетнаяПолитикаНалоговыйУчетСрезПервых.ЕжемесячныйРасчетВзносовИОтчисленийЗаИП, Ложь)";
	 
	 Запрос.Текст = СведенияОбИндивидуальномПредпринимателеТекст;
	 Запрос.Выполнить();
	 СведенияОбИндивидуальномПредпринимателеТекст = "ВТСведенияОбИндивидуальномПредпринимателе";
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = 
		"ВЫБРАТЬ
	   |	1 КАК Приоритет,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка,
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода КАК ВидДохода
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода
   	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	2,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ),
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка,
	   |	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода
	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	2,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ),
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка,
	   |	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода
	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	3,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ),
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка,
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода <> &парамПустойВидДохода
	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	4,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ),
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка,
	   |	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода
	   |
	   |ОБЪЕДИНИТЬ ВСЕ
	   |
	   |ВЫБРАТЬ
	   |	4,
	   |	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ),
	   |	СведенияОСтавкахНалоговСборовОтчислений.Ставка,
	   |	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	   |ИЗ
	   |	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	   |ГДЕ
	   |	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидОПВ
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	   |	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	   |	И СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = &парамПустойВидДохода";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка,
   	|	СведенияОСтавкахНалоговСборовОтчислений.ВидДохода КАК ВидДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет,
  	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	ЕСТЬNULL(УчетнаяПолитика.СтавкаОПВдляИП, 0) КАК Ставка,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2)) КАК ВидДохода
	|ИЗ 
	|РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			
	|ГДЕ
	|	УчетнаяПолитика.Организация = &парамНалогоплательщик
	|	И УчетнаяПолитика.Период >= ДАТАВРЕМЯ(2020, 1, 1)
	|
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОПВ для каждого периода исчисления взносов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";

	ТипЗначенияОПВТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемый доход за месяц
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";	
	// облагаемый доход за месяц по другим видам
	ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам = "ЕСТЬNULL(ДоходыЗаМесяцПоДругимВидам.ИсчисленнаяОблагаемаяБаза, 0)";	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "(ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0) - " + ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам + ")";
	// минимальное ограничение по доходам
	ПолеРазмерМинимальногоОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.МинимальноеОграничениеПоДоходам, 0)";
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";
	// сумма ранее исчисленных взносов по дргуим видам
	ПолеРанееВзносыИсчисленныеПоДругимВидам = "ЕСТЬNULL(ОПВРасчетыСФондамиПоДругимВидам.ИсчисленныйВзнос, 0)";

	// ИсчисленныйОПВ
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет взносов

	ИсчисленныйОПВТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ВЫБОР КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты ТОГДА ДоходыЗаМесяц.Физлицо.ФизЛицо ИНАЧЕ ДоходыЗаМесяц.Физлицо КОНЕЦ КАК ФизЛицоДохода,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезПраваНаПенсию,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизЛицаИнвалида,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК Ставка,
	|	СведенияОбИндивидуальномПредпринимателе.ИндивидуальныйПредприниматель,
	|	" + ПолеРазмерМинимальногоОграниченияПоДоходам + " КАК РазмерМинимальногоОграниченияПоДоходам,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам + " КАК РанееИсчисленнаяОблагаемаяБазаПоДругимВидам,
	|	" + ПолеРазмерОграниченияПоДоходам + "+" + ПолеРанееИсчисленнаяОблагаемаяБазаПоДругимВидам +" КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,                   
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееИсчисленныйВзнос,
	|	" + ПолеРанееВзносыИсчисленныеПоДругимВидам + " КАК РанееИсчисленныйВзносПоДругимВидам
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ДоходыПоДругимВидамТекст+" КАК ДоходыЗаМесяцПоДругимВидам
	|		ПО ДоходыЗаМесяц.Период = ДоходыЗаМесяцПоДругимВидам.Период 
	|			И ДоходыЗаМесяц.ФизЛицо = ДоходыЗаМесяцПоДругимВидам.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиПоДругимВидамТекст+" КАК ОПВРасчетыСФондамиПоДругимВидам
	|		ПО ОПВРасчетыСФондамиПоДругимВидам.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондамиПоДругимВидам.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо ССЫЛКА Справочник.Контрагенты
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|				КОГДА ДоходыЗаМесяц.Физлицо = &парамИндивидуальныйПредприниматель
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ""ИП""
	|				ИНАЧЕ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОбИндивидуальномПредпринимателеТекст+" КАК СведенияОбИндивидуальномПредпринимателе
	|		ПО ДоходыЗаМесяц.Физлицо = СведенияОбИндивидуальномПредпринимателе.ИндивидуальныйПредприниматель
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период
	|";

	Запрос.Текст = ИсчисленныйОПВТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаОПВ()

// Получить данные для расчета СО с мин. ограничением на объект исчисления,
// опциональный ежемесячный расчет за ИП
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОПосле2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено)
									
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПериодРегистрации));
	
	ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = Ложь;
	ДанныеНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Если ДанныеНалогоплательщика.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Налогоплательщик, ПериодРегистрации);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеНалогоплательщика.ИндивидуальныйПредприниматель);
		
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТ_ФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизлицаПенсионеры";

	ПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизЛиц.Период КАК Период,
	|	ПериодыФизЛиц.Физлицо КАК Физлицо,
	|	ПериодыФизЛиц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ПериодыФизЛиц.ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО (Работники.Физлицо = СОСведенияОДоходах.ФизЛицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|	ГДЕ
	|		СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|		И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|		И НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|		И СОСведенияОДоходах.Активность
	|	
	|) КАК ПериодыФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";
		
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";	
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПустаяДата", 			  Дата(1,1,1));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
		|ВЫБРАТЬ
		|	СООбороты.ФизЛицо КАК ФизЛицо,
		|	СООбороты.Период КАК Период,
		|	СУММА(СООбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
		|			ТОГДА СУММА(СООбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(СООбороты.СуммаВычетаОборот)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОблагаемыйДоход,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.ОблагаемаяБаза) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Физлицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ) КАК Период,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаДоходаОборот,
		|		СУММА(ЕСТЬNULL(ВЫБОР
		|							КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|								ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0)) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаВычетаОборот, 0)) КАК СуммаВычетаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.ОблагаемаяБазаОборот, 0)) КАК ОблагаемаяБаза,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаНачислений,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|	ИЗ
		|		" + ПериодыТекст + " КАК Работники 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&парамНачало,
		|				&парамКонец,
		|				Регистратор,
		|				ПериодРегистрации <= &парамКонецПериодаРегистрации
		|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
		|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
		|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
		|	ГДЕ 
		|		НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
		|
		|	СГРУППИРОВАТЬ ПО
		|		Работники.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)) КАК СООбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СООбороты.Период,
		|	СООбороты.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СООбороты.ФизЛицо,
		|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ СОРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	//	за исключением ИП
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность " + ?(ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП, " И
	|	ОПВРасчетыСФондами.ФизЛицо <> &ИндивидуальныйПредприниматель", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 7, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТ_РазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// Ограничение на объект исчисления 
	ПолеОграничениеНаМинОбъектИсчисления = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0 
	|		И " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " < " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	ТОГДА " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО + " < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.СуммаДоходаВсего,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОграничениеНаМинОбъектИсчисления + " КАК МинОбъектИсчисления,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСО()

// Получить данные для расчета СО с мин. ограничением на объект исчисления,
// опциональный ежемесячный расчет за ИП
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные отчисления 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей СО
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСОПосле2020(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено)
									
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидСО", 			Справочники.НалогиСборыОтчисления.ОбязательныеСоциальныеОтчисления);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПериодРегистрации));
	
	ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = Ложь;
	ДанныеНалогоплательщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Налогоплательщик, "ЮрФизЛицо,ИндивидуальныйПредприниматель");
	Если ДанныеНалогоплательщика.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП = ПроцедурыНалоговогоУчета.ПолучитьПризнакЕжемесячногоРасчетаВзносовИОтчисленийЗаИП(Налогоплательщик, ПериодРегистрации);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИндивидуальныйПредприниматель", ДанныеНалогоплательщика.ИндивидуальныйПредприниматель);
		
	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	// ФизлицаБезСоциальногоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному страхованию
	ФизлицаБезСоциальногоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаБезСоциальногоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезСоциальногоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезСоциальногоСтрахованияТекст = "ВТ_ФизлицаБезСоциальногоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонецПериодаРегистрации) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизлицаПенсионеры";

	ПериодыТекст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыФизЛиц.Период КАК Период,
	|	ПериодыФизЛиц.Физлицо КАК Физлицо,
	|	ПериодыФизЛиц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ПериодыФизЛиц.ПризнакФизЛицаПенсионера
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СОСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаБезСоциальногоСтрахования.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаБезСоциальногоСтрахования,
	|		ВЫБОР
	|			КОГДА НЕ ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.СОСведенияОДоходах КАК СОСведенияОДоходах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|			ПО (Работники.Физлицо = СОСведенияОДоходах.ФизЛицо)
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезСоциальногоСтрахованияТекст + " КАК ФизлицаБезСоциальногоСтрахования
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаБезСоциальногоСтрахования.ФизЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|			ПО СОСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|	ГДЕ
	|		СОСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|		И СОСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|		И НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
	|		И СОСведенияОДоходах.Активность
	|	
	|) КАК ПериодыФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";
		
	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";	
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПериодыФизЛиц.Период КАК Период
		|ИЗ
		|	" + ПериодыТекст + " КАК ПериодыФизЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамПустаяДата", 			  Дата(1,1,1));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
		|ВЫБРАТЬ
		|	СООбороты.ФизЛицо КАК ФизЛицо,
		|	СООбороты.Период КАК Период,
		|	СУММА(СООбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0 
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0 
		|			ТОГДА СУММА(СООбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(СООбороты.СуммаВычетаОборот)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОблагаемыйДоход,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
		|				И МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) = 0
		|			ТОГДА СУММА(СООбороты.ОблагаемаяБаза) 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|	МАКСИМУМ(СООбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|
		|ПОМЕСТИТЬ ВТ_Доходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Работники.Физлицо КАК Физлицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ) КАК Период,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаДоходаОборот,
		|		СУММА(ЕСТЬNULL(ВЫБОР
		|							КОГДА СОСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
		|								ТОГДА СОСведенияОДоходах.СуммаДоходаОборот
		|							ИНАЧЕ 0
		|						КОНЕЦ, 0)) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаВычетаОборот, 0)) КАК СуммаВычетаОборот,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.ОблагаемаяБазаОборот, 0)) КАК ОблагаемаяБаза,
		|		СУММА(ЕСТЬNULL(СОСведенияОДоходах.СуммаДоходаОборот, 0)) КАК СуммаНачислений,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаБезСоциальногоСтрахования) КАК ПризнакФизЛицаБезСоциальногоСтрахования,
		|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
		|	ИЗ
		|		" + ПериодыТекст + " КАК Работники 
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СОСведенияОДоходах.Обороты(
		|				&парамНачало,
		|				&парамКонец,
		|				Регистратор,
		|				ПериодРегистрации <= &парамКонецПериодаРегистрации
		|				И Налогоплательщик = &парамНалогоплательщик) КАК СОСведенияОДоходах
		|			ПО Работники.Физлицо = СОСведенияОДоходах.ФизЛицо 
		|				И Работники.Период = НАЧАЛОПЕРИОДА(СОСведенияОДоходах.Период, МЕСЯЦ)
		|	ГДЕ 
		|		НЕ СОСведенияОДоходах.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете
		|
		|	СГРУППИРОВАТЬ ПО
		|		Работники.ФизЛицо,
		|		НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)) КАК СООбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	СООбороты.Период,
		|	СООбороты.Физлицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СООбороты.ФизЛицо,
		|	СООбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
		
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами)
	//  для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезСоциальногоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(СОРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	СОРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	СОРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	СОРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	СОРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ СОРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	СОРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  для СписокФизлиц
	//	за исключением ИП
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ("+СписокФизЛицТекст+") КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо 
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОПВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОПВРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ОПВРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ОПВРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	НЕ ОПВРасчетыСФондами.Регистратор ССЫЛКА Документ.ОтражениеНалоговойОтчетностиВРеглУчете И
	|	ОПВРасчетыСФондами.Активность " + ?(ЕжемесячныйРасчетаВзносовИОтчисленийЗаИП, " И
	|	ОПВРасчетыСФондами.ФизЛицо <> &ИндивидуальныйПредприниматель", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 7, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТ_РазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТ_РазмерОграниченияПоДоходам";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = &парамВидСО
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамПустаяОрганизация
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка) КАК ВидДохода,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	ВЫРАЗИТЬ(""ИП"" КАК СТРОКА(2)) КАК ВидДохода,
	|	ЕСТЬNULL(УчетнаяПолитика.СтавкаСОДляИП, 0) КАК Ставка
	|ИЗ 
	|РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			
	|ГДЕ
	|	УчетнаяПолитика.Организация = &парамНалогоплательщик
	|	И УчетнаяПолитика.Период >= ДАТАВРЕМЯ(2020, 1, 1)
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку СО для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода КАК ВидДохода,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период,
	|			СведенияОСтавкахНалоговСборовОтчислений.ВидДохода) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|	      			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ВидДохода = СведенияОСтавкахНалоговСборовОтчислений.ВидДохода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияСОТекст  = "ЧИСЛО(15, 2)";
	
	// Ограничение на объект исчисления 
	ПолеОграничениеНаМинОбъектИсчисления = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)";
	
	// сумма исчисленных пенсионных взносов за период
	ПолеПенсионныеВзносы = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";

	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база по СО
	ПолеБазаДляИсчисленияСО = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0 
	|		И " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " < " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	ТОГДА " + ПолеОграничениеНаМинОбъектИсчисления + "
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + " > 0
	|	ТОГДА " + ПолеОблагаемыйДоходЗаМесяц + " - " + ПолеПенсионныеВзносы + "
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// минимальное ограчение соц.отчислений по ИП на упрощенке за самого себя
	ПолеРазмерМинОграниченияСОпоИП = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0) * СведенияОСтавкахНалоговСборовОтчислений.Ставка";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияСО +" > 0) 
	|				ТОГДА 
	|					ВЫБОР 
	|						КОГДА (" + ПолеБазаДляИсчисленияСО + " < "+ ПолеРазмерОграниченияПоДоходам + ")
	|						ТОГДА " + ПолеБазаДляИсчисленияСО +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|						ИНАЧЕ " + ПолеРазмерОграниченияПоДоходам +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|					КОНЕЦ
	|				ИНАЧЕ 0
	|				КОНЕЦ КАК " + ТипЗначенияСОТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(СОРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеСО
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет отчислений

	ИсчисленныеСОТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезСоциальногоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.СуммаДоходаВсего,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияСО + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОграничениеНаМинОбъектИсчисления + " КАК МинОбъектИсчисления,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходах,
	|	" + ПолеПенсионныеВзносы + " КАК ОПВЗаМесяц,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМинОграниченияСОпоИП + " КАК МинОграничениеСОпоИП,
	|	" + ПолеОтчисленияИсчисленные + " КАК СОЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СОРасчетыСФондамиТекст+" КАК СОРасчетыСФондами
	|		ПО СОРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И СОРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОПВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И ВЫБОР 
	|				КОГДА ДоходыЗаМесяц.Физлицо = &ИндивидуальныйПредприниматель
	|					ТОГДА СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ""ИП""
	|				ИНАЧЕ СведенияОСтавкахНалоговСборовОтчислений.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)
	|			КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеСОТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСО()

// Получить данные для расчета СН по фиксированной ставке
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2019(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачало",				   	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец",   				   	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090131235959'));
	Запрос.УстановитьПараметр("парамВидСН", 					   Справочники.НалогиСборыОтчисления.СоциальныйНалог);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов, по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыГодаТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|   СНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_ПериодыГода
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СНСведенияОДоходах.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";	
	
	Запрос.Текст = ПериодыГодаТекст;
	Запрос.Выполнить();
	ПериодыГодаТекст = "ВТ_ПериодыГода";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) - СУММА(СНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(СНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СНСведенияОДоходах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыГодаТекст+" КАК Периоды
	|		ПО (Периоды.Период = НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ))
	|			И (Периоды.ФизЛицо = СНСведенияОДоходах.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТ_СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода >= &парамНачало И
	|	СНИсчисленный.МесяцНалоговогоПериода <= &парамКонец И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо,
	|	СНИсчисленный.МесяцНалоговогоПериода";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТ_СНИсчисленный";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК КорректировкаДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ПериодРегистрации,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// определим учетную политику и размеры регламентированных показателей за каждый из месяцев
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|	
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыГодаТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеОблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|
	|	ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0) КАК РанееИсчисленныйНалог,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0) КАК ИсчисленныеОтчисления,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|
	|	ЕСТЬNULL(РазмерПрименяемойКорректировки.КорректировкаДохода, 0) КАК СуммаКорректировкиДохода
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Доходы.ФизЛицо = СНИсчисленный.ФизЛицо
	|			И Доходы.Период = СНИсчисленный.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Доходы.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНСведенияОДоходах + " КАК РазмерПрименяемойКорректировки
	|		ПО Доходы.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|			И Доходы.Период = РазмерПрименяемойКорректировки.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО Доходы.Период = РасчетныеПоказатели.Период
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009()

// Получить данные для расчета СН по фиксированной ставке
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2020(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачало",				   	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец",   				   	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090131235959'));
	Запрос.УстановитьПараметр("парамВидСН", 					   Справочники.НалогиСборыОтчисления.СоциальныйНалог);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов, по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыГодаТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|   СНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_ПериодыГода
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СНСведенияОДоходах.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";	
	
	Запрос.Текст = ПериодыГодаТекст;
	Запрос.Выполнить();
	ПериодыГодаТекст = "ВТ_ПериодыГода";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) - СУММА(СНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(СНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СНСведенияОДоходах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыГодаТекст+" КАК Периоды
	|		ПО (Периоды.Период = НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ))
	|			И (Периоды.ФизЛицо = СНСведенияОДоходах.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТ_СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода >= &парамНачало И
	|	СНИсчисленный.МесяцНалоговогоПериода <= &парамКонец И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо,
	|	СНИсчисленный.МесяцНалоговогоПериода";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТ_СНИсчисленный";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК КорректировкаДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ПериодРегистрации,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТ_ВОСМСРасчетыСФондами";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// определим учетную политику и размеры регламентированных показателей за каждый из месяцев
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|	
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыГодаТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеОблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|
	|	ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0) КАК РанееИсчисленныйНалог,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(ВОСМСРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВОСМС,
	|
	|	ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0) КАК ИсчисленныеОтчисления,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП,
	|
	|	ЕСТЬNULL(РазмерПрименяемойКорректировки.КорректировкаДохода, 0) КАК СуммаКорректировкиДохода
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Доходы.ФизЛицо = СНИсчисленный.ФизЛицо
	|			И Доходы.Период = СНИсчисленный.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Доходы.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНСведенияОДоходах + " КАК РазмерПрименяемойКорректировки
	|		ПО Доходы.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|			И Доходы.Период = РазмерПрименяемойКорректировки.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВОСМСРасчетыСФондамиТекст + " КАК ВОСМСРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО Доходы.Период = РасчетныеПоказатели.Период
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009()

// Получить данные для расчета СН по фиксированной ставке
//
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные налоги 
//  Налогоплательщик - ссылка на организацию-налогоплательщика
//  ГоловнаяОрганизация - ссылка на головную организацию, по которой осуществляется расчет
//  Регистратор - ссылка на регистратор записей СН
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2022(Знач ПоследнийМесяцНалоговогоПериода, 
																ПериодРегистрации, 
																Налогоплательщик,
																ГоловнаяОрганизация,
																Регистратор, 
																СписокФизЛицТекст, 
																ДополнительныеПараметрыЗапроса = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик", 		Налогоплательщик);
	Запрос.УстановитьПараметр("парамПериодРегистрации", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамРегистратор", 			Регистратор);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", 	Справочники.Организации.ПустаяСсылка());
	
	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СНСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
		|
		|ГДЕ
		|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
		|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И СНСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);
		КонецЕсли;

	КонецЕсли;
	
	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СНСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|
	|ГДЕ
	|	СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", 	   КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамНачало",				   	   Макс(НачалоМесяца(ПервыйМесяцНалоговогоПериода), '20090101'));
	Запрос.УстановитьПараметр("парамКонец",   				   	   Макс(КонецМесяца(ПоследнийМесяцНалоговогоПериода), '20090131235959'));
	Запрос.УстановитьПараметр("парамВидСН", 					   Справочники.НалогиСборыОтчисления.СоциальныйНалог);

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизЛицо
	| 
	|ПОМЕСТИТЬ ВТ_СписокФизЛиц
	|ИЗ
	|	(" + СписокФизЛицТекст + ") КАК СписокФизЛиц
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|";
	
	Запрос.Выполнить();
	СписокФизЛицТекст = "ВТ_СписокФизЛиц";
	
	// Периоды
	// Таблица список периодов, по которым необходимо выполнить расчет налога
	// Поля:
	//		Период
	//		Физлицо
	ПериодыГодаТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|   СНСведенияОДоходах.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТ_ПериодыГода
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах КАК СНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + СписокФизЛицТекст + " КАК Работники
	|			ПО Работники.Физлицо = СНСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	СНСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И СНСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И СНСведенияОДоходах.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо,
	|	Период
	|";	
	
	Запрос.Текст = ПериодыГодаТекст;
	Запрос.Выполнить();
	ПериодыГодаТекст = "ВТ_ПериодыГода";	
	
	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		СуммаДоходаОборот
	//		СуммаВычетаОборот
	//
	//	Описание:
	// Выбирает облагаемые налогом доходы за весь год по физлицам из СписокФизлиц
	ДоходыТекст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	СНСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) - СУММА(СНСведенияОДоходах.СуммаВычетаОборот) КАК ОблагаемыйДоход,
	|	СУММА(СНСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения = ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ СНСведенияОДоходах.СуммаВычетаОборот
	|		КОНЕЦ) КАК СуммаНеОблагаемогоДохода,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборот,
	|	СУММА(ВЫБОР
	|			КОГДА СНСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|				ТОГДА СНСведенияОДоходах.СуммаВычетаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВычетаОборот,
	|	СУММА(СНСведенияОДоходах.ОблагаемаяБазаОборот) КАК ИсчисленнаяОблагаемаяБаза
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	РегистрНакопления.СНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					ПериодРегистрации <= &парамПериодРегистрации
	|					И Налогоплательщик = &парамНалогоплательщик
	|					И ФизЛицо В (ВЫБРАТЬ ФизЛицо ИЗ " + СписокФизЛицТекст + ")) КАК СНСведенияОДоходах
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыГодаТекст+" КАК Периоды
	|		ПО (Периоды.Период = НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ))
	|			И (Периоды.ФизЛицо = СНСведенияОДоходах.ФизЛицо)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ),
	|	СНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНСведенияОДоходах.Физлицо,
	|	НАЧАЛОПЕРИОДА(СНСведенияОДоходах.Период, МЕСЯЦ)";

	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";

	// СНИсчисленный
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныйНалог
	//
	//	Описание:
	//	Выбирает исчисленные налоги (приходы по регистру СНИсчисленный и данные регистра
	//  СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СНИсчисленныйТекст = "
	|ВЫБРАТЬ
	|	СНИсчисленный.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо КАК ФизЛицо,
	|	СУММА(СНИсчисленный.Налог) КАК ИсчисленныйНалог
	|
	|ПОМЕСТИТЬ ВТ_СНИсчисленный
	|ИЗ
	|	РегистрНакопления.СНИсчисленный КАК СНИсчисленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СНИсчисленный.ФизЛицо
	|
	|ГДЕ
	|	СНИсчисленный.МесяцНалоговогоПериода >= &парамНачало И
	|	СНИсчисленный.МесяцНалоговогоПериода <= &парамКонец И
	|	СНИсчисленный.Налогоплательщик = &парамНалогоплательщик И
	|	СНИсчисленный.Регистратор <> &парамРегистратор И
	|	СНИсчисленный.Период <= &парамКонецПериодаРегистрации И
	|	СНИсчисленный.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СНИсчисленный.МесяцНалоговогоПериода,
	|	СНИсчисленный.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СНИсчисленный.ФизЛицо,
	|	СНИсчисленный.МесяцНалоговогоПериода";

	Запрос.Текст = СНИсчисленныйТекст;
	Запрос.Выполнить();
	СНИсчисленныйТекст = "ВТ_СНИсчисленный";

	// ОПВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ОПВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ОПВРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ОПВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОПВРасчетыСФондами КАК ОПВРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОПВРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ОПВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ОПВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ОПВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ОПВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ОПВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ОПВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ОПВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОПВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОПВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОПВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ОПВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОПВРасчетыСФондамиТекст = "ВТ_ОПВРасчетыСФондами";
	
	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК КорректировкаДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ПериодРегистрации,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// ВОСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ВОСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВОСМСРасчетыСФондами.Взнос) КАК ИсчисленныеВзносы
	|
	|ПОМЕСТИТЬ ВТ_ВОСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ВОСМСРасчетыСФондами КАК ВОСМСРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И ВОСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И ВОСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И ВОСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И ВОСМСРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ВОСМСРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И ВОСМСРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И ВОСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ВОСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВОСМСРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ВОСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";
	
	Запрос.Текст = ВОСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ВОСМСРасчетыСФондамиТекст = "ВТ_ВОСМСРасчетыСФондами";
	
	// СОРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		ИсчисленныеОтчисления
	//
	//	Описание:
	//	Выбирает исчисленные социальные отчисления (приходы по регистру СОРасчетыСФондами и 
	//  данные регистра СведенияПредыдущегоМестаРаботыФизЛиц) для СписокФизлиц
	СОРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	СУММА(СОРасчетыСФондами.Отчисление) КАК ИсчисленныеОтчисления
	|
	|ПОМЕСТИТЬ ВТ_СОРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.СОРасчетыСФондами КАК СОРасчетыСФондами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+СписокФизлицТекст+" КАК РаботникиОрганизации
	|			ПО РаботникиОрганизации.Физлицо = СОРасчетыСФондами.ФизЛицо
	|
	|ГДЕ
	|	СОРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало
	|	И СОРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец
	|	И СОРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик
	|	И СОРасчетыСФондами.Период <= &парамКонецПериодаРегистрации
	|	И СОРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И СОРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог)
	|	И СОРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление)
	|	И СОРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	СОРасчетыСФондами.МесяцНалоговогоПериода,
	|	СОРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СОРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(СОРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = СОРасчетыСФондамиТекст;
	Запрос.Выполнить();
	СОРасчетыСФондамиТекст = "ВТ_СОРасчетыСФондами";

	// определим учетную политику и размеры регламентированных показателей за каждый из месяцев
	РасчетныеПоказателиТекст = "
	|ВЫБРАТЬ
	|	Периоды.Период,
	|	ЕСТЬNULL(УчетнаяПолитика.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП
	|	
	|ПОМЕСТИТЬ ВТ_РасчетныеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(УчетнаяПолитика.Период) КАК ПериодУчетнойПолитики,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодРасчетныхПоказателей
	|	ИЗ
	|		" + ПериодыГодаТекст + " КАК Периоды
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|				И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО РасчетныеПоказатели.Период <= КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитика
	|		ПО Периоды.ПериодУчетнойПолитики = УчетнаяПолитика.Период
	|			И УчетнаяПолитика.Организация = &парамНалогоплательщик
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО Периоды.ПериодРасчетныхПоказателей = РасчетныеПоказатели.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Периоды.Период
	|";

	Запрос.Текст = РасчетныеПоказателиТекст;
	Запрос.Выполнить();
	РасчетныеПоказателиТекст = "ВТ_РасчетныеПоказатели";

	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо,
	|	Доходы.Период,
	|	Доходы.ОблагаемыйДоход,
	|	Доходы.СуммаДоходаВсего,
	|	Доходы.СуммаНеОблагаемогоДохода,
	|	Доходы.СуммаДоходаОборот - Доходы.СуммаВычетаОборот КАК ОблагаемыйДоход,
	|	Доходы.ИсчисленнаяОблагаемаяБаза КАК РанееИсчисленнаяОблагаемаяБаза,
	|
	|	ЕСТЬNULL(СНИсчисленный.ИсчисленныйНалог, 0) КАК РанееИсчисленныйНалог,
	|
	|	ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВзносы,
	|
	|	ЕСТЬNULL(ВОСМСРасчетыСФондами.ИсчисленныеВзносы, 0) КАК ИсчисленныеВОСМС,
	|
	|	ЕСТЬNULL(СОРасчетыСФондами.ИсчисленныеОтчисления, 0) КАК ИсчисленныеОтчисления,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога, ЛОЖЬ) КАК ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога,
	|
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМРП, 0) КАК РазмерМРП,
	|
	|	ЕСТЬNULL(РазмерПрименяемойКорректировки.КорректировкаДохода, 0) КАК СуммаКорректировкиДохода
	|
	|ИЗ
	|	" + ДоходыТекст + " КАК Доходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СНИсчисленныйТекст + " КАК СНИсчисленный
	|		ПО Доходы.ФизЛицо = СНИсчисленный.ФизЛицо
	|			И Доходы.Период = СНИсчисленный.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ОПВРасчетыСФондамиТекст + " КАК ОПВРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ОПВРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ОПВРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + СОРасчетыСФондамиТекст + " КАК СОРасчетыСФондами
	|		ПО Доходы.ФизЛицо = СОРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = СОРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИПНСведенияОДоходах + " КАК РазмерПрименяемойКорректировки
	|		ПО Доходы.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|			И Доходы.Период = РазмерПрименяемойКорректировки.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ВОСМСРасчетыСФондамиТекст + " КАК ВОСМСРасчетыСФондами
	|		ПО Доходы.ФизЛицо = ВОСМСРасчетыСФондами.ФизЛицо
	|			И Доходы.Период = ВОСМСРасчетыСФондами.МесяцНалоговогоПериода
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + РасчетныеПоказателиТекст + " КАК РасчетныеПоказатели
	|		ПО Доходы.Период = РасчетныеПоказатели.Период
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Доходы.ФизЛицо, 
	|	Доходы.Период
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаСНОбщеустановленныйПорядокПосле2009()

// Получить данные для расчета ОППВ
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОППВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОППВДо2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
									
	Если ПериодРегистрации < '20140101' Тогда
		Сообщить("Расчет ОППВ до 2014 года не предусмотрен.");
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОППВСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ОППВСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОППВСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОППВСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	
	// ФизлицаБезПраваНаПенсию
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаБезПраваНаПенсиюТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
	Запрос.Выполнить();
	ФизлицаБезПраваНаПенсиюТекст = "ВТ_ФизЛицаБезПраваНаПенсию";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизЛицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизЛицаПенсионеры";

	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет взносов
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ОППВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТ_Периоды	
	|ИЗ
	|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезПраваНаПенсиюТекст + " КАК ФизлицаБезПраваНаПенсию
	|		ПО ОППВСведенияОДоходах.ФизЛицо = ФизлицаБезПраваНаПенсию.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ОППВСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|ГДЕ
	|	ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ОППВСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОППВСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ОППВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОППВОбороты.Период КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВОбороты.СуммаДоходаОборот) - СУММА(ОППВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОППВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ВЫБОР 
	|				КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОППВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборот,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОППВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОППВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.ОППВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОППВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОППВСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОППВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОППВОбороты.Период,
	|	ОППВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
	
	// ОППВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные профессиональные пенсионные взносы (приходы по регистру ОППВРасчетыСФондами)
	//  для СписокФизлиц

	ОППВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОППВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОППВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОППВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОППВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
	|	ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) И 
	|	ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) И
	|	ОППВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОППВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОППВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОППВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОППВРасчетыСФондамиТекст = "ВТ_ОППВРасчетыСФондами";


	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";

	ТипЗначенияОППВТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база за месяц
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// облагаемая база
	ПолеОблагаемаяБазаЗаМесяц = ПолеОблагаемыйДоходЗаМесяц;
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ(" + ПолеОблагаемыйДоходЗаМесяц +" * СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК " + ТипЗначенияОППВТекст + "))";
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";    

	// ИсчисленныйОППВ
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет взносов

	ИсчисленныйОППВТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезПраваНаПенсию,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " - " + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК ОблагаемаяБаза,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеВзносыИсчисленные + " КАК ВзносЗаПериод,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееИсчисленныйВзнос,
	|	" + ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные + " КАК ВзносИсчисленный
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОППВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период
	|";

	Запрос.Текст = ИсчисленныйОППВТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаОППВ()

// Получить данные для расчета ОППВ
// Параметры: 
//  ПериодРегистрации - дата периода, за который учитываются зарегистрированные доходы и исчисленные взносы 
//  Организация - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ОППВ
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаОППВПосле2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) Экспорт
									
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОППВСведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ОППВСведенияОДоходах.Активность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОППВСведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОППВСведенияОДоходах.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);
	КонецЕсли;

	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	
	// ФизлицаБезПраваНаПенсию
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц не имеющих право на пенсионное обеспечение
	ФизлицаБезПраваНаПенсиюТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизЛицаБезПраваНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеИмеетПравоНаПенсию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезПраваНаПенсиюТекст;
	Запрос.Выполнить();
	ФизлицаБезПраваНаПенсиюТекст = "ВТ_ФизЛицаБезПраваНаПенсию";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТ_ФизЛицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";

	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТ_ФизЛицаПенсионеры";

	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет взносов
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ОППВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаБезПраваНаПенсию.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	ВЫБОР
	|		КОГДА НЕ (ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТ_Периоды	
	|ИЗ
	|	РегистрНакопления.ОППВСведенияОДоходах КАК ОППВСведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезПраваНаПенсиюТекст + " КАК ФизлицаБезПраваНаПенсию
	|		ПО ОППВСведенияОДоходах.ФизЛицо = ФизлицаБезПраваНаПенсию.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ОППВСведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|ГДЕ
	|	ОППВСведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ОППВСведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ОППВСведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОППВСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТ_Периоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые взносами доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ОППВОбороты.ФизЛицо КАК ФизЛицо,
	|	ОППВОбороты.Период КАК Период,
	|	СУММА(ОППВОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(ОППВОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВОбороты.ОблагаемаяБазаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|	МАКСИМУМ(ОППВОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|
	|ПОМЕСТИТЬ ВТ_Доходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОППВСведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ОППВСведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|				КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОППВСведенияОДоходах.СуммаДоходаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ВЫБОР 
	|				КОГДА ОППВСведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом)
	|					ТОГДА ОППВСведенияОДоходах.СуммаВычетаОборот
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК СуммаВычетаОборот,
	|	 	СУММА(ОППВСведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезПраваНаПенсию) КАК ПризнакФизЛицаБезПраваНаПенсию,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера
	|	ИЗ
	|		РегистрНакопления.ОППВСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ОППВСведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ОППВСведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ОППВСведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ОППВСведенияОДоходах.Период, МЕСЯЦ)) КАК ОППВОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОППВОбороты.Период,
	|	ОППВОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо,
	|	Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТ_Доходы";
	
	// ОППВРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленныеВзносы
	//
	//	Описание:
	//	Выбирает исчисленные профессиональные пенсионные взносы (приходы по регистру ОППВРасчетыСФондами)
	//  для СписокФизлиц

	ОППВРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ОППВРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ) КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезПраваНаПенсию) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|			ТОГДА СУММА(ОППВРасчетыСФондами.Взнос)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленныйВзнос
	|
	|ПОМЕСТИТЬ ВТ_ОППВРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ОППВРасчетыСФондами КАК ОППВРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ОППВРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ОППВРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ОППВРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ОППВРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ОППВРасчетыСФондами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) И 
	|	ОППВРасчетыСФондами.ВидПлатежа = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВБюджетИФонды.Налог) И 
	|	ОППВРасчетыСФондами.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.РасчетыСБюджетомФондамиВидСтроки.Исчисление) И
	|	ОППВРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ОППВРасчетыСФондами.МесяцНалоговогоПериода,
	|	ОППВРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОППВРасчетыСФондами.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ОППВРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)";

	Запрос.Текст = ОППВРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ОППВРасчетыСФондамиТекст = "ВТ_ОППВРасчетыСФондами";

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов с учетом приоритетов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = &парамНалогоплательщик
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахНалоговСборовОтчислений.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахНалоговСборовОтчислений КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|ГДЕ
	|	СведенияОСтавкахНалоговСборовОтчислений.ВидНалога = ЗНАЧЕНИЕ(Справочник.НалогиСборыОтчисления.ОбязательныеПрофессиональныеПенсионныеВзносы)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Налогоплательщик = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СведенияОСтавкахНалоговСборовОтчислений.Период <= &парамКонец
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов с наивысшим приоритетом
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период КАК Период,
	|	СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК Ставка
	|ИЗ
	|	(ВЫБРАТЬ
	|			СведенияОСтавкахНалоговСборовОтчислений.Период,
	|			МИНИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Приоритет) КАК Приоритет
	|		ИЗ
	|			(" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|
	|		СГРУППИРОВАТЬ ПО
	|			СведенияОСтавкахНалоговСборовОтчислений.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|			И СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Приоритет = СведенияОСтавкахНалоговСборовОтчислений.Приоритет
	|";
	
	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	
	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ОППВ для каждого периода исчисления взносов
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТ_СведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТ_СведенияОСтавкахНалоговСборовОтчислений";

	ТипЗначенияОППВТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// облагаемая база за месяц
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// облагаемая база
	ПолеОблагаемаяБазаЗаМесяц = ПолеОблагаемыйДоходЗаМесяц;
	
	// сумма взносов исчисленная
	ПолеВзносыИсчисленные = 
	"(ВЫРАЗИТЬ((" + ПолеОблагаемыйДоходЗаМесяц + ") * СведенияОСтавкахНалоговСборовОтчислений.Ставка КАК " + ТипЗначенияОППВТекст + "))";
	
	// сумма ранее исчисленных взносов
	ПолеРанееВзносыИсчисленные = "ЕСТЬNULL(ОПВРасчетыСФондами.ИсчисленныйВзнос, 0)";    

	// ИсчисленныйОППВ
	//	Поля:
	//		Физлицо
	//		ВзносыИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее взносы за месяц и производит расчет взносов

	ИсчисленныйОППВТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезПраваНаПенсию,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеОблагаемаяБазаЗаМесяц + " - " + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК ОблагаемаяБаза,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеВзносыИсчисленные + " КАК ВзносЗаПериод,
	|	" + ПолеРанееВзносыИсчисленные + " КАК РанееИсчисленныйВзнос,
	|	" + ПолеВзносыИсчисленные + "-" + ПолеРанееВзносыИсчисленные + " КАК ВзносИсчисленный
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ОППВРасчетыСФондамиТекст+" КАК ОПВРасчетыСФондами
	|		ПО ОПВРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ОПВРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период
	|";

	Запрос.Текст = ИсчисленныйОППВТекст;	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеДляРасчетаОППВ()

// Получить данные для расчета ООСМС по правилам 2019 года
// Параметры: 
//  ПоследнийМесяцНалоговогоПериода - максимальный налоговый период, за который расчитываются зарегистрированные доходы и исчисленные отчисления 
//  ПериодРегистрации - дата периода, в котором учитываются зарегистрированные доходы и исчисленные отчисления 
//  Налогоплательщик - ссылка на организацию
//  Регистратор - ссылка на регистратор записей ООСМС
//	ОтражениеПоПериодуРегистрации - булево
//	ДополнительныеПараметрыЗапроса - Структура, дополнительные отборы
//
// Возвращаемое значение:
//  Результат запроса
//
Функция ПолучитьДанныеДляРасчетаООСМСПосле2019(Знач ПоследнийМесяцНалоговогоПериода, ПериодРегистрации, Налогоплательщик, 
									Регистратор, СписокФизЛицТекст, ОтражениеПоПериодуРегистрации, ДополнительныеПараметрыЗапроса = Неопределено) 
									
	УстановитьПривилегированныйРежим(Истина);
	
	ПрименятьОграничениеНаМинимальныйОбъектОСМС = УчетнаяПолитикаСервер.ПрименятьОграничениеНаМинимальныйОбъектОСМС(Налогоплательщик, ПериодРегистрации);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("парамНалогоплательщик",  Налогоплательщик);
	Запрос.УстановитьПараметр("парамРегистратор",       Регистратор);
	Запрос.УстановитьПараметр("парамПериодРегистрации", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамВидООСМС", 			Справочники.НалогиСборыОтчисления.ОтчисленияОбязательноеСоциальноеМедицинскоеСтрахование);
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	// установим дополнительные параметры
	Если ДополнительныеПараметрыЗапроса <> Неопределено Тогда
		Для каждого Поле Из ДополнительныеПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если ПоследнийМесяцНалоговогоПериода = Неопределено Тогда

		// получим ПоследнийМесяцНалоговогоПериода
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ООСМССведенияОДоходах.Период КАК Период
		|ИЗ
		|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
		|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
		|
		|ГДЕ
		|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
		|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
		|	И ООСМССведенияОДоходах.Активность
		|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Результат = Запрос.Выполнить();

		Если Результат.Пустой() Тогда
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);

		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийМесяцНалоговогоПериода = КонецМесяца(Выборка.Период);

		КонецЕсли;

	КонецЕсли;

	// получим самый ранний месяц налогового периода
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ООСМССведенияОДоходах.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик 
	|	И ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Активность
	|	И ООСМССведенияОДоходах.Период >= ДАТАВРЕМЯ(2017, 7, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ПервыйМесяцНалоговогоПериода = ПериодРегистрации;

	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ПервыйМесяцНалоговогоПериода = НачалоМесяца(Выборка.Период);

	КонецЕсли;
	
	Запрос.УстановитьПараметр("парамНачало", 	 			  НачалоМесяца(ПервыйМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонец", 	 			  КонецМесяца(ПоследнийМесяцНалоговогоПериода));
	Запрос.УстановитьПараметр("парамКонецПериодаРегистрации", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("парамПриход", 	 			  ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамВидСтроки",  			  Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление);
	Запрос.УстановитьПараметр("парамВидПлатежа", 			  Перечисления.ВидыПлатежейВБюджетИФонды.Налог);
	
	// ФизлицаБезМедицинскогоСтрахования
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц не подлежащих социальному медицинскому страхованию
	ФизлицаБезМедицинскогоСтрахованияТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаБезМедицинскогоСтрахования
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(&парамКонец) КАК ГражданствоФизЛиц
	|
	|ГДЕ
	|	(ГражданствоФизЛиц.НеПодлежитСоциальномуМедицинскомуСтрахованию)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаБезМедицинскогоСтрахованияТекст;
	Запрос.Выполнить();
	ФизлицаБезМедицинскогоСтрахованияТекст = "ВТФизлицаБезМедицинскогоСтрахования";
	
	// ФизлицаПенсионеры
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	сисок физлиц достигших пенсионный возраст
	ФизлицаПенсионерыТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОПенсионномОбеспеченииФизЛиц.ФизЛицо
	|
	|ПОМЕСТИТЬ ВТФизлицаПенсионеры
	|ИЗ
	|	РегистрСведений.СведенияОПенсионномОбеспеченииФизЛиц.СрезПоследних(&парамКонец) КАК СведенияОПенсионномОбеспеченииФизЛиц
	|
	|ГДЕ
	|	(СведенияОПенсионномОбеспеченииФизЛиц.Пенсионер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";
	
	Запрос.Текст = ФизлицаПенсионерыТекст;
	Запрос.Выполнить();
	ФизлицаПенсионерыТекст = "ВТФизлицаПенсионеры";
	
	// ФизлицаИнвалиды
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц-инвалидов
	ФизлицаИнвалидыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОбИнвалидностиФизлиц.Физлицо,
	|	СведенияОбИнвалидностиФизлиц.СрокДействияСправки
	|ПОМЕСТИТЬ ВТ_ФизлицаИнвалиды
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(&парамКонец, ) КАК СведенияОбИнвалидностиФизлиц
	|ГДЕ
	|	СведенияОбИнвалидностиФизлиц.ОтношениеКИнвалидности = ЗНАЧЕНИЕ(Перечисление.ОтношениеКИнвалидности.Инвалид)";
	Запрос.Текст = ФизлицаИнвалидыТекст;
	Запрос.Выполнить();
	ФизлицаИнвалидыТекст = "ВТ_ФизлицаИнвалиды";

	// ФизлицаУчастникиВОВ
	//	Поля:
	//		Физлицо
	//
	//	Описание:
	//	список физлиц участников и инвалидов ВОВ
	ФизлицаУчастникиВОВТекст = "
    |ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФизлицахУчастникахВОВ.ФизЛицо
	|ПОМЕСТИТЬ ВТ_ФизлицаУчастникиВОВ
	|ИЗ
	|	РегистрСведений.СведенияОФизлицахУчастникахВОВ.СрезПоследних(&парамКонец) КАК СведенияОФизлицахУчастникахВОВ
	|
	|ГДЕ
	|	СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.УчастникВОВ)
	|	ИЛИ СведенияОФизлицахУчастникахВОВ.Статус = ЗНАЧЕНИЕ(Перечисление.КатегорииФизлицУчастниковВОВ.ИнвалидВОВ)
	|";
	Запрос.Текст = ФизлицаУчастникиВОВТекст;
	Запрос.Выполнить();
	ФизлицаУчастникиВОВТекст = "ВТ_ФизлицаУчастникиВОВ";
	
	// Периоды
	// Таблица список периодов - физлиц по которым необходимо выполнить расчет отчислений
	// Поля:
	//		Период
	//		Физлицо
	ПериодыТекст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаБезМедицинскогоСтрахования.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаПенсионеры.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизЛицаПенсионера,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаИнвалиды.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаИнвалида,
	|	ВЫБОР
	|		КОГДА НЕ(ФизлицаУчастникиВОВ.ФизЛицо ЕСТЬ NULL)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	РегистрНакопления.ООСМССведенияОДоходах КАК ООСМССведенияОДоходах
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (" + СписокФизЛицТекст + ") КАК Работники
	|		ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаБезМедицинскогоСтрахованияТекст + " КАК ФизлицаБезМедицинскогоСтрахования
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаБезМедицинскогоСтрахования.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаПенсионерыТекст + " КАК ФизлицаПенсионеры
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаПенсионеры.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаИнвалидыТекст + " КАК ФизлицаИнвалиды
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаИнвалиды.ФизЛицо
	|			И (ФизлицаИнвалиды.СрокДействияСправки = ДАТАВРЕМЯ(1,1,1) ИЛИ КОНЕЦПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ФизлицаИнвалиды.СрокДействияСправки, ДЕНЬ))
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ФизлицаУчастникиВОВТекст + " КАК ФизлицаУчастникиВОВ
	|		ПО ООСМССведенияОДоходах.ФизЛицо = ФизлицаУчастникиВОВ.ФизЛицо
	|
	|ГДЕ
	|	ООСМССведенияОДоходах.ПериодРегистрации = &парамПериодРегистрации
	|	И ООСМССведенияОДоходах.Налогоплательщик = &парамНалогоплательщик
	|	И ООСМССведенияОДоходах.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ),
	|	ООСМССведенияОДоходах.ФизЛицо
	|";

	Запрос.Текст = ПериодыТекст;
	Запрос.Выполнить();
	ПериодыТекст = "ВТПериоды";

	// Доходы
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ОблагаемыйДоход
	//
	//	Описание:
	// Выбирает облагаемые отчислениями доходы за периоды по физлицам
	ДоходыТекст = "
	|ВЫБРАТЬ
	|	ООСМСОбороты.ФизЛицо КАК ФизЛицо,
	|	ООСМСОбороты.Период КАК Период,
	|	СУММА(ООСМСОбороты.СуммаДоходаОборот) КАК СуммаДоходаВсего,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.СуммаДоходаОборотНеОблагаетсяЦеликом) - СУММА(ООСМСОбороты.СуммаВычетаОборот)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОблагаемыйДоход,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) = 0 
	|				И МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) = 0 
	|			ТОГДА СУММА(ООСМСОбороты.ОблагаемаяБазаОборот) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ИсчисленнаяОблагаемаяБаза,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|	МАКСИМУМ(ООСМСОбороты.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ООСМССведенияОДоходах.ФизЛицо КАК Физлицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|		СУММА(ООСМССведенияОДоходах.СуммаДоходаОборот) КАК СуммаДоходаОборот,
	|		СУММА(ВЫБОР 
	|			КОГДА ООСМССведенияОДоходах.СпособНалогообложения <> ЗНАЧЕНИЕ(Справочник.СпособыНалогообложенияДоходов.НеОблагаетсяЦеликом) 
	|				ТОГДА ООСМССведенияОДоходах.СуммаДоходаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДоходаОборотНеОблагаетсяЦеликом,
	|	 	СУММА(ООСМССведенияОДоходах.СуммаВычетаОборот) КАК СуммаВычетаОборот,
	|		СУММА(ООСМССведенияОДоходах.ОблагаемаяБазаОборот) КАК ОблагаемаяБазаОборот,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаБезМедицинскогоСтрахования) КАК ПризнакФизЛицаБезМедицинскогоСтрахования,
	|		МАКСИМУМ(Работники.ПризнакФизЛицаПенсионера) КАК ПризнакФизЛицаПенсионера,
	|		МАКСИМУМ(Работники.ПризнакФизлицаИнвалида) КАК ПризнакФизлицаИнвалида,
	|		МАКСИМУМ(Работники.ПризнакФизлицаУчастникаВОВ) КАК ПризнакФизлицаУчастникаВОВ
	|	ИЗ
	|		РегистрНакопления.ООСМССведенияОДоходах.Обороты(
	|				&парамНачало,
	|				&парамКонец,
	|				МЕСЯЦ,
	|				ПериодРегистрации <= &парамКонецПериодаРегистрации
	|				И Налогоплательщик = &парамНалогоплательщик) КАК ООСМССведенияОДоходах
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ПериодыТекст + " КАК Работники
	|			ПО Работники.Физлицо = ООСМССведенияОДоходах.ФизЛицо 
	|				И Работники.Период = НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ООСМССведенияОДоходах.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ООСМССведенияОДоходах.Период, МЕСЯЦ)) КАК ООСМСОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСОбороты.Период,
	|	ООСМСОбороты.Физлицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСОбороты.ФизЛицо,
	|	ООСМСОбороты.Период";
	
	Запрос.Текст = ДоходыТекст;
	Запрос.Выполнить();
	ДоходыТекст = "ВТДоходы";
		
	// ООСМСРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		Период
	//		ИсчисленноеОтчисление
	//
	//	Описание:
	//	Выбирает исчисленные отчисления ОСМС (приходы по регистру ООСМСРасчетыСФондами)
	//  для СписокФизлиц
	ООСМСРасчетыСФондамиТекст = "
	|ВЫБРАТЬ
	|	ООСМСРасчетыСФондами.ФизЛицо КАК ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода КАК Период,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаБезМедицинскогоСтрахования) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизЛицаПенсионера) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаИнвалида) = 0
	|				И МАКСИМУМ(РаботникиОрганизации.ПризнакФизлицаУчастникаВОВ) = 0
	|			ТОГДА СУММА(ООСМСРасчетыСФондами.Отчисление)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИсчисленноеОтчисление
	|
	|ПОМЕСТИТЬ ВТООСМСРасчетыСФондами
	|ИЗ
	|	РегистрНакопления.ООСМСРасчетыСФондами КАК ООСМСРасчетыСФондами
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ООСМСРасчетыСФондами.ФизЛицо 
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ООСМСРасчетыСФондами.МесяцНалоговогоПериода, МЕСЯЦ)
	|
	|ГДЕ
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода >= &парамНачало И
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода <= &парамКонец И
	|	ООСМСРасчетыСФондами.Налогоплательщик = &парамНалогоплательщик И
	|	ООСМСРасчетыСФондами.Регистратор <> &парамРегистратор И
	|	ООСМСРасчетыСФондами.Период <= &парамКонецПериодаРегистрации И
	|	ООСМСРасчетыСФондами.ВидДвижения = &парамПриход И 
	|	ООСМСРасчетыСФондами.ВидПлатежа = &парамВидПлатежа И 
	|	ООСМСРасчетыСФондами.ВидСтроки = &парамВидСтроки И
	|	ООСМСРасчетыСФондами.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода,
	|	ООСМСРасчетыСФондами.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ООСМСРасчетыСФондами.ФизЛицо,
	|	ООСМСРасчетыСФондами.МесяцНалоговогоПериода";

	Запрос.Текст = ООСМСРасчетыСФондамиТекст;
	Запрос.Выполнить();
	ООСМСРасчетыСФондамиТекст = "ВТООСМСРасчетыСФондами";

	// ИПНРасчетыСФондами
	//	Поля:
	//		ФизЛицо
	//		МесяцНалоговогоПериода
	//		КорректировкаДохода
	//
	//	Описание:
	//	Выбирает исчисленные пенсионные взносы (приходы по регистру ОПВРасчетыСФондами)
	//  
	ИПНСведенияОДоходах = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ) КАК Период,
	|	ИПНСведенияОДоходах.ФизЛицо КАК ФизЛицо,
	|	СУММА(ИПНСведенияОДоходах.ПримененнаяЛьготаОборот) КАК МаксимальнаяСуммаКорректировкиДохода
	|
	|ПОМЕСТИТЬ ВТ_ИПНСведенияОДоходах
	|ИЗ
	|	РегистрНакопления.ИПНСведенияОДоходах.Обороты(
	|					&парамНачало,
	|					&парамКонец,
	|					МЕСЯЦ,
	|					Налогоплательщик = &парамНалогоплательщик
	|					И ПериодРегистрации <= &парамКонецПериодаРегистрации) КАК ИПНСведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+ПериодыТекст+" КАК РаботникиОрганизации
	|		ПО РаботникиОрганизации.Физлицо = ИПНСведенияОДоходах.ФизЛицо
	|			И РаботникиОрганизации.Период = НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.ПериодРегистрации, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.Период,
	|	ИПНСведенияОДоходах.ФизЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИПНСведенияОДоходах.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ИПНСведенияОДоходах.Период, МЕСЯЦ)";
	
	Запрос.Текст = ИПНСведенияОДоходах;
	Запрос.Выполнить();
	ИПНСведенияОДоходах = "ВТ_ИПНСведенияОДоходах";
	
	// РазмерОграниченияПоДоходам
	//	Поля:
	//		Период
	//		ОграничениеПоДоходам
	//
	//	Описание:
	// Выбирает размер ограничения по доходам для исчисления отчислений
	РазмерОграниченияПоДоходамТекст = "
	|ВЫБРАТЬ
	|	РасчетныеПоказателиСрезПоследних.Период,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП * 10, 0) КАК ОграничениеПоДоходам,
	|	ЕСТЬNULL(РасчетныеПоказатели.РазмерМЗП, 0) КАК РазмерМЗП
	|
	|ПОМЕСТИТЬ ВТРазмерОграниченияПоДоходам
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период,
	|		МАКСИМУМ(РасчетныеПоказатели.Период) КАК ПериодСреза
	|	ИЗ	
	|		" + ПериодыТекст + " КАК Периоды 
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|			ПО Периоды.Период >= РасчетныеПоказатели.Период
	|
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК РасчетныеПоказателиСрезПоследних
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегламентированныеРасчетныеПоказатели КАК РасчетныеПоказатели
	|		ПО РасчетныеПоказатели.Период = РасчетныеПоказателиСрезПоследних.ПериодСреза
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныеПоказателиСрезПоследних.Период
	|";

	Запрос.Текст = РазмерОграниченияПоДоходамТекст;
	Запрос.Выполнить();
	РазмерОграниченияПоДоходамТекст = "ВТРазмерОграниченияПоДоходам";

	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СведенияОСтавкахОСМС.Период, МЕСЯЦ) КАК Период,
	|	СведенияОСтавкахОСМС.ВидДохода КАК ВидДохода,
	|	СведенияОСтавкахОСМС.СтавкаОтчисления КАК Ставка
	|ИЗ
	|	РегистрСведений.СведенияОСтавкахОСМС КАК СведенияОСтавкахОСМС
	|
	|ГДЕ
	|	СведенияОСтавкахОСМС.Период <= &парамКонец
	|	И СведенияОСтавкахОСМС.ВидДохода = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|		
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;

	// СведенияОСтавкахНалоговСборовОтчислений
	// Поля:
	//		Период
	//		Ставка
	//
	// Описание:
	//	Выбирает ставку ООСМС для каждого периода исчисления отчислений
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "
	|ВЫБРАТЬ
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) КАК ПроцентСтавки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.Ставка, 0) / 100 КАК ЧИСЛО(10, 4)) КАК Ставка
	|
	|ПОМЕСТИТЬ ВТСведенияОСтавкахНалоговСборовОтчислений
	|ИЗ
	|	(ВЫБРАТЬ
	|			Периоды.Период,
	|			МАКСИМУМ(СведенияОСтавкахНалоговСборовОтчислений.Период) КАК ДатаПоследнегоИзменения
	|		ИЗ
	|			" + ПериодыТекст + " КАК Периоды
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|				ПО СведенияОСтавкахНалоговСборовОтчислений.Период <= Периоды.Период
	|
	|		СГРУППИРОВАТЬ ПО
	|			Периоды.Период) КАК СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (" + СведенияОСтавкахНалоговСборовОтчисленийТекст + ") КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.ДатаПоследнегоИзменения = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СведенияОСтавкахНалоговСборовОтчисленийСрезПоследних.Период
	|";

	Запрос.Текст = СведенияОСтавкахНалоговСборовОтчисленийТекст;
	Запрос.Выполнить();
	СведенияОСтавкахНалоговСборовОтчисленийТекст = "ВТСведенияОСтавкахНалоговСборовОтчислений";	

	ТипЗначенияООСМСТекст  = "ЧИСЛО(15, 2)";
	
	// облагаемый доход за месяц
	ПолеОблагаемыйДоходЗаМесяц = "ЕСТЬNULL(ДоходыЗаМесяц.ОблагаемыйДоход, 0)";

	// корректировка доход за месяц
	ПолеКорректировкаДохода = ?(ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации),
	" - ЕСТЬNULL(РазмерПрименяемойКорректировки.МаксимальнаяСуммаКорректировкиДохода, 0) ", "");

	// размер МЗП
	ПолеРазмерМЗП = ?(ПрименятьОграничениеНаМинимальныйОбъектОСМС, "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.РазмерМЗП, 0)", "0");
	
	// ограничение по доходам
	ПолеРазмерОграниченияПоДоходам = "ЕСТЬNULL(ОграничениеПоДоходамЗаМесяц.ОграничениеПоДоходам, 0)";
	
	// облагаемая база по ООСМС
	ПолеБазаДляИсчисленияООСМС = 
	"ВЫБОР
	|	КОГДА " + ПолеОблагаемыйДоходЗаМесяц + " > 0
	|		ТОГДА ВЫБОР
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + " < " + ПолеРазмерМЗП + "
	|				ТОГДА " + ПолеРазмерМЗП + "
	|			КОГДА " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + " > " + ПолеРазмерОграниченияПоДоходам + "
	|				ТОГДА " + ПолеРазмерОграниченияПоДоходам + "
	|			ИНАЧЕ " + ПолеОблагаемыйДоходЗаМесяц + ПолеКорректировкаДохода + "
	|		КОНЕЦ
	|	ИНАЧЕ 0
	|КОНЕЦ";

	// Ранее исчисленная облагаемая база
	ПолеРанееИсчисленнаяОблагаемаяБаза = "ЕСТЬNULL(ДоходыЗаМесяц.ИсчисленнаяОблагаемаяБаза, 0)";
	
	// сумма отчислений исчисленная
	ПолеОтчисленияИсчисленные = 
	"(ВЫРАЗИТЬ(ВЫБОР 
	|				КОГДА (" + ПолеБазаДляИсчисленияООСМС +" > 0) 
	|					ТОГДА " + ПолеБазаДляИсчисленияООСМС + " * СведенияОСтавкахНалоговСборовОтчислений.Ставка
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК " + ТипЗначенияООСМСТекст + "))";
	
	// сумма ранее исчисленных отчислений
	ПолеРанееОтчисленияИсчисленные = "ЕСТЬNULL(ООСМСРасчетыСФондами.ИсчисленноеОтчисление, 0)";

	// ИсчисленныеООСМС
	//	Поля:
	//		Физлицо
	//		ОтчисленияИсчисленные
	//	
	//	Описание:
	//	Выбирает исчисленные ранее отчисления за месяц и производит расчет

	ИсчисленныеООСМСТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоходыЗаМесяц.Физлицо,
	|	ДоходыЗаМесяц.Период,
	|	ДоходыЗаМесяц.ПризнакФизЛицаБезМедицинскогоСтрахования,
	|	ДоходыЗаМесяц.ПризнакФизЛицаПенсионера,
	|	ДоходыЗаМесяц.ПризнакФизлицаИнвалида,
	|	ДоходыЗаМесяц.ПризнакФизлицаУчастникаВОВ,
	|	" + ПолеОблагаемыйДоходЗаМесяц + " КАК ОблагаемыйДоход,
	|	" + ПолеБазаДляИсчисленияООСМС + " КАК ОблагаемаяБазаЗаМесяц,
	|	" + ПолеРанееИсчисленнаяОблагаемаяБаза + " КАК РанееИсчисленнаяОблагаемаяБаза,
	|	" + ПолеРазмерОграниченияПоДоходам + " КАК РазмерОграниченияПоДоходам,
	|	ЕСТЬNULL(СведенияОСтавкахНалоговСборовОтчислений.ПроцентСтавки, 0) КАК ПроцентСтавки,
	|	" + ПолеРазмерМЗП + " КАК РазмерМЗП,
	|	" + ПолеОтчисленияИсчисленные + " КАК ООСМСЗаМесяц,
	|	" + ПолеРанееОтчисленияИсчисленные + " КАК РанееОтчисленияИсчисленные,
	|	" + ПолеОтчисленияИсчисленные + "-" + ПолеРанееОтчисленияИсчисленные + " КАК ОтчислениеИсчисленное
	|ИЗ
	|	"+ДоходыТекст+" КАК ДоходыЗаМесяц
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ООСМСРасчетыСФондамиТекст+" КАК ООСМСРасчетыСФондами
	|		ПО ООСМСРасчетыСФондами.Период = ДоходыЗаМесяц.Период 
	|			И ООСМСРасчетыСФондами.ФизЛицо = ДоходыЗаМесяц.Физлицо
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+РазмерОграниченияПоДоходамТекст+" КАК ОграничениеПоДоходамЗаМесяц
	|		ПО ОграничениеПоДоходамЗаМесяц.Период = ДоходыЗаМесяц.Период
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИПНСведенияОДоходах+" КАК РазмерПрименяемойКорректировки
	|		ПО ДоходыЗаМесяц.Период = РазмерПрименяемойКорректировки.Период
	|			И ДоходыЗаМесяц.ФизЛицо = РазмерПрименяемойКорректировки.ФизЛицо
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+СведенияОСтавкахНалоговСборовОтчисленийТекст+" КАК СведенияОСтавкахНалоговСборовОтчислений
	|		ПО ДоходыЗаМесяц.Период = СведенияОСтавкахНалоговСборовОтчислений.Период
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ДоходыЗаМесяц.Физлицо, 
	|	ДоходыЗаМесяц.Период";

	Запрос.Текст = ИсчисленныеООСМСТекст;	
	Возврат Запрос.Выполнить();
									
КонецФункции								

// Заполняет набор записей по переданным данным расчета ИПН 2019 года
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2019(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиИПН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода, ПримененнаяЛьгота");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	
	ТекущееФизЛицо = "";
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		ПроцентСтавки = СоответствиеСтавкиИПН[ДанныеИПН.Период];
		Если ПроцентСтавки = Неопределено Тогда
			ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеСтавкиИПН.Вставить(ДанныеИПН.Период, ПроцентСтавки);			
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			БылаОшибка = Истина;
		КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;

		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов и корректировок
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И НЕ ДанныеИПН.НеПрименятьКорректировкуПоПрочимПризнакам Тогда
			
			ОграничениеКорректировкиДохода25МРП = 25 * ОбщегоНазначенияБКСерверПовтИсп.МесячныйРасчетныйПоказатель(НачалоГода(ДанныеИПН.Период));
			
			// применим корректировку на облагаемую часть дохода после применения вычетов (Доходы - Вычеты), 
			// если сумма всего дохода (ДанныеИПН.СуммаДоходаВсего) не более 25 МРП
			Если ДанныеИПН.СуммаДоходаВсего <= ОграничениеКорректировкиДохода25МРП Тогда 
				ПрименяемаяКорректировка = Окр(ОблагаемаяСумма * 0.9, 2, РежимОкругления.Окр15как20);
			Иначе
				ПрименяемаяКорректировка = 0;
			КонецЕсли;			
			
		Иначе
			
			ПрименяемаяКорректировка = 0;
			
		КонецЕсли;
		
		ОблагаемаяСумма = ОблагаемаяСумма - ПрименяемаяКорректировка;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);

		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		ПрименяемаяКорректировка = ПрименяемаяКорректировка - ДанныеИПН.РанееПримененнаяЛьгота;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ОблагаемаяБаза = 0 И
					ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
					ДанныеИПН.РазрешенныеВычетыВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И ПрименяемаяКорректировка <> 0 Тогда 
			Строка.ПримененнаяЛьгота		= ПрименяемаяКорректировка;
		КонецЕсли;
		
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	//
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет набор записей по переданным данным расчета ИПН 2020 года
//
// Параметры: 
//  НаборЗаписей - набор записей регистра ИПНРасчетыСБюджетом
//	ТаблицаДанныеИПН - таблица значений - данные расчета ИПН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьНаборЗаписейПоДаннымИПНПосле2020(ТабличнаяЧасть, ПериодРегистрации, НаборЗаписей, ТаблицаДанныеИПН, Налогоплательщик, Организация, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, КомментарийВидаРасчета = Неопределено, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетИПНДополнительныеДанные = Неопределено)
	
	// правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	ТаблицаСтавкиИПН = Новый ТаблицаЗначений;
	ТаблицаСтавкиИПН.Колонки.Добавить("Период",  Новый ОписаниеТипов("Дата"));
	ТаблицаСтавкиИПН.Колонки.Добавить("ВидДохода");
	ТаблицаСтавкиИПН.Колонки.Добавить("ПроцентСтавки");

	СтруктураПоискаСтавкиИПН = Новый Структура("Период,ВидДохода");
	
	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается ИПН
	РаботникиДляРасчетаИПН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода, ПримененнаяЛьгота");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
				СтруктураСтроки.ОблагаемаяБаза = 0;
				СтруктураСтроки.ПримененнаяЛьгота = 0;
			КонецЕсли;
			РаботникиДляРасчетаИПН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета ИПН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	
	ДатаПримененияКорректировкиДохода = Дата(2019, 1, 1);
	
	ТекущееФизЛицо = "";
	Для Каждого ДанныеИПН Из ТаблицаДанныеИПН Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеИПН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеИПН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеИПН.Период, ПравилоОкругления);
		КонецЕсли;
	
		// получим ставку ИПН
		СтруктураПоискаСтавкиИПН.Период = ДанныеИПН.Период;
		Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			СтруктураПоискаСтавкиИПН.ВидДохода = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе	
			СтруктураПоискаСтавкиИПН.ВидДохода = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;   
		Ставки = ТаблицаСтавкиИПН.НайтиСтроки(СтруктураПоискаСтавкиИПН);
		Если Ставки.Количество() > 0 Тогда
			ПроцентСтавки = Ставки[0].ПроцентСтавки;
		Иначе
			Если ТипЗнч(ДанныеИПН.ФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
				ВидДохода = Перечисления.ЮрФизЛицо.ЮрЛицо;
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период, ВидДохода);
			Иначе
				ВидДохода = Перечисления.ЮрФизЛицо.ФизЛицо;
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.ИндивидуальныйПодоходныйНалог, ДанныеИПН.Период, ВидДохода);
			КонецЕсли;
			Ставки = ТаблицаСтавкиИПН.Добавить();
			Ставки.Период = ДанныеИПН.Период;
			Ставки.ВидДохода = ВидДохода;
			Ставки.ПроцентСтавки = ПроцентСтавки;
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
		//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки индивидуального подоходного налога'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		//	БылаОшибка = Истина;
		//КонецЕсли;
		
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если ТекущееФизЛицо <> ДанныеИПН.ФизЛицо 
			ИЛИ НачалоГода(ДанныеИПН.Период) = НачалоМесяца(ДанныеИПН.Период) Тогда
			ТекущееФизЛицо = ДанныеИПН.ФизЛицо;
		КонецЕсли;

		// расчет результата
		ОблагаемыйДоход = ДанныеИПН.ОблагаемыйДоход;
		
		// облагаемая часть дохода после применения вычетов и корректировок
		ОблагаемаяСумма = ОблагаемыйДоход - ДанныеИПН.ПримененныеВычеты;
		
		// определим размер применяемой корректировки дохода (корректировка дохода применяется после вычетов)
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И НЕ ДанныеИПН.НеПрименятьКорректировкуПоПрочимПризнакам Тогда
			
			ОграничениеКорректировкиДохода25МРП = 25 * ОбщегоНазначенияБКСерверПовтИсп.МесячныйРасчетныйПоказатель(НачалоГода(ДанныеИПН.Период));
			
			// применим корректировку на облагаемую часть дохода после применения вычетов (Доходы - Вычеты), 
			// если сумма всего дохода (ДанныеИПН.СуммаДоходаВсего) не более 25 МРП
			Если ДанныеИПН.СуммаДоходаВсего <= ОграничениеКорректировкиДохода25МРП Тогда 
				ПрименяемаяКорректировка = Окр(ОблагаемаяСумма * 0.9, 2, РежимОкругления.Окр15как20);
			Иначе
				ПрименяемаяКорректировка = 0;
			КонецЕсли;			
			
		Иначе
			
			ПрименяемаяКорректировка = 0;
			
		КонецЕсли;
		
		ОблагаемаяСумма = ОблагаемаяСумма - ПрименяемаяКорректировка;
		
		НалогИсчисленныйЗаМесяц = Макс(ОблагаемаяСумма * ПроцентСтавки / 100, 0);

		// Округлим результат
		НалогИсчисленный 	= ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленныйЗаМесяц, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);

		НалогИсчисленный = НалогИсчисленный - ДанныеИПН.РанееИсчисленныйНалог;
		
		ОблагаемаяБаза = Макс(ОблагаемаяСумма, 0) - ДанныеИПН.РанееИсчисленнаяОблагаемаяБаза;
		
		ПрименяемаяКорректировка = ПрименяемаяКорректировка - ДанныеИПН.РанееПримененнаяЛьгота;
		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда 
			
			Если	НалогИсчисленный = 0 И
					ОблагаемаяБаза = 0 И
					ДанныеИПН.ПримененныеВычетыВТекущемРасчете = 0 И
					ДанныеИПН.РазрешенныеВычетыВТекущемРасчете = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Если передан набор записей - заполняем и его
		Если НаборЗаписей <> НеОпределено Тогда
			// зарегистрируем в регистре
			// т.к. в момент расчета наборы движений регистров используются лишь как временные, 
			// то реальные значения для измерения СтруктурнаяЕдиница не определяем, чтобы не тратить на это время и ресурсы,
			// а всегда подставляем организацию из шапки документа (чтобы просто было заполнено), поскольку в запросах везде фильтрация 
			// идет по Налогоплательщику, а его передаем как параметр в процедуру
			Движение = НаборЗаписей.Добавить();

			// Свойства
			Движение.Период						= КонецМесяца(ПериодРегистрации);
			Движение.ВидДвижения				= ВидДвиженияНакопления.Приход;
			
			// Измерения
			Движение.ФизЛицо                		= ДанныеИПН.ФизЛицо;
			Движение.СтруктурнаяЕдиница				= Организация;
			Движение.МесяцНалоговогоПериода    		= ДанныеИПН.Период;
			Движение.Организация            		= Организация;
			Движение.Налогоплательщик          		= Налогоплательщик;

			// Ресурсы
			Движение.Налог						= НалогИсчисленный;
			
			// Реквизиты 
			Движение.ВидСтроки					= Перечисления.РасчетыСБюджетомФондамиВидСтроки.Исчисление;
		КонецЕсли;
		
		// Ниже - заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеИПН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеИПН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаИПН.Удалить(ДанныеИПН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеИПН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза				= ОблагаемаяБаза;
		
		Если ДанныеИПН.Период >= ДатаПримененияКорректировкиДохода
			И ПрименяемаяКорректировка <> 0 Тогда 
			Строка.ПримененнаяЛьгота		= ПрименяемаяКорректировка;
		КонецЕсли;
		
		Строка.МесяцНалоговогоПериода 		= ДанныеИПН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйИПН
	Для Каждого Элемент Из РаботникиДляРасчетаИПН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	//
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйИПН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйИПН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйИПН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйИПН);
		
		// Если передан набор записей - свернем и его
		Если НаборЗаписей <> Неопределено Тогда
			ТаблицаЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаЗаписей.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
			
			СтрокаКолонкиГруппировок = "";
			Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
				Если Найти(ВРег("Налог"), ВРег(Колонка.Имя)) = 0 Тогда
					Если СтрокаКолонкиГруппировок <> "" Тогда
						СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + ", ";
					КонецЕсли;
					СтрокаКолонкиГруппировок = СтрокаКолонкиГруппировок + Колонка.Имя;
				КонецЕсли;
			КонецЦикла;
			
			ТаблицаЗаписей.Свернуть(СтрокаКолонкиГруппировок, "Налог");
			НаборЗаписей.Загрузить(ТаблицаЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2019(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки социального налога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			ПрименяемаяКорректировка = 0;
			
			// Если применяется минимальная база, то доход менее 25МРП будет всегда меньше этой суммы 
			Если ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации) Тогда
				
				ПрименяемаяКорректировка = ДанныеСН.СуммаКорректировкиДохода;
				
			КонецЕсли;
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы - ПрименяемаяКорректировка, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			СНЗаМесяц = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2) - ДанныеСН.ИсчисленныеОтчисления;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеСН.РанееИсчисленныйНалог > 0
			И (НалогИсчисленный < 1 И НалогИсчисленный > 0
			ИЛИ НалогИсчисленный > -1 И НалогИсчисленный < 0) Тогда
			
			НалогИсчисленный = 0;
			
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
				РасчетСНДополнительныеДанныеСтрока.ФизЛицо =  ДанныеСН.ФизЛицо;					
				РасчетСНДополнительныеДанныеСтрока.МесяцНалоговогоПериода =  ДанныеСН.Период;					
					
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					РасчетСНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеСН.ОблагаемыйДоход;
					РасчетСНДополнительныеДанныеСтрока.ОПВЗаМесяц =  ДанныеСН.ИсчисленныеВзносы;					
					
					РасчетСНДополнительныеДанныеСтрока.МинимальноеОграничение = ДанныеСН.РазмерМЗП;
					
					РасчетСНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = ОблагаемаяСумма;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
					
					РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = СуммаНалогаДоВычетаСО;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц =  ДанныеСН.ИсчисленныеОтчисления;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = СНЗаМесяц;
					
				Иначе                                 				
			
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
					Иначе
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
					КонецЕсли;
					
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =  ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
					Иначе
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =   ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
					КонецЕсли;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц = ДанныеСН.СОЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = ДанныеСН.СНЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					
				КонецЕсли;
									
			КонецЕсли;
		
		КонецЕсли;

		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза			    = ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2020(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки социального налога'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			//Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
			//	ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			ПрименяемаяКорректировка = 0;
			
			// Если применяется минимальная база, то доход менее 25МРП будет всегда меньше этой суммы 
			Если ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Налогоплательщик, ПериодРегистрации) Тогда
				
				ПрименяемаяКорректировка = ДанныеСН.СуммаКорректировкиДохода;
				
			КонецЕсли;
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы - ДанныеСН.ИсчисленныеВОСМС - ПрименяемаяКорректировка, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			СНЗаМесяц = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2) - ДанныеСН.ИсчисленныеОтчисления;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеСН.РанееИсчисленныйНалог > 0
			И (НалогИсчисленный < 1 И НалогИсчисленный > 0
			ИЛИ НалогИсчисленный > -1 И НалогИсчисленный < 0) Тогда
			
			НалогИсчисленный = 0;
			
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
				РасчетСНДополнительныеДанныеСтрока.ФизЛицо =  ДанныеСН.ФизЛицо;					
				РасчетСНДополнительныеДанныеСтрока.МесяцНалоговогоПериода =  ДанныеСН.Период;					
					
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					РасчетСНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеСН.ОблагаемыйДоход;
					РасчетСНДополнительныеДанныеСтрока.ОПВЗаМесяц =  ДанныеСН.ИсчисленныеВзносы;	
					РасчетСНДополнительныеДанныеСтрока.ВОСМСЗаМесяц =  ДанныеСН.ИсчисленныеВОСМС;					
					
					РасчетСНДополнительныеДанныеСтрока.МинимальноеОграничение = ДанныеСН.РазмерМЗП;
					
					РасчетСНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = ОблагаемаяСумма;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
					
					РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = СуммаНалогаДоВычетаСО;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц =  ДанныеСН.ИсчисленныеОтчисления;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = СНЗаМесяц;
					
				Иначе                                 				
			
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
					Иначе
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
					КонецЕсли;
					
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =  ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
					Иначе
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =   ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
					КонецЕсли;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц = ДанныеСН.СОЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = ДанныеСН.СНЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					
				КонецЕсли;
									
			КонецЕсли;
		
		КонецЕсли;

		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза			    = ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2021(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки социального налога'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМЗП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер минимальной заработной платы'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			//Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
			//	ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы - ДанныеСН.ИсчисленныеВОСМС, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМЗП Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМЗП;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			СНЗаМесяц = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2) - ДанныеСН.ИсчисленныеОтчисления;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеСН.РанееИсчисленныйНалог > 0
			И (НалогИсчисленный < 1 И НалогИсчисленный > 0
			ИЛИ НалогИсчисленный > -1 И НалогИсчисленный < 0) Тогда
			
			НалогИсчисленный = 0;
			
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
				РасчетСНДополнительныеДанныеСтрока.ФизЛицо =  ДанныеСН.ФизЛицо;					
				РасчетСНДополнительныеДанныеСтрока.МесяцНалоговогоПериода =  ДанныеСН.Период;					
					
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					РасчетСНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеСН.ОблагаемыйДоход;
					РасчетСНДополнительныеДанныеСтрока.ОПВЗаМесяц =  ДанныеСН.ИсчисленныеВзносы;	
					РасчетСНДополнительныеДанныеСтрока.ВОСМСЗаМесяц =  ДанныеСН.ИсчисленныеВОСМС;					
					
					РасчетСНДополнительныеДанныеСтрока.МинимальноеОграничение = ДанныеСН.РазмерМЗП;
					
					РасчетСНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = ОблагаемаяСумма;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
					
					РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = СуммаНалогаДоВычетаСО;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц =  ДанныеСН.ИсчисленныеОтчисления;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = СНЗаМесяц;
					
				Иначе                                 				
			
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
					Иначе
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
					КонецЕсли;
					
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =  ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
					Иначе
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =   ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
					КонецЕсли;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц = ДанныеСН.СОЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = ДанныеСН.СНЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					
				КонецЕсли;
									
			КонецЕсли;
		
		КонецЕсли;

		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза			    = ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть ИсчисленныйСН по переданным данным расчета СН
//
// Параметры: 
//	РезультатСН - таблица значений - данные расчета СН
//
// Возвращаемое значение:
//  Нет
//
Процедура ЗаполнитьТабличнуюЧастьПоДаннымСНПосле2022(ТабличнаяЧасть, ПериодРегистрации, РезультатСН, Налогоплательщик, ОтражениеПоПериодуРегистрации, Перерасчет = Ложь, КомментироватьРасчет = Ложь, ФизЛицо = Неопределено, УдалятьСтрокиСНулевымиЗначениями = Истина, РасчетСНДополнительныеДанные = Неопределено)

	// Правило округления
	СоответствиеПравилаОкругления = Новый Соответствие;
	СоответствиеСтавкиСН = Новый Соответствие;

	СтруктураПоиска = Новый Структура("Физлицо,МесяцНалоговогоПериода");

	// строим список физлиц, по по которым считается СН
	РаботникиДляРасчетаСН = Новый Соответствие;

	// Если ведется расчет конкретного физлица, то для всех остальных строк табличной части
	// полностью сохраняем значения	
	Если ФизЛицо <> Неопределено Тогда
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			СтруктураСтроки = Новый Структура("ФизЛицо, Налог, ОблагаемаяБаза, МесяцНалоговогоПериода");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
			Если Строка.ФизЛицо = ФизЛицо Тогда
				СтруктураСтроки.Налог = 0;
			КонецЕсли;
			РаботникиДляРасчетаСН.Вставить(Строка.Физлицо, СтруктураСтроки);
		КонецЦикла;	
	КонецЕсли;
	
	Если Не Перерасчет Тогда
		// очистим результаты расчета СН, которые находятся в табличной части документа
		ТабличнаяЧасть.Очистить(); 
	КонецЕсли;
	
	БылаОшибка = Ложь;

	Если РезультатСН.Колонки.Найти("ПризнакИндивидуальногоПредпринимателя") <> Неопределено Тогда
		НалогоплательщикЯвляетсяИП = Истина;
	Иначе
		НалогоплательщикЯвляетсяИП = Ложь;
	КонецЕсли;
	
	СоответствиеМесяцыНалоговогоПериода = Новый Соответствие;
	ДанныеСН = РезультатСН.Выбрать();
	
	Пока ДанныеСН.Следующий() Цикл
		
		// запомним количество различных месяцев налогового периода, 
		// если встретился только один, то не требуется выполнять свертку таблицы и набора после цикла
		СоответствиеМесяцыНалоговогоПериода.Вставить(ДанныеСН.Период);
	
		// Получим правило округления, действовавшее в периоде 
		ПравилоОкругления = СоответствиеПравилаОкругления[ДанныеСН.Период];
		Если ПравилоОкругления = Неопределено Тогда
			ПравилоОкругления = ПолучитьПравилоОкругленияВидаРасчета(Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
			СоответствиеПравилаОкругления.Вставить(ДанныеСН.Период, ПравилоОкругления);
		КонецЕсли;
		
		// проверим заполненность необходимых реквизитов
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// получим ставку СН
			ПроцентСтавки = СоответствиеСтавкиСН[ДанныеСН.Период];
			Если ПроцентСтавки = Неопределено Тогда
				ПроцентСтавки  = ПроцедурыНалоговогоУчета.ПолучитьСтавкуНалога(Налогоплательщик, Справочники.НалогиСборыОтчисления.СоциальныйНалог, ДанныеСН.Период);
				СоответствиеСтавкиСН.Вставить(ДанныеСН.Период, ПроцентСтавки);			
			КонецЕсли;
		
			//Если НЕ ЗначениеЗаполнено(ПроцентСтавки) Тогда
			//	ТекстОшибки = НСтр("ru = 'Не заполнено значение ставки социального налога'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСН.РазмерМРП = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не определен размер месячного расчетного показателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			
			МассивПараметровУчетнаяПолитика = Новый Массив;
			МассивПараметровУчетнаяПолитика.Добавить(ДанныеСН.Налогоплательщик);
			
			Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за индивидуального предпринимателя'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				БылаОшибка = Истина;
			КонецЕсли;
			//Если ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника = 0 Тогда
			//	ТекстОшибки = НСтр("ru = 'Не указан коэффициент МРП за наемного работника'");
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//	БылаОшибка = Истина;
			//КонецЕсли;
		
		КонецЕсли;
	
		Если БылаОшибка Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ НалогоплательщикЯвляетсяИП Тогда
			
			// Расчет налога для юр.лица
			ОблагаемаяСумма = Макс(ДанныеСН.ОблагаемыйДоход - ДанныеСН.ИсчисленныеВзносы - ДанныеСН.ИсчисленныеВОСМС, 0);
			
			Если ДанныеСН.ПрименятьОграничениеНаМинимальнуюБазуСоциальногоНалога И ОблагаемаяСумма > 0 Тогда
				// включено ограничение на нижний предел - не менее минимальной заработной платы
				Если ОблагаемаяСумма < ДанныеСН.РазмерМРП * 14 Тогда
					ОблагаемаяСумма = ДанныеСН.РазмерМРП * 14;
				КонецЕсли;
			Иначе
				ОблагаемаяСумма = ОблагаемаяСумма;	
			КонецЕсли;
			
			СуммаНалогаДоВычетаСО = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2);
			
			СНЗаМесяц = Окр(ОблагаемаяСумма * ПроцентСтавки / 100, 2) - ДанныеСН.ИсчисленныеОтчисления;
			
			// окончательная сумма налога
			НалогИсчисленный = Макс(СуммаНалогаДоВычетаСО - ДанныеСН.ИсчисленныеОтчисления, 0) - ДанныеСН.РанееИсчисленныйНалог;
			
		Иначе
			// расчет налога для ИП произведен уже в запросе
			НалогИсчисленный = ?(ДанныеСН.НалогИсчисленный = null, 0, ДанныеСН.НалогИсчисленный);
		КонецЕсли;
		
		// скорректируем погрешность округления, возникающую как доначисление налога,
		// при наличии предыдущих расчетов документов расчета СН в рамках одного периода
		Если ДанныеСН.РанееИсчисленныйНалог > 0
			И (НалогИсчисленный < 1 И НалогИсчисленный > 0
			ИЛИ НалогИсчисленный > -1 И НалогИсчисленный < 0) Тогда
			
			НалогИсчисленный = 0;
			
		КонецЕсли;
		
		// Округлить результат
		НалогИсчисленный = ОбщегоНазначенияБККлиентСервер.ОкруглитьЧисло(НалогИсчисленный, ПравилоОкругления.ПорядокОкругления, ПравилоОкругления.МетодОкругления);
		
		Если Не НалогоплательщикЯвляетсяИП Тогда
			ОблагаемаяБаза = ОблагаемаяСумма - ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
		Иначе 
			ОблагаемаяБаза = 0;
		КонецЕсли;
		
		Если КомментироватьРасчет Тогда
			
			Если ДанныеСН.Период = ПериодРегистрации ИЛИ НалогИсчисленный <> 0 Тогда
				
				РасчетСНДополнительныеДанныеСтрока = РасчетСНДополнительныеДанные.Добавить();
				РасчетСНДополнительныеДанныеСтрока.ФизЛицо =  ДанныеСН.ФизЛицо;					
				РасчетСНДополнительныеДанныеСтрока.МесяцНалоговогоПериода =  ДанныеСН.Период;					
					
				Если НЕ НалогоплательщикЯвляетсяИП Тогда
				
					РасчетСНДополнительныеДанныеСтрока.ОблагаемыйДоход = ДанныеСН.ОблагаемыйДоход;
					РасчетСНДополнительныеДанныеСтрока.ОПВЗаМесяц =  ДанныеСН.ИсчисленныеВзносы;	
					РасчетСНДополнительныеДанныеСтрока.ВОСМСЗаМесяц =  ДанныеСН.ИсчисленныеВОСМС;					
					
					РасчетСНДополнительныеДанныеСтрока.МинимальноеОграничение = ДанныеСН.РазмерМРП * 14;
					
					РасчетСНДополнительныеДанныеСтрока.ОблагаемаяБазаЗаМесяц = ОблагаемаяСумма;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленнаяОблагаемаяБаза = ДанныеСН.РанееИсчисленнаяОблагаемаяБаза;
					
					РасчетСНДополнительныеДанныеСтрока.СуммаНалогаДоВычетаСО = СуммаНалогаДоВычетаСО;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц =  ДанныеСН.ИсчисленныеОтчисления;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = СНЗаМесяц;
					
				Иначе                                 				
			
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является индивидуальным предпринимателем'");
					Иначе
						РасчетСНДополнительныеДанныеСтрока.ДополнительныеСведения = НСтр("ru = 'Является наемным работником'");
					КонецЕсли;
					
					Если ДанныеСН.ПризнакИндивидуальногоПредпринимателя <> 0 Тогда
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =  ДанныеСН.КоэффициентМРПДляРасчетаСНЗаИндивидуальногоПредпринимателя;
					Иначе
						РасчетСНДополнительныеДанныеСтрока.КоэффициентМРП  =   ДанныеСН.КоэффициентМРПДляРасчетаСНЗаНаемногоРаботника;
					КонецЕсли;
					РасчетСНДополнительныеДанныеСтрока.СОЗаМесяц = ДанныеСН.СОЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.СНЗаМесяц = ДанныеСН.СНЗаМесяц;
					РасчетСНДополнительныеДанныеСтрока.РанееИсчисленныйСН = ДанныеСН.РанееИсчисленныйНалог;
					
				КонецЕсли;
									
			КонецЕсли;
		
		КонецЕсли;

		
		Если УдалятьСтрокиСНулевымиЗначениями Тогда
			Если НалогИсчисленный = 0 И
				 ОблагаемаяБаза = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем табличную часть документа
		Если Перерасчет Тогда
			СтруктураПоиска.Физлицо = ДанныеСН.ФизЛицо;
			СтруктураПоиска.МесяцНалоговогоПериода = ДанныеСН.Период;
			Строки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
			Если Строки.Количество() > 0 Тогда
				Строка = Строки[0];
			Иначе
				Строка = ТабличнаяЧасть.Добавить();
			КонецЕсли;
		Иначе
			Строка = ТабличнаяЧасть.Добавить();
			РаботникиДляРасчетаСН.Удалить(ДанныеСН.ФизЛицо);
		КонецЕсли;
			
		Строка.ФизЛицо 						= ДанныеСН.ФизЛицо;
		Строка.Налог   						= НалогИсчисленный;
		Строка.ОблагаемаяБаза			    = ОблагаемаяБаза;
		Строка.МесяцНалоговогоПериода 		= ДанныеСН.Период;
		
	КонецЦикла;
	
	// заполним ИсчисленныйСН
	Для Каждого Элемент Из РаботникиДляРасчетаСН Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.Значение);
	КонецЦикла;
	
	Если ОтражениеПоПериодуРегистрации И СоответствиеМесяцыНалоговогоПериода.Количество() > 1 Тогда
		// При отражении всех расчетов периодом регистрации свернем получившиеся суммы по физлицу
		ТаблицаИсчисленныйСН = ТабличнаяЧасть.Выгрузить();
		ТаблицаИсчисленныйСН.ЗаполнитьЗначения(ПериодРегистрации, "МесяцНалоговогоПериода");
		ТаблицаИсчисленныйСН.Свернуть("ФизЛицо, МесяцНалоговогоПериода", "Налог, ОблагаемаяБаза");
		ТабличнаяЧасть.Загрузить(ТаблицаИсчисленныйСН);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Организация, МесяцНачисления) Экспорт
   	
	Если МесяцНачисления >= Дата(2021, 1, 1) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат НЕ УчетнаяПолитикаСервер.НеПрименятьКорректировкуПрочихНалоговВзносовОтчислений(Организация, МесяцНачисления);
	
КонецФункции

Функция ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Организация, МесяцНачисления)
	
	Возврат УчетнаяПолитикаСервер.ПрименятьВычетВОСМСДляФизическихЛицИГПХ(Организация, МесяцНачисления);
	
КонецФункции

Функция ПрименятьВычетОПВиВОСМСДляГПХ(Организация, МесяцНачисления) Экспорт
	
	Возврат УчетнаяПолитикаСервер.ПрименятьВычетОПВиВОСМСДляГПХ(Организация, МесяцНачисления);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

