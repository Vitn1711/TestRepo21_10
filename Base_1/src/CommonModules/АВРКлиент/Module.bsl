#Область ОбменАВР

// Выполняет методы uploadAwp() API ИС ЭСФ.
// // Если отправляются исправленные ЭСФ, то дополнительно выполняет метод еrevokeInvoiceById() API ИС ЭСФ.
//
// Параметры:
//  МассивИсходящихАВР - Массив - Массив документов АВР, которые необходимо отправить в ИС ЭСФ.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйАктВыполненныхРабот.
//
// Возвращаемое значение:
//  См. ЭСФСервер.ОтправитьИсходящиеInvoice().
//
Процедура ОтправитьИсходящиеАВР(Знач МассивИсходящихАВР, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОтправитьИсходящиеАВР(МассивИсходящихАВР, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьФормуВводаДанныхИСЭСФ(ОбработчикОповещения = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	ИмяОбработки = "Обработка.ОбменЭСФ.Форма.ВводДанныхИСЭСФ";
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		Результат = ОткрытьФормуМодально(ИмяОбработки, ПараметрыФормы);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	
	#ИначеЕсли ТонкийКлиент ИЛИ ВебКлиент ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		
		ИспользоватьВнешнююОбработку = ЭСФВызовСервера.ИспользоватьВнешнююОбработку();	
		
		// Это точно клиент на управляемые формы.
		
		Если ИспользоватьВнешнююОбработку Тогда
			ВнешняяОбработкаИмя = ЭСФВызовСервера.ПодключитьВнешнююОбработку();
			ИмяОбработки = "ВнешняяОбработка." + ВнешняяОбработкаИмя + ".Форма.ВводДанныхИСЭСФ";
		КонецЕсли;
		
		ОткрытьФорму(ИмяОбработки, ПараметрыФормы,,,,,ОбработчикОповещения);
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновитьДокументыАВРИзИСЭСФ(Знач МассивАВР, Знач ДополнительныеПараметры) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОбновитьДокументыАВРИзИСЭСФ(МассивАВР, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОткрытьФормуИзменениеСтатусовАВР(Знач Действие, Знач МассивАВР, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.ОткрытьФормуИзменениеСтатусовАВР(Действие, МассивАВР, ЗапускатьФоновоеЗадание);
	
КонецПроцедуры

Функция ИзменитьСтатусыАВР(Знач Действие, Знач КоллецияДляИзмененияСтатусов, Знач ДанныеПрофиляИСЭСФ, Знач ДанныеКлючаЭЦП, Знач УникальныйИдентификатор, Знач ЗапускатьФоновоеЗадание) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Возврат Контейнер.ИзменитьСтатусыАВР(Действие, КоллецияДляИзмененияСтатусов, ДанныеПрофиляИСЭСФ, ДанныеКлючаЭЦП, УникальныйИдентификатор, ЗапускатьФоновоеЗадание);
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Проверяет даты отправляемых АВР, если они отличаются от текущих, то предлагает изменить даты.
// Если пользователь согласится, то изменяет даты документов АВР и связанных документов.
//
// Параметры:
//  МассивАВР - Массив - Массив АВР, для которых необходимо установить текущую дату.
//   Каждый элемент массива должен иметь тип ДокументСсылка.ЭлектронныйАктВыполненныхРабот.
//  Действие - Строка - АВРКлиентСервер.ДействиеОтправка(), АВРКлиентСервер.ДействиеВыгрузка().
//
// Возвращаемое значение:
//  Булево - Истина - Можно продолжить отправку, Ложь - в противном случае.
//
Процедура УстановитьТекущуюДатуДляАВРВопрос(Знач МассивАВР, Знач Действие, Знач ОписаниеОповещения) Экспорт
	
	ТекущаяДата = НачалоДня(ТекущаяДата());	
	ИзмененГод  = Ложь;
	МассивАВРДругаяДата = АВРВызовСервера.МассивАВРДругаяДата(МассивАВР, ТекущаяДата, ИзмененГод);
	
	Если ИзмененГод Тогда
		СообщениеОСменеНомеровДокументов = Символы.ПС + НСтр("ru = 'ВНИМАНИЕ!!! При изменении года будут изменены номера документов!'");
	Иначе
		СообщениеОСменеНомеровДокументов = "";
	КонецЕсли;
		
	Если МассивАВРДругаяДата.Количество() = 1 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Дата ""%АВР%"" отличается от текущей (%ТекущаяДата%).
			|%ОтправляемыйВыгружаемый% электронный акт выполненных работ должен иметь текущую дату.
			|Изменить дату электронного акта выполненных работ и связанного документа на текущую (%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%АВР%",  АВРКлиентСервер.КраткоеПредставлениеАВР(МассивАВРДругаяДата[0]));
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Если Действие = АВРКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Отправляемый'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыйВыгружаемый%", НСтр("ru = 'Выгружаемый'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	ИначеЕсли МассивАВРДругаяДата.Количество() > 1 Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Даты %КоличествоАВР% электронных актов выполненных работ отличаются от текущей (%ТекущаяДата%):
			|%ОтправляемыеВыгружаемые% электронные акты выполненных работ должны иметь текущую дату.
			|Изменить даты электронных актов выполненных работ и связанных документов на текущую (%ТекущаяДата%)? %ИзменениеНомеровДокументов%'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ТекущаяДата%", Формат(ТекущаяДата, "ДФ=dd.MM.yyyy"));
		Если Действие = АВРКлиентСервер.ДействиеОтправка() Тогда
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Отправляемые'"));
		Иначе
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОтправляемыеВыгружаемые%", НСтр("ru = 'Выгружаемые'"));
		КонецЕсли;
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИзменениеНомеровДокументов%", СообщениеОСменеНомеровДокументов);

		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%КоличествоАВР%", МассивАВРДругаяДата.Количество());
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		ОписаниеОповещения.ДополнительныеПараметры.Вставить("ТекущаяДата", ТекущаяДата);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Новый Структура("Ответ, ТекущаяДата", КодВозвратаДиалога.Пропустить, ТекущаяДата));
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает формы подсистемы о происхождении события.
//
// Параметры:
//  ИмяСобытия - Строка - Имя произошедшего события, ЭСФКлиентСервер.ИмяСобытия<Имя>().
//  Параметр - Массив, Неопределено - Массив ссылок на измененные или созданные объекты. 
//   Неопределено, если невозможно определить какие объекты были изменены или созданы.
//
Процедура ОповеститьФормы(Знач ИмяСобытия, Знач Параметр = Неопределено, Знач Источник = Неопределено) Экспорт
	
	Оповестить(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

// Открывает форму выбора документа - основания из документа АВР.
// Используется в команде "Выбрать документ - основание", подменю "Отражение в учете".
// Обработка выбора выполняется в форме АВР и не требует переопределения.
//
// Параметры:
//  ФормаАВР - УправляемаяФорма - Форма документа АВР, 
//   из которой открывается форма выбора документа-основания.
//  ИмяФормыВыбора - Переменная - хранит имя формы того документа,
//   которого нужно открыть.
//
Процедура ОткрытьФормуВыбораДокументаОснования(Знач ФормаАВР, Знач ИмяФормыВыбора) Экспорт
	
	// Сформировать отбор формы выбора.
	Отбор = Новый Структура;
	
	Отбор.Вставить("Организация", ФормаАВР.Объект.Организация);
	
	// Открыть форму выбора с отбором.
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = ПолучитьФорму(ИмяФормыВыбора, , ФормаАВР);
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Форма.ДокументСписок.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		Форма.Открыть();
	#Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ФормаАВР);		
	#КонецЕсли
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаИсходящихАВР() Экспорт
	СписокАВР(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Исходящий"));	
КонецПроцедуры

Процедура ОткрытьФормуСпискаВходящихАВР() Экспорт
	СписокАВР(ПредопределенноеЗначение("Перечисление.НаправленияЭСФ.Входящий"));	
КонецПроцедуры

Процедура СписокАВР(Знач Направление = Неопределено) Экспорт
	
	Контейнер = АВРКлиентСервер.КонтейнерМетодов();	
	Контейнер.СписокАВР(Направление);
	
КонецПроцедуры

#КонецОбласти 

#Область СозданиеАктовНаОснованииПервичныхДокументов

Процедура ВыполнитьКомандуСоздатьЭАВР(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыДляВыполненияКоманды = АВРВызовСервера.ПодготовитьПараметрыДляВыполненияКомандыСоздатьЭАВР(ПараметрКоманды);
	
	МассивыОбрабатываемыхДокументов = ПараметрыДляВыполненияКоманды.МассивыОбрабатываемыхДокументов;
	
	МассивДокументовБезЭАВР = МассивыОбрабатываемыхДокументов.МассивДокументовБезЭАВР;
	МассивДокументовСЭАВР = МассивыОбрабатываемыхДокументов.МассивДокументовСЭАВР;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если МассивДокументовСЭАВР.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'На основании выбранного документа уже созданы ЭАВР.
		|Создать новый ЭАВР?'");
		ДополнительныеПараметры.Вставить("МассивДокументов", МассивДокументовСЭАВР);
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЭАВРЗавершение", ЭтотОбъект , ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьАВР(МассивДокументовБезЭАВР[0]);
	КонецЕсли;
		
КонецПроцедуры

Процедура СоздатьЭАВРЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	МассивДокументов = ДополнительныеПараметры.МассивДокументов;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СоздатьАВР(МассивДокументов[0]);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьАВР(ДокументОснование) Экспорт
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("ДокументОснование", ДокументОснование));
	
	ОткрытьФорму("Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаДокумента", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыеЗадания

Процедура ОбработкаОповещенияАВР_ПроверятьОповещенияФоновогоЗадания(ЭтаФорма, Параметр) Экспорт

	Если Параметр = Неопределено
		ИЛИ НЕ ТипЗнч(Параметр) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРаботыЗадания = Параметр;
	
	Если РезультатРаботыЗадания.ЗаданиеВыполнено Тогда
		
		АдресСообщенияПользователю = ЭСФВызовСервера.СообщенияФоновогоЗадания(РезультатРаботыЗадания.ИдентификаторЗадания);
		СообщенияПользователю = ПолучитьИзВременногоХранилища(АдресСообщенияПользователю);
		Если СообщенияПользователю <> Неопределено Тогда
			Для каждого СообщениеФоновогоЗадания Из СообщенияПользователю Цикл
				СообщениеФоновогоЗадания.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		АВРКлиент.ОповеститьФормы(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), Параметр, ЭтаФорма);
		ДополнительныеОповещения = ?(Параметр.Свойство("ДополнительныеОповещения"), Параметр.ДополнительныеОповещения, Новый Структура);
		Для Каждого ДополнительноеОповещение Из ДополнительныеОповещения Цикл
			АВРКлиент.ОповеститьФормы(ДополнительноеОповещение.Ключ, Параметр, ЭтаФорма);
		КонецЦикла;			
	Иначе
	
		ПараметрыДлительнойОперации = Новый Структура;
		ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания");
		ПараметрыДлительнойОперации.Вставить("ВыводитьОкноОжидания", Истина);
		//ПараметрыДлительнойОперации.Вставить("ВыводитьПрогрессВыполнения", Истина);
		ПараметрыДлительнойОперации.Вставить("АдресРезультата", РезультатРаботыЗадания.АдресХранилища);
		ПараметрыДлительнойОперации.Вставить("ВыводитьСообщения", Истина);
		
		Если РезультатРаботыЗадания.Свойство("ТекстСообщения") Тогда
			ПараметрыДлительнойОперации.Вставить("ТекстСообщения", РезультатРаботыЗадания.ТекстСообщения);
		КонецЕсли;
		
		ПараметрыДлительнойОперации.ИдентификаторЗадания = РезультатРаботыЗадания.ИдентификаторЗадания;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОповеститьОЗавершениияДлительнойОперацииАВР", АВРКлиент, ЭтаФорма);
		
		ОткрытьФорму("Обработка.ОбменЭСФ.Форма.ДлительнаяОперация", ПараметрыДлительнойОперации, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьОЗавершениияДлительнойОперацииАВР(Результат, Источник) Экспорт

	Оповестить(АВРКлиентСервер.ИмяСобытияЗаписьАВР(), Результат, Источник);
	
	Если Источник.ИмяФормы = "Обработка.ОбменЭСФ.Форма.СинхронизацияАВР" Тогда
		Оповестить(АВРКлиентСервер.ИмяСобытияСинхронизацияАВР(), Результат, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 