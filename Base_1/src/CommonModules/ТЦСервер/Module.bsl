///////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТ ТЕСТ

// Возвращает значение Истина, если в справочнике ТЦСценарии есть элементы
//
// Возвращаемое значение:
//   Булево
//
Функция ПолучитьНаличиеСценариев() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТЦСценарии.Ссылка
	               |ИЗ
	               |	Справочник.ТЦСценарии КАК ТЦСценарии";
				   
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ПолучитьНаличиеСценариев()

// Создать документ фиксирующий факт выполнения сценария
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий
//
// Возвращаемое значение:
//  ДокументСсылка.ТЦТест - ссылка тест по выбранному сценарию
//
Функция СоздатьТест(Сценарий)
	
	Тест = Документы.ТЦТест.СоздатьДокумент();
	Тест.Дата = ТекущаяДата();
	Тест.НачалоСостояния = Тест.Дата;
	Тест.Описание = Сценарий.Описание;
	Тест.Прерван = Ложь;
	Тест.Завершен = Ложь;
	Тест.Результат = Перечисления.ТЦРезультатВыполнения.Неопределено;
	Тест.Состояние = Перечисления.ТЦСостояние.Подготовка;
	Тест.Сценарий = Сценарий.Наименование;
	Тест.ДлительностьВыполнения = Сценарий.ДлительностьВыполнения;
	Тест.ТаймаутЗапускаКлиента = Сценарий.ТаймаутЗапускаКлиента;
	Тест.ТаймаутОпросаКлиента= Сценарий.ТаймаутОпросаКлиента;
	Тест.ТаймаутЗагрузкиСценарияКлиентом = Сценарий.ТаймаутЗагрузкиСценарияКлиентом;
	Тест.ТаймаутВыполнения = Сценарий.ТаймаутВыполнения;
	Тест.ТаймаутЗаписиРезультатов = Сценарий.ТаймаутЗаписиРезультатов;
	Тест.ТаймаутИнициализации = Сценарий.ТаймаутИнициализации;
	Тест.ТаймаутПодготовки = Сценарий.ТаймаутПодготовки;
	Тест.ТаймаутУдаленияДанных = Сценарий.ТаймаутУдаленияДанных;
	Тест.ПаузаПослеЗапускаВРМ = Сценарий.ПаузаПослеЗапускаВРМ;
	Тест.ВРМЗапущены = Ложь;
	Тест.Записать();
	
	Возврат Тест.Ссылка;
	
КонецФункции // СоздатьТест()

// Изменить содержимое документа ТЦТест
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, изменяемый документ
//  ПриИзменении - Строка, имя функции изменяющий документ, которая принимает
//                 в качестве параметра объект документа
//  Параметры - ПроизвольноеЗначение, параметры ПриИзменении
//
Процедура ИзменитьТест(Тест, ПриИзменении, Параметры = Неопределено)
	
	НачатьТранзакцию();
	Блокировки = Новый БлокировкаДанных;
	Блокировка = Блокировки.Добавить("Документ.ТЦТест");
	Блокировка.УстановитьЗначение("Ссылка", Тест);
	Блокировки.Заблокировать();
	
	ТестОбъект = Тест.ПолучитьОбъект();
	Параметр = ?(Параметры = Неопределено, "", ", Параметры");
	Выполнить ПриИзменении + "(ТестОбъект" + Параметр + ")";
	ТестОбъект.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ИзменитьТест()

// Установить менеджер теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест
//
Процедура УстановитьМенеджерТеста(Тест, Менеджер)
	
	Тест.Менеджер = Менеджер;
	
КонецПроцедуры // УстановитьМенеджерТеста()

// Зафиксировать ошибку при выполнении теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест, тест, при выполнеии которого произошла ошибка
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//
Процедура ТестВыполненСОшибкой(Тест, ИнформацияОбОшибке)
	
	ОписаниеОшибки = ТЦОбщий.ИнформациюОбОшибкеВСтруктуру(ИнформацияОбОшибке);
	
	Тест.ИнформацияОбОшибке = Новый ХранилищеЗначения(ОписаниеОшибки);
	Тест.Результат = Перечисления.ТЦРезультатВыполнения.Ошибка;
	Тест.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры // ТестВыполненСОшибкой()

// Зафиксировать успешное выполнение теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест, тест, при выполнеии которого произошла ошибка
//
Процедура ТестВыполненУспешно(Тест)
	
	Тест.Результат = Перечисления.ТЦРезультатВыполнения.Успешно;
	Тест.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры // ТестВыполненУспешно()

// Установить новое состояние теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест, тест, при выполнеии которого произошла ошибка
//  Состояние - ПеречислениеСсылка.ТЦСостояние
//
Процедура УстановитьСостояниеТеста(Тест, Состояние)
	
	Тест.Состояние = Состояние;
	Тест.НачалоСостояния = ТекущаяДата();
	
КонецПроцедуры // УстановитьСостояниеТеста()

// Установить состояние запуска ВРМ
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест, тест, при выполнеии которого произошла ошибка
//  ВРМЗапущены - Булево
//
Процедура УстановитьСостояниеЗапускаВРМ(Тест, ВРМЗапущены)
	
	Тест.ВРМЗапущены = ВРМЗапущены;
	
КонецПроцедуры // УстановитьСостояниеЗапускаВРМ()

// Установить или снять паузу после запуска ВРМ
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест, тест, при выполнеии которого произошла ошибка
//  Пауза - Булево
//
Процедура УстановитьПаузуПослеЗапускаВРМ(Тест, Пауза)
	
	Тест.ПаузаПослеЗапускаВРМ = Пауза;
	
КонецПроцедуры // УстановитьПаузуПослеЗапускаВРМ()

// Прервать выполнение теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест
//
Процедура ПрерватьТест(Тест)
	
	Тест.Прерван = Истина;
	Тест.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры // ПрерватьТест()

// Завершить выполнение теста
//
// Параметры:
//  Тест - ДокументОбъект.ТЦТест
//
Процедура ЗавершитьТест(Тест)
	
	Тест.Завершен = Истина;
	
КонецПроцедуры // ЗавершитьТест()

// Получить ссылку на текущий тест
//
// Возвращаемое значение:
//  ДокументСсылка.ТЦТест - ссылка на выполняемый в данный момент тест
//  Неопределено, если в данный момент времени тесты не выполняются
//
Функция ТекущийТест() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Документ.ТЦТест
		|ГДЕ
		|	Результат =
		|		ЗНАЧЕНИЕ(Перечисление.ТЦРезультатВыполнения.Неопределено)
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции // ТекущийТест()

// Проверить, завершен ли тест
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТЦРезультатВыполнения
//
Функция СостояниеТеста(Тест) Экспорт
	
	НачатьТранзакцию();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Тест);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	НачалоСостояния,
		|	ИнформацияОбОшибке,
		|	Прерван,
		|	Завершен,
		|	Результат,
		|	Состояние,
		|	ТаймаутВыполнения,
		|	ТаймаутЗаписиРезультатов,
		|	ТаймаутИнициализации,
		|	ТаймаутПодготовки,
		|	ТаймаутУдаленияДанных,
		|	ПаузаПослеЗапускаВРМ,
		|	ВРМЗапущены,
		|	Дата КАК ДатаНачала,
		|	ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	Документ.ТЦТест
		|ГДЕ
		|	Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	ЗафиксироватьТранзакцию();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("НачалоСостояния", Выборка.НачалоСостояния);
		Результат.Вставить("ИнформацияОбОшибке", Выборка.ИнформацияОбОшибке.Получить());
		Результат.Вставить("Прерван", Выборка.Прерван);
		Результат.Вставить("Завершен", Выборка.Завершен);
		Результат.Вставить("Результат", Выборка.Результат);
		Результат.Вставить("Состояние", Выборка.Состояние);
		Результат.Вставить("ТаймаутВыполнения", Выборка.ТаймаутВыполнения);
		Результат.Вставить("ТаймаутЗаписиРезультатов", Выборка.ТаймаутЗаписиРезультатов);
		Результат.Вставить("ТаймаутИнициализации", Выборка.ТаймаутИнициализации);
		Результат.Вставить("ТаймаутПодготовки", Выборка.ТаймаутПодготовки);
		Результат.Вставить("ТаймаутУдаленияДанных", Выборка.ТаймаутУдаленияДанных);
		Результат.Вставить("ПаузаПослеЗапускаВРМ", Выборка.ПаузаПослеЗапускаВРМ);
		Результат.Вставить("ВРМЗапущены", Выборка.ВРМЗапущены);
		Результат.Вставить("ДатаНачала", Выборка.ДатаНачала);
		Результат.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции // СостояниеТеста()


///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ПРОЦЕССОМ ТЕСТИРОВАНИЯ

// Выпонить указанный сценарий
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий
//
// Возвращаемое значение:
//  ДокументСсылка.ТЦТест - ссылка тест по выбранному сценарию
//
Функция ВыполнитьСценарий(Сценарий) Экспорт
	
	Тест = СоздатьТест(Сценарий);
	
	Параметры = Новый Массив;
	Параметры.Добавить(Сценарий);
	Параметры.Добавить(Тест);
	ИмяЗадания = "ТЦСервер.ЗаданиеВыполнитьСценарий";
	Задание = ФоновыеЗадания.Выполнить(ИмяЗадания, Параметры);
	ИзменитьТест(Тест, "УстановитьМенеджерТеста", Задание.УникальныйИдентификатор);
	
	Возврат Тест.Ссылка;
	
КонецФункции // ВыполнитьСценарий()

// Прервать выполнение теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
Процедура ПрерватьВыполнениеТеста(Тест) Экспорт
	
	ИзменитьТест(Тест, "ПрерватьТест");
	
КонецПроцедуры // ПрерватьВыполнениеСценария()

// Завершить выполнение теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
Процедура ЗавершитьВыполнениеТеста(Тест) Экспорт
	
	ИзменитьТест(Тест, "ЗавершитьТест");
	
КонецПроцедуры // ЗавершитьВыполнениеТеста()

// Обработчик фонового задания, выполненяющего сценарий
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//  Тест - ДокументСсылка.ТЦТест
//
Процедура ЗаданиеВыполнитьСценарий(Сценарий, Тест) Экспорт
	
	Попытка
		ПриВыполненииСценария(Сценарий, Тест);
		ИзменитьТест(Тест, "ТестВыполненУспешно");
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Тест-центр");
		ИзменитьТест(Тест, "ТестВыполненСОшибкой", Ошибка);
	КонецПопытки;
	
КонецПроцедуры // ЗаданиеВыполнитьСценарий()

// Обработчик выполнения сценария
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//  Тест - ДокументСсылка.ТЦТест
//
Процедура ПриВыполненииСценария(Сценарий, Тест)
	
	ПроверитьНаличиеАгентов(Сценарий);
	Агенты = АгентыСценария(Сценарий);
	ПроверитьАктивностьАгентов(Агенты, Тест);
	НастроитьПользователей(Сценарий);
	ПодготовитьСценарий(Сценарий);
	
	Если ТестПрерван(Тест) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВыполнения = СформироватьТаблицуВыполнения(Сценарий, Тест, Агенты);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Для каждого Задание Из ТаблицаВыполнения Цикл
		
		// Установить новое состояние Теста
		ТекущееСостояние = Задание.Параметры.Состояние;
		ИзменитьТест(Тест, "УстановитьСостояниеТеста", ТекущееСостояние);
		
		// Сообщить Агентам о необходимости выполнения задания
		ОтправитьСообщенияГруппе(
			Агенты,
			Тест,
			Перечисления.ТЦСообщение.Выполнить,
			Задание.Параметры);
			
		// Подготовить таблицу состояний Агентов
		Состояния = Новый ТаблицаЗначений;
		Состояния.Колонки.Добавить("Агент");
		Состояния.Колонки.Добавить("Выполнено");
		Состояния.Колонки.Добавить("Результат");
		
		Для каждого Агент Из Агенты Цикл
			Состояние = Состояния.Добавить();
			Состояние.Агент = Агент;
			Состояние.Выполнено = Ложь;
		КонецЦикла;
		
		Готово = Ложь;
		Таймаут = ТекущаяДата() + Задание.Таймаут;
		
		// Ожидать отведенное на запуск время
		Пока ТекущаяДата() < Таймаут Цикл
			
			// Прочитать все сообщения из очереди
			Пока Истина Цикл
				Сообщение = ПолучитьСообщение(Тест);
				
				Если Сообщение = Неопределено Тогда
					Прервать;
				Иначе // Если есть сообщение
					Если Сообщение.Сообщение = Перечисления.ТЦСообщение.ВыполненоУспешно Тогда
						
						// Отметить успешное выполнение задания одного из Агентов
						Состояние = Состояния.Найти(Сообщение.Отправитель, "Агент");
						
						Если Состояние <> Неопределено Тогда
							Состояние.Выполнено = Истина;
							Состояние.Результат = Сообщение.Параметры;
						КонецЕсли;
					ИначеЕсли Сообщение.Сообщение = Перечисления.ТЦСообщение.ВыполненоСОшибкой Тогда
						
						// Отменить выполнение задания, если обнаружена ошибка у одного из Агентов
						ОтправитьСообщенияГруппе(Агенты,, Перечисления.ТЦСообщение.Отменить);
						ВызватьИсключение Сообщение.Параметры;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Готово = Истина;
			
			// Проверить, все ли Агенты выполнили задание
			Для каждого Состояние Из Состояния Цикл
				Если Состояние.Выполнено = Ложь Тогда
					Готово = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Готово Тогда
				ОписаниеВРМ = ОписаниеВРМ();
				
				Если ТекущееСостояние = Перечисления.ТЦСостояние.ЗаписьРезультатов Тогда
					
					Набор = РегистрыСведений.ТЦРезультаты.СоздатьНаборЗаписей();
					Набор.Отбор.Тест.Установить(Тест);
					НомерПП = 1;
					
					Для каждого Состояние Из Состояния Цикл
						РезультатАгента = Состояние.Результат;
						
						Для каждого СтрокаРезультата Из РезультатАгента Цикл
							ВРМ = СтрокаРезультата.Ключ;
							ЗначенияВРМ = ОписаниеВРМ[ВРМ];
							РезультатВРМ = СтрокаРезультата.Значение.Результат;
							НомерВРМ = СтрокаРезультата.Значение.НомерВРМ;
							
							Для каждого СтрокаПоказателя Из РезультатВРМ Цикл
								НомерПоказателя = 1;
								
								Для каждого ЗначениеПоказателя Из СтрокаПоказателя.Значение Цикл
									СтрокаНабора = Набор.Добавить();
									СтрокаНабора.Номер = НомерПП;
									СтрокаНабора.Тест = Тест;
									СтрокаНабора.Роль = ЗначенияВРМ.ИмяРоли;
									СтрокаНабора.Компьютер = ЗначенияВРМ.Компьютер;
									СтрокаНабора.Пользователь = ЗначенияВРМ.Пользователь;
									СтрокаНабора.НомерВРМ = НомерВРМ;
									СтрокаНабора.Показатель = СтрокаПоказателя.Ключ;
									СтрокаНабора.НомерПоказателя = НомерПоказателя;
									СтрокаНабора.Значение = ЗначениеПоказателя;
									НомерПоказателя = НомерПоказателя + 1;
									НомерПП = НомерПП + 1;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					
					Набор.Записать();
				КонецЕсли;
				
				Прервать;
			Иначе // Если не все Агенты выполнили задание, пауза 3 сек. и повтор проверки
				Если ТестПрерван(Тест) Тогда
					ОтправитьСообщенияГруппе(Агенты,, Перечисления.ТЦСообщение.Отменить);
					Возврат;
				КонецЕсли;
				
				КипВнешнийКомпонент.Пауза(Инструменты, 3000);
			КонецЕсли;
		КонецЦикла;
		
		Если Не Готово Тогда
			// За отведенное время, не все Агенты выполнили задание, отменить задание
			ОтправитьСообщенияГруппе(Агенты,, Перечисления.ТЦСообщение.Отменить);
			Выполнить "ВызватьИсключение " + Задание.Ошибка + "(Сценарий, Тест);";
		ИначеЕсли ТекущееСостояние = Перечисления.ТЦСостояние.Подготовка Тогда
			НачатьТранзакцию();
			НеобходимаПауза = Тест.ПаузаПослеЗапускаВРМ;
			Если НеобходимаПауза Тогда
				ИзменитьТест(Тест, "УстановитьСостояниеЗапускаВРМ", Истина);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
			Если НеобходимаПауза Тогда
				Пока Не ТестПрерван(Тест) Цикл
					КипВнешнийКомпонент.Пауза(Инструменты, 3000);
					НачатьТранзакцию();
					ПаузаЗавершена = Не Тест.ПаузаПослеЗапускаВРМ;
					ЗафиксироватьТранзакцию();
					
					Если ПаузаЗавершена Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьТест(Тест, "УстановитьСостояниеТеста", ПредопределенноеЗначение("Перечисление.ТЦСостояние.Неактивен"));
	
КонецПроцедуры // ПриВыполненииСценария()

// Проверить наличие всех необходимых агентов
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//
Процедура ПроверитьНаличиеАгентов(Сценарий)
	
	// Проверить, запущены ли необходимые Агенты
	Компьютеры = КомпьютерыБезАгентов(Сценарий);
	
	Если Компьютеры.Количество() > 0 Тогда
		Список = ТЦОбщий.МассивВСтроку(Компьютеры, "
			| - ", Истина);
		Сообщение = "Необходимо запустить Агентов на компьютерах:" + Список;
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеАгентов()

// Получить список компьютеров, на которых не запущены Агенты
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция КомпьютерыБезАгентов(Сценарий)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Клиент.Компьютер КАК Компьютер
		|ПОМЕСТИТЬ Компьютеры
		|ИЗ
		|	Справочник.ТЦСценарии.Структура
		|ГДЕ
		|	Ссылка = &Сценарий
		|ИНДЕКСИРОВАТЬ ПО
		|	Компьютер;
		|
		|ВЫБРАТЬ
		|	Компьютеры.Компьютер.Наименование КАК Имя
		|ИЗ
		|	Компьютеры
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦАгенты Агенты
		|	ПО Компьютеры.Компьютер = Агенты.Компьютер
		|ГДЕ
		|	Агенты.Компьютер ЕСТЬ NULL";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Имя");
	
КонецФункции // КомпьютерыБезАгентов()

// Получить список Агентов, задействованных в сценарии
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//
// Возвращаемое значение:
//  Массив - ссылки на агентов, участвующих в тестировании
//
Функция АгентыСценария(Сценарий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Клиент.Компьютер КАК Компьютер
		|ПОМЕСТИТЬ Компьютеры
		|ИЗ
		|	Справочник.ТЦСценарии.Структура
		|ГДЕ
		|	Ссылка = &Сценарий
		|ИНДЕКСИРОВАТЬ ПО
		|	Компьютер;
		|
		|ВЫБРАТЬ
		|	Агенты.Ссылка КАК Ссылка
		|ИЗ
		|	Компьютеры
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТЦАгенты Агенты
		|	ПО Компьютеры.Компьютер = Агенты.Компьютер";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // АгентыСценария()

// Проверить работоспособность Агентов
//
// Параметры:
//  Агенты - Массив Агентов (СправочникСсылка.ТЦАгенты)
//
Процедура ПроверитьАктивностьАгентов(Агенты, Тест)
	
	ПроверкаАктивности = Перечисления.ТЦСообщение.ПроверкаАктивности;
	ОтправитьСообщенияГруппе(Агенты,, ПроверкаАктивности);
	Запрос = ПолучитьЗапросНеДоставленныхСообщений(Агенты);
	Начало = ТекущаяДата();
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Пока ТекущаяДата() - Начало < 20 Цикл
		Выгрузка = Запрос.Выполнить().Выгрузить();
		НеПолучившие = Выгрузка.ВыгрузитьКолонку("Представление");
		
		Если НеПолучившие.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ТестПрерван(Тест) Тогда
			Возврат;
		КонецЕсли;
		
		КипВнешнийКомпонент.Пауза(Инструменты, 2000);
	КонецЦикла;
	
	Если НеПолучившие.Количество() > 0 Тогда
		Список = ТЦОбщий.МассивВСтроку(НеПолучившие, "
			| - ", Истина);
		Сообщение = "Агенты на следующих компьютерах не отвечают (возможно, не запущены):" + Список;
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьАктивностьАгентов()

// Сформировать таблицу, на основе которой будет выполняться сценарий
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//  Тест - ДокументСсылка.ТЦТест
//  Агенты - Массив (СправочникСсылка.ТЦАгенты)
//
// Возвращаемое значение:
//  ТаблицаЗначений - Параметры выполнения сценария
//
Функция СформироватьТаблицуВыполнения(Сценарий, Тест, Агенты)
	
	Таблица = Новый ТаблицаЗначений;
	Колонки = Таблица.Колонки;
	Колонки.Добавить("Параметры");
	Колонки.Добавить("Таймаут");
	Колонки.Добавить("Ошибка");
	
	Задание = Таблица.Добавить();
	// DEL: НомераВРМ = ПолучитьНачальныеНомераВРМ(Сценарий);
	Параметры = Новый Структура;
	Параметры.Вставить("Сценарий", Сценарий);
	Параметры.Вставить("Тест", Тест);
	Параметры.Вставить("Состояние", Перечисления.ТЦСостояние.Подготовка);
	// DEL: Параметры.Вставить("НомераВРМ", НомераВРМ);
	Задание.Параметры = Параметры;
	Задание.Таймаут = Тест.ТаймаутПодготовки;
	Задание.Ошибка = "ТаймаутПодготовки";
	
	Задание = Таблица.Добавить();
	Параметры = Новый Структура;
	Параметры.Вставить("Состояние", Перечисления.ТЦСостояние.Инициализация);
	Задание.Параметры = Параметры;
	Задание.Таймаут = Тест.ТаймаутИнициализации;
	Задание.Ошибка = "ТаймаутИнициализации";
	
	Задание = Таблица.Добавить();
	Параметры = Новый Структура;
	Параметры.Вставить("Состояние", Перечисления.ТЦСостояние.Выполнение);
	Задание.Параметры = Параметры;
	Задание.Таймаут = Тест.ТаймаутВыполнения;
	Задание.Ошибка = "ТаймаутВыполнения";
	
	Задание = Таблица.Добавить();
	Параметры = Новый Структура;
	Параметры.Вставить("Состояние", Перечисления.ТЦСостояние.ЗаписьРезультатов);
	Задание.Параметры = Параметры;
	Задание.Таймаут = Тест.ТаймаутЗаписиРезультатов;
	Задание.Ошибка = "ТаймаутЗаписиРезультатов";
	
	Задание = Таблица.Добавить();
	Параметры = Новый Структура;
	Параметры.Вставить("Состояние", Перечисления.ТЦСостояние.УдалениеДанных);
	Задание.Параметры = Параметры;
	Задание.Таймаут = Тест.ТаймаутУдаленияДанных;
	Задание.Ошибка = "ТаймаутУдаленияДанных";
	
	Возврат Таблица;
	
КонецФункции // СформироватьТаблицуВыполнения()

// Подготовить сценарий для запуска
//
// Параметры:
//  Сценарий - СправочникСсылка.Сценарии
//
Процедура ПодготовитьСценарий(Сценарий)
	
	// Очистить таблицу запуска
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗафиксироватьТранзакцию();
		
		Если Объект <> Неопределено Тогда
			Объект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// Получить сценарий
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Клиент,
		|	Пользователь,
		|	Роль,
		|	Клиент.Компьютер КАК Компьютер,
		|	СУММА(Количество) КАК Количество
		|ПОМЕСТИТЬ
		|	ТаблицаЗапуска
		|ИЗ
		|	Справочник.ТЦСценарии.Структура
		|ГДЕ
		|	Ссылка = &Сценарий
		|СГРУППИРОВАТЬ ПО
		|	Клиент,
		|	Пользователь,
		|	Роль,
		|	Клиент.Компьютер
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент.Компьютер,
		|	Пользователь;
		|
		|ВЫБРАТЬ
		|	Компьютер,
		|	Пользователь,
		|	СУММА(Количество) КАК КоличествоКлонов
		|ПОМЕСТИТЬ
		|	Клоны
		|ИЗ
		|	ТаблицаЗапуска
		|СГРУППИРОВАТЬ ПО
		|	Компьютер,
		|	Пользователь
		|ИНДЕКСИРОВАТЬ ПО
		|	Компьютер,
		|	Пользователь;
		|
		|ВЫБРАТЬ
		|	ТаблицаЗапуска.Клиент КАК Клиент,
		|	ТаблицаЗапуска.Пользователь КАК Пользователь,
		|	ТаблицаЗапуска.Пользователь.Имя КАК ИмяПользователя,
		|	ТаблицаЗапуска.Роль КАК Роль,
		|	ТаблицаЗапуска.Компьютер КАК Компьютер,
		|	ТаблицаЗапуска.Количество КАК Количество,
		|	Клоны.КоличествоКлонов КАК КоличествоКлонов
		|ИЗ
		|	ТаблицаЗапуска
		|		ЛЕВОЕ СОЕДИНЕНИЕ Клоны ПО
		|			ТаблицаЗапуска.Компьютер = Клоны.Компьютер И
		|			ТаблицаЗапуска.Пользователь = Клоны.Пользователь
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЗапуска.Компьютер,
		|	ТаблицаЗапуска.Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Выполнить начальное заполнение таблицы запуска с размножением количества
	ТекущийКомпьютер = Неопределено;
	ТекущийПользователь = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		ЭтоНовыйКомпьютер = ТекущийКомпьютер <> Выборка.Компьютер;
		ЭтоНовыйПользователь = 
			ЭтоНовыйКомпьютер или
			ТекущийПользователь <> Выборка.Пользователь;
			
		Если ЭтоНовыйКомпьютер Тогда
			ТекущийКомпьютер = Выборка.Компьютер;
		КонецЕсли;
		
		Если ЭтоНовыйПользователь Тогда
			НомерПользователя = 1;
			ТекущийПользователь = Выборка.Пользователь;
		КонецЕсли;
		
		Для Сч = 1 По Выборка.Количество Цикл
			Если Выборка.КоличествоКлонов > 1 Тогда
				ИмяКлона = ТЦОбщий.ИмяКлона(Выборка.ИмяПользователя, НомерПользователя);
				Клон = ПользовательИБПоИмени(ИмяКлона);
				НомерПользователя = НомерПользователя + 1;
			Иначе
				Клон = Выборка.Пользователь;
			КонецЕсли;
			
			ЭлементЗапуска = Справочники.ТЦСценарийЗапуска.СоздатьЭлемент();
			ЭлементЗапуска.Компьютер = Выборка.Компьютер;
			ЭлементЗапуска.Роль = Выборка.Роль;
			ЭлементЗапуска.Клиент = Выборка.Клиент;
			ЭлементЗапуска.Пользователь = Выборка.Пользователь;
			ЭлементЗапуска.Клон = Клон;
			ЭлементЗапуска.Запущен = Ложь;
			ЭлементЗапуска.Записать();
		КонецЦикла;
	КонецЦикла;
	
	// Установить номера ВРМ
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	Роль
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска
		|УПОРЯДОЧИТЬ ПО
		|	Роль,
		|	Компьютер,
		|	НомерСессии,
		|	Клиент,
		|	Клон.Имя";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущаяРоль = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если ТекущаяРоль <> Выборка.Роль Тогда
			ТекущаяРоль = Выборка.Роль;
			НомерВРМ = 1;
		КонецЕсли;
		
		НачатьТранзакцию();
		ЭлементЗапуска = Выборка.Ссылка.ПолучитьОбъект();
		ЗафиксироватьТранзакцию();
		ЭлементЗапуска.Номер = НомерВРМ;
		ЭлементЗапуска.Записать();
		
		НомерВРМ = НомерВРМ + 1;
	КонецЦикла;
	
	// Получить список агентов разделенный по компьютерам
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Компьютер,
		|	НомерСессии,
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦАгенты
		|УПОРЯДОЧИТЬ ПО
		|	Компьютер,
		|	НомерСессии";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Компьютеры = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если Компьютеры[Выборка.Компьютер] = Неопределено Тогда
			Компьютеры[Выборка.Компьютер] = Новый Массив;
		КонецЕсли;
		
		ОписаниеАгента = Новый Структура("Агент, НомерСессии");
		ОписаниеАгента.Агент = Выборка.Ссылка;
		ОписаниеАгента.НомерСессии = Выборка.НомерСессии;
		Компьютеры[Выборка.Компьютер].Добавить(ОписаниеАгента);
	КонецЦикла;
	
	// Распределить ВП по Агентам
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	Компьютер
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска
		|УПОРЯДОЧИТЬ ПО
		|	Компьютер,
		|	Роль,
		|	Клиент,
		|	Пользователь,
		|	Клон.Имя";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийКомпьютер = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если ТекущийКомпьютер <> Выборка.Компьютер Тогда
			ТекущийКомпьютер = Выборка.Компьютер;
			АгентыКомпьютера = Компьютеры[ТекущийКомпьютер];
			НомерАгента = 0;
		КонецЕсли;
		
		НачатьТранзакцию();
		ЗапускаемыйВП = Выборка.Ссылка.ПолучитьОбъект();
		ЗафиксироватьТранзакцию();
		
		ОписаниеАгента = АгентыКомпьютера[НомерАгента];
		ЗапускаемыйВП.Агент = ОписаниеАгента.Агент;
		ЗапускаемыйВП.НомерСессии = ОписаниеАгента.НомерСессии;
		ЗапускаемыйВП.Записать();
		
		Если НомерАгента < АгентыКомпьютера.Количество() - 1 Тогда
			НомерАгента = НомерАгента + 1;
		Иначе
			НомерАгента = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьСценарий()

// Получить список ВРМ не подходящих для запускаемого сценария
//
// Параметры:
//  Компьютер - Строка, имя компьютера
//  НомерСессии - Число, номер сесси в которой запущены ВРМ
//
// Возвращаемое значение:
//  Массив - ссылки на неподходящие ВРМ
//
Функция ВРМВнеСценария(Компьютер, НомерСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", НайтиКомпьютер(Компьютер));
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВП.Ссылка КАК Ссылка,
		|	ВП.Клиент КАК Клиент,
		|	ВП.НомерСессии КАК НомерСессии,
		|	ВП.Клон КАК Клон
		|ПОМЕСТИТЬ
		|	СписокВРМ
		|ИЗ
		|	Справочник.ТЦВП КАК ВП
		|ГДЕ
		|	Клиент.Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии
		|ИНДЕКСИРОВАТЬ ПО
		|	ВП.Клиент,
		|	ВП.НомерСессии,
		|	ВП.Клон;
		|
		|ВЫБРАТЬ
		|	ВП.Ссылка КАК ВРМ
		|ИЗ
		|	СписокВРМ КАК ВП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦСценарийЗапуска КАК СценарийЗапуска ПО
		|			СценарийЗапуска.Компьютер = &Компьютер И
		|			СценарийЗапуска.НомерСессии = &НомерСессии И
		|			ВП.Клиент = СценарийЗапуска.Клиент И
		|			ВП.НомерСессии = СценарийЗапуска.НомерСессии И
		|			ВП.Клон = СценарийЗапуска.Клон
		|ГДЕ
		|	СценарийЗапуска.Запущен ЕСТЬ NULL";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВРМ");
	
КонецФункции // ВРМВнеСценария()

// Пометить подходящие ВРМ, как уже загруженные
//
// Параметры:
//  Компьютер - СправочникСсылка, компьютер на котором запущены ВРМ
//  НомерСессии - Число, номер сесси в которой запущены ВРМ
//
Функция ПереиспользоватьВРМ(Компьютер, НомерСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", НайтиКомпьютер(Компьютер));
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВП.Ссылка КАК ВРМ,
		|	СценарийЗапуска.Ссылка КАК ЭлементСценария
		|ИЗ
		|	Справочник.ТЦВП КАК ВП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦСценарийЗапуска КАК СценарийЗапуска ПО
		|			СценарийЗапуска.Компьютер = &Компьютер И
		|			СценарийЗапуска.НомерСессии = &НомерСессии И
		|			ВП.Клиент = СценарийЗапуска.Клиент И
		|			ВП.НомерСессии = СценарийЗапуска.НомерСессии И
		|			ВП.Клон = СценарийЗапуска.Клон
		|ГДЕ
		|	СценарийЗапуска.Запущен ЕСТЬ НЕ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НомераВРМ = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ОбъектВП = Выборка.ВРМ.ПолучитьОбъект();
		ОбъектСценария = Выборка.ЭлементСценария.ПолучитьОбъект();
		ОбъектВП.Роль = ОбъектСценария.Роль;
		ОбъектВП.Состояние = Перечисления.ТЦСостояние.Неактивен;
		ОбъектСценария.Запущен = Истина;
		ОбъектВП.Записать();
		ОбъектСценария.Записать();
		ЗафиксироватьТранзакцию();
		
		НомераВРМ[Выборка.ВРМ] = ОбъектСценария.Номер;
	КонецЦикла;
	
	Возврат НомераВРМ;
	
КонецФункции // ПереиспользоватьВРМ()

// Получить соответствие
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//
// Возвращаемое значение:
//  Соответствие
//    Ключ - СправочникСсылка.ТЦАгенты
//    Значение - Структура
//      Начало - Число, начало интервала номеров ВРМ
//      Конец - Число, конец интервала номеров ВРМ
//
Функция ПолучитьНачальныеНомераВРМ(Сценарий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Клиент.Компьютер КАК Компьютер,
		|	Роль КАК Роль,
		|	СУММА(Количество) КАК Количество
		|ПОМЕСТИТЬ
		|	КомпьютерыКлиентов
		|ИЗ
		|	Справочник.ТЦСценарии.Структура
		|ГДЕ
		|	Ссылка = &Сценарий
		|СГРУППИРОВАТЬ ПО
		|	Клиент.Компьютер,
		|	Роль
		|ИНДЕКСИРОВАТЬ ПО
		|	Клиент.Компьютер,
		|	Роль;
		|
		|ВЫБРАТЬ
		|	Агенты.Компьютер КАК Компьютер,
		|	КОЛИЧЕСТВО(Агенты.Компьютер) КАК КоличествоАгентов
		|ПОМЕСТИТЬ
		|	СтатистикаАгентов
		|ИЗ
		|	(ВЫБРАТЬ
		|		Агенты.Ссылка КАК Агент,
		|		Агенты.Компьютер КАК Компьютер
		|	ИЗ
		|		Справочник.ТЦАгенты КАК Агенты
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТЦСценарии.Структура КАК Сценарий ПО
		|			Сценарий.Ссылка = &Сценарий И
		|			Сценарий.Клиент.Компьютер = Агенты.Компьютер
		|	СГРУППИРОВАТЬ ПО
		|		Агенты.Ссылка,
		|		Агенты.Компьютер) КАК Агенты
		|СГРУППИРОВАТЬ ПО
		|	Агенты.Компьютер
		|ИНДЕКСИРОВАТЬ ПО
		|	Агенты.Компьютер;
		|
		|ВЫБРАТЬ
		|	КомпьютерыКлиентов.Компьютер КАК Компьютер,
		|	КомпьютерыКлиентов.Роль КАК Роль,
		|	Агенты.Ссылка КАК Агент,
		|	КомпьютерыКлиентов.Количество КАК Количество,
		|	СтатистикаАгентов.КоличествоАгентов КАК КоличествоАгентов
		|ИЗ
		|	КомпьютерыКлиентов
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦАгенты КАК Агенты ПО
		|		КомпьютерыКлиентов.Компьютер = Агенты.Компьютер
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ СтатистикаАгентов ПО
		|		КомпьютерыКлиентов.Компьютер = СтатистикаАгентов.Компьютер
		|
		|УПОРЯДОЧИТЬ ПО
		|	КомпьютерыКлиентов.Компьютер,
		|	КомпьютерыКлиентов.Роль,
		|	Агенты.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Компьютеры = Новый Соответствие;
	Агенты = Новый Соответствие;
	ТекущаяРоль = Неопределено;
	ТекущийКомпьютер = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Компьютер = Выборка.Компьютер;
		Роль = Выборка.Роль;
		Агент = Выборка.Агент;
		
		Если Компьютеры[Компьютер] = Неопределено Тогда
			Компьютеры[Компьютер] = Новый Соответствие;
		КонецЕсли;
		
		Если Компьютеры[Компьютер][Агент] = Неопределено Тогда
			Компьютеры[Компьютер][Агент] = 0;
		КонецЕсли;
		
		Если Агенты[Агент] = Неопределено Тогда
			Агенты[Агент] = Новый Соответствие;
		КонецЕсли;
		
		Если ТекущаяРоль <> Роль Или ТекущийКомпьютер <> Компьютер Тогда
			Количество = Выборка.Количество;
			КоличествоАгентов = Выборка.КоличествоАгентов;
			Порция = Цел(Количество / КоличествоАгентов);
			Остаток = Количество % КоличествоАгентов;
			ТекущаяРоль = Роль;
			ТекущийКомпьютер = Компьютер;
		КонецЕсли;
		
		РаспределениеОстатков = Количество - Остаток - Порция <= 0;
		
		Если РаспределениеОстатков Тогда
			ТекущаяПорция = Количество - Остаток;
		Иначе
			ТекущаяПорция = Порция;
		КонецЕсли;
		
		Если Остаток > 0 Тогда
			ТекущаяПорция = ТекущаяПорция + 1;
			Остаток = Остаток - 1;
		КонецЕсли;
		
		Если РаспределениеОстатков Тогда
			МинимальныйАгент = Неопределено;
			МинимальноеКоличество = 100000000;
			
			Для каждого СтатистикаАгента Из Компьютеры[Компьютер] Цикл
				Если СтатистикаАгента.Значение < МинимальноеКоличество Тогда
					МинимальноеКоличество = СтатистикаАгента.Значение;
					МинимальныйАгент = СтатистикаАгента;
				КонецЕсли;
			КонецЦикла;
			
			ОбрабатываемыйАгент = Агенты[МинимальныйАгент.Ключ];
		Иначе
			ОбрабатываемыйАгент = Агенты[Агент];
		КонецЕсли;
		
		Если ОбрабатываемыйАгент[Роль] = Неопределено Тогда
			ОбрабатываемыйАгент[Роль] = Новый Структура("Начало, Количество", 0, 0);
		КонецЕсли;
		
		ОбрабатываемыйАгент[Роль].Количество = ОбрабатываемыйАгент[Роль].Количество + ТекущаяПорция;
		Количество = Количество - ТекущаяПорция;
	КонецЦикла;
	
	Номера = Новый Соответствие;
	
	Для каждого ОписаниеАгента Из Агенты Цикл
		Агент = ОписаниеАгента.Ключ;
		Роли = ОписаниеАгента.Значение;
		
		Для каждого ОписаниеРоли Из Роли Цикл
			Роль = ОписаниеРоли.Ключ;
			Описание = ОписаниеРоли.Значение;
			
			Если Номера[Роль] = Неопределено Тогда
				Номера[Роль] = 1;
			КонецЕсли;
			
			Описание.Начало = Номера[Роль];
			Номера[Роль] = Номера[Роль] + Описание.Количество;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Агенты;
	
КонецФункции // ПолучитьНачальныеНомераВРМ()

// Получить соответствие ВРМ и его Роли
//
// Параметры:
//  СписокВРМ - Массив
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ - Справочник.ТЦВП
//   Значение - Справочник.ТЦРоли
//
Функция РолиВРМ(СписокВРМ) Экспорт
	
	РолиВРМ = Новый Соответствие;
	
	Если СписокВРМ.Количество() > 0 Тогда
		ТаблицаВРМ = МассивВТаблицуЗначений(СписокВРМ, "ВРМ");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаВРМ", ТаблицаВРМ);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	СписокВРМ.ВРМ КАК ВРМ
			|ПОМЕСТИТЬ
			|	ТаблицаВРМ
			|ИЗ
			|	&ТаблицаВРМ КАК СписокВРМ;
			|
			|ВЫБРАТЬ
			|	ВРМ КАК ВРМ,
			|	ВРМ.Роль КАК Роль
			|ИЗ
			|	ТаблицаВРМ";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			РолиВРМ[Выборка.ВРМ] = Выборка.Роль;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РолиВРМ;
	
КонецФункции // РолиВРМ()

// Получить причину таймаута подготовки Теста
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарий, ссылка на подготавливаемый сценарий
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Строка
//
Функция ТаймаутПодготовки(Сценарий, Тест)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(Роль) КАК Роль,
		|	ПРЕДСТАВЛЕНИЕ(Клиент) КАК Клиент,
		|	ПРЕДСТАВЛЕНИЕ(Пользователь) КАК Пользователь,
		|	ПРЕДСТАВЛЕНИЕ(Компьютер) КАК Компьютер,
		|	КОЛИЧЕСТВО(Ссылка) КАК Количество
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска
		|ГДЕ
		|	Запущен = Ложь
		|СГРУППИРОВАТЬ ПО
		|	Роль,
		|	Клиент,
		|	Пользователь,
		|	Компьютер";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Список = "";
	
	// Сформировать список ВРМ, которые не успели запуститься
	Пока Выборка.Следующий() Цикл
		Список = Список + "
			| - " + Формат(Выборка.Количество, "ЧГ=0") + " x "
			+ Выборка.Роль + " [" + Выборка.Пользователь + "] на "
			+ Выборка.Компьютер + " <" + Выборка.Клиент + ">";
	КонецЦикла;
	
	// Сообщить о не запущенных ВРМ
	Возврат "Следующие ВРМ не удалось подготовить до истечения таймаута подготовки ("
		+ Тест.ТаймаутПодготовки + " сек.):" + Список;
	
КонецФункции // ТаймаутПодготовки()

// Получить описание таймаута инициализации
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Строка - описание
//
Функция ТаймаутИнициализации(Сценарий, Тест)
	
	Возврат "Не все ВРМ успели инициализироваться до истечения таймаута инициализации (" +
		Тест.ТаймаутИнициализации + " сек.)";
	
КонецФункции // ТаймаутИнициализации()

// Получить описание таймаута выполнения
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Строка - описание
//
Функция ТаймаутВыполнения(Сценарий, Тест)
	
	Возврат "Не все ВРМ успели выполнить действия до истечения таймаута выполнения (" +
		Тест.ТаймаутВыполнения + " сек.)";
	
КонецФункции // ТаймаутВыполнения()

// Получить описание таймаута записи результатов
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Строка - описание
//
Функция ТаймаутЗаписиРезультатов(Сценарий, Тест)
	
	Возврат "Не все ВРМ успели записать результаты до истечения таймаута записи результатов (" +
		Тест.ТаймаутЗаписиРезультатов + " сек.)";
	
КонецФункции // ТаймаутЗаписиРезультатов()

// Получить описание таймаута удаления данных
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Строка - описание
//
Функция ТаймаутУдаленияДанных(Сценарий, Тест)
	
	Возврат "Не все ВРМ успели удалить данные до истечения таймаута удаления данных (" +
		Тест.ТаймаутУдаленияДанных + " сек.)";
	
КонецФункции // ТаймаутУдаленияДанных()

// Проверить, не отменен ли процесс тестирования (например, пользователем)
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Булево - Истина, тест отменен
//
Функция ТестПрерван(Тест)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тест", Тест);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Прерван
		|ИЗ
		|	Документ.ТЦТест
		|ГДЕ
		|	Ссылка = &Тест";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Прерван;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ТестПрерван()

// Проверить, не завершен ли процесс тестирования (например, пользователем)
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Булево - Истина, тест отменен
//
Функция ТестЗавершен(Тест)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тест", Тест);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Завершен
		|ИЗ
		|	Документ.ТЦТест
		|ГДЕ
		|	Ссылка = &Тест";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Завершен;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ТестЗавершен()

// Создать контекст выполнения тестовой обработки
//
// Возвращаемое значение:
//  Структура
//    СтатусСообщения - Структура
//      Информация - ПеречислениеСсылка.ТЦСтатусСообщения.Информация
//      Предупреждение - ПеречислениеСсылка.ТЦСтатусСообщения.Предупреждение
//      Ошибка - ПеречислениеСсылка.ТЦСтатусСообщения.Ошибка
//    РезультатВыполнения - Структура
//      Успешно - Перечисление.ТЦРезультатВыполнения.Успешно
//      Предупреждение - Перечисление.ТЦРезультатВыполнения.Предупреждение
//      Ошибка - Перечисление.ТЦРезультатВыполнения.Ошибка
//    Результаты - Соответствие
//      Ключ - Строка, имя показателя производительности
//      Значение - Число, значение показателя производительности
//
Функция СоздатьКонтекстВыполненияОбработки() Экспорт
	
	Статус = Новый Структура;
	Статус.Вставить("Информация", Перечисления.ТЦСтатусСообщения.Информация);
	Статус.Вставить("Предупреждение", Перечисления.ТЦСтатусСообщения.Предупреждение);
	Статус.Вставить("Ошибка", Перечисления.ТЦСтатусСообщения.Ошибка);
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Перечисления.ТЦРезультатВыполнения.Успешно);
	Результат.Вставить("Предупреждение", Перечисления.ТЦРезультатВыполнения.Предупреждение);
	Результат.Вставить("Ошибка", Перечисления.ТЦРезультатВыполнения.Ошибка);
	
	Контекст = Новый Структура;
	Контекст.Вставить("СтатусСообщения", Статус);
	Контекст.Вставить("РезультатВыполнения", Результат);
	Контекст.Вставить("Результаты", Новый Соответствие);
	Контекст.Вставить("ВРМ", Новый Структура("Роль, ИмяРоли, Компьютер, Пользователь, Номер, Сценарий"));
	
	Возврат Контекст;
	
КонецФункции // СоздатьКонтекстВыполненияОбработки()

// Продолжить выполнение теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
Процедура ПродолжитьТестПослеПаузыВРМ(Тест) Экспорт
	
	ИзменитьТест(Тест, "УстановитьПаузуПослеЗапускаВРМ", Ложь);
	
КонецПроцедуры // ПродолжитьТестПослеПаузыВРМ()

// Завершить работу одного или нескольких ВРМ
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП или Массив (СправочникСсылка.ТЦВП)
//
Процедура ЗавершитьРаботуВРМ(Знач ВРМ) Экспорт
	
	Если ТипЗнч(ВРМ) = Тип("СправочникСсылка.ТЦВП") Тогда
		СписокВРМ = Новый Массив;
		СписокВРМ.Добавить(ВРМ);
	Иначе
		СписокВРМ = ВРМ
	КонецЕсли;
	
	ТаблицаВРМ = МассивВТаблицуЗначений(СписокВРМ, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВРМ", ТаблицаВРМ);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсходныеВРМ.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ
		|	ТаблицаВРМ
		|ИЗ
		|	&ТаблицаВРМ КАК ИсходныеВРМ
		|ИНДЕКСИРОВАТЬ ПО
		|	ИсходныеВРМ.Ссылка;
		|
		|ВЫБРАТЬ
		|	ТаблицаВРМ.Ссылка КАК ВРМ,
		|	Агенты.Ссылка КАК Агент
		|ИЗ
		|	ТаблицаВРМ ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТЦАгенты КАК Агенты ПО
		|		ТаблицаВРМ.Ссылка.Клиент.Компьютер = Агенты.Компьютер
		|УПОРЯДОЧИТЬ ПО
		|	Агенты.Ссылка
		|ИТОГИ ПО
		|	Агенты.Ссылка";
	ВыборкаАгентов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаАгентов.Следующий() Цикл
		ВыборкаВРМ = ВыборкаАгентов.Выбрать();
		ВыгружаемыеВРМ = Новый Массив;
		
		Пока ВыборкаВРМ.Следующий() Цикл
			Если ВыборкаВРМ.Агент = Null Тогда
				УдалитьВРМ(ВыборкаВРМ.ВРМ);
			Иначе
				ВыгружаемыеВРМ.Добавить(ВыборкаВРМ.ВРМ);
			КонецЕсли;
		КонецЦикла;
		
		ТЦСервер.ОтправитьСообщение(
			ВыборкаАгентов.Агент,,
			Перечисления.ТЦСообщение.ЗавершитьРаботу,
			ВыгружаемыеВРМ);
	КонецЦикла;
	
КонецПроцедуры // ЗавершитьРаботуВРМ()

// Завершить работу одного или нескольких Агентов
//
// Параметры:
//  Агенты - СправочникСсылка.ТЦАгенты или Массив (СправочникСсылка.ТЦАгенты)
//
Процедура ЗавершитьРаботуАгента(Знач Агенты) Экспорт
	
	Если ТипЗнч(Агенты) = Тип("СправочникСсылка.ТЦАгенты") Тогда
		СписокАгентов = Новый Массив;
		СписокАгентов.Добавить(Агенты);
	Иначе
		СписокАгентов = Агенты;
	КонецЕсли;
	
	Для каждого Агент Из СписокАгентов Цикл
		ТЦСервер.ОтправитьСообщение(Агент,, Перечисления.ТЦСообщение.ЗавершитьРаботу);
	КонецЦикла;
	
КонецПроцедуры // ЗавершитьРаботуВРМ()

// Проверить, выполняется ли тест
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест
//
// Возвращаемое значение:
//  Булево - Истина, выполняется
//
Функция ТестВыполняется(ПроверяемыйТест = Неопределено) Экспорт
	
	Если ПроверяемыйТест = Неопределено Тогда
		Тест = ТЦСервер.ТекущийТест();
	Иначе
		Тест = ПроверяемыйТест;
	КонецЕсли;
	
	Если Тест = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тест", Тест);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Менеджер
		|ИЗ
		|	Документ.ТЦТест
		|ГДЕ
		|	Ссылка = &Тест";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Попытка
			Ид = Новый УникальныйИдентификатор(Выборка.Менеджер);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
		Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Ид);
		
		Если Задание <> Неопределено Тогда
			Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ТестВыполняется()


///////////////////////////////////////////////////////////////////////////////
// ОБМЕН СООБЩЕНИЯМИ

// Отправить сообщение на указанный адрес
//
// Параметры:
//  Адрес - ЛюбаяСсылка, кому предназначается сообщение
//  От - ЛюбаяСсылка, кто отправил сообщение
//  Сообщение - ПеречислениеСсылка
//  Параметры - ХранилищеЗначения, произвольные параметры
//
Процедура ОтправитьСообщение(Адрес,
                             От = Неопределено,
                             Сообщение,
                             Параметры = Неопределено) Экспорт
	
	СообщениеОбъект = Справочники.ТЦОчередьСообщений.СоздатьЭлемент();
	СообщениеОбъект.Адрес = Адрес;
	СообщениеОбъект.Отправитель = От;
	СообщениеОбъект.Сообщение = Сообщение;
	СообщениеОбъект.Параметры = Новый ХранилищеЗначения(Параметры);
	СообщениеОбъект.Записать();
	
КонецПроцедуры // ОтправитьСообщение()

// Отправить сообщение группе адресатов
//
// Параметры:
//  Группа - ТаблицаЗначений с колонкой Ссылка
//  От - ЛюбаяСсылка, кто отправил сообщение
//  Сообщение - ПеречислениеСсылка
//  Параметры - ХранилищеЗначения, произвольные параметры
//
Процедура ОтправитьСообщенияГруппе(Группа,
                                   От = Неопределено,
                                   Сообщение,
                                   Параметры = Неопределено) Экспорт
	
	Для каждого Адрес Из Группа Цикл
		ОтправитьСообщение(Адрес, От, Сообщение, Параметры);
	КонецЦикла;
	
КонецПроцедуры // ОтправитьСообщенияГруппе()

// Получить запрос получения недоставленных сообщений
//
// Параметры:
//  Группа - Массив ссылок на адресаты, доставка которых проверяется
//
// Возвращаемое значение:
//  Запрос
//
Функция ПолучитьЗапросНеДоставленныхСообщений(Группа)
	
	ТаблицаГруппы = МассивВТаблицуЗначений(Группа, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Группа", ТаблицаГруппы);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Группа.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ
		|	Адресаты
		|ИЗ
		|	&Группа КАК Группа
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	Запрос.Выполнить();
		
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПРЕДСТАВЛЕНИЕ(АдресатыДоставки.Ссылка) КАК Представление
		|ИЗ
		|	Адресаты КАК АдресатыДоставки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТЦОчередьСообщений КАК Очередь
		|		ПО АдресатыДоставки.Ссылка = Очередь.Адрес";
		
	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросНеДоставленныхСообщений()

// Получить сообщение на свой адрес и удалить его при необходимости
//
// Параметры:
//  Адрес - ЛюбаяСсылка, кому предназначается сообщение
//  От - ЛюбаяСсылка, кто отправил сообщение
//  Удалить - Булево, Истина - удалить сообщение, после его получения
//
// Возвращаемое значение:
//  Структура:
//    Сообщение - ПеречислениеСсылка
//    Параметры - ЛюбоеЗначение
//  Неопределено - если сообщений нет
//
Функция ПолучитьСообщение(Адрес, От = Неопределено, Удалить = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Адрес", Адрес);
	ЕстьОтправитель = От <> Неопределено;
	
	Если ЕстьОтправитель Тогда
		Запрос.УстановитьПараметр("Отправитель", От);
	КонецЕсли;
	
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	" + ?(Удалить, "Ссылка,", "") + "
		|	Параметры,
		|	Сообщение,
		|	Отправитель
		|ИЗ
		|	Справочник.ТЦОчередьСообщений
		|ГДЕ
		|	Адрес = &Адрес
		|" + ?(ЕстьОтправитель, "И Отправитель = &Отправитель", "");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Удалить Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				Объект.Удалить();
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Отправитель", Выборка.Отправитель);
		Результат.Вставить("Сообщение", Выборка.Сообщение);
		Результат.Вставить("Параметры", Выборка.Параметры.Получить());
		
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСообщение()

// УдалитьВсе сообщения адресата
//
// Параметры:
//  Адрес - ЛюбаяСсылка, адресат удаляемых сообщений
//
Процедура УдалитьСообщенияАдресата(Адрес) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦОчередьСообщений
		|ГДЕ
		|	Адрес = &Адрес";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Удалить();
	КонецЦикла;
	
КонецПроцедуры // УдалитьСообщенияАдресата()

// Запаковать сообщение для локальной передачи
//
// Параметры:
//  Отправитель - Строка, уникальный идентификатор отправителя
//  Сообщение - Перечисление.ТЦСообщение
//  Параметры - Произвольный
//
// Возвращаемое значение:
//  Строка - Запакованное сообщение
//
Функция ЗапаковатьЛокальноеСообщение(Отправитель,
                                     Сообщение,
                                     Параметры = Неопределено) Экспорт
	
	Пакет = Новый Структура;
	Пакет.Вставить("Отправитель", Отправитель);
	Пакет.Вставить("Сообщение", Сообщение);
	Пакет.Вставить("Параметры", Параметры);
	Возврат ЗначениеВСтрокуВнутр(Пакет);
	
КонецФункции // ЗапаковатьЛокальноеСообщение()

// Распаковать локальное сообщение
//
// Параметры:
//  Сообщение - Строка, Запакованное сообщение
//
// Возвращаемое значение:
//  Структура:
//   Отправитель - Строка, уникальный идентификатор отправителя
//   Сообщение - Перечисление.ТЦСообщение
//   Параметры - Произвольный
//
Функция РаспаковатьЛокальноеСообщение(Сообщение) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Сообщение);
	
КонецФункции // РаспаковатьЛокальноеСообщение()

// Сериализовать значение в XML и вернуть в виде строки
//
// Параметры:
//  Значение - Произвольный, преобразуемое значение
//
// Возвращаемое значение:
//  Строка - значение, сериализованное в XML
//
Функция Сериализовать(Значение) Экспорт
	
	Возврат ЗначениеВСтрокуВнутр(Значение);
	
КонецФункции // Сериализовать()

// Восстановить значение из XML представления
//
// Параметры:
//  Значение - Строка, XML представление значения
//
// Возвращаемое значение:
//  Произвольное, десериализованное значение
//
Функция Десериализовать(Значение) Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Значение);
	
КонецФункции // Десериализовать()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОБЪЕКТАМИ

// Найти компьютер и при необходимости создать новый
//
// Параметры:
//  ИмяКомпьютера - Строка, наименование компьютера
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦКомпьютер
//
Функция НайтиКомпьютер(ИмяКомпьютера) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦКомпьютеры
		|ГДЕ
		|	Наименование = &ИмяКомпьютера";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		НовыйКомпьютер = Справочники.ТЦКомпьютеры.СоздатьЭлемент();
		НовыйКомпьютер.Наименование = ИмяКомпьютера;
		НовыйКомпьютер.Записать();
		Возврат НовыйКомпьютер.Ссылка;
	КонецЕсли;
	
КонецФункции // НайтиКомпьютер()

// Преобразовать ссылку в строку
//
// Параметры:
//  Ссылка - ЛюбаяСсылка
//
// Возвращаемое значение:
//  Строка, ссылка в виде GUID
//
Функция СсылкуВСтроку(Ссылка) Экспорт
	
	Возврат Строка(Ссылка.УникальныйИдентификатор());
	
КонецФункции // СсылкуВСтроку()

// Получить значения реквизитов объекта по ссылке, в виде структуры
//
// Параметры:
//  Ссылка - ЛюбаяСсылка
//
// Возвращаемое значение:
//  Структура - Имена полей и значения, соответствуют реквизитам объекта
//
Функция РеквизитыОбъектаПоСсылке(Ссылка) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Реквизиты = Объект.Метаданные().Реквизиты;
	Значения = Новый Структура;
	
	Для каждого Реквизит Из Реквизиты Цикл
		Имя = Реквизит.Имя;
		Значения.Вставить(Имя, Объект[Имя]);
	КонецЦикла;
	
	Возврат Значения;
	
КонецФункции // РеквизитыОбъектаПоСсылке()

// Получить параметры клиента из ссылки на элемент справочника ТЦКлиенты
//
// Параметры:
//  Клиент - СправочникСсылка.ТЦКлиенты
//
// Возвращаемое значение:
//  Структура
//   Компьютер - Строка
//   СтрокаЗапуска - Строка
//
Функция ПараметрыКлиента(Клиент) Экспорт
	
	Параметры = РеквизитыОбъектаПоСсылке(Клиент);
	Параметры.Компьютер = Параметры.Компьютер.Наименование;
	
	Возврат Параметры;
	
КонецФункции // ПараметрыКлиента()

// Получить параметры Роли по ссылке
//
// Параметры:
//  Роль - СправочникСсылка.ТЦРоли
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыРоли(Роль) Экспорт
	
	Параметры = РеквизитыОбъектаПоСсылке(Роль);
	
	Возврат Параметры;
	
КонецФункции // ПараметрыРоли()

// Получить параметры ВРМ
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//
// Возвращаемое значение:
//  Структура
//   Клиент - СправочникСсылка.ТЦКлиенты
//   Пользователь - СправочникСсылка.ТЦПользователи
//
Функция ПараметрыВРМ(ВРМ) Экспорт
	
	Возврат РеквизитыОбъектаПоСсылке(ВРМ);
	
КонецФункции // ПараметрыВРМ()

// Дополнить строку запуска параметрами аутентификации
//
// Параметры:
//  Клиент - СправочникСсылка.ТЦКлиенты
//  Пользователь - СправочникСсылка.ТЦПользователи
//  Ид - Строка, уникальный идентификатор нового ВРМ
//  Номер - Число, номер ВРМ
//
// Возвращаемое значение:
//  Строка
//
Функция ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		СтрокаЗапуска = Клиент.СтрокаЗапуска;
		ПараметрыЗапуска
			= "TCVW;"
			+ Клиент.УникальныйИдентификатор() + ";"
			+ Пользователь.УникальныйИдентификатор() + ";"
			+ Ид;
		
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Клиент.ТипКлиента, СтрокаЗапуска, "C", ПараметрыЗапуска);
			
		Если Пользователь.ТипАутентификации = Перечисления.ТЦТипАутентификации.Аутентификация1С Тогда
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
				Клиент.ТипКлиента, СтрокаЗапуска, "WA-");
			
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
				Клиент.ТипКлиента, СтрокаЗапуска, "N", Пользователь.Имя);
				
			Если ЗначениеЗаполнено(Пользователь.Пароль) Тогда
				СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
					Клиент.ТипКлиента, СтрокаЗапуска, "P", Пользователь.Пароль);
			КонецЕсли;
		КонецЕсли;
		
		ЭтоВеб = Клиент.ТипКлиента = Перечисления.ТЦТипКлиента.Веб Или
			Клиент.ТипКлиента = Перечисления.ТЦТипКлиента.ТонкийВеб;
		
		Если Не ЭтоВеб Тогда
			Соединение = СтрокаСоединенияИнформационнойБазы();
			ПараметрыСоединения = ТЦОбщий.ПолучитьПараметрыПодключения(Соединение);
			Адрес = ТЦОбщий.УдалитьКавычки(ПараметрыСоединения.Srvr) + "\" + ТЦОбщий.УдалитьКавычки(ПараметрыСоединения.Ref);
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(Клиент.ТипКлиента, СтрокаЗапуска, "S", Адрес);
		КонецЕсли;
		
		Если ЭтоLinux Тогда
			Возврат ТЦОбщий.ЭкранироватьСтрокуLinux(СтрокаЗапуска);
		Иначе
			Возврат СтрокаЗапуска;
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции // ПолнаяСтрокаЗапуска()

// Сохранить значения реквизитов обработки в хранилище значения
//
// Параметры:
//  Обработка - ОбработкаОбъект, исходная обработка
//
// Возвращаемое значение:
//  ХранилищеЗначения - результат экспорта данных
//
Функция СохранитьРеквизитыОбработки(Обработка) Экспорт
	
	Значения = Новый Соответствие;
	МетаданныеОбработки = Обработка.Метаданные();
	Реквизиты = МетаданныеОбработки.Реквизиты;
	ТабличныеЧасти = МетаданныеОбработки.ТабличныеЧасти;
	
	Для каждого Реквизит Из Реквизиты Цикл
		Имя = Реквизит.Имя;
		Значения[Имя] = Обработка[Имя];
	КонецЦикла;
	
	ТЦТабличныеЧасти = Новый Соответствие;
	Значения["ТЦТабличныеЧасти"] = ТЦТабличныеЧасти;
	
	Для каждого ТЧ Из ТабличныеЧасти Цикл
		Имя = ТЧ.Имя;
		ТЦТабличныеЧасти[Имя] = Обработка[Имя].Выгрузить();
	КонецЦикла;
	
	Возврат Новый ХранилищеЗначения(Значения, Новый СжатиеДанных(9));
	
КонецФункции // СохранитьРеквизитыОбработки()

// Загрузить значения реквизитов обработки из ранее сохраненного, при помощи
// СохранитьРеквизитыОбработки(), ХранилищаЗначения
//
// Параметры:
//  Обработка - ОбработкаОбъект, обработка в которую загружаются данные
//  АрхивЗначений - ХранилищеЗначения, данные для загрузки
//
Процедура ЗагрузитьРеквизитыОбработки(Обработка, АрхивЗначений) Экспорт
	
	Значения = АрхивЗначений.Получить();
	
	Если Значения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбработки = Обработка.Метаданные();
	Реквизиты = МетаданныеОбработки.Реквизиты;
	ТабличныеЧасти = МетаданныеОбработки.ТабличныеЧасти;
	
	Для каждого Реквизит Из Реквизиты Цикл
		Имя = Реквизит.Имя;
		Обработка[Имя] = Значения[Имя];
	КонецЦикла;
	
	ТЦТабличныеЧасти = Значения["ТЦТабличныеЧасти"];
	
	Для каждого ТЧ Из ТабличныеЧасти Цикл
		Имя = ТЧ.Имя;
		Обработка[Имя].Загрузить(ТЦТабличныеЧасти[Имя]);
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьРеквизитыОбработки()

// Получить описание ВРМ
//
// Возвращаемое значение:
//  Соостветствие
//    Ключ - ВРМ
//    Значение - Структура
//      Роль - Строка, имя роли
//      Компьютер - Строка, имя компьютера
//      Пользователь - Строка, имя пользователя
//
Функция ОписаниеВРМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка КАК ВРМ,
		|	Роль КАК Роль,
		|	Роль.Наименование КАК ИмяРоли,
		|	Клиент.Компьютер.Наименование КАК Компьютер,
		|	Пользователь.Наименование КАК Пользователь
		|ИЗ
		|	Справочник.ТЦВП";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Описание = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Значения = Новый Структура;
		Значения.Вставить("Роль", Выборка.Роль);
		Значения.Вставить("ИмяРоли", Выборка.ИмяРоли);
		Значения.Вставить("Компьютер", Выборка.Компьютер);
		Значения.Вставить("Пользователь", Выборка.Пользователь);
		Описание.Вставить(Выборка.ВРМ, Значения);
	КонецЦикла;
	
	Возврат Описание;
	
КонецФункции // ОписаниеВРМ()

// Подключить обработку
//
// Параметры:
//  Путь - путь к внешней обработке
//
Функция ПодключитьОбработку(Путь) Экспорт
	
	Возврат ВнешниеОбработки.Подключить(Путь);
	
КонецФункции // ПодключитьОбработку()

// Определить, содержит ли хранилище значения - данные
//
// Параметры:
//  Хранилище - ХранилищеЗначения
//
// Возвращаемое значение:
//  Булево - Истина, заполнено
//
Функция ХранилищеЗаполнено(Хранилище) Экспорт
	
	Возврат Хранилище.Получить() <> Неопределено;
	
КонецФункции // ХранилищеЗаполнено()

// Получить список тестовых обработок, доступных в дереве метаданных
//
// Возвращаемое значение:
//  Массив - строки, указывающие на имена тестовых обработок
//
Функция СписокТестовыхОбработок() Экспорт
	
	ТестовыеОбработки = Новый Массив;
	
	Для каждого Обработка Из Метаданные.Обработки Цикл
		ОсновнаяФорма = Обработка.ОсновнаяФорма;
		
		Если ОсновнаяФорма <> Неопределено Тогда
			Если ОсновнаяФорма.Имя = "ТЦФорма" Тогда
				Описание = Новый Структура;
				Описание.Вставить("Имя", Обработка.Имя);
				Описание.Вставить("Синоним", Обработка.Синоним);
				ТестовыеОбработки.Добавить(Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестовыеОбработки;
	
КонецФункции // СписокТестовыхОбработок()

// Проверка заполнения реквизита формы
//
// Параметры:
//  УсловиеОтказа - Булево
//  ИмяРеквизита - Строка
//  ТекстСообщения - Строка
//
// Возвращаемое значение:
//  Булево - Истина, отказ
//
Функция РеквизитЗаполнен(УсловиеОтказа, ИмяРеквизита, ТекстСообщения) Экспорт
	
	Если УсловиеОтказа Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = ИмяРеквизита;
		Сообщение.Сообщить();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // РеквизитЗаполнен()

// Получить кеш перечислений
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьПеречисления() Экспорт
	
	Перем Ссылка;
	ВсеПеречисления = Новый Структура;
	
	Для каждого Перечисление Из Метаданные.Перечисления Цикл
		Значения = Новый Структура;
		ВсеПеречисления.Вставить(Перечисление.Имя, Значения);
		
		Для каждого Значение Из Перечисление.ЗначенияПеречисления Цикл
			Выполнить "Ссылка = Перечисления." + Перечисление.Имя + "." + Значение.Имя;
			Значения.Вставить(Значение.Имя, Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВсеПеречисления;
	
КонецФункции // ПолучитьПеречисления()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С АГЕНТОМ

// Проверить, запущен ли агент на указанном компьютере
//
// Параметры:
//  ИмяКомпьютера - Строка, наименование проверяемого компьютера
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦАгенты - ссылка на запущенный агент,
//  Неопределено - если агент не запущен
//
Функция АгентЗапущен(ИмяКомпьютера, НомерСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяКомпьютера", ИмяКомпьютера);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК АктивныйАгент
		|ИЗ
		|	Справочник.ТЦАгенты КАК Агент
		|ГДЕ
		|	Компьютер.Наименование = &ИмяКомпьютера И
		|	НомерСессии = &НомерСессии";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.АктивныйАгент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // АгентЗапущен()

// Проверить, запущены ли Агенты
//
// Параметры:
//  Агенты - Массив (СправочникСсылка.ТЦАгенты), проверяемые агенты
//
// Возвращаемое значение:
//  Массив (СправочникСсылка.ТЦАгенты) - Агенты, которые еще запущены
//
Функция КлиентыЗапущены(Знач Клиенты) Экспорт
	
	Запущенные = Новый Массив;
	
	Если Клиенты.Количество() = 0 Тогда
		Возврат Запущенные;
	КонецЕсли;
	
	ИмяТипа = Клиенты[0].Метаданные().Имя;
	
	ТаблицаКлиентов = МассивВТаблицуЗначений(Клиенты, "Ссылка");
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаКлиенты", ТаблицаКлиентов);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Клиенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ
		|	ТаблицаКлиентов
		|ИЗ
		|	&ТаблицаКлиенты КАК Клиенты
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка;
		|
		|ВЫБРАТЬ
		|	Запущенные.Ссылка КАК ССылка
		|ИЗ
		|	ТаблицаКлиентов КАК Запущенные ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ИмяТипа + " КАК ВсеКлиенты ПО
		|		Запущенные.Ссылка = ВсеКлиенты.Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запущенные.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Запущенные;
	
КонецФункции // КлиентыЗапущены()

// Удалить записи клиентов
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//
Процедура УдалитьКлиентов(Клиенты) Экспорт
	
	НачатьТранзакцию();
	Для каждого Клиент Из Клиенты Цикл
		КлиентОбъект = Клиент.ПолучитьОбъект();
		
		Если КлиентОбъект <> Неопределено Тогда
			КлиентОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // УдалитьКлиентов()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРМ

// Получить список запущенных ВРМ
//
// Возвращаемое значение:
//  Массив - адреса запущенных ВРМ
//
Функция ЗапущенныеВРМ(ИмяКомпьютера, НомерСессии) Экспорт
	
	Компьютер = НайтиКомпьютер(ИмяКомпьютера);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Компьютер);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Клиент.Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии И
		|	Состояние <> ЗНАЧЕНИЕ(Перечисление.ТЦСостояние.Выгрузка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ЗапущенныеВРМ()

// Получить список активных ВРМ
//
// Возвращаемое значение:
//  Массив - адреса запущенных ВРМ
//
Функция ПодготавливающиесяВРМ(ИмяКомпьютера, НомерСессии) Экспорт
	
	Компьютер = НайтиКомпьютер(ИмяКомпьютера);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Компьютер);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Клиент.Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии И
		|	Состояние = ЗНАЧЕНИЕ(Перечисление.ТЦСостояние.Подготовка)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПодготавливающиесяВРМ()

// Деактивировать все ВРМ
//
Процедура ДеактивироватьВРМ(Компьютер = Неопределено, НомерСессии = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если Компьютер <> Неопределено Тогда
		КомпьютерСсылка = НайтиКомпьютер(Компьютер);
		Запрос.УстановитьПараметр("Компьютер", КомпьютерСсылка);
	КонецЕсли;
	
	Если НомерСессии <> Неопределено Тогда
		Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	КонецЕсли;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка КАК ВРМ
		|ИЗ
		|	Справочник.ТЦВП" + ?(Компьютер = Неопределено, "", "
		|ГДЕ
		|	Клиент.Компьютер = &Компьютер") + ?(НомерСессии = Неопределено, "", " И
		|	НомерСессии = &НомерСессии");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ВРМОбъект = Выборка.ВРМ.ПолучитьОбъект();
		ЗафиксироватьТранзакцию();
		ВРМОбъект.Состояние = Перечисления.ТЦСостояние.ПустаяСсылка();
		ВРМОбъект.Роль = Справочники.ТЦРоли.ПустаяСсылка();
		ВРМОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры // ДеактивироватьВРМ()

// Активировать ВРМ
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//
Процедура АктивироватьВРМ(ВРМ) Экспорт
	
	НачатьТранзакцию();
	ВРМОбъект = ВРМ.ПолучитьОбъект();
	ЗафиксироватьТранзакцию();
	ВРМОбъект.Роль = Справочники.ТЦРоли.ПустаяСсылка();
	ВРМОбъект.Состояние = Перечисления.ТЦСостояние.Неактивен;
	ВРМОбъект.Записать();
	
КонецПроцедуры // АктивироватьВРМ()

// Пометить ВРМ, как выгружаемое
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//
Функция ВыгрузитьВРМ(ВРМ) Экспорт
	
	НачатьТранзакцию();
	ВРМОбъект = ВРМ.ПолучитьОбъект();
	ЗафиксироватьТранзакцию();
	
	Если ВРМОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВРМОбъект.Роль = Справочники.ТЦРоли.ПустаяСсылка();
	ВРМОбъект.Состояние = Перечисления.ТЦСостояние.Выгрузка;
	ВРМОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции // ВыгрузитьВРМ()

// Загрузить сценарии для ВРМ
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии
//  Компьютер - Строка
//
Процедура ЗагрузитьВРМ(Компьютер, НомерСессии) Экспорт
	
	КомпьютерСсылка = НайтиКомпьютер(Компьютер);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", КомпьютерСсылка);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Клиент,
		|	Клон,
		|	НомерСессии,
		|	Пользователь,
		|	Номер,
		|	Роль
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска
		|ГДЕ
		|	Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии
		|УПОРЯДОЧИТЬ ПО
		|	Компьютер,
		|	Роль,
		|	Клиент,
		|	Пользователь,
		|	Клон.Имя";
	Выборка = Запрос.Выполнить().Выбрать();
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка КАК ВРМ
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Клиент = &Клиент И
		|	Пользователь = &Пользователь И
		|	Клон = &Клон И
		|	НомерСессии = &НомерСессии";
	
	Пока Выборка.Следующий() Цикл
		Запрос.УстановитьПараметр("Клиент", Выборка.Клиент);
		Запрос.УстановитьПараметр("Пользователь", Выборка.Пользователь);
		Запрос.УстановитьПараметр("Клон", Выборка.Клон);
		Запрос.УстановитьПараметр("НомерСессии", Выборка.НомерСессии);
		ВыборкаВРМ = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаВРМ.Следующий() Тогда
			НачатьТранзакцию();
			ОбъектВРМ = ВыборкаВРМ.ВРМ.ПолучитьОбъект();
			ЗафиксироватьТранзакцию();
			ОбъектВРМ.Роль = Выборка.Роль;
			ОбъектВРМ.Состояние = Перечисления.ТЦСостояние.Подготовка;
			ОбъектВРМ.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВРМ()

// Посадить виртуального пользователя на виртуальное рабочее место
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВРМ
//
Процедура ПодключитьВПкВРМ(ВРМ) Экспорт
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВРМ", ВРМ);
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	ВРМ = ЗНАЧЕНИЕ(Справочник.ТЦВРМ.ПустаяСсылка) И
		|	(ГруппаВП.Компьютер, ГруппаВП.Пользователь) В
		|	(
		|		ВЫБРАТЬ
		|			Компьютер,
		|			Пользователь
		|		ИЗ
		|			Справочник.ТЦВРМ
		|		ГДЕ
		|			Ссылка = &ВРМ
		|	)
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Справочник.ТЦВП";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ВП = Выборка.Ссылка.ПолучитьОбъект();
		ВП.ВРМ = ВРМ;
		ВП.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПодключитьВПкВРМ()

// Получить ВРМ, которые не отвечают на запросы
//
// Параметры:
//  ИмяКомпьютера - Строка
//  ОтветившиеВРМ - Массив ссылок на не отвечающие ВРМ
//
Функция НерабочиеВРМ(ИмяКомпьютера, НомерСессии, ОтветившиеВРМ) Экспорт
	
	Компьютер = НайтиКомпьютер(ИмяКомпьютера);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Компьютер);
	Запрос.УстановитьПараметр("ОтветившиеВРМ", ОтветившиеВРМ);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Клиент.Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии И
		|	НЕ Ссылка В (&ОтветившиеВРМ)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // НерабочиеВРМ()

// Получить первые N незапущенных ВРМ
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором будут запускаться ВРМ
//  НомерСессии - Число, номер сессии в которой будут запускаться ВРМ
//  Количество - Число, количество запускаемых ВРМ
// Возвращаемое значение:
//  Массив - ВРМ, которые необходимо запустить
//
Функция НеЗапущенныеВРМ(ИмяКомпьютера, НомерСессии, Количество) Экспорт
	
	Компьютер = НайтиКомпьютер(ИмяКомпьютера);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Компьютер", Компьютер);
	Запрос.УстановитьПараметр("НомерСессии", НомерСессии);
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ " + Формат(Количество, "ЧГ=0") + "
		|	Клиент,
		|	Пользователь,
		|	Клон,
		|	Номер,
		|	Ссылка КАК Запуск
		|ИЗ
		|	Справочник.ТЦСценарийЗапуска
		|ГДЕ
		|	Компьютер = &Компьютер И
		|	НомерСессии = &НомерСессии И
		|	Запущен = Ложь";
	
	Возврат ТаблицуЗначенийВМассивСтруктур(Запрос.Выполнить().Выгрузить());
	
КонецФункции // НеЗапущенныеВРМ()

// Отметить, что запуск ВРМ выполнен успешно
//
// Параметры:
//  Запуск - СправочникСсылка.ТЦСценарийЗапуска
//
Процедура ОтметитьЗапускВыполнен(Запуск) Экспорт
	
	НачатьТранзакцию();
	ЗапускОбъект = Запуск.ПолучитьОбъект();
	ЗапускОбъект.Запущен = Истина;
	ЗапускОбъект.Записать();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОтметитьЗапускВыполнен()

// Удалить запись о ВП
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//
Процедура УдалитьВРМ(ВРМ) Экспорт
	
	НачатьТранзакцию();
	Объект = ВРМ.ПолучитьОбъект();
	
	Если Объект <> Неопределено Тогда
		Объект.Удалить();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // УдалитьВРМ()

// Изменить имя ВРМ
//
// Праметры:
//  ИмяВРМ - Строка
//  Номер - Номер ВРМ
//
Процедура ИзменитьИмяВРМ(ИмяВРМ, Номер, СсылкаВРМ) Экспорт
	
	НачатьТранзакцию();
	ЭтотОбъект = СсылкаВРМ.ПолучитьОбъект();
	ЭтотОбъект.Наименование = ИмяВРМ;
	ЭтотОбъект.Номер = Номер;
	ЭтотОбъект.Записать();
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ИзменитьИмяВРМ()

// Создать объект ВРМ
//
// Параметры:
//  
//
Процедура СоздатьВРМ(Наименование, Клиент, НомерСессии, Пользователь, Клон, Ссылка) Экспорт
	
	ЭтотОбъект = Справочники.ТЦВП.СоздатьЭлемент();
	ЭтотОбъект.УстановитьСсылкуНового(Ссылка);
	ЭтотОбъект.Наименование = Наименование;
	ЭтотОбъект.Клиент = Клиент;
	ЭтотОбъект.НомерСессии = НомерСессии;
	ЭтотОбъект.Пользователь = Пользователь;
	ЭтотОбъект.Клон = Клон;
	ЭтотОбъект.Записать();
	
КонецПроцедуры // СоздатьВРМ()

// Получить параметры загрузки ВРМ
//
// Параметры:
//  
//
// Возвращаемое значение:
//  
//
Функция ПолучитьПараметрыЗагрузкиВРМ(ВРМ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВРМ", ВРМ);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Роль КАК Роль,
		|	Роль.Обработка КАК Обработка,
		|	Роль.Параметры КАК ПараметрыОбработки,
		|	Роль.Наименование КАК ИмяРоли,
		|	Клиент.Компьютер.Наименование КАК ИмяКомпьютера,
		|	НомерСессии КАК НомерСессии,
		|	Пользователь.Наименование КАК ИмяПользователя
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Ссылка = &ВРМ";
	Выборка = Запрос.Выполнить().Выбрать();
	Параметры = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		Параметры.Вставить("Обработка", Выборка.Обработка);
		Параметры.Вставить("ПараметрыОбработки", Выборка.ПараметрыОбработки);
		Параметры.Вставить("Роль", Выборка.Роль);
		Параметры.Вставить("ИмяРоли", Выборка.ИмяРоли);
		Параметры.Вставить("ИмяКомпьютера", Выборка.ИмяКомпьютера);
		Параметры.Вставить("ИмяПользователя", Выборка.ИмяПользователя);
		Параметры.Вставить("НомерСессии", Выборка.НомерСессии);
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции // ПолучитьПараметрыЗагрузкиВРМ()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЛЬЗОВАТЕЛЯМИ

// Получить параметры пользователя из ссылки на справочник ТЦПользователи
//
// Параметры:
//  Пользователь - СправочникСсылка.ТЦПользователи
//
// Возвращаемое значение:
//  Структура
//   Имя - Строка
//   Домен - Строка
//   Пароль - Строка
//   ТипАутентификации - ПеречислениеСсылка.ТЦТипАутентификации
//
Функция ПараметрыПользователя(Пользователь) Экспорт
	
	Параметры = Новый Структура;
	НачатьТранзакцию();
	
	Попытка
		Если Пользователь.ТипАутентификации = Перечисления.ТЦТипАутентификации.АутентификацияОС Тогда
			ПользовательОС = ПользователиИнформационнойБазы.НайтиПоИмени(Пользователь.Имя).ПользовательОС;
			ИмяПользователя = ТЦОбщий.РазделитьСтроку(ПользовательОС, "\");
			
			Если ИмяПользователя.Количество() > 1 Тогда
				Параметры.Вставить("Имя", ИмяПользователя[1]);
				Параметры.Вставить("Домен", ИмяПользователя[0]);
			Иначе
				Параметры.Вставить("Имя", Пользователь.Имя);
			КонецЕсли;
		Иначе
			Параметры.Вставить("Имя", Пользователь.Имя);
		КонецЕсли;
		
		Параметры.Вставить("Пароль", Пользователь.Пароль);
		Параметры.Вставить("ТипАутентификации", Пользователь.ТипАутентификации);
		ЗафиксироватьТранзакцию();
		Возврат Параметры;
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции // ПараметрыПользователя()

// Проверить наличие клонированных пользователей в соответствии со сценарием
// Если пользователей недостаточно, добавить их.
// Если пользователи есть, то проверить, соответствуют ли они оригиналу.
// Если не соответствуют, то привести их в соответствие.
//
// Параметры:
//  Сценарий - СправочикСсылка.ТЦСценарии
//
Процедура НастроитьПользователей(Сценарий) Экспорт
	
	Перем КлонИБ;
	Перем ПользовательИБ;
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Пользователь КАК Пользователь,
		|	Пользователи.Имя КАК Имя,
		|	МАКСИМУМ(Пользователи.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		Клиент.Компьютер КАК Компьютер,
		|		Пользователь,
		|		Пользователь.Имя КАК Имя,
		|		СУММА(Количество) КАК Количество
		|	ИЗ
		|		Справочник.ТЦСценарии.Структура
		|	ГДЕ
		|		Ссылка = &Сценарий
		|	СГРУППИРОВАТЬ ПО
		|		Клиент.Компьютер,
		|		Пользователь,
		|		Пользователь.Имя) КАК Пользователи
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Пользователь,
		|	Пользователи.Имя";
		Выборка = Запрос.Выполнить().Выбрать();
		
		БСПИспользуется = БСППодсистемаИспользуется("Пользователи"); // подсистема пользователи является обязательной
		ПользователиИБКлоны = Новый Массив;
		Пока Выборка.Следующий() Цикл
			Попытка
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Выборка.Имя);
			Исключение
				ПользовательИБ = Неопределено;
			КонецПопытки;
			
			Если ПользовательИБ = Неопределено Тогда
				ВызватьИсключение
					"Пользователь информационной базы (" + Выборка.Имя + ") не найден. " +
					"Создайте заново этого пользователя или выберите другого пользователя в настройках сценария.";
			КонецЕсли;
			
			Если Выборка.Количество < 2 Тогда
				Продолжить;
			ИначеЕсли ПользовательИБ.АутентификацияОС Тогда
				ВызватьИсключение
					"Пользователь информационной базы (" + Выборка.Имя + ") с аутентификацией ОС не может быть использован для запуска нескольких ВРМ. " +
					"Установите этому пользователю аутентификацию 1С:Предприятия или используйте для запуска нескольких ВРМ разных пользователей с аутентификацией ОС.";
			КонецЕсли;
			
			ПользователиИБКлоны.Очистить();
			Для Сч = 1 По Выборка.Количество Цикл
				ИмяКлона = ТЦОбщий.ИмяКлона(Выборка.Имя, Сч);
				
				Попытка
					КлонИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяКлона);
				Исключение
					КлонИБ = Неопределено;
				КонецПопытки;
				
				Если КлонИБ = Неопределено Тогда
					КлонИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
				КонецЕсли;
				
				СинхронизироватьПользователей(КлонИБ, ПользовательИБ, ИмяКлона);
				КлонСсылка = ПользовательИБПоИмени(ИмяКлона);
				ЭтоНовый = Ложь;
				
				Если Не ЗначениеЗаполнено(КлонСсылка) Тогда
					Клон = Справочники.ТЦПользователи.СоздатьЭлемент();
					ЭтоНовый = Истина;
				Иначе
					Клон = КлонСсылка.ПолучитьОбъект();
				КонецЕсли;
				
				Оригинал = Выборка.Пользователь.ПолучитьОбъект();
				СинхронизироватьПользователейИБ(Клон, Оригинал, ИмяКлона, ЭтоНовый);
				
				ПользователиИБКлоны.Добавить(КлонИБ);
			КонецЦикла;
			Если БСПИспользуется Тогда
				БСПДобавитьНеобходимыеПрава(ПользователиИБКлоны, Выборка.Имя);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры // НастроитьПользователей()

// Привести одного пользователя в соответствии с другому
//
// Параметры:
//  Пользователь - ПользовательИнформационнойБазы
//  Оригинал - ПользовательИнформационнойБазы
//  НовоеИмя - Строка, новое имя пользователя
//
Процедура СинхронизироватьПользователей(Пользователь, Оригинал, НовоеИмя)
	
	Изменен = Ложь;
	
	Если Пользователь.АутентификацияОС <> Оригинал.АутентификацияОС Тогда
		Пользователь.АутентификацияОС = Оригинал.АутентификацияОС;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.АутентификацияСтандартная <> Оригинал.АутентификацияСтандартная Тогда
		Пользователь.АутентификацияСтандартная = Оригинал.АутентификацияСтандартная;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ЗапрещеноИзменятьПароль <> Оригинал.ЗапрещеноИзменятьПароль Тогда
		Пользователь.ЗапрещеноИзменятьПароль = Оригинал.ЗапрещеноИзменятьПароль;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.Имя <> НовоеИмя Тогда
		Пользователь.Имя = НовоеИмя;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ОсновнойИнтерфейс <> Оригинал.ОсновнойИнтерфейс Тогда
		Пользователь.ОсновнойИнтерфейс = Оригинал.ОсновнойИнтерфейс;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ПоказыватьВСпискеВыбора <> Ложь Тогда
		Пользователь.ПоказыватьВСпискеВыбора = Ложь;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ПолноеИмя <> НовоеИмя Тогда
		Пользователь.ПолноеИмя = НовоеИмя;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ПользовательОС <> Оригинал.ПользовательОС Тогда
		Пользователь.ПользовательОС = Оригинал.ПользовательОС;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.РежимЗапуска <> Оригинал.РежимЗапуска Тогда
		Пользователь.РежимЗапуска = Оригинал.РежимЗапуска;
		Изменен = Истина;
	КонецЕсли;
	
	Для каждого Роль Из Оригинал.Роли Цикл
		Если Не Пользователь.Роли.Содержит(Роль) Тогда
			Пользователь.Роли.Добавить(Роль);
			Изменен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Удаляемые = Новый Массив;
	
	Для каждого Роль Из Пользователь.Роли Цикл
		Если Не Оригинал.Роли.Содержит(Роль) Тогда
			Удаляемые.Добавить(Роль);
			Изменен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Роль Из Удаляемые Цикл
		Пользователь.Роли.Удалить(Роль);
	КонецЦикла;
	
	Если Пользователь.СохраняемоеЗначениеПароля <> Оригинал.СохраняемоеЗначениеПароля Тогда
		Пользователь.СохраняемоеЗначениеПароля = Оригинал.СохраняемоеЗначениеПароля;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.Язык <> Оригинал.Язык Тогда
		Пользователь.Язык = Оригинал.Язык;
		Изменен = Истина;
	КонецЕсли;
	
	Если Изменен Тогда
		Пользователь.Записать();
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьПользователей()

// Привести одного пользователя ИБ в соответствии с другому
//
// Параметры:
//  Пользователь - СправочникОбъект.ТЦПользователи
//  Оригинал - СправочникОбъект.ТЦПользователи
//  НовоеИмя - Строка, новое имя пользователя
//  ЭтоНовый - Булево, Истина - новый пользователь
//
Процедура СинхронизироватьПользователейИБ(Пользователь, Оригинал, НовоеИмя, ЭтоНовый)
	
	Изменен = ЭтоНовый;
	
	Если Пользователь.Наименование <> НовоеИмя Тогда
		Пользователь.Наименование = НовоеИмя;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.Имя <> НовоеИмя Тогда
		Пользователь.Имя = НовоеИмя;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.Пароль <> Оригинал.Пароль Тогда
		Пользователь.Пароль = Оригинал.Пароль;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.ТипАутентификации <> Оригинал.ТипАутентификации Тогда
		Пользователь.ТипАутентификации = Оригинал.ТипАутентификации;
		Изменен = Истина;
	КонецЕсли;
	
	Если Пользователь.Описание <> Оригинал.Описание Тогда
		Пользователь.Описание = Оригинал.Описание;
		Изменен = Истина;
	КонецЕсли;
	
	Если Изменен Тогда
		Пользователь.Записать();
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьПользователейИБ()

// Найти следующего свободного пользователя
//
// Параметры:
//  Контекст - Структура
//  Клиент - СправочникСсылка.ТЦКлиенты
//  Роль - СправочникСсылка.ТЦРоли
//  Пользователь - Строка, имя пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦПользователи - свободный пользователь
//
Функция СледующийСвободныйПользователь(Контекст, Клиент, Роль, Пользователь) Экспорт
	
	Если Контекст = Неопределено Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("Номер", 1);
		Контекст.Вставить("Пользователи", Новый Соответствие);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Роль", Роль);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Пользователь
		|ИЗ
		|	Справочник.ТЦВП
		|ГДЕ
		|	Клиент = &Клиент И
		|	Роль = &Роль И
		|	Пользователь = &Клон";
	
	Пока Истина Цикл
		ИмяКлона = ТЦОбщий.ИмяКлона(Пользователь, Контекст.Номер);
		Контекст.Номер = Контекст.Номер + 1;
		
		Если Контекст.Пользователи[ИмяКлона] = Неопределено Тогда
			Клон = ПользовательИБПоИмени(ИмяКлона);
			Запрос.УстановитьПараметр("Клон", Клон);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 0 Тогда
				Контекст.Пользователи.Вставить(ИмяКлона);
				Возврат Клон;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции // СледующийСвободныйПользователь()

// Найти оригинального пользователя по его клону
//
// Параметры:
//  Клон - СправочникСсылка.ТЦПользователи
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦПользователи - оригинал
//
Функция НайтиОригиналПоКлону(Клон) Экспорт
	
	Попытка
		НачатьТранзакцию();
		ИмяОригинала = ТЦОбщий.ИмяОригинала(Клон.Имя);
		ЗафиксироватьТранзакцию();
		Возврат ПользовательИБПоИмени(ИмяОригинала);
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции // ОригинальныйПользователь()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С БСП

// Функция определяет используется ли подсистема управления доступом БСП
//
// Параметры:
//  ИмяПодсистемы - Строка, имя проверяемой подсистемы
//
// Взвращаемое значение:
//  Истина - Подсистема используется
//  Ложь - Подсистема не используется
//
Функция БСППодсистемаИспользуется(ИмяПодсистемы) Экспорт
	
	Результат = Истина;
	
	РодительскаяПодсистема = Метаданные.Подсистемы.Найти("СтандартныеПодсистемы");
	Если РодительскаяПодсистема = Неопределено Тогда
		Результат = Ложь;
	Иначе
		Если РодительскаяПодсистема.Подсистемы.Найти(ИмяПодсистемы) = Неопределено Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура доабвляет пользователям права необходимые для работы с механизмама БСП
//
// Параметры
//  ПользователиИБ - Массив, список клонированных пользователей ИБ
//  ИмяОригинала - Строка, имя оригинального пользователя
//
Процедура БСПДобавитьНеобходимыеПрава(ПользователиИБ, ИмяОригинала)
	
	Оригинал = БСПНайтиПользователияПоИмени(ИмяОригинала);
	Если Не ЗначениеЗаполнено(Оригинал) Тогда
		ВызватьИсключение
			"Пользователь """ + ИмяОригинала + """ не найден. " +
			"Создайте заново этого пользователя или выберите другого пользователя в настройках сценария.";
	КонецЕсли;
	
	СозданныеПользователи = БСПСоздатьПользователей(ПользователиИБ);
	
	Если БСППодсистемаИспользуется(ТЦОбщий.БСПИмяПодсистемыУправленияДоступом()) И ЗначениеЗаполнено(СозданныеПользователи) Тогда
		БСПСинхронизироватьГруппыДоступа(СозданныеПользователи, Оригинал);
		БСПСинхронизироватьГруппыПользователей(СозданныеПользователи, Оригинал);
	КонецЕсли;
	
КонецПроцедуры

// Функция создает элементы в справочнике "Пользователи" подсистемы БСП
// 
// Параметры:
//  ПользователиИБ - Массив, пользователи ИБ на основании которых создаются элементы справочника "Пользователи"
//
// Возвращаемое значение:
//  Массив - список созданных элементов справочника "Пользователи"
//
Функция БСПСоздатьПользователей(ПользователиИБ)
	
	СозданныеПользователи = Новый Массив;
	Для Каждого ПользовательИБ Из ПользователиИБ Цикл
		
		Пользователь = БСПНайтиПользователияПоИмени(ПользовательИБ.Имя);
		Если Не ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			Пользователь.Наименование = ПользовательИБ.Имя;
			Пользователь.ИдентификаторПользователяИБ = ПользовательИБ.УникальныйИдентификатор;
			Пользователь.Записать();
		КонецЕсли;
		
		СозданныеПользователи.Добавить(Пользователь.Ссылка);
		
	КонецЦикла;
	
	Возврат СозданныеПользователи;
	
КонецФункции

// Процедура синхронизирует группы доступа оригинального пользователя и клонов
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПСинхронизироватьГруппыДоступа(СозданныеПользователи, Оригинал)
	
	БСПДобавитьВГруппыДоступа(СозданныеПользователи, Оригинал);
	БСПУдалитьИзГруппДоступа(СозданныеПользователи, Оригинал);
	
КонецПроцедуры

// Процедура добавляет клонов в группы доступа оригинального пользователя
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПДобавитьВГруппыДоступа(СозданныеПользователи, Оригинал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Оригинал";
	Запрос.УстановитьПараметр("Оригинал", Оригинал);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаПоиска = "Пользователь";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ГруппаДоступаОбъект = Выборка.ГруппаДоступа.ПолучитьОбъект();
		ТЧ = ГруппаДоступаОбъект.Пользователи;
		ГруппаИзмененна = Ложь;
		Для Каждого Пользователь Из СозданныеПользователи Цикл
			
			РезультатПоиска = ТЧ.Найти(Пользователь, КолонкаПоиска);
			Если Не ЗначениеЗаполнено(РезультатПоиска) Тогда
				Строка = ТЧ.Добавить();
				Строка.Пользователь = Пользователь;
				ГруппаИзмененна = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ГруппаИзмененна Тогда
			ГруппаДоступаОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет клонов из групп доступа к которым не относится оригинальный пользователь
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПУдалитьИзГруппДоступа(СозданныеПользователи, Оригинал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", СозданныеПользователи[0]);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаПоиска = "Пользователь";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ГруппаДоступаОбъект = Выборка.ГруппаДоступа.ПолучитьОбъект();
		ТЧ = ГруппаДоступаОбъект.Пользователи;
		РезультатПоиска = ТЧ.Найти(Оригинал, КолонкаПоиска);
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Пользователь Из СозданныеПользователи Цикл
			
			СтрокаТЧ = ТЧ.Найти(Пользователь, КолонкаПоиска);
			Если СтрокаТЧ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТЧ.Удалить(СтрокаТЧ);
			
		КонецЦикла;
		
		ГруппаДоступаОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура синхронизирует группы пользователей оригинального пользователя с клонами
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПСинхронизироватьГруппыПользователей(СозданныеПользователи, Оригинал)
	
	БСПДобавитьВГруппыПользователей(СозданныеПользователи, Оригинал);
	БСПУдалитьИзГруппПользователей(СозданныеПользователи, Оригинал);
	
КонецПроцедуры

// Процедура добавляет клонов в группы пользователей оригинального пользователя
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПДобавитьВГруппыПользователей(СозданныеПользователи, Оригинал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Оригинал";
	Запрос.УстановитьПараметр("Оригинал", Оригинал);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаПоиска = "Пользователь";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ГруппаПользователейОбъект = Выборка.ГруппаПользователей.ПолучитьОбъект();
		ТЧ = ГруппаПользователейОбъект.Состав;
		ГруппаИзмененна = Ложь;
		Для Каждого Пользователь Из СозданныеПользователи Цикл
			
			РезультатПоиска = ТЧ.Найти(Пользователь, КолонкаПоиска);
			Если Не ЗначениеЗаполнено(РезультатПоиска) Тогда
				Строка = ТЧ.Добавить();
				Строка.Пользователь = Пользователь;
				ГруппаИзмененна = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ГруппаИзмененна Тогда
			ГруппаПользователейОбъект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет клонов из групп пользователей в которых нет оригинального пользователя
//
// Параметры:
//  СозданныеПользователи - Массив, список клонов
//  Оригинал - СправочникСсылка.Пользователи, ссылка на оригинального пользователя
//
Процедура БСПУдалитьИзГруппПользователей(СозданныеПользователи, Оригинал)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", СозданныеПользователи[0]);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаПоиска = "Пользователь";
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ГруппаПользователейОбъект = Выборка.ГруппаПользователей.ПолучитьОбъект();
		ТЧ = ГруппаПользователейОбъект.Состав;
		РезультатПоиска = ТЧ.Найти(Оригинал, КолонкаПоиска);
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Пользователь Из СозданныеПользователи Цикл
			
			СтрокаТЧ = ТЧ.Найти(Пользователь, КолонкаПоиска);
			Если СтрокаТЧ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТЧ.Удалить(СтрокаТЧ);
			
		КонецЦикла;
		
		ГруппаПользователейОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает группу доступа Тест-центр
//
Процедура БСПСоздатьГруппуДоступаТестЦентр() Экспорт
	
	ИмяГруппыДоступа = "Тест-центр";
	
	Попытка
		ГруппаДоступа = Справочники.ГруппыДоступа.НайтиПоНаименованию(ИмяГруппыДоступа, Истина);
	Исключение
		Возврат;
	КонецПопытки;
	Если ЗначениеЗаполнено(ГруппаДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	ПрофильТестЦентра = БСППолучитьПрофильТестЦентр();
	
	Если ПрофильТестЦентра = Неопределено Тогда
		ВызватьИсключение
			"Недостаточно прав на работу со справочником ""Профили групп доступа"".";
	КонецЕсли;
	
	ГруппаДоступа = Справочники.ГруппыДоступа.СоздатьЭлемент();
	ГруппаДоступа.Наименование = ИмяГруппыДоступа;
	ГруппаДоступа.Профиль = ПрофильТестЦентра;
	
	ГруппаДоступа.Записать();
	
КонецПроцедуры

// Функция создает профиль включающий в себя роль "ТестЦентр"
//
// Возвращаемое значение:
//  СправочникСсылка.ПрофилиГруппДоступа - ссылка на профиль "ТестЦентр"
//
Функция БСППолучитьПрофильТестЦентр()
	
	ИмяПрофиля = "Тест-центр";
	
	Попытка
		Профиль = Справочники.ПрофилиГруппДоступа.НайтиПоНаименованию(ИмяПрофиля, Истина);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если ЗначениеЗаполнено(Профиль) Тогда
		Возврат Профиль;
	КонецЕсли;
	
	Профиль = Справочники.ПрофилиГруппДоступа.СоздатьЭлемент();
	Профиль.Наименование = ИмяПрофиля;
	Профиль.Роли.Добавить().Роль = "ТестЦентр";
	
	Профиль.Записать();
	
	Возврат Профиль.Ссылка;
	
КонецФункции

// Функция находит пользователя по имени
//
// Возвращаемое занчение:
//  СправочникСсылка.Пользователи - ссылка на найденного пользователя
//
Функция БСПНайтиПользователияПоИмени(Имя)
	
	ПользовательИБ = БСПНайтиПользователяИБПоИмени(Имя);
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	
КонецФункции

// Функция находит пользователя ИБ по имени
//
// Возвращаемое занчение:
//  ПользовательИнформационнойБазы - ссылка на найденного пользователя
//
Функция БСПНайтиПользователяИБПоИмени(Имя)
	
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Имя);
	Исключение
		ПользовательИБ = Неопределено;
	КонецПопытки;
	
	Возврат ПользовательИБ;
	
КонецФункции

// Функция определяет доступность роли у текущего пользователия
//
// Параметры:
//  ИмяРоли - Строка, имя роли
//
// Возвращаемое значение:
//  Истина - доступна
//  Ложь - не доступна
//
Функция БСПРольДоступна(ИмяРоли) Экспорт
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции

// Процедура добавляет в профиль доступа роли
//
// Параметры:
//  СписокРолей - Массив, список добаляемых ролей
//  Профиль - СправочникСсылка.ПрофилиГруппДоступа, профиль в который добавляются роли
//
Процедура БСПДобавитьРолиВПрофиль(СписокРолей, Профиль = Неопределено)
	
	Профиль = ?(Профиль = Неопределено, БСППолучитьПрофильТестЦентр(), Профиль);
	ПрофильОбъект = Профиль.ПолучитьОбъект();
	Для Каждого Роль Из СписокРолей Цикл
		
		Врем = ПрофильОбъект.Роли.Добавить();
		Врем.Роль = Роль;
		
	КонецЦикла;
	ПрофильОбъект.Записать();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПРАВАМИ ДОСТУПА

// Функция подбирает необходимые роли для корректной работы подсистемы
//
// Параметры:
//  ИмяПодсистемы - Строка, имя подсистемы
//
// Возвращаемое значение:
//  Массив - список необходимых ролей
//
Функция ПодобратьПраваДляПодсистемы(ИмяПодсистемы) Экспорт
	
	ИтоговыйНаборРолей = Новый Массив;
	Подсистема = Метаданные.Подсистемы.Найти(ИмяПодсистемы);
	
	НеобходимыеПрава = Новый Массив;
	ИскомыеОбъекты = Новый Соответствие;
	ИскомыеОбъекты.Вставить("Справочники", "СправочникСсылка");
	ИскомыеОбъекты.Вставить("Документы", "ДокументСсылка");
	
	ТипыОбъектовТестЦентра = ПолучитьТипыОбъектовПодсистемы(Подсистема.Состав, ИскомыеОбъекты);
	
	Регистры = НайтиЗависимостиОтРегистровСведений(ТипыОбъектовТестЦентра);
	
	Если ЗначениеЗаполнено(Регистры) Тогда
		НеобходимыеПрава.Очистить();
		НеобходимыеПрава.Добавить("Чтение");
		НеобходимыеПрава.Добавить("Изменение");
		НеобходимыеРолиДляРегистров = ПодобратьРолиДляОбъектов(Регистры, НеобходимыеПрава);
	КонецЕсли;
	
	Планы = НайтиЗависимостиОтПлановОбмена(Подсистема.Состав);
	
	Если ЗначениеЗаполнено(Планы) Тогда
		НеобходимыеПрава.Очистить();
		НеобходимыеПрава.Добавить("Чтение");
		НеобходимыеРолиДляПланов = ПодобратьРолиДляОбъектов(Планы, НеобходимыеПрава);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НеобходимыеРолиДляРегистров) Тогда
		Для Каждого Роль Из НеобходимыеРолиДляРегистров Цикл
			ИтоговыйНаборРолей.Добавить(Роль.Имя);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НеобходимыеРолиДляПланов) Тогда
		Для Каждого Роль Из НеобходимыеРолиДляПланов Цикл
			Если ИтоговыйНаборРолей.Найти(Роль.Имя) = Неопределено Тогда
				ИтоговыйНаборРолей.Добавить(Роль.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИтоговыйНаборРолей;
	
КонецФункции

// Функция ищет в подсистеме указанные объекты
//
// Параметры:
//  СоставПодсистемы - КоллекцияЗначенийСвойстваОбъектаМетаданных, объекты в которых нужно искать
//  ИскомыеОбъекты - Соответствие, Ключ - вид искомого объекта (Документы, Справочники)
//                                 Значение - тип искомого объекта (ДокументСсылка, СправочникОбъект)
//
// Возвращаемое значение:
//  Массив - массив найденных типов объектов
//
Функция ПолучитьТипыОбъектовПодсистемы(СоставПодсистемы, ИскомыеОбъекты)
	
	ТипыОбъектов = Новый Массив;
	
	Для Каждого Объект Из СоставПодсистемы Цикл
		Для Каждого ВидОбъекта Из ИскомыеОбъекты Цикл
			
			ВидОбъектаЕЧ = ПолучитьВидОбъекта(Объект.ПолноеИмя());
			Если ВидОбъектаЕЧ = Лев(ВидОбъекта.Значение, СтрДлина(ВидОбъектаЕЧ)) И Метаданные[ВидОбъекта.Ключ].Найти(Объект.Имя)<> Неопределено Тогда
				ТипыОбъектов.Добавить(Тип(ВидОбъекта.Значение + "." + Объект.Имя));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТипыОбъектов;
	
КонецФункции

// Функция получает вид объекта из его полного наименования
//
// Параметры:
//  ПолноеИмя - Строка, полное имя объекта
//
// Возвращаемое значение:
//  Строка - вид объекта
//
Функция ПолучитьВидОбъекта(ПолноеИмя)
	
	ПозицияТочнки = Найти(ПолноеИмя, ".");
	ВидОбъекта = Лев(ПолноеИмя, ПозицияТочнки - 1);
	
	Возврат ВидОбъекта;
	
КонецФункции

// Функция находит регистры, которые могут влиять на указанные типы
//
// Параметры:
//  ТипыОбъектов - Массив, массив типов, которые необходимо проверять
//
// Возвращаемое значение:
//  Массив - список найденных регистров
//
Функция НайтиЗависимостиОтРегистровСведений(ТипыОбъектов)
	
	Регистры = Новый Массив;
	
	Для Каждого Регистр Из Метаданные.РегистрыСведений Цикл
		Для Каждого Измерение Из Регистр.Измерения Цикл
			
			Если Измерение.Ведущее Тогда
				ТипыИзмерения = Измерение.Тип.Типы();
				Для Каждого ТипОбъекта Из ТипыОбъектов Цикл
					
					Если ТипыИзмерения.Найти(ТипОбъекта) <> Неопределено Тогда
						Если Регистры.Найти(Регистр) = Неопределено Тогда
							Регистры.Добавить(Регистр);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Регистры;
	
КонецФункции

// Функция ищет планы обмена в которых участвуют объекты подсистемы
//
// Параметры:
//  СоставПодсистемы - КоллекцияЗначенийСвойстваОбъектаМетаданных, объекты которые нужно проверять
//
// Возвращаемое значение:
//  Массив - список планов обмена в составе которых есть объекты
//
Функция НайтиЗависимостиОтПлановОбмена(СоставПодсистемы)
	
	Планы = Новый Массив;
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		Для Каждого ОбъектПодсистемы Из СоставПодсистемы Цикл
			
			Если ПланОбмена.Состав.Содержит(ОбъектПодсистемы) Тогда
				Если Планы.Найти(ПланОбмена) = Неопределено Тогда
					Планы.Добавить(ПланОбмена);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Планы;
	
КонецФункции

// Функция подбирает набор ролей необходимых для работы с регистрами
//
// Параметры:
//  Объекты - Массив, список объектов
//  НеобходимыеПрава - Массив, список прав которые должны быть доступны
//
// Возвращаемое значение:
//  Массив - список необходимых ролей
//
Функция ПодобратьРолиДляОбъектов(Объекты, НеобходимыеПрава)
	
	ПодобранныеРоли = Новый Массив;
	ДопустимыеРоли = Новый Массив;
	
	Для Каждого Объект Из Объекты Цикл
		
		ДопустимыеРоли.Очистить();
		Для Каждого Роль Из Метаданные.Роли Цикл
			
			РольДопустима = Истина;
			Для Каждого Право Из НеобходимыеПрава Цикл
				Если Не ПравоДоступа(Право, Объект, Роль) Тогда
					РольДопустима = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если РольДопустима Тогда
				ДопустимыеРоли.Добавить(Роль);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДопустимыеРоли) Тогда
			ВызватьИсключение
					"Нет ни одной роли у которой есть необходимые права на объект: " + Объект;
		КонецЕсли;
		Если ДопустимыеРоли.Количество() > 1 Тогда
			ПодобраннаяРоль = ВыбратьПодходящуюРоль(ДопустимыеРоли, Объект);
		Иначе
			ПодобраннаяРоль = ДопустимыеРоли[0];
		КонецЕсли;
		
		Если ПодобранныеРоли.Найти(ПодобраннаяРоль) = Неопределено Тогда
			ПодобранныеРоли.Добавить(ПодобраннаяРоль);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодобранныеРоли;
	
КонецФункции

// Функция выбирает наиболее подходящую роль из списка ролей
//
// Параметры:
//  ДопустимыеРоли - Массив, список ролей из которых выбирать
//
// Возвращаемое значение:
//  ОбъектМетаданных: Роль - выбранная роль
//
Функция ВыбратьПодходящуюРоль(ДопустимыеРоли, ОбъектМетаданных)
	
	ВыбраннаяРоль = Неопределено;
	Для Каждого Роль Из ДопустимыеРоли Цикл
		
		ВесВыбраннойРоли = ВзвеситьРоль(ВыбраннаяРоль, ОбъектМетаданных);
		ВесТекущейРоли = ВзвеситьРоль(Роль, ОбъектМетаданных);
		Если ВесТекущейРоли < ВесВыбраннойРоли Тогда
			ВыбраннаяРоль = Роль;
		ИначеЕсли ВесТекущейРоли = ВесВыбраннойРоли И ВыбраннаяРоль.Имя = "ПолныеПрава" Тогда
			ВыбраннаяРоль = Роль;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбраннаяРоль;
	
КонецФункции

// Функция взвешивает роль относительно того какие у нее права
//
// Параметры:
//  Роль - ОбъектМетаданных: Роль, роль вес которой надо узнать
//
// Возвращаемое значение:
//  Число - вес роли
//
Функция ВзвеситьРоль(Роль, ОбъектМетаданных)
	
	Если Роль = Неопределено Тогда
		Возврат 999999;
	КонецЕсли;
	
	ВесРоли = 0;
	Если ПравоДоступа("Чтение", ОбъектМетаданных, Роль) Тогда
		ВесРоли = ВесРоли + 1;
	КонецЕсли;
	Если ПравоДоступа("Изменение", ОбъектМетаданных, Роль) Тогда
		ВесРоли = ВесРоли + 2;
	КонецЕсли;
	Если ПравоДоступа("Просмотр", ОбъектМетаданных, Роль) Тогда
		ВесРоли = ВесРоли + 3;
	КонецЕсли;
	Если ПравоДоступа("Редактирование", ОбъектМетаданных, Роль) Тогда
		ВесРоли = ВесРоли + 4;
	КонецЕсли;
	
	Возврат ВесРоли;
	
КонецФункции

// Функция проверяет есть ли необходимые права у оригинальных пользователей
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии, сценарий выполнения
//  НеобходимыеРоли - Массив, список обязательных ролей
//
// Возвращаемое значение:
//  Истина - прав не хватает
//  Ложь - все права есть
//
Функция ПроверитьПраваОригинальныхПользователей(Сценарий, НеобходимыеРоли) Экспорт
	
	ДобавляемыеРоли = Новый Массив;
	Для Каждого Роль Из НеобходимыеРоли Цикл
		РольОбъект = Метаданные.Роли.Найти(Роль);
		Для Каждого СтрокаСценария Из Сценарий.Структура Цикл
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтрокаСценария.Пользователь.Имя);
			Если Не ПользовательИБ.Роли.Содержит(РольОбъект) Тогда
				ДобавляемыеРоли.Добавить(РольОбъект.Имя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДобавляемыеРоли;
	
КонецФункции

// Процедура устанавливает необходимые права оригинальным пользователям
//
// Параметры:
//  Сценарий - СправочникСсылка.ТЦСценарии, сценарий выполнения
//  НеобходимыеРоли - Массив, список обязательных ролей
//
Процедура УстановитьПраваОргинальныхПользователей(Сценарий, НеобходимыеРоли) Экспорт
	
	УправлениеДоступомБСПИспользуется = БСППодсистемаИспользуется(ТЦОбщий.БСПИмяПодсистемыУправленияДоступом());
	СписокРолей = Новый Массив;
	
	Для Каждого Роль Из НеобходимыеРоли Цикл
		РольОбъект = Метаданные.Роли.Найти(Роль);
		Для Каждого СтрокаСценария Из Сценарий.Структура Цикл
			
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СтрокаСценария.Пользователь.Имя);
			Если Не ПользовательИБ.Роли.Содержит(РольОбъект) Тогда
				Если УправлениеДоступомБСПИспользуется Тогда
					СписокРолей.Добавить(Роль);
					Прервать;
				Иначе
					ПользовательИБ.Роли.Добавить(РольОбъект);
					ПользовательИБ.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если УправлениеДоступомБСПИспользуется Тогда
		БСПДобавитьРолиВПрофиль(СписокРолей);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНАЯ ФУНКЦИОНАЛЬНОСТЬ

// Получить порядковый номер состояния выполнения теста
//
// Параметры:
//  Состояние - ПеречислениеСсылка.ТЦСостояние
//
// Возвращаемое значение:
//  Число - порядковый номер состояния
//
Функция НомерСостояния(Состояние) Экспорт
	
	Если Состояние = Перечисления.ТЦСостояние.Подготовка Тогда
		Возврат 1;
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Инициализация Тогда
		Возврат 2;
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Выполнение Тогда
		Возврат 3;
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.ЗаписьРезультатов Тогда
		Возврат 4;
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.УдалениеДанных Тогда
		Возврат 5;
	ИначеЕсли Состояние = Перечисления.ТЦСостояние.Неактивен Тогда
		Возврат 6;
	КонецЕсли;
	
КонецФункции // НомерСостояния()

// Преобразовать массив в таблицу значений
//
// Параметры:
//  Значения - Массив
//  ИмяКолонки - Строка, имя колонки таблиы значений для массива
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция МассивВТаблицуЗначений(Значения, ИмяКолонки) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Типы = Новый Массив;
	Типы.Добавить(ТипЗнч(Значения[0]));
	ТипСсылки = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить(ИмяКолонки, ТипСсылки);
	
	Для каждого Значение Из Значения Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы[ИмяКолонки] = Значение;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // МассивВТаблицуЗначений()

// Преобразовать соответствие в таблицу значений
//
// Параметры:
//  Значения - Массив
//  ИмяКолонки - Строка, имя колонки таблиы значений для массива
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция СоответствиеВТаблицуЗначений(Значения, ИмяКолонки) Экспорт
	
	ТипЗначения = ТипЗнч(Неопределено);
	
	Для каждого Значение Из Значения Цикл
		ТипЗначения = ТипЗнч(Значение.Ключ);
		Прервать;
	КонецЦикла;
	
	Таблица = Новый ТаблицаЗначений;
	Типы = Новый Массив;
	Типы.Добавить(ТипЗначения);
	ТипСсылки = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить(ИмяКолонки, ТипСсылки);
	
	Для каждого Значение Из Значения Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы[ИмяКолонки] = Значение.Ключ;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // СоответствиеВТаблицуЗначений()

// Преобразовать соответствие в массив
//
// Параметры:
//  Значения - Массив
//  ИмяКолонки - Строка, имя колонки таблиы значений для массива
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция СоответствиеВМассив(Значения) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого Значение Из Значения Цикл
		Результат.Добавить(Значение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СоответствиеВМассив()

// Преобразовать ТаблицуЗначений в Массив Структур
//
// Параметры:
//  Таблица - ТаблицаЗначений, преобразуемая таблица
//
// Возвращаемое значение:
//  Массив - состоящий из структур с полями соответствующими колонкам таблицы
//
Функция ТаблицуЗначенийВМассивСтруктур(Таблица) Экспорт
	
	Результат = Новый Массив;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Элемент = Новый Структура;
		
		Для каждого Колонка Из Таблица.Колонки Цикл
			Элемент.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ТаблицуЗначенийВМассивСтруктур()

// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка - полное имя пользователя
//
Функция ИмяТекущегоПользователя() Экспорт
	
	Имя = ПолноеИмяПользователя();
	
	Если ПустаяСтрока(Имя) Тогда
		Имя = ИмяПользователя();
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции // ИмяТекущегоПользователя()

// Получить имя пользователя
//
// Праметры:
//  Пользователь - СправочникСсылка.ТЦПользователи
//
// Возвращаемое значение:
//  Строка - имя пользователя
//
Функция ИмяПользователяИБ(Пользователь) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Возврат Пользователь.Имя;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
КонецФункции // ИмяПользователяИБ()

// Получить пользователя  по имени
//
// Параметры:
//  ИмяКлона - Строка, имя клона
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦПользователи
//
Функция ПользовательИБПоИмени(ИмяКлона) Экспорт
	
	Возврат Справочники.ТЦПользователи.НайтиПоРеквизиту("Имя", ИмяКлона);
	
КонецФункции // ПользовательИБПоИмени()

// Получить ссылку по уникальному идентификатору
//
// Параметры:
//  Ид - Строка, уникальный идентификатор
//  ТипОбъекта - Строка, тип объекта метаданных
//  ИмяОбъекта - Строка, имя объекта метаданных
//
// Возвращаемое значение:
//  Ссылка
//
Функция СсылкаПоИдентификатору(Ид, ТипОбъекта, ИмяОбъекта) Экспорт
	
	Перем Ссылка;
	
	Идентификатор = Новый УникальныйИдентификатор(Ид);
	Выполнить "Ссылка = " + ТипОбъекта + "." + ИмяОбъекта + ".ПолучитьСсылку(Идентификатор);";
	Возврат Ссылка;
	
КонецФункции // СсылкаПоИдентификатору()

// Получить имя объекта, как оно записано в метаданных
//
// Параметры:
//  Объект - Произвольный
//
// Возвращаемое значение:
//  Строка - имя объекта, как оно записано в метаданных
//
Функция ИмяПеречисления(Перечисление) Экспорт
	
	Представление = Строка(Перечисление);
	МетаданныеПеречисления = Перечисление.Метаданные();
	Имена = МетаданныеПеречисления.ЗначенияПеречисления;
	
	Для Каждого ВозможноеИмя Из Имена Цикл
		Если ВозможноеИмя.Синоним = Представление Тогда
			Имя = ВозможноеИмя.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции // ИмяПеречисления()

// Строка соединения с информационной базой на сервере
//
// Возвращаемое значение:
//  Строка - строка соединения
//
Функция СтрокаСоединенияИнформационнойБазыНаСервере() Экспорт
	
	Возврат СтрокаСоединенияИнформационнойБазы();
	
КонецФункции // СтрокаСоединенияИнформационнойБазыНаСервере()

// Записать в журнал сообщение
//
// Параметры:
//  ТекстОшибки - Строка, описание ошибки
//  Событие - Строка, наименование события
//  Важность - ПеречислениеСсылка.ТЦСтатусСообщения
//  ЭтоОшибка - Булево, признак того, что сообщение содержит описание ошибки
//
Процедура ЗаписатьВЖурнал(ТекстОшибки, Событие, Важность, ЭтоОшибка) Экспорт
	
	Имя = ?(Событие = Неопределено, "Тест-центр", Событие);
	
	Если Важность = Неопределено Тогда
		Если ЭтоОшибка Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		Иначе
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	Иначе
		Если Важность = Перечисления.ТЦСтатусСообщения.Ошибка Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли Важность = Перечисления.ТЦСтатусСообщения.Предупреждение Тогда
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли Важность = Перечисления.ТЦСтатусСообщения.Информация Тогда
			Уровень = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(Имя, Уровень,, "Тест-центр", ТекстОшибки);
	
КонецПроцедуры // ЗаписатьВЖурнал()

// Сформировать отчет по протоколу журнала регистрации
//
// Параметры:
//  Начало - Дата, время начала событий
//  Окончание - Дата, время окончания событий
//  Док - ТабличныйДокумент, документ, в который будет выведен отчет
//
Процедура СформироватьОтчетПоПротоколу(Начало, Окончание, Док) Экспорт
	
	Журнал = Новый ТаблицаЗначений;
	Фильтр = Новый Структура;
	Фильтр.Вставить("ДатаНачала", Начало);
	Фильтр.Вставить("ДатаОкончания", Окончание);
	Фильтр.Вставить("Данные", "Тест-центр");
	Колонки = "Уровень, Дата, ИмяПользователя, Компьютер, Событие, Комментарий";
	ВыгрузитьЖурналРегистрации(Журнал, Фильтр, Колонки);
	ОписаниеЖурнала = Новый Структура;
	ОписаниеЖурнала.Вставить("Журнал", Журнал);
	
	Схема = ПолучитьОбщийМакет("ТЦПротокол");
	СформироватьОтчет(Схема, Док,, ОписаниеЖурнала);
	
КонецПроцедуры // СформироватьОтчетПоПротоколу()

// Сформировать указанный отчет
//
// Параметры:
//  
//
Процедура СформироватьОтчет(Схема, Док, Параметры = Неопределено, Данные = Неопределено) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
				Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, КомпоновщикНастроек.ПолучитьНастройки());
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если Данные = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Данные);
	КонецЕсли;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Док);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Док.ПоказатьУровеньГруппировокСтрок(0);
	
КонецПроцедуры // СформироватьОтчет()

// Получить версию конфигурации
//
// Параметры:
//  
//
// Возвращаемое значение:
//  
//
Функция ВерсияКонфигурации() Экспорт
	
	Возврат Метаданные.Версия;
	
КонецФункции // ВерсияКонфигурации()

// Узнать, является ли клиент веб-клиентом
//
// Параметры:
//  
//
// Возвращаемое значение:
//  
//
Функция ЭтоВебКлиент(Клиент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТипКлиента = ЗНАЧЕНИЕ(Перечисление.ТЦТипКлиента.Веб) ТОГДА
		|			Истина
		|		ИНАЧЕ
		|			Ложь
		|	КОНЕЦ КАК ЭтоВеб
		|ИЗ
		|	Справочник.ТЦКлиенты
		|ГДЕ
		|	Ссылка = &Клиент";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭтоВеб;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоВебКлиент()
