#Область Печать

// Заполняет список команд печати. Подключаемая команда.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЭлектронныйАктВыполненныхРабот";
	КомандаПечати.Представление = НСтр("ru = 'Электронный акт выполненных работ'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБККлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ПроверкаПроведенияПередПечатью = НЕ ПользователиБКВызовСервераПовтИсп.РазрешитьПечатьНепроведенныхДокументов();
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы. Печать документа АВР.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура ПечатьАВР(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭлектронныйАктВыполненныхРабот") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЭлектронныйАктВыполненныхРабот",
			НСтр("ru = 'Электронный акт выполненных работ'"),
			Документы.ЭлектронныйАктВыполненныхРабот.ПечатьАВР(МассивОбъектов, ОбъектыПечати),
			,
			"Обработка.ОбменЭСФ.ПФ_MXL_АВР");
		КонецЕсли;
	
КонецПроцедуры

Функция МакетПечатнойФормы(ИмяМакета) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяМакета);
	Возврат Макет;
	
КонецФункции	

#КонецОбласти 

#Область ПроцедурыИФункцииФоновыхЗаданий

Функция ВыполнитьВФоне(Знач ИмяЭкспортнойПроцедуры, Знач ПараметрыПроцедуры, Знач ПараметрыВыполнения) Экспорт
	
	// Код вынесен в переопределяемый модуль, процедуры запуска фонового задания должна передавать КлючЗадания - ПараметрыВыполнения.УникальныйИдентификатор
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыВыполнения.ИдентификаторФормы);
	НаименованиеЗадания = ПараметрыВыполнения.НаименованиеФоновогоЗадания;
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыПроцедуры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	ПараметрыЗадания.Добавить(Неопределено);
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, ПараметрыВыполнения.КлючФоновогоЗадания, НаименованиеЗадания);
	Попытка
		Задание.ОжидатьЗавершения(ПараметрыВыполнения.ОжидатьЗавершение);
	Исключение		
		// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     ДлительныеОперации.ЗаданиеВыполнено(Задание.УникальныйИдентификатор));
	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

Функция ФоновоеЗаданиеЗапущено(Знач ИмяПроцедуры) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗаданиеАктивно", Ложь);
	
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", ИмяПроцедуры, СостояниеФоновогоЗадания.Активно));
		
	Если МассивФоновыхЗаданий.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("ЗаданиеАктивно", Истина);
		СтруктураВозврата.Вставить("Расположение", МассивФоновыхЗаданий[0].Расположение);
		СтруктураВозврата.Вставить("Начало",  МассивФоновыхЗаданий[0].Начало);
	КонецЕсли;		
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

#Область ОбщиеФункцииПоЗаполнениюАктов

Функция ПодготовитьТекстЗапросаДляЗаполненияАВР(ПараметрыЗаполнения) Экспорт
	
	ДокументОснование = ПараметрыЗаполнения.ДокументОснование;
	
	//БК
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаРеализацияТоваровУслуг();
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
		ТекстЗапроса = ТекстЗапросаАктОбОказанииПроизводственныхУслуг();
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		ТекстЗапроса = ТекстЗапросаРеализацияУслугПоПереработке();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//++ УПК- прототип
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
	//	ТекстЗапроса 	= ТекстЗапросаАктВыполненныхРабот();
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	//-- УПК	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРеализацияТоваровУслуг()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = &СтруктураПустаяСсылка
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ ДокументРеализацииУслуги.Содержание ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(ДокументРеализацииУслуги.Содержание КАК СТРОКА(400))
	|		КОГДА НЕ НоменклатураУслуг.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(1000))
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК УслугаНаименование,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацииУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацииУслуги.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС) / ДокументРеализацииУслуги.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацииУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				ИЛИ НЕ &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.СтавкаНДС
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА СтавкиНДС.Ставка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезНДС,
	|	ДокументРеализацииУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО ДокументРеализацииУслуги.Номенклатура = НоменклатураУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацииУслуги.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

//++ УПК - прототип
//Функция ТекстЗапросаАктВыполненныхРабот()
//	
//	ТекстЗапроса = 
//	"ВЫБРАТЬ
//	|	Док.Организация							КАК Организация,
//	|	Док.Дата 								КАК ДатаВыполненияРабот,
//	|	Док.Номер 								КАК Номер,
//	|	Док.Контрагент							КАК Контрагент,
//	|	Док.Договор			 					КАК Договор,
//	|	Док.Договор.Номер			 			КАК НомерДоговора,
//	|	Док.Договор.Дата					 	КАК ДатаДоговора,
//	//|	ЭлектронныйДоговор.РегистрационныйНомер КАК РегистрационныйНомерДоговора,
//	|	Док.Валюта			 					КАК Валюта,
//	|	ЕСТЬNULL(Валюты.Наименование, """")		КАК КодВалюты,
//	|	КурсыВалют.Курс * КурсыВалют.Кратность 	КАК КурсВалюты,
//	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
//	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
//	|	Док.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента
//	|ИЗ
//	|	Документ.АктВыполненныхРабот КАК Док
//	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронныйДоговор КАК ЭлектронныйДоговор
//	//|		ПО Док.ДоговорКонтрагента = ЭлектронныйДоговор.Договор
//	|
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
//	|		ПО Док.Валюта = Валюты.Ссылка
//	|
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалют
//	|		ПО Док.Валюта = КурсыВалют.Валюта
//	|
//	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
//	//|		ПО Док.БанковскийСчетОрганизации = БанковскиеСчета.Ссылка
//	|
//	|ГДЕ
//	|	Док.Ссылка = &ДокументОснование
//	|
//	|;
//	|ВЫБРАТЬ
//	|	ДокументРеализацииУслуги.Номенклатура 				КАК Номенклатура,
//	|	ВЫБОР
//	|		КОГДА ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК Строка(400)) <> """"
//	|			ТОГДА НоменклатураУслуг.НаименованиеПолное
//	|		ИНАЧЕ НоменклатураУслуг.Наименование
//	|	КОНЕЦ КАК УслугаНаименование,
//	|	НоменклатураУслуг.ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
//	|	НоменклатураУслуг.ЕдиницаИзмерения.КодЭСФ 	КАК ЕдиницаИзмеренияКод,
//	|	ДокументРеализацииУслуги.Количество 				КАК Количество,
//	|	ВЫБОР
//	|		КОГДА &ЦенаВключаетНДС
//	|			ТОГДА ВЫБОР
//	|					КОГДА ДокументРеализацииУслуги.Цена = 0
//	|						ТОГДА 0
//	|					ИНАЧЕ ДокументРеализацииУслуги.Цена/(1 + ЕСТЬNULL(СтавкиНДС.Ставка,0)*0.01)
//	|				КОНЕЦ
//	|			ИНАЧЕ ДокументРеализацииУслуги.Цена 
//	|	КОНЕЦ КАК Цена,
//	|	ВЫБОР
//	|		КОГДА &ЦенаВключаетНДС
//	|			ТОГДА ДокументРеализацииУслуги.Сумма/(1 + ЕСТЬNULL(СтавкиНДС.Ставка,0)*0.01)
//	|			ИНАЧЕ ДокументРеализацииУслуги.Сумма 
//	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
//	|	ВЫБОР
//	|		КОГДА &ЦенаВключаетНДС
//	|			ТОГДА ДокументРеализацииУслуги.Сумма
//	|			ИНАЧЕ ДокументРеализацииУслуги.Сумма*(1 + ЕСТЬNULL(СтавкиНДС.Ставка,0)*0.01)
//	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
//	|	ВЫБОР
//	|		КОГДА &ЦенаВключаетНДС
//	|			ТОГДА ДокументРеализацииУслуги.Сумма/(1 + ЕСТЬNULL(СтавкиНДС.Ставка,0)*0.01)
//	|			ИНАЧЕ ДокументРеализацииУслуги.Сумма 
//	|	КОНЕЦ КАК РазмерОборота,
//	|	ДокументРеализацииУслуги.СтавкаНДС 					КАК СтавкаНДС,
//	|	СтавкиНДС.Ставка 									КАК СтавкаНДСЧисло,
//	|	ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, Ложь) 	КАК БезНДС,
//	|	ДокументРеализацииУслуги.СуммаНДС 					КАК СуммаНДС
//	|ИЗ
//	|	Документ.АктВыполненныхРабот.Услуги КАК ДокументРеализацииУслуги
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
//	|		ПО ДокументРеализацииУслуги.Номенклатура = НоменклатураУслуг.Ссылка
//	|
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
//	|		ПО ДокументРеализацииУслуги.СтавкаНДС = СтавкиНДС.Ссылка
//	|
//	|ГДЕ
//	|	ДокументРеализацииУслуги.Ссылка = &ДокументОснование";
//	
//	Возврат ТекстЗапроса;
//	
//КонецФункции
//-- УПК

Функция ТекстЗапросаАктОбОказанииПроизводственныхУслуг()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = &СтруктураПустаяСсылка
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацииУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА НоменклатураУслуг.НаименованиеПолное
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК УслугаНаименование,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацииУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацииУслуги.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС) / ДокументРеализацииУслуги.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацииУслуги.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				ИЛИ НЕ &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.Сумма - ДокументРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ ДокументРеализацииУслуги.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА ДокументРеализацииУслуги.СтавкаНДС
	|		ИНАЧЕ &СтавкаБезНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА СтавкиНДС.Ставка
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтавкаНДСЧисло,
	|	ВЫБОР
	|		КОГДА &УчитыватьНДС
	|			ТОГДА ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БезНДС,
	|	ДокументРеализацииУслуги.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг.Услуги КАК ДокументРеализацииУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО ДокументРеализацииУслуги.Номенклатура = НоменклатураУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацииУслуги.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	ДокументРеализацииУслуги.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаРеализацияУслугПоПереработке()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Док.Организация КАК Организация,
	|	Док.Дата КАК ДатаВыполненияРабот,
	|	Док.Номер КАК Номер,
	|	Док.Контрагент КАК Контрагент,
	|	Док.ДоговорКонтрагента КАК Договор,
	|	Док.ДоговорКонтрагента.НомерДоговора КАК НомерДоговора,
	|	Док.ДоговорКонтрагента.ДатаДоговора КАК ДатаДоговора,
	|	Док.ВалютаДокумента КАК Валюта,
	|	ЕСТЬNULL(Валюты.БуквенныйКод, """") КАК КодВалюты,
	|	Док.КурсВзаиморасчетов КАК КурсВалюты,
	|	ЗНАЧЕНИЕ(Перечисление.НаправленияЭСФ.Исходящий) КАК Направление,
	|	Док.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Док.СтруктурноеПодразделение КАК СтруктурноеПодразделение,
	|	ВЫБОР
	|		КОГДА Док.СтруктурноеПодразделение = &СтруктураПустаяСсылка
	|			ТОГДА Док.Организация
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Док.СтруктурноеПодразделение.УказыватьРеквизитыГоловнойОрганизации
	|					ТОГДА Док.Организация
	|				ИНАЧЕ Док.СтруктурноеПодразделение
	|			КОНЕЦ
	|	КОНЕЦ КАК Поставщик
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО Док.ВалютаДокумента = Валюты.Ссылка
	|ГДЕ
	|	Док.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументРеализацияУслугПоПереработке.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(НоменклатураУслуг.НаименованиеПолное КАК СТРОКА(400))) <> """"
	|			ТОГДА НоменклатураУслуг.НаименованиеПолное
	|		ИНАЧЕ НоменклатураУслуг.Наименование
	|	КОНЕЦ КАК УслугаНаименование,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.КодЭСФ КАК ЕдиницаИзмеренияКод,
	|	НоменклатураУслуг.БазоваяЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ДокументРеализацияУслугПоПереработке.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументРеализацияУслугПоПереработке.Цена = 0
	|						ТОГДА 0
	|					ИНАЧЕ (ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС) / ДокументРеализацияУслугПоПереработке.Количество
	|				КОНЕЦ
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Цена
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма
	|	КОНЕЦ КАК СтоимостьБезУчетаКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				ИЛИ НЕ &УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма * (1 + ЕСТЬNULL(СтавкиНДС.Ставка, 0) * 0.01)
	|	КОНЕЦ КАК СтоимостьСУчетомКосвенныхНалогов,
	|	ВЫБОР
	|		КОГДА &СуммаВключаетНДС
	|				И &УчитыватьНДС
	|			ТОГДА ДокументРеализацияУслугПоПереработке.Сумма - ДокументРеализацияУслугПоПереработке.СуммаНДС
	|		ИНАЧЕ ДокументРеализацияУслугПоПереработке.Сумма
	|	КОНЕЦ КАК РазмерОборота,
	|	ДокументРеализацияУслугПоПереработке.СтавкаНДС КАК СтавкаНДС,
	|	СтавкиНДС.Ставка КАК СтавкаНДСЧисло,
	|	ЕСТЬNULL(СтавкиНДС.ДляОсвобожденногоОборота, ЛОЖЬ) КАК БезНДС,
	|	ДокументРеализацияУслугПоПереработке.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке.Услуги КАК ДокументРеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураУслуг
	|		ПО ДокументРеализацияУслугПоПереработке.Номенклатура = НоменклатураУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтавкиНДС КАК СтавкиНДС
	|		ПО ДокументРеализацияУслугПоПереработке.СтавкаНДС = СтавкиНДС.Ссылка
	|ГДЕ
	|	ДокументРеализацияУслугПоПереработке.Ссылка = &ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьПараметрыЗаполненияДляДокументаАВР(ДокументОснованиеДляЗаполнения) Экспорт
	
	//БК3
	ТипОбъекта = ТипЗнч(ДокументОснованиеДляЗаполнения);
	
	Если ТипОбъекта = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		Если ДокументОснованиеДляЗаполнения.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ВБумажномВиде
			ИЛИ ДокументОснованиеДляЗаполнения.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеГосЗакупа Тогда
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Способ выписки документа установлен ""%1"", ввод ЭАВР невозможен!'"),
			ДокументОснованиеДляЗаполнения.СпособВыпискиАктовВыполненныхРабот);
			ВызватьИсключение ТекстСообщения;
		ИначеЕсли ДокументОснованиеДляЗаполнения.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.ПустаяСсылка() Тогда
			ТекстСообщения  = НСтр("ru = 'Способ выписки документа не установлен, ввод ЭАВР невозможен!'");
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	
	//БК3
	ПараметрыЗаполнения.Вставить("ДокументОснование",	ДокументОснованиеДляЗаполнения);
	ПараметрыЗаполнения.Вставить("СуммаВключаетНДС",	ДокументОснованиеДляЗаполнения.СуммаВключаетНДС);
	ПараметрыЗаполнения.Вставить("Организация",			ДокументОснованиеДляЗаполнения.Организация);
	ПараметрыЗаполнения.Вставить("УчитыватьНДС",		ДокументОснованиеДляЗаполнения.УчитыватьНДС);
	ПараметрыЗаполнения.Вставить("СтавкаБезНДС",		Справочники.СтавкиНДС.ПолучитьСтавкуБезНДС(Ложь));
	ПараметрыЗаполнения.Вставить("СтруктураПустаяСсылка", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());

	//++ УПК - прототип
	//ПараметрыЗаполнения.Вставить("ДокументОснование",	ДокументОснованиеДляЗаполнения);
	//ПараметрыЗаполнения.Вставить("ЦенаВключаетНДС",		ДокументОснованиеДляЗаполнения.ЦенаВключаетНДС);
	//ПараметрыЗаполнения.Вставить("Организация",			ДокументОснованиеДляЗаполнения.Организация);
	//ПараметрыЗаполнения.Вставить("Дата",				ДокументОснованиеДляЗаполнения.Дата);
	//ПараметрыЗаполнения.Вставить("Валюта",				ДокументОснованиеДляЗаполнения.Валюта);	
	//-- УПК
	 
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Процедура ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитовПолейЗапросов) Экспорт
	
	Для Каждого ЭлементСоответсвия Из СоответсвиеИменРеквизитовПолейЗапросов Цикл
		Значение = "";
		Если ЭлементСоответсвия.Ключ = "%ДокументОснованиеДата" Тогда
			Значение = "Дата" ;			
		КонецЕсли;
		
		СоответсвиеИменРеквизитовПолейЗапросов.Вставить(ЭлементСоответсвия.Ключ, Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиЕдиницИзмеренияАВР(МассивАВР) Экспорт
	
	Если МассивАВР.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокАВР = Новый Массив;
	Для Каждого Документ Из МассивАВР Цикл
		МассивСсылокАВР.Добавить(Документ.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод КАК Код,
		|	МАКСИМУМ(КлассификаторЕдиницИзмерения.Ссылка) КАК Ссылка
		|ИЗ
		|	Документ.ЭлектронныйАктВыполненныхРабот.Услуги КАК ЭлектронныйАктВыполненныхРаботУслуги
		//БК3
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
		//++ УПК - прототип
		//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК КлассификаторЕдиницИзмерения
		//-- УПК
		|		ПО ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод = КлассификаторЕдиницИзмерения.КодЭСФ
		|ГДЕ
		|	ЭлектронныйАктВыполненныхРаботУслуги.Ссылка В(&МассивАВР)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныйАктВыполненныхРаботУслуги.ЕдиницаИзмеренияКод";
		
	Запрос.УстановитьПараметр("МассивАВР", МассивСсылокАВР);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеЕдиницИзмерения.Вставить(ВыборкаДетальныеЗаписи.Код, ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Для Каждого Документ из МассивАВР Цикл
		Для Каждого Строка Из Документ.Услуги Цикл
			Строка.ЕдиницаИзмерения = СоответствиеЕдиницИзмерения[Строка.ЕдиницаИзмеренияКод];
			Строка.ЕдиницаИзмеренияНаименование = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(Строка.ЕдиницаИзмерения, "Наименование")
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКонтрагентаАВР(Знач ОбъектАВР, Знач ПоставщикиСтрока) Экспорт
		
	НачатьТранзакцию();
	
	Попытка                                                              
		
		ТекстКомментария = АВРКлиентСервер.ТекстКомментарияСозданПоДаннымАВР(ОбъектАВР.Ссылка);		
		ОбъектКонтрагент = ПоставщикиСтрока.Поставщик.ПолучитьОбъект();
		
		//Проверяем заполнение поля Наименование: если не заполнено, записать новые данные поставщика не можем.
		Если Не ЗначениеЗаполнено(ПоставщикиСтрока.ПоставщикНаименование) Тогда
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Невозможно заполнить реквизиты по данным АВР, так как не заполнено поле ""Наименование исполнителя (поставщика)"".'");
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Заполнить реквизиты контрагента.
		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектКонтрагент.ИдентификационныйКодЛичности = ПоставщикиСтрока.ПоставщикИдентификатор;
			ОбъектКонтрагент.Комментарий = ТекстКомментария;
		Иначе
			ОбъектКонтрагент.ИдентификационныйНомер = ПоставщикиСтрока.ПоставщикИдентификатор;
		КонецЕсли;
		ОбъектКонтрагент.Наименование = ПоставщикиСтрока.ПоставщикНаименование;	
		ОбъектКонтрагент.НаименованиеПолное = ПоставщикиСтрока.ПоставщикНаименование;
		Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
			ОбъектКонтрагент.СерияСвидетельстваПоНДС = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
			ОбъектКонтрагент.НомерСвидетельстваПоНДС = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
			ОбъектКонтрагент.КБЕ = ПоставщикиСтрока.КБе;
		КонецЕсли;
				
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать адрес контрагента.
		Запись = РегистрыСведений.КонтактнаяИнформация.СоздатьМенеджерЗаписи();
		Запись.Объект = ОбъектКонтрагент.Ссылка;
		Запись.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
		Запись.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		Запись.Представление = ПоставщикиСтрока.Адрес;
		Запись.Записать();	
		
		/////////////////////////////////////////////////////////////////////////////
		// Создать и записать банковский счет контрагента.
		Если ЗначениеЗаполнено(ПоставщикиСтрока.ИИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.БИК)
			И ЗначениеЗаполнено(ПоставщикиСтрока.НаименованиеБанка) Тогда
			
			/////////////////////////////////////////////////////////////////////////////
			// Найти банк по БИК, если его нет, то создать.
			СсылкаБанк = НайтиБанкПоБИК(ПоставщикиСтрока.БИК);			
			Если НЕ ЗначениеЗаполнено(СсылкаБанк) Тогда
				ОбъектБанк = Справочники.Банки.СоздатьЭлемент();
				ОбъектБанк.Наименование = ПоставщикиСтрока.НаименованиеБанка;
				ОбъектБанк.БИК = ПоставщикиСтрока.БИК;
				ОбъектБанк.Записать();
				СсылкаБанк = ОбъектБанк.Ссылка;
			КонецЕсли;
			
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого банковского счета контрагента нет.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Контрагент
			|	И БанковскиеСчета.Банк = &Банк
			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
			|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Банк", СсылкаБанк);
			Запрос.УстановитьПараметр("Валюта", ОбъектАВР.Валюта);
			Запрос.УстановитьПараметр("Контрагент", ОбъектКонтрагент.Ссылка);
			
			Результат = Запрос.Выполнить();
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать и записать банковский счет контрагента.			
			Если Результат.Пустой() Тогда
				
				ОбъектСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НаименованиеСчета = НСтр("ru = '[НомерСчета] в [Банк]'");
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[НомерСчета]", ПоставщикиСтрока.ИИК);
				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[Банк]", СсылкаБанк);
				ОбъектСчет.Наименование = НаименованиеСчета;
				Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
					ОбъектСчет.Владелец = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ОбъектКонтрагент.Ссылка, "Владелец");
				Иначе
					ОбъектСчет.Владелец = ОбъектКонтрагент.Ссылка;			
				КонецЕсли;
				ОбъектСчет.ВалютаДенежныхСредств = ОбъектАВР.Валюта;
				ОбъектСчет.ВидСчета = НСтр("ru = 'Расчетный'");
				ОбъектСчет.МесяцПрописью = Истина;
				ОбъектСчет.НомерСчета = ПоставщикиСтрока.ИИК;
				ОбъектСчет.Банк = СсылкаБанк; 
				
				ОбъектСчет.Записать();
				
				Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойБанковскийСчет) Тогда
					ОбъектКонтрагент.ОсновнойБанковскийСчет = ОбъектСчет.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// С договорами работаем, только если выбран элемент справочника Контрагенты.
		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
			/////////////////////////////////////////////////////////////////////////////
			// Проверить, что такого договора контрагента нет.
			МассивДоговоров = НайтиДоговорыПоставкиПоДаннымАВР(ОбъектАВР, ПоставщикиСтрока, "Поставщики");
			
			/////////////////////////////////////////////////////////////////////////////
			// Создать, заполнить и записать договор контрагента.
			Если МассивДоговоров.Количество() = 0 Тогда
				
				ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				ОбъектДоговор.Наименование = АВРКлиентСервер.НаименованиеДоговора(ОбъектАВР);
				ОбъектДоговор.Владелец = ОбъектКонтрагент.Ссылка;
				ОбъектДоговор.ВалютаВзаиморасчетов = ОбъектАВР.Валюта;
				ОбъектДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				ОбъектДоговор.Комментарий = ТекстКомментария;
				ОбъектДоговор.Организация = ОбъектАВР.Организация;
				ОбъектДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				ОбъектДоговор.НомерДоговора = ОбъектАВР.НомерДоговора;
				ОбъектДоговор.ДатаДоговора = ОбъектАВР.ДатаДоговора;
				
				ОбъектДоговор.Записать();
				
				Если НЕ ЗначениеЗаполнено(ОбъектКонтрагент.ОсновнойДоговорКонтрагента) Тогда
					ОбъектКонтрагент.ОсновнойДоговорКонтрагента = ОбъектДоговор.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		/////////////////////////////////////////////////////////////////////////////
		// Повторно записать контрагента и зафиксировать транзакцию.
		ОбъектКонтрагент.Записать();
		ЗафиксироватьТранзакцию();
				
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
	КонецПопытки;
		
КонецПроцедуры

//++ УПК - прототип
//Процедура ЗаполнитьРеквизитыКонтрагентаАВР(Знач ОбъектАВР, Знач ПоставщикиСтрока) Экспорт
//		
//	НачатьТранзакцию();
//	
//	Попытка                                                              
//		
//		ТекстКомментария = АВРКлиентСервер.ТекстКомментарияСозданПоДаннымАВР(ОбъектАВР.Ссылка);		
//		ОбъектКонтрагент = ПоставщикиСтрока.Поставщик.ПолучитьОбъект();
//		
//		//Проверяем заполнение поля Наименование: если не заполнено, записать новые данные поставщика не можем.
//		Если Не ЗначениеЗаполнено(ПоставщикиСтрока.ПоставщикНаименование) Тогда
//			ОтменитьТранзакцию();
//			ТекстСообщения = НСтр("ru = 'Невозможно заполнить реквизиты по данным АВР, так как не заполнено поле ""Наименование исполнителя (поставщика)"".'");
//			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
//			Возврат;
//		КонецЕсли;
//		
//		/////////////////////////////////////////////////////////////////////////////
//		// Заполнить реквизиты контрагента.
//		ОбъектКонтрагент.ИНН = ПоставщикиСтрока.ПоставщикИдентификатор;
//		ОбъектКонтрагент.Наименование = ПоставщикиСтрока.ПоставщикНаименование;	
//		ОбъектКонтрагент.НаименованиеПолное = ПоставщикиСтрока.ПоставщикНаименование;
//		Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
//			ОбъектКонтрагент.СерияСвидетельстваПоНДС = ПоставщикиСтрока.СерияСвидетельстваПоНДС;
//			ОбъектКонтрагент.НомерСвидетельстваПоНДС = ПоставщикиСтрока.НомерСвидетельстваПоНДС;
//		КонецЕсли;	
//		ОбъектКонтрагент.КБЕ = ПоставщикиСтрока.КБе;
//				
//		/////////////////////////////////////////////////////////////////////////////
//		// Создать и записать адрес контрагента.
//		СтрокаКонтактнаяИнформация = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
//		//Запись.Объект = ОбъектКонтрагент.Ссылка;
//		СтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
//		СтрокаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
//		СтрокаКонтактнаяИнформация.Представление = ПоставщикиСтрока.Адрес;
//		
//		/////////////////////////////////////////////////////////////////////////////
//		// Создать и записать банковский счет контрагента.
//		Если ЗначениеЗаполнено(ПоставщикиСтрока.ИИК)
//			И ЗначениеЗаполнено(ПоставщикиСтрока.БИК)
//			И ЗначениеЗаполнено(ПоставщикиСтрока.НаименованиеБанка) Тогда
//			
//			/////////////////////////////////////////////////////////////////////////////
//			// Найти банк по БИК, если его нет, то создать.
//			СсылкаБанк = НайтиБанкПоБИК(ПоставщикиСтрока.БИК);			
//			Если НЕ ЗначениеЗаполнено(СсылкаБанк) Тогда
//				ОбъектБанк = Справочники.КлассификаторБанков.СоздатьЭлемент();
//				ОбъектБанк.Наименование = ПоставщикиСтрока.НаименованиеБанка;
//				ОбъектБанк.Код = ПоставщикиСтрока.БИК;
//				ОбъектБанк.Записать();
//				СсылкаБанк = ОбъектБанк.Ссылка;
//			КонецЕсли;
//			
//			/////////////////////////////////////////////////////////////////////////////
//			// Проверить, что такого банковского счета контрагента нет.
//			Запрос = Новый Запрос;
//			Запрос.Текст = 
//			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//			|	БанковскиеСчета.Ссылка КАК Ссылка
//			|ИЗ
//			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
//			|ГДЕ
//			|	БанковскиеСчета.Владелец = &Контрагент
//			|	И БанковскиеСчета.Банк = &Банк
//			|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
//			|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ";
//			
//			Запрос.УстановитьПараметр("Банк", СсылкаБанк);
//			Запрос.УстановитьПараметр("Валюта", ОбъектАВР.Валюта);
//			Запрос.УстановитьПараметр("Контрагент", ОбъектКонтрагент.Ссылка);
//			
//			Результат = Запрос.Выполнить();
//			
//			/////////////////////////////////////////////////////////////////////////////
//			// Создать и записать банковский счет контрагента.			
//			Если Результат.Пустой() Тогда
//				
//				Если Не ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда 
//					ОбъектСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
//					ОбъектСчет.ТипСчета = Перечисления.ТипыБанковскихСчетов.Расчетный;
//				Иначе
//					ОбъектСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
//				КонецЕсли;
//				
//				НаименованиеСчета = НСтр("ru = '[НомерСчета] в [Банк]'");
//				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[НомерСчета]", ПоставщикиСтрока.ИИК);
//				НаименованиеСчета = СтрЗаменить(НаименованиеСчета, "[Банк]", СсылкаБанк);
//				ОбъектСчет.Наименование = НаименованиеСчета;
//				ОбъектСчет.Владелец = ОбъектКонтрагент.Ссылка;			
//				ОбъектСчет.ВалютаДенежныхСредств = ОбъектАВР.Валюта;
//				ОбъектСчет.НомерСчета = ПоставщикиСтрока.ИИК;
//				ОбъектСчет.Банк = СсылкаБанк; 
//				ОбъектСчет.БИКБанка = ПоставщикиСтрока.БИК; 
//				
//				ОбъектСчет.Записать();
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		// С договорами работаем, только если выбран элемент справочника Контрагенты.
//		Если ТипЗнч(ПоставщикиСтрока.Поставщик) = Тип("СправочникСсылка.Контрагенты") Тогда
//			/////////////////////////////////////////////////////////////////////////////
//			// Проверить, что такого договора контрагента нет.
//			МассивДоговоров = НайтиДоговорыПоставкиПоДаннымАВР(ОбъектАВР, ПоставщикиСтрока, "Поставщики");
//			
//			/////////////////////////////////////////////////////////////////////////////
//			// Создать, заполнить и записать договор контрагента.
//			Если МассивДоговоров.Количество() = 0 Тогда
//				
//				ОбъектДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
//				
//				ОбъектДоговор.Наименование = АВРКлиентСервер.НаименованиеДоговора(ОбъектАВР);
//				ОбъектДоговор.Контрагент = ОбъектКонтрагент.Ссылка;
//				ОбъектДоговор.ВалютаВзаиморасчетов = ОбъектАВР.Валюта;
//				ОбъектДоговор.Комментарий = ТекстКомментария;
//				ОбъектДоговор.Организация = ОбъектАВР.Организация;
//				ОбъектДоговор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком;
//				ОбъектДоговор.Номер = ОбъектАВР.НомерДоговора;
//				ОбъектДоговор.Дата = ОбъектАВР.ДатаДоговора;
//				
//				ОбъектДоговор.Записать();
//				
//			КонецЕсли;
//		КонецЕсли;
//		/////////////////////////////////////////////////////////////////////////////
//		// Повторно записать контрагента и зафиксировать транзакцию.
//		ОбъектКонтрагент.Записать();
//		ЗафиксироватьТранзакцию();
//				
//	Исключение
//		
//		ОтменитьТранзакцию();
//		
//		ИнформацияОбОшибке = ИнформацияОбОшибке();
//		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
//		
//	КонецПопытки;
//		
//КонецПроцедуры
//-- УПК

Функция ПроверитьРегистрациюДоговора(ДанныеЗаполнения) Экспорт
	
	ДоговорЗарегистрирован = Истина;
	
	//БК3
	Если ДанныеЗаполнения.Договор.ДатаДоговора = Дата('00010101') ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Договор.НомерДоговора) Тогда
		ДоговорЗарегистрирован = Ложь;
	КонецЕсли;
	
	//++ УПК- прототип
	//Если ДанныеЗаполнения.Договор.Дата = Дата('00010101') ИЛИ НЕ ЗначениеЗаполнено(ДанныеЗаполнения.Договор.Номер) Тогда
	//	ДоговорЗарегистрирован = Ложь;
	//КонецЕсли;	
	//-- УПК	
	
	Возврат ДоговорЗарегистрирован;
	
КонецФункции

Функция Нерезидент(ПоставщикПолучатель) Экспорт
	
	//БК3
	СтранаРезидентства = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ПоставщикПолучатель,"СтранаРезидентства");
	Если СтранаРезидентства = Справочники.КлассификаторСтранМира.ПустаяСсылка()
		ИЛИ СтранаРезидентства = Справочники.КлассификаторСтранМира.Казахстан Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	//++ УПК - прототип
	//СтранаРезидентства = ЭСФСерверПереопределяемый.ЗначениеРеквизитаОбъекта(ПоставщикПолучатель,"СтранаРегистрации");
	//Если СтранаРезидентства = Справочники.СтраныМира.ПустаяСсылка()
	//	ИЛИ СтранаРезидентства = Справочники.СтраныМира.Казахстан Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;  
	//-- УПК
	
КонецФункции

Функция ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");	
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА Организации.ИндивидуальныйПредприниматель
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК ОбъектДляПоискаАдреса,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Организации.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Организации.ИдентификационныйНомер КАК ИдентификационныйНомер,
	|	Организации.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	Организации.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.КБЕ КАК КБЕ,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ИндивидуальныйПредприниматель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО Организации.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФЛ
	|		ПО Организации.ИндивидуальныйПредприниматель = ФЛ.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ПодразделенияОрганизаций.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(ПодразделенияОрганизаций.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ ПодразделенияОрганизаций.Наименование
	|	КОНЕЦ,
	|	ПодразделенияОрганизаций.ИдентификационныйНомер,
	|	"""",
	|	"""",
	|	ПодразделенияОрганизаций.Ссылка,
	|	"""",
	|	""""
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ПодразделенияОрганизаций.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса КАК Объект,
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.ИдентификационныйНомер КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.Ссылка КАК Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ КАК КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса = КонтактнаяИнформация.Объект
	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица)))";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
	КонецЕсли;
	
	Если РеквизитыДокументаОснования <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РеквизитыДокументаОснования.БанковскийСчетОрганизации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Ссылка КАК Счет,
		|	Банки.Наименование КАК НаименованиеБанка,
		|	БанковскиеСчета.НомерСчета КАК ИИК,
		|	Банки.БИК КАК БИК
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
		|		ПО БанковскиеСчета.Банк = Банки.Ссылка
		|ГДЕ
		|	БанковскиеСчета.Ссылка = &БанковскийСчетОрганизации
		|";
		
		РезультатЗапроса		= Запрос.Выполнить();
		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить(ПоставщикПолучатель, "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
	СтруктураДанных.Вставить("Адрес", "");
	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
	СтруктураДанных.Вставить("КБе", "");
	СтруктураДанных.Вставить("БанковскийСчет", "");
	СтруктураДанных.Вставить("ИИК", "");
	СтруктураДанных.Вставить("НаименованиеБанка", "");
	СтруктураДанных.Вставить("БИК", "");
	СтруктураДанных.Вставить("ТипРегистрации", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))) <> """"
	|			ТОГДА ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(200))
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК Наименование,
	|	Контрагенты.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	Контрагенты.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	БанковскиеСчета.Ссылка КАК Счет,
	|	Банки.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчета.НомерСчета КАК ИИК,
	|	Банки.БИК КАК БИК,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИдентификационныйКодЛичности КАК ИдентификационныйКодЛичности,
	|	Контрагенты.КБЕ КАК КБЕ,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ЮридическоеЛицо)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|						И НЕ Контрагенты.ИндивидуальныйПредпринимательАдвокатЧастныйНотариус
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ФизическоеЛицо)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРегистрацииНПАВР.ПустаяСсылка) 
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипРегистрации
	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО (БанковскиеСчета.Банк = Банки.Ссылка)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС КАК НомерСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС КАК СерияСвидетельстваПоНДС,
	|	ОбъектыДляПоискаАдресов.Счет КАК Счет,
	|	ОбъектыДляПоискаАдресов.НаименованиеБанка КАК НаименованиеБанка,
	|	ОбъектыДляПоискаАдресов.ИИК КАК ИИК,
	|	ОбъектыДляПоискаАдресов.БИК КАК БИК,
	|	ОбъектыДляПоискаАдресов.ИдентификационныйКодЛичности КАК Идентификатор,
	|	ОбъектыДляПоискаАдресов.Ссылка КАК Ссылка,
	|	ОбъектыДляПоискаАдресов.КБЕ КАК КБЕ,
	|	ОбъектыДляПоискаАдресов.ТипРегистрации КАК ТипРегистрации,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И ОбъектыДляПоискаАдресов.Контрагент = КонтактнаяИнформация.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	РезультатЗапроса		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
		СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
		СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
		СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
		СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);
		СтруктураДанных.Вставить("ТипРегистрации", ВыборкаДетальныеЗаписи.ТипРегистрации);
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	         
КонецФункции

//++ УПК
//Функция ПолучитьРеквизитыОрганизации(Организация, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
//	
//	СтруктураДанных = Новый Структура;
//	СтруктураДанных.Вставить(ПоставщикПолучатель, "");	
//	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
//	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
//	СтруктураДанных.Вставить("Адрес", "");
//	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
//	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
//	СтруктураДанных.Вставить("КБе", "");
//	СтруктураДанных.Вставить("БанковскийСчет", "");
//	СтруктураДанных.Вставить("ИИК", "");
//	СтруктураДанных.Вставить("НаименованиеБанка", "");
//	СтруктураДанных.Вставить("БИК", "");

//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Организация", Организация);
//		
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Организации.Ссылка КАК ОбъектДляПоискаАдреса,
//	|	ВЫБОР
//	|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))) <> """"
//	|			ТОГДА ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(200))
//	|		ИНАЧЕ Организации.Наименование
//	|	КОНЕЦ КАК Наименование,
//	|	Организации.ИНН,
//	|	Организации.НомерСвидетельстваПоНДС,
//	|	Организации.СерияСвидетельстваПоНДС,
//	|	Организации.Ссылка,
//	|	Организации.КБЕ
//	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|ГДЕ
//	|	Организации.Ссылка = &Организация
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ 
//	|	ПодразделенияОрганизаций.Ссылка КАК ОбъектДляПоискаАдреса,
//	|	ПодразделенияОрганизаций.Наименование КАК Наименование,
//	|	ПодразделенияОрганизаций.ГоловнаяОрганизация.ИНН,
//	|	"""",
//	|	"""",
//	|	ПодразделенияОрганизаций.Ссылка,
//	|	""""
//	|ИЗ
//	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
//	|ГДЕ
//	|	ПодразделенияОрганизаций.Ссылка = &Организация
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса КАК Объект,
//	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
//	|	ОбъектыДляПоискаАдресов.ИНН КАК Идентификатор,
//	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
//	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС,
//	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС,
//	|	ОбъектыДляПоискаАдресов.Ссылка,
//	|	ОбъектыДляПоискаАдресов.КБЕ
//	|ИЗ
//	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК КонтактнаяИнформация
//	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
//	|			И ОбъектыДляПоискаАдресов.ОбъектДляПоискаАдреса = КонтактнаяИнформация.Ссылка
//	|			И (КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)))
//	|			И (КонтактнаяИнформация.ВидДляСписка В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)))
//	|";
//	
//	РезультатЗапроса		= Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
//		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
//		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
//		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
//		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
//		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
//		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
//		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
//	КонецЕсли;
//	
//	Если РеквизитыДокументаОснования <> Неопределено Тогда
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", РеквизитыДокументаОснования.БанковскийСчетОрганизации);
//		
//		Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет,
//		|	БанковскиеСчетаОрганизаций.НаименованиеБанка КАК НаименованиеБанка,
//		|	БанковскиеСчетаОрганизаций.НомерСчета КАК ИИК,
//		|	БанковскиеСчетаОрганизаций.БИКБанка КАК БИК
//		|ИЗ
//		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
//		|ГДЕ
//		|	БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетОрганизации
//		|";
//		
//		РезультатЗапроса		= Запрос.Выполнить();
//		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
//		
//		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
//			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
//			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
//			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
//			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
//		КонецЕсли;
//	КонецЕсли;
//	Возврат СтруктураДанных;
//	
//КонецФункции

//Функция ПолучитьРеквизитыКонтрагента(Контрагент, ПоставщикПолучатель, РеквизитыДокументаОснования = Неопределено)  Экспорт
//	
//	СтруктураДанных = Новый Структура;
//	СтруктураДанных.Вставить(ПоставщикПолучатель, "");
//	СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", "");
//	СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", "");
//	СтруктураДанных.Вставить("Адрес", "");
//	СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", "");
//	СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", "");
//	СтруктураДанных.Вставить("КБе", "");
//	СтруктураДанных.Вставить("БанковскийСчет", "");
//	СтруктураДанных.Вставить("ИИК", "");
//	СтруктураДанных.Вставить("НаименованиеБанка", "");
//	СтруктураДанных.Вставить("БИК", "");
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Контрагенты.Ссылка КАК Наименование,
//	|	"""" КАК НомерСвидетельстваПоНДС,
//	|	"""" КАК СерияСвидетельстваПоНДС,
//	|	Контрагенты.Ссылка,
//	|	Контрагенты.ИНН,
//	|	Контрагенты.КБЕ
//	|ПОМЕСТИТЬ ОбъектыДляПоискаАдресов
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.Ссылка = &Контрагент
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	|	ВЫРАЗИТЬ(КонтактнаяИнформация.Представление КАК СТРОКА(400)) КАК Адрес,
//	|	ОбъектыДляПоискаАдресов.Наименование КАК Наименование,
//	|	ОбъектыДляПоискаАдресов.НомерСвидетельстваПоНДС,
//	|	ОбъектыДляПоискаАдресов.СерияСвидетельстваПоНДС,
//	|	ОбъектыДляПоискаАдресов.ИНН КАК Идентификатор,
//	|	ОбъектыДляПоискаАдресов.Ссылка,
//	|	ОбъектыДляПоискаАдресов.КБЕ
//	|ИЗ
//	|	ОбъектыДляПоискаАдресов КАК ОбъектыДляПоискаАдресов
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
//	|		ПО (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
//	|			И ОбъектыДляПоискаАдресов.Наименование = КонтактнаяИнформация.Ссылка
//	|";
//	
//	РезультатЗапроса		= Запрос.Выполнить();
//	ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
//	
//	Если ВыборкаДетальныеЗаписи.Следующий()Тогда
//		СтруктураДанных.Вставить(ПоставщикПолучатель, ВыборкаДетальныеЗаписи.Ссылка);
//		СтруктураДанных.Вставить(ПоставщикПолучатель+"Наименование", ВыборкаДетальныеЗаписи.Наименование);
//		СтруктураДанных.Вставить(ПоставщикПолучатель+"Идентификатор", ВыборкаДетальныеЗаписи.Идентификатор);
//		СтруктураДанных.Вставить("Адрес", ВыборкаДетальныеЗаписи.Адрес);
//		СтруктураДанных.Вставить("НомерСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.НомерСвидетельстваПоНДС);
//		СтруктураДанных.Вставить("СерияСвидетельстваПоНДС", ВыборкаДетальныеЗаписи.СерияСвидетельстваПоНДС);
//		СтруктураДанных.Вставить("КБе", ВыборкаДетальныеЗаписи.КБЕ);
//	КонецЕсли;
//	
//	Если РеквизитыДокументаОснования <> Неопределено Тогда
//		Запрос = Новый Запрос;
//		Запрос.УстановитьПараметр("БанковскийСчетКонтрагента", РеквизитыДокументаОснования.БанковскийСчетКонтрагента);
//		
//		Запрос.Текст = 
//		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//		|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет,
//		|	БанковскиеСчетаОрганизаций.НаименованиеБанка КАК НаименованиеБанка,
//		|	БанковскиеСчетаОрганизаций.НомерСчета КАК ИИК,
//		|	БанковскиеСчетаОрганизаций.БИКБанка КАК БИК
//		|ИЗ
//		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
//		|ГДЕ
//		|	БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчетКонтрагента
//		|";
//		
//		РезультатЗапроса		= Запрос.Выполнить();
//		ВыборкаДетальныеЗаписи	= РезультатЗапроса.Выбрать();
//		
//		Если ВыборкаДетальныеЗаписи.Следующий()Тогда
//			СтруктураДанных.Вставить("БанковскийСчет", ВыборкаДетальныеЗаписи.Счет);
//			СтруктураДанных.Вставить("ИИК", ВыборкаДетальныеЗаписи.ИИК);
//			СтруктураДанных.Вставить("НаименованиеБанка", ВыборкаДетальныеЗаписи.НаименованиеБанка);
//			СтруктураДанных.Вставить("БИК", ВыборкаДетальныеЗаписи.БИК);		
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СтруктураДанных;
//	
//КонецФункции
//-- УПК
 
Функция НайтиБанкПоБИК(БИК) Экспорт
	
	СсылкаБанк = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	//БК3
	"ВЫБРАТЬ
	|	Банки.Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	Банки.БИК = &БИК
	|	И Банки.ПометкаУдаления = ЛОЖЬ";
	
	//++ УПК - прототип
	//"ВЫБРАТЬ
	//|	Банки.Ссылка
	//|ИЗ
	//|	Справочник.КлассификаторБанков КАК Банки
	//|ГДЕ
	//|	Банки.Код = &БИК
	//|	И Банки.ПометкаУдаления = ЛОЖЬ";  
	//-- УПК  	
	
	Запрос.УстановитьПараметр("БИК", БИК);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаБанк = Выборка.Ссылка;	
	Иначе
		СсылкаБанк = Неопределено;	
	КонецЕсли;
	
	Возврат СсылкаБанк;
	
КонецФункции

Функция НайтиДоговорыПоставкиПоДаннымАВР(Знач Объект, Знач СтрокаКонтрагент, Знач ИмяТаблицыКонтрагента) Экспорт
	
	МассивДоговоров = Новый Массив;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	//БК3
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.НомерДоговора = &НомерДоговора
	|	И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора
	|	И ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	
	//++ УПК - прототип
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ДоговорыКонтрагентов.Ссылка
	//|ИЗ
	//|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	//|ГДЕ
	//|	ДоговорыКонтрагентов.Номер = &НомерДоговора
	//|	И ДоговорыКонтрагентов.Дата = &ДатаДоговора
	//|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	//|	И ДоговорыКонтрагентов.Организация = &Организация
	//|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	//|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	//-- УПК
	   
	
	СоответсвиеИменРеквизитов = Новый Соответствие;
	СоответсвиеИменРеквизитов.Вставить("%УсловиеДоговорыКонтрагентовУчастникСРП", "");
	
	ЭСФСерверПереопределяемый.ЗаполнитьСоответсвиеИменРеквизитовПолейЗапросов(СоответсвиеИменРеквизитов);
	
	ЭСФСервер.ЗаменитьИменаРеквизитовПолейЗапросов(ТекстЗапроса, СоответсвиеИменРеквизитов);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("НомерДоговора", Объект.НомерДоговора);
	Запрос.УстановитьПараметр("ДатаДоговора", Объект.ДатаДоговора);
	
	Если ИмяТаблицыКонтрагента = "Поставщики" Тогда
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Поставщик);
	Иначе // ИмяТаблицыКонтрагента = "Получатели"
		Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Получатель);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Объект.Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДоговоров.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДС) Экспорт 
	
	Возврат УчетНДСиАкцизаВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
	
КонецФункции

Функция ПолучитьКурсВалюты(Валюта, Дата) Экспорт
	
	//БК3
	КурсНаДату = ОбщегоНазначенияБК.ПолучитьКурсВалюты(Валюта, Дата);	
	
	//++ УПК - прототип
	//КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта,Дата);	
	//-- УПК
		 
	КурсВалюты = КурсНаДату.Курс;
	Если КурсВалюты <> 0 Тогда
		Возврат КурсВалюты;
	Иначе 
		Возврат 1 ;
	КонецЕсли;
	
КонецФункции

Функция ДоступнаРольРедактированияАВР() Экспорт
	
	Возврат РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ДобавлениеИзменениеЭлектронныхАВР");
			
КонецФункции

Функция ПолучитьНомерНаПечатьЭАВР(НомерУчетногоДокумента) Экспорт
	
	Возврат НомерУчетногоДокумента;
	
	//++ УПК - прототип
	//Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерУчетногоДокумента, Ложь, Истина);
	//-- УПК
	
КонецФункции

#КонецОбласти

#Область ВводДокументовОснованияПоАВР

//Запоняет документ - основание документа АВР 
Функция ЗаполнитьДокументОснованиеПоДокументуАВР(ОбъектАВР, ИмяДокумента) Экспорт
		
	ДанныеАВР = АВРСервер.ПодготовитьДанныеДляЗаполненияПервичныхДокументовИзАВР(ОбъектАВР);
	
	СтатусАВР = ОбъектАВР.Статус;
	ДатаПринятияСтатуса = ОбъектАВР.ДатаПринятияСтатуса;
	
	НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("Реквизиты"        , ДанныеАВР.ТаблицаРеквизиты);
	Запрос.УстановитьПараметр("ТаблицаУслуги"    , ДанныеАВР.ТаблицаУслуги);
	Запрос.УстановитьПараметр("ТаблицаПоставщики", ДанныеАВР.ТаблицаПоставщики);
	Запрос.УстановитьПараметр("СтатусАВР"          , СтатусАВР);
	Запрос.УстановитьПараметр("ДатаПринятияСтатуса", ДатаПринятияСтатуса);
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		Запрос.Текст = ДанныеДляЗаполненияПоступлениеТоваровУслуг();
		ТабличнаяЧастьДокумента = НовыйДокумент.Услуги;
	
	ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		Если ДанныеАВР.ТаблицаУслуги.Количество() = 1 Тогда
			Запрос.Текст = ДанныеДляЗаполненияПоступлениеТоваровУслуг();
		Иначе
			//Возврат Неопределено;
			Если ДанныеАВР.ТаблицаУслуги.Количество() > 1 Тогда
				ТекстСообщения = НСтр("ru = 'Количество строк услуг больше одного, ввод документа ""Поступление доп. расходов"" невозможен!'");
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		
	Результат = Запрос.ВыполнитьПакет();
	ЗаполнитьЗначенияСвойств(НовыйДокумент, Результат[Результат.Количество()-3].Выгрузить()[0]);
	ТаблицаУслуги = Результат[Результат.Количество()-2].Выгрузить();
	
	Если ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		ЗаполнитьЗначенияСвойств(НовыйДокумент, ТаблицаУслуги[0], "Номенклатура, Сумма, СуммаНДС, СтавкаНДС");
		
	ИначеЕсли ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		Для Каждого Услуга Из ТаблицаУслуги Цикл
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Услуга);
			Если Услуга.Количество = 0 Тогда
				СтрокаТабличнойЧасти.Цена = Услуга.Цена;
			Иначе
				СтрокаТабличнойЧасти.Цена = Услуга.Сумма / Услуга.Количество;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
			
	РеквизитыНовогоДокумента = Новый Структура;
	РеквизитыНовогоДокумента.Вставить("ВидОперации", ?(ИмяДокумента = "ПоступлениеТоваровУслуг", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомисия, Перечисления.ВидыОперацийПоступлениеДопРасходов.УслугаСтороннейОрганизации));
	РеквизитыНовогоДокумента.Вставить("УчитыватьНДС", Истина);
	РеквизитыНовогоДокумента.Вставить("СуммаВключаетНДС", Ложь);
	РеквизитыНовогоДокумента.Вставить("КратностьВзаиморасчетов", 1);
	ТекПользователь = Пользователи.ТекущийПользователь();
	РеквизитыНовогоДокумента.Вставить("Склад", ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойСклад"));
	
	// Получаем данные по организации, является ли плательщиком налога на прибыль.
	ПроцедурыНалоговогоУчета.ПриИзмененииПризнакаОтраженияВНалоговомУчете(НовыйДокумент.Организация, НовыйДокумент.Дата, НовыйДокумент.УчитыватьКПН, Истина);
	// Заполняем реквизит "ВидУчетаНУ".
	ПроцедурыНалоговогоУчета.ЗаполнитьВидУчетаНУ(НовыйДокумент.УчитыватьКПН, НовыйДокумент.ВидУчетаНУ);
		
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, 
	|СчетЗатратБУ, СубконтоЗатратБУ1, СубконтоЗатратБУ2, СубконтоЗатратБУ3, 
	|СчетЗатратНУ, СубконтоЗатратНУ1, СубконтоЗатратНУ2, СубконтоЗатратНУ3, 
	|СчетУчетаНДС, НДСВидОборота, НДСВидПоступления,
	|ВидСубконтоЗатратБУ1, ВидСубконтоЗатратБУ2, ВидСубконтоЗатратБУ3,
	|ВидСубконтоЗатратНУ1, ВидСубконтоЗатратНУ2, ВидСубконтоЗатратНУ3,
	|СубконтоЗатратБУ1Доступность, СубконтоЗатратБУ2Доступность, СубконтоЗатратБУ3Доступность,
	|СубконтоЗатратНУ1Доступность, СубконтоЗатратНУ2Доступность, СубконтоЗатратНУ3Доступность");
	
	Если ИмяДокумента = "ПоступлениеТоваровУслуг" Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧастьДокумента Цикл
			
			ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, СтрокаТабличнойЧасти);
			
			ПараметрыОбъекта = Новый Структура("Организация, СтруктурноеПодразделение, Дата, Ссылка, ТипЦен, УчитыватьНДС, СуммаВключаетНДС, УчитыватьКПН, ВидОперации,
			|ВалютаДокумента, КурсВзаиморасчетов, КратностьВзаиморасчетов, Склад, ДоговорКонтрагента");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, НовыйДокумент);
			
			// Получаем данные по всем Субконто,НДСВидОборота,НДСВидПоступления 
			ЗаполнитьДанныеСтрокиУслуг(ДанныеСтрокиТаблицы, ПараметрыОбъекта);
			
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтрокиТаблицы);
		КонецЦикла;
		
	ИначеЕсли ИмяДокумента = "ПоступлениеДопРасходов" Тогда
		
		НовыйДокумент.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
		Документы.ПоступлениеДопРасходов.ЗаполнитьСчетаУчетаРасчетов(НовыйДокумент);
		
		ДанныеОбъекта = Новый Структура("Дата, Организация, ВидОперации, УчитыватьКПН, УчитыватьНДС");
		
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, НовыйДокумент);
		
		СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(НовыйДокумент.Номенклатура, ДанныеОбъекта);
		
		Если СведенияОНоменклатуре <> Неопределено Тогда
			НовыйДокумент.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
		КонецЕсли;
		
	КонецЕсли;
			
	Если ЗначениеЗаполнено(НовыйДокумент.ДоговорКонтрагента) Тогда
		РеквизитыНовогоДокумента.Вставить("Контрагент", НовыйДокумент.ДоговорКонтрагента.Владелец);
	Иначе
		ТаблицаПоставщики = Результат[Результат.Количество()-1].Выгрузить();
		Если ТаблицаПоставщики.Количество() > 0 Тогда
			РеквизитыНовогоДокумента.Вставить("Контрагент", ТаблицаПоставщики[0].Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйДокумент, РеквизитыНовогоДокумента);
	
	ЗаписатьДокумент(НовыйДокумент);
	
	НовыйДокумент.Записать();
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Функция ДанныеДляЗаполненияПоступлениеТоваровУслуг()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	ВЫБОР
	|		КОГДА &СтатусАВР = ЗНАЧЕНИЕ(Перечисление.СтатусыАВР.Подтвержденный)
	|			ТОГДА &ДатаПринятияСтатуса
	|		ИНАЧЕ Реквизиты.Дата
	|	КОНЕЦ КАК Дата,
	|	Реквизиты.Валюта КАК ВалютаДокумента,
	|	Реквизиты.КурсВалюты КАК КурсВзаиморасчетов,
	|	Реквизиты.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	&Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование,
	|	ТаблицаУслуги.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ПОМЕСТИТЬ ТаблицаУслуги
	|ИЗ
	|	&ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Поставщик КАК Контрагент
	|ПОМЕСТИТЬ ТаблицаПоставщики
	|ИЗ
	|	&ТаблицаПоставщики КАК ТаблицаПоставщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Организация,
	|	Реквизиты.Дата,
	|	Реквизиты.ДоговорКонтрагента,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.КурсВзаиморасчетов
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.УслугаНаименование КАК Содержание,
	|	ТаблицаУслуги.ЕдиницаИзмерения,
	|	ТаблицаУслуги.Количество,
	|	ТаблицаУслуги.Цена,
	|	ТаблицаУслуги.РазмерОборота,
	|	ТаблицаУслуги.СтоимостьБезУчетаКосвенныхНалогов КАК Сумма,
	|	ТаблицаУслуги.СтоимостьСУчетомКосвенныхНалогов,
	|	ТаблицаУслуги.СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС
	|ИЗ
	|	ТаблицаУслуги КАК ТаблицаУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоставщики.Контрагент
	|ИЗ
	|	ТаблицаПоставщики КАК ТаблицаПоставщики";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиУслуг(СтрокаТабличнойЧасти, ПараметрыОбъекта)
	
	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	СведенияОНоменклатуре = ОбработкаТабличныхЧастей.ПолучитьСведенияОНоменклатуре(СтрокаТабличнойЧасти.Номенклатура, ПараметрыОбъекта);
	
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ПараметрыОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
	
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидОборотаТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Услуги", МетаданныеДокумента);
	ОбработкаТабличныхЧастей.ЗаполнитьНДСВидПоступленияТабЧасти(СтрокаТабличнойЧасти, "Услуги", МетаданныеДокумента, Пользователи.ТекущийПользователь(), Ложь);
	
	ПоляОбъектаСубконто	  = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратБУ1", "СубконтоЗатратБУ2", "СубконтоЗатратБУ3");
	ПоляОбъектаСубконтоНУ = Новый Структура("Субконто1, Субконто2, Субконто3", "СубконтоЗатратНУ1", "СубконтоЗатратНУ2", "СубконтоЗатратНУ3");
	
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратБУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконто);
	ПроцедурыБухгалтерскогоУчетаКлиентСервер.УстановитьДоступностьИЗаголовкиСубконто(СтрокаТабличнойЧасти.СчетЗатратНУ, СтрокаТабличнойЧасти, ПоляОбъектаСубконтоНУ);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(ДокументОбъект)
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось создать документ!'");
		ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения)
	КонецПопытки;	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСФормами

// Обработчик события ПриСозданииНаСервере в форме списка документа АВР.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма документа АВР.
//
Процедура АВРФормаСпискаИВыбораПриСозданииНаСервере(Форма) Экспорт
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОтборПоОсновнойОрганизации(Форма);

КонецПроцедуры

Функция ПараметрыВыбораНоменклатурыАВРНаСервере() Экспорт
	
	Отбор = Новый Структура;
	
	//БК3
	Отбор.Вставить("Услуга", Истина);
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	//++ УПК - прототип
	//МассивТипыНоменклатуры = Новый Массив();
	//МассивТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	//МассивТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	//
	//Отбор.Вставить("ТипНоменклатуры", МассивТипыНоменклатуры);
	//ПараметрыФормы = Новый Структура("Отбор", Отбор);
	//
	//ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	//ПараметрыФормы.Вставить("ВыборГруппИЭлементов",ВыборГруппИЭлементов);
	//-- УПК
	 
	Возврат ПараметрыФормы;

КонецФункции

Функция УстановитьОтборПоОсновнойОрганизации(Форма, ИмяСписка = "Список", ИмяРеквизита = "Организация", ЗначениеОтбора = Неопределено) Экспорт
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		
		УчетПоВсемОрганизациям = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(ПользователиКлиентСервер.АвторизованныйПользователь(), "УчетПоВсемОрганизациям");
		ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию(ЗначениеОтбора);
		
		Форма.Организация = ОсновнаяОрганизация;
		
		Если Форма.ИмяФормы = "Документ.ЭлектронныйАктВыполненныхРабот.Форма.ФормаСпискаДокументов" Тогда
			ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Форма.СписокДокументовКОформлению, "Организация", ОсновнаяОрганизация, ЗначениеЗаполнено(ОсновнаяОрганизация));
		Иначе
			ЭСФКлиентСерверПереопределяемый.ИзменитьЭлементОтбораСписка(Форма.Список, "Организация", ОсновнаяОрганизация, ЗначениеЗаполнено(ОсновнаяОрганизация));
		КонецЕсли;
		
	Иначе
		
		ОсновнаяОрганизация = Справочники.Организации.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПолучаемыхАВР

Функция ОпределитьНаправлениеАВР(АВР, СтруктурнаяЕдиница) Экспорт
	
	//БК3
	БинСтруктурнойЕдиницы = СтруктурнаяЕдиница.ИдентификационныйНомер;
	//++ УПК - прототип
	//БинСтруктурнойЕдиницы = СтруктурнаяЕдиница.ИНН;  
	//-- УПК
	  
	ПрисутствуетВПоставщиках = ?(НЕ АВР.Поставщики.Найти(БинСтруктурнойЕдиницы, "ПоставщикИдентификатор") = Неопределено, Истина, Ложь); 
	ПрисутствуетВПолучателях = ?(НЕ АВР.Получатели.Найти(БинСтруктурнойЕдиницы, "ПолучательИдентификатор") = Неопределено, Истина, Ложь);
	
	Если ПрисутствуетВПоставщиках Тогда
		Возврат Перечисления.НаправленияЭСФ.Исходящий;
	ИначеЕсли ПрисутствуетВПолучателях Тогда
		Возврат Перечисления.НаправленияЭСФ.Входящий;
	Иначе
		Возврат Перечисления.НаправленияЭСФ.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаАВРИзПервчиныхДокументов
Процедура НайтиАВРИЗаполнитьСсылку(Форма, Объект) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;

	Элементы.СсылкаНаЭлектронныеАВР.Видимость = Ложь;

	Форма.СписокЭлектронныхАВР.ЗагрузитьЗначения(ОбщегоНазначенияБК.НайтиМассивПодчиненныхДокументов(Объект.Ссылка, "ЭлектронныйАктВыполненныхРабот"));
	
	Если Форма.СписокЭлектронныхАВР.Количество() = 0 Тогда
		Возврат;	
	ИначеЕсли Форма.СписокЭлектронныхАВР.Количество() > 1 Тогда
		НадписьКоличествоЭлектронныхАВР = НСтр("ru='Всего АВР(электронных): (%КоличествоДокументов%)'");
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = СтрЗаменить(НадписьКоличествоЭлектронныхАВР, "%КоличествоДокументов%", Форма.СписокЭлектронныхАВР.Количество());
	Иначе
		Элементы.СсылкаНаЭлектронныеАВР.Заголовок = Форма.СписокЭлектронныхАВР[0].Значение;
	КонецЕсли;
	
	Элементы.СсылкаНаЭлектронныеАВР.Видимость = Истина;
	
КонецПроцедуры

Функция ПроверитьНаличиеРанееВведеныхЭАВР(Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Документ
	|ПОМЕСТИТЬ вт_документыОснования
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&Основание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_документыОснования.Документ КАК Документ,
	|	СУММА(ВЫБОР
	|			КОГДА ЭлектронныйАктВыполненныхРабот.Ссылка ЕСТЬ NULL
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоЭАВР
	|ПОМЕСТИТЬ вт_КоличествоЭАВР
	|ИЗ
	|	вт_документыОснования КАК вт_документыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйАктВыполненныхРабот КАК ЭлектронныйАктВыполненныхРабот
	|		ПО вт_документыОснования.Документ = ЭлектронныйАктВыполненныхРабот.ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_документыОснования.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыБезЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыБезЭАВР
	|ГДЕ
	|	ДокументыБезЭАВР.КоличествоЭАВР = 0

	|СГРУППИРОВАТЬ ПО
	|	ДокументыБезЭАВР.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСЭАВР.Документ КАК Документ
	|ИЗ
	|	вт_КоличествоЭАВР КАК ДокументыСЭАВР
	|ГДЕ
	|	ДокументыСЭАВР.КоличествоЭАВР <> 0";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РеализацияТоваровУслуг", Основание.Метаданные().Имя);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	МассивДокументовБезЭАВР = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Документ");
	МассивДокументовСЭАВР = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("Документ");
	
	МассивыОбрабатываемыхДокументов = Новый Структура;
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовБезЭАВР"	, МассивДокументовБезЭАВР);
	МассивыОбрабатываемыхДокументов.Вставить("МассивДокументовСЭАВР"	, МассивДокументовСЭАВР);
	
	Возврат МассивыОбрабатываемыхДокументов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФорм

Процедура ПриСозданииНаСервере(Форма) Экспорт
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
 	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
 	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект, Форма) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
 	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
 	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры
#КонецОбласти

#Область ТребуетсяОформлениеЭлектронныхДокументов

Процедура ПриЗаписиОснованийЭАВР(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеАВР") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.РеализацияУслугПоПереработке")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		Если ОбщегоНазначенияБК.НайтиМассивПодчиненныхДокументов(Источник.Ссылка, "ЭлектронныйАктВыполненныхРабот").Количество() = 0 Тогда
			
			Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
			Набор.Отбор.Основание.Установить(Источник.Ссылка);
			Набор.Прочитать();
			Набор.Очистить();
			
			Если Источник.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ Тогда
				
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Организация = Источник.Организация;
				НоваяЗапись.Контрагент = Источник.Контрагент;
				НоваяЗапись.Основание = Источник.Ссылка;
				
			КонецЕсли;
			
			Набор.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//++ УПК - прототип
	//Если (ТипЗнч(Источник) = Тип("ДокументОбъект.АктВыполненныхРабот")
	//	ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.АктВыполненныхРабот")) Тогда
	//	
	//	Если Не ЗначениеЗаполнено(ПолучитьЭлектронныйАВР(Источник.Ссылка)) Тогда
	//		
	//		Набор = РегистрыСведений.ТребуетсяОформлениеЭАВР.СоздатьНаборЗаписей();
	//		Набор.Отбор.Основание.Установить(Источник.Ссылка);
	//		Набор.Прочитать();
	//		Набор.Очистить();
	//		
	//		Если Источник.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ Тогда
	//			
	//			НоваяЗапись = Набор.Добавить();
	//			НоваяЗапись.Организация = Источник.Организация;
	//			НоваяЗапись.Контрагент = Источник.Контрагент;
	//			НоваяЗапись.Основание = Источник.Ссылка;
	//			
	//		КонецЕсли;
	//		
	//		Набор.Записать(Истина);
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//-- УПК
	
КонецПроцедуры

Функция ПроверитьОснованиеДляОформленияЭАВР(Основание) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.РеализацияУслугПоПереработке")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
		
		Возврат Основание.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
	//++ УПК - прототип
	//Если ТипЗнч(Основание) = Тип("ДокументОбъект.АктВыполненныхРабот") ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
	//	Возврат Основание.СпособВыпискиАктовВыполненныхРабот = Перечисления.СпособыВыпискиАктовВыполненныхРабот.НаПорталеИСЭСФ;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Возврат Ложь;
	//-- УПК
	
КонецФункции

Функция ТекстЗапросаДокументовКОформлениюЭАВР() Экспорт
	
	Возврат "ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация КАК Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент КАК Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка КАК Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер КАК Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ) КАК ДатаОформления,
	|	ДокументОснованиеЭАВР.ВалютаДокумента КАК Валюта,
	|	ДокументОснованиеЭАВР.СуммаДокумента КАК Сумма,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка) КАК ВидОснования,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ) КАК Срок,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ) КАК МесяцОформления
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ),
	|	ДокументОснованиеЭАВР.ВалютаДокумента,
	|	ДокументОснованиеЭАВР.СуммаДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка),
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТребуетсяОформлениеЭАВР.Организация,
	|	ТребуетсяОформлениеЭАВР.Контрагент,
	|	ДокументОснованиеЭАВР.Ссылка,
	|	ДокументОснованиеЭАВР.Автор КАК Автор,
	|	ДокументОснованиеЭАВР.Номер,
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ),
	|	ДокументОснованиеЭАВР.ВалютаДокумента,
	|	ДокументОснованиеЭАВР.СуммаДокумента,
	|	ТИПЗНАЧЕНИЯ(ДокументОснованиеЭАВР.Ссылка),
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ),
	|	НАЧАЛОПЕРИОДА(ДокументОснованиеЭАВР.Дата, МЕСЯЦ)
	|ИЗ
	|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПоПереработке КАК ДокументОснованиеЭАВР
	|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснованиеЭАВР.Ссылка";
	
	//++ УПК - прототип
	//"ВЫБРАТЬ
	//|	ТребуетсяОформлениеЭАВР.Организация КАК Организация,
	//|	ТребуетсяОформлениеЭАВР.Контрагент КАК Контрагент,
	//|	ДокументОснование.Ссылка КАК Ссылка,
	//|	ДокументОснование.Номер КАК Номер,
	//|	НАЧАЛОПЕРИОДА(ДокументОснование.Дата, ДЕНЬ) КАК ДатаОформления,
	//|	ДокументОснование.Валюта КАК Валюта,
	//|	ДокументОснование.СуммаДокумента КАК Сумма,
	//|	ТИПЗНАЧЕНИЯ(ДокументОснование.Ссылка) КАК ВидОснования,
	//|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДокументОснование.Дата, ДЕНЬ), &НачалоТекущегоДня, ДЕНЬ) КАК Срок,
	//|	НАЧАЛОПЕРИОДА(ДокументОснование.Дата, МЕСЯЦ) КАК МесяцОформления
	//|ИЗ
	//|	РегистрСведений.ТребуетсяОформлениеЭАВР КАК ТребуетсяОформлениеЭАВР
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК ДокументОснование
	//|		ПО ТребуетсяОформлениеЭАВР.Основание = ДокументОснование.Ссылка";
	////ОБЪЕДИНИТЬ ВСЕ
	//-- УПК
	
КонецФункции

#КонецОбласти

#Область РаботаСПервичнымиДокументами

Процедура ОбновлениеДанныхПервичныхДокументов(ОбъектАВР) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектАВР.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОснования = ЭСФСерверПереопределяемый.ЗначенияРеквизитовОбъекта(ОбъектАВР.ДокументОснование, "ДатаПодписанияГЗ,Проведен");
	
	Если РеквизитыОснования.ДатаПодписанияГЗ <> ОбъектАВР.ДатаПринятияСтатуса Тогда
		
		Если РеквизитыОснования.Проведен Тогда
			
			ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" поле ""Дата подписи"" отличается от документа ""[АВР]"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
			ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
			
			
		Иначе
			
			Попытка
				
				ДокументОбъект = ОбъектАВР.ДокументОснование.ПолучитьОбъект();
				
				ДокументОбъект.ДатаПодписанияГЗ = ОбъектАВР.ДатаПринятияСтатуса;
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Если ЗначениеЗаполнено(РеквизитыОснования.ДатаПодписанияГЗ) Тогда
					ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" скорректировано поле ""Дата подписи"" по документу ""[АВР]"". Документ проведен.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				Иначе
					ТекстСообщения = НСтр("ru = 'В документе ""[ДокументОснование]"" заполнено поле ""Дата подписи"" по документу ""[АВР]"". Документ проведен.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[АВР]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ДокументОснование]", АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование));
					ЭСФКлиентСерверПереопределяемый.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
			Исключение
				
				ЗаписьЖурналаРегистрации(
				АВРКлиентСервер.КраткоеПредставлениеАВР(ОбъектАВР.ДокументОснование),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДатыПервичныхДокументовПриОтправкеАВР(МассивОснований) Экспорт
	
	Для Каждого Основание Из МассивОснований Цикл
		
			ДокументОснование = Основание.ПолучитьОбъект();
			ДокументОснование.Дата = ТекущаяДата();
			ДокументОснование.Записать();
		
	КонецЦикла;

КонецПроцедуры

Функция МожноИзменитьДатуСвязанногоДокументаАВР(Основание) Экспорт
	
	Возврат ?(Основание.Проведен, Ложь, Истина);

КонецФункции
	
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики, ЗавершениеОбновления = Ложь) Экспорт
	

	
КонецПроцедуры

#КонецОбласти