Функция ПолучитьПараметрыПодключения(СтрокаПодключения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Фрагменты = ТЦОбщий.РазделитьСтроку(СтрокаПодключения, ";");
	Для каждого Фрагмент Из Фрагменты Цикл
		Параметры = ТЦОбщий.РазделитьСтроку(Фрагмент, "=");
		ИмяПараметра = Параметры[0];
		ЗначениеПараметра = ?(Параметры.Количество() > 1, Параметры[1], "");
		Если ВРег(Лев(ИмяПараметра, 4)) = "SRVR" Тогда
			КомпонентыИмениСервера = ТЦОбщий.РазделитьСтроку(ТЦОбщий.УдалитьКавычки(ЗначениеПараметра), ":");
			СтруктураПараметров.Вставить("ИмяСервера", КомпонентыИмениСервера[0]);
			Если КомпонентыИмениСервера.Количество() > 1 Тогда
				ПортКластера = Число(КомпонентыИмениСервера[1]);
			Иначе
				ПортКластера = 1541;
			КонецЕсли;
			СтруктураПараметров.Вставить("ПортКластера", ПортКластера);
		КонецЕсли;
		
		СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;

	Возврат СтруктураПараметров;
	
КонецФункции

Функция УдалитьОбъект(Ссылка)
	
	Док = Ссылка.ПолучитьОбъект();
	Результат = Истина;
	
	Попытка
		Док.Удалить();
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьОбъектыИзМассива(ИсходныйМассив) Экспорт
	
	Если Не (ИсходныйМассив = Неопределено) Тогда
		Количество = ИсходныйМассив.Количество() - 1;
		Для Сч = 0 По Количество Цикл
			Ссылка = ИсходныйМассив[Сч];
			Если Ссылка <> Неопределено Тогда
				Если Не УдалитьОбъект(Ссылка) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоздатьЗаказПокупателя(СсылкаСозданногоДокумента, Шаблон) Экспорт
	
	ЗаказПокупателя = Шаблон.Скопировать();
	ЗаказПокупателя.Дата = ТекущаяДата();
	ЗаказПокупателя.УстановитьНовыйНомер();
	ЗаказПокупателя.Комментарий = "Обычный документ оператора";
	ЗаказПокупателя.ОтражатьВБухгалтерскомУчете = Истина;
	ЗаказПокупателя.ОтражатьВНалоговомУчете = Истина;
	РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Успешно;
	
	Попытка
		ЗаказПокупателя.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		СсылкаСозданногоДокумента = ЗаказПокупателя.Ссылка;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке());
		РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция СоздатьРеализациюТоваровИУслуг(СсылкаЗаказаПокупателя, СсылкаСозданногоДокумента, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам) Экспорт
	
	Реализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Реализация.Дата = ТекущаяДата();
	Реализация.УстановитьНовыйНомер();
	Реализация.Комментарий = "Обычный документ оператора";
	Реализация.Заполнить(СсылкаЗаказаПокупателя);
	Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
	Реализация.ОтражатьВУправленческомУчете = Истина;
	Реализация.ОтражатьВБухгалтерскомУчете = Истина;
	Реализация.ОтражатьВНалоговомУчете = Истина;
	Реализация.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
	Реализация.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
	РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Успешно;
	
	Попытка
		Реализация.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		СсылкаСозданногоДокумента = Реализация.Ссылка;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке());
		РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция СоздатьСчетФактуру(СсылкаРеализации, СсылкаСозданногоДокумента, ШаблонЗаказПокупателя) Экспорт
	
	СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
	СчетФактура.Дата = ТекущаяДата();
	СчетФактура.УстановитьНовыйНомер();
	СчетФактура.Комментарий = "Обычный документ оператора";
	СчетФактура.Заполнить(СсылкаРеализации);
	СчетФактура.Организация = ШаблонЗаказПокупателя.Организация;
	РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Успешно;
	
	Попытка
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		СсылкаСозданногоДокумента = СчетФактура.Ссылка;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке());
		РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция СоздатьРасходныйОрдер(СсылкаРеализации, СсылкаСозданногоДокумента) Экспорт
	
	РасходныйОрдер = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	РасходныйОрдер.Дата = ТекущаяДата();
	РасходныйОрдер.УстановитьНовыйНомер();
	РасходныйОрдер.Комментарий = "Обычный документ оператора";
	РасходныйОрдер.Заполнить(СсылкаРеализации);
	РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Успешно;
	
	Попытка
		РасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		СсылкаСозданногоДокумента = РасходныйОрдер.Ссылка;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке());
		РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка;
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ВыполнитьБизнесПроцессПродажи(ПаузаПриНачалеРаботы, мДокументы, КонтекстВыполнения, Замеры, ШаблонЗаказПокупателя, КоличествоИтераций = 0) Экспорт
	
	ПаузаМеждуИтерациями = 60000;
	ВремяВыполненияТеста = 300;
	НомерИтерации = 1;
	ОбщееВремяРаботы = 0;
	СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	НачалоВыполненияТеста = ТекущаяДата();
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();

	Если ПаузаПриНачалеРаботы > 0 Тогда
		КипВнешнийКомпонент.Пауза(Инструменты, ПаузаПриНачалеРаботы);
	КонецЕсли;
	
	Пока ТекущаяДата() - НачалоВыполненияТеста <= ВремяВыполненияТеста Цикл
		Если КоличествоИтераций > 0 И НомерИтерации > КоличествоИтераций Тогда
			Возврат Перечисления.ТЦРезультатВыполнения.Успешно;
		КонецЕсли;
		
		ЗаказПокупателя = Неопределено;
		Реализация = Неопределено;
		СчетФактура = Неопределено;
		РасходныйОрдер = Неопределено;
		НачалоРаботы = КипВнешнийКомпонент.ЗначениеТаймера(Инструменты);
		ТЦОбщий.ЗаписатьВЖурнал("Начало итерации = " + Строка(ТекущаяДата()));
		
		РезультатВыполнения = ТЦСТП.СоздатьЗаказПокупателя(ЗаказПокупателя, ШаблонЗаказПокупателя);
		Если РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		мДокументы.Добавить(ЗаказПокупателя);
		Если ТекущаяДата() - НачалоВыполненияТеста >= ВремяВыполненияТеста Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		РезультатВыполнения = ТЦСТП.СоздатьРеализациюТоваровИУслуг(ЗаказПокупателя, Реализация, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам);
		Если РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		мДокументы.Добавить(Реализация);
		Если ТекущаяДата() - НачалоВыполненияТеста >= ВремяВыполненияТеста Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		РезультатВыполнения = ТЦСТП.СоздатьСчетФактуру(Реализация, СчетФактура, ШаблонЗаказПокупателя);
		Если РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		мДокументы.Добавить(СчетФактура);
		Если ТекущаяДата() - НачалоВыполненияТеста >= ВремяВыполненияТеста Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		РезультатВыполнения = ТЦСТП.СоздатьРасходныйОрдер(Реализация, РасходныйОрдер);
		Если РезультатВыполнения = Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		мДокументы.Добавить(РасходныйОрдер);
		
		Если ТекущаяДата() - НачалоВыполненияТеста >= ВремяВыполненияТеста Тогда
			Возврат РезультатВыполнения;
		КонецЕсли;
		
		ОкончаниеРаботы = КипВнешнийКомпонент.ЗначениеТаймера(Инструменты);
		
		Если НомерИтерации > 1 Или КоличествоИтераций > 0 Тогда
			Замер = Новый Структура;
			Замер.Вставить("Показатель", "ОбщееВремяРаботы" + Строка(НомерИтерации));
			Замер.Вставить("Значение", (ОкончаниеРаботы - НачалоРаботы) / 1000);
			Замеры.Добавить(Замер);
		КонецЕсли;
		НомерИтерации = НомерИтерации + 1;
		Если КоличествоИтераций <= 0 Тогда
			ПаузаМеждуИтерациями = 60000 - (КипВнешнийКомпонент.ЗначениеТаймера(Инструменты) - НачалоРаботы);
			Если ПаузаМеждуИтерациями > 0 Тогда
				КипВнешнийКомпонент.Пауза(Инструменты, ПаузаМеждуИтерациями);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПолучитьСценарий() Экспорт
	Возврат Справочники.ТЦСценарии.НайтиПоКоду("000000001");
КонецФункции

Функция ПолучитьРоль() Экспорт
	Возврат Справочники.ТЦРоли.НайтиПоКоду("000000001");
КонецФункции

Функция ПолучитьМаксимальноеКоличествоПользователей(Сценарий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоПользователей
	|ИЗ
	|	РегистрСведений.ТЦНастройкиВП КАК ТЦНастройкиВП
	|ГДЕ
	|	ТЦНастройкиВП.Сценарий = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоПользователей;
	Иначе
		Возврат - 1;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКомпьютер(ИмяКомпьютера) Экспорт
	
	Компьютер = Справочники.ТЦКомпьютеры.СоздатьЭлемент();
	Компьютер.Наименование = ИмяКомпьютера;
	Попытка
		Компьютер.Записать();
		Возврат Компьютер.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось создать элемент справочника ТЦКомпьютер по причине: " + ОписаниеОшибки();
		Сообщение.Поле = "Компьютеры";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьКлиента(Компьютер) Экспорт
	
	Клиент = Справочники.ТЦКлиенты.СоздатьЭлемент();
	Клиент.Компьютер = Компьютер;
	Клиент.Наименование = Компьютер.Наименование;
	Клиент.ТипКлиента = Перечисления.ТЦТипКлиента.Тонкий1С;
	Клиент.ИмяФайла = "1cv8c.exe";
	Клиент.СтрокаЗапуска = "1cv8c.exe";
	
	Попытка
		Клиент.Записать();
		Возврат Клиент.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось создать элемент справочника ТЦКлиенты по причине: " + ОписаниеОшибки();
		Сообщение.Поле = "Компьютеры";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьПользователя(ИмяПользователя) Экспорт
	
	Пользователь = Справочники.ТЦПользователи.СоздатьЭлемент();
	Пользователь.Имя = ИмяПользователя;
	Пользователь.Наименование = ИмяПользователя;
	Пользователь.ТипАутентификации = Перечисления.ТЦТипАутентификации.Аутентификация1С;
	
	Попытка
		Пользователь.Записать();
		Возврат Пользователь.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось создать элемент справочника ТЦПользователи по причине: " + ОписаниеОшибки();
		Сообщение.Поле = "Компьютеры";
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПодготовитьСценарийКЗапуску(Сценарий) Экспорт
	
	ОбъектСценарий = Сценарий.ПолучитьОбъект();
	ОбъектСценарий.Структура.Очистить();
	
	Попытка
		ОбъектСценарий.Записать();
		Возврат Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.КлючДанных = ОбъектСценарий.Ссылка;
		Сообщение.Поле = "Сценарий";
		Сообщение.ПутьКДанным = "Сценарий";
		Сообщение.Текст = "Не удалось выполнить подготовку сценария к запуску по причине: " + ОписаниеОшибки();
		Сообщение.УстановитьДанные(Сценарий);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСписокАгентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТЦАгенты.Компьютер) КАК ИмяКомпьютера
	|ИЗ
	|	Справочник.ТЦАгенты КАК ТЦАгенты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЦАгенты.Компьютер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура УдалитьВсехВП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЦВП.Ссылка
	|ИЗ
	|	Справочник.ТЦВП КАК ТЦВП";
	
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		
		ВП = Выб.Ссылка.ПолучитьОбъект();
		Попытка
			ВП.Удалить();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИндексAPDEX(Показатель, ДокументЗамера) Экспорт
	
	Т = 15;
	N = 1;
	NS = 0;
	NF = 0;
	
	Если ДокументЗамера = Неопределено Тогда
		Возврат - 1;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(ТЦРезультаты.Тест) КАК КоличествоОпераций
	|ИЗ
	|	РегистрСведений.ТЦРезультаты КАК ТЦРезультаты
	|ГДЕ
	|	ТЦРезультаты.Тест = &Тест
	|	И ТЦРезультаты.Показатель ПОДОБНО &Показатель
	|	И ( (&Т = -1)  ИЛИ (ТЦРезультаты.Значение МЕЖДУ &Т1 И &Т ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЦРезультаты.Тест";
	
	Запрос.УстановитьПараметр("Показатель", "%" + Показатель + "%");
	Запрос.УстановитьПараметр("Тест", ДокументЗамера);
	Запрос.УстановитьПараметр("Т", - 1);
	Запрос.УстановитьПараметр("Т1", 0);
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		N = Выб.КоличествоОпераций;
	Иначе
		Возврат - 1;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Т", Т);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		NS = Выб.КоличествоОпераций;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Т", 4 * Т);
	Запрос.УстановитьПараметр("Т1", Т);
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() Тогда
		NF = Выб.КоличествоОпераций;
	КонецЕсли;
	APDEX = (NS + NF / 2) / N;
	
	Возврат APDEX;
	
КонецФункции

Функция ПолучитьСреднееВремяРаботы(Тест)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЦРезультаты.Показатель КАК Показатель,
	|	СРЕДНЕЕ(ТЦРезультаты.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений.ТЦРезультаты КАК ТЦРезультаты
	|ГДЕ
	|	ТЦРезультаты.Тест = &Тест
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЦРезультаты.Показатель";
	
	Запрос.УстановитьПараметр("Тест", Тест);
	Выб = Запрос.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		Возврат Выб.Значение;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ПрерватьВыполнениеСценария(Тест, ВыгрузитьВРМ = Истина) Экспорт
	
	Если Тест = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТЦСервер.ПрерватьВыполнениеТеста(Тест);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТЦВП.Ссылка
	|ИЗ
	|	Справочник.ТЦВП КАК ТЦВП
	|ГДЕ
	|	ТЦВП.Состояние <> ЗНАЧЕНИЕ(Перечисление.ТЦСостояние.Выгрузка)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВРМ = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивВРМ.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если ВыгрузитьВРМ И МассивВРМ.Количество() > 0 Тогда
		ТЦСервер.ЗавершитьРаботуВРМ(МассивВРМ);
	КонецЕсли;
	
КонецПроцедуры
