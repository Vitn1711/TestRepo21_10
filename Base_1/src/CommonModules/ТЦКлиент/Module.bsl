///////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ КОМАНДЫ

// Выполнить тестирование
//
Процедура ВыполнитьТестирование() Экспорт
	
	ОткрытьФорму("Справочник.ТЦСценарии.ФормаСписка",,,, ОсновноеОкно());
	
КонецПроцедуры // ВыполнитьТестирование()

// Переключить Тест-центр в режим агента
//
Процедура ВключитьРежимАгента(ПредыдущаяФорма = Неопределено) Экспорт
	
	Если ПредыдущаяФорма = Неопределено Тогда
		ИмяПредыдущейФормы = "Справочник.ТЦАгенты.ФормаСписка";
	Иначе
		ИмяПредыдущейФормы = ПредыдущаяФорма;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("", );
	ПараметрыФормы.Вставить("ПредыдущаяФорма", ИмяПредыдущейФормы);
	ОткрытьФорму("Справочник.ТЦАгенты.ФормаОбъекта", ПараметрыФормы,,, ОсновноеОкно());
	
КонецПроцедуры // ВключитьРежимАгента()

// Переключить Тест-центр в режим ВРМ
//
Процедура ВключитьРежимВРМ(Клиент, Пользователь, ВП) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Форма = Справочники.ТЦВП.ПолучитьФорму("ОбычноеВРМ");
		Форма.Клиент = Клиент;
		Форма.Пользователь = Пользователь;
		Форма.ВП = ВП;
		Форма.Открыть();
	#Иначе
		П = Новый Структура;
		П.Вставить("Клиент", Клиент);
		П.Вставить("Пользователь", Пользователь);
		П.Вставить("ВП", ВП);
		ОткрытьФорму("Справочник.ТЦВП.Форма.УправляемоеВРМ", П,,, ОсновноеОкно());
	#КонецЕсли
	
КонецПроцедуры // ВключитьРежимВРМ()

// Открыть форму результатов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, открываемый документ
//
Процедура ПоказатьРезультатыТеста(Тест) Экспорт
	
	П = Новый Структура;
	П.Вставить("Ключ", Тест);
	ОткрытьФорму("Документ.ТЦТест.Форма.ОсновнойОтчет", П,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьРезультатыТеста()

// Открыть форму результатов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, открываемый документ
//
Процедура ПоказатьСписокАгентов() Экспорт
	
	ОткрытьФорму("Справочник.ТЦАгенты.Форма.Агенты",,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьСписокАгентов()

// Открыть форму, отображающую состояние тестирования
//
Процедура ПоказатьСостояниеТестирования() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.ТЦСостояниеВыполненияТеста",,,, ОсновноеОкно());
	
КонецПроцедуры // ПоказатьСостояниеТестирования()

// Открыть форму результатов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТЦТест, открываемый документ
//
Процедура ПоказатьПротокол(Тест = Неопределено, ВстроенноеОкно = Истина) Экспорт
	
	П = Новый Структура;
	П.Вставить("Ключ", Тест);
	
	Если ВстроенноеОкно Тогда
		ОткрытьФорму("ОбщаяФорма.ТЦПротокол", П,,, ОсновноеОкно());
	Иначе
		ОткрытьФорму("ОбщаяФорма.ТЦПротокол", П);
	КонецЕсли;
	
КонецПроцедуры // ПоказатьРезультатыТеста()

// Выполнить действие в соответствии с параметром запуска (/C)
// TCA (Test-center Agent) - запуск в режиме агента
// TCVW (Test-center Virtual Workplace) - запуск в режиме ВРМ
//
// Параметры:
//  Параметры - Строка, параметры командной строки
//
Процедура ОбработатьПараметрЗапуска(Параметры) Экспорт
	
	Если ПустаяСтрока(Параметры) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВРег = ВРег(Параметры);
	ПараметрыМассив = ТЦОбщий.РазделитьСтроку(ПараметрыВРег, ";");
	
	Если ПараметрыМассив[0] = "TCA" Тогда
		ВключитьРежимАгента();
	ИначеЕсли ПараметрыМассив[0] = "TCVW" Тогда
		Клиент = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[1],
			"Справочники",
			"ТЦКлиенты");
		Пользователь = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[2],
			"Справочники",
			"ТЦПользователи");
		ВП = ТЦСервер.СсылкаПоИдентификатору(
			ПараметрыМассив[3],
			"Справочники",
			"ТЦВП");
		ВключитьРежимВРМ(Клиент, ТЦСервер.НайтиОригиналПоКлону(Пользователь), ВП);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПараметрЗапуска()


///////////////////////////////////////////////////////////////////////////////
// СООБЩЕНИЯ

// Получить адрес подключения для информационной базы
//
// Возвращаемое значение:
//  Строка - имя подключения
//
Функция АдресЛокальногоПодключения() Экспорт
	
	Соединение = ТЦСервер.СтрокаСоединенияИнформационнойБазыНаСервере();
	Параметры = ТЦОбщий.ПолучитьПараметрыПодключения(Соединение);
	Имя = Параметры.ИмяСервера + "_"
	    + Формат(Параметры.ПортКластера, "ЧГ=0") + "_"
	    + ТЦОбщий.УдалитьКавычки(Параметры.Ref);
	Возврат ВРег(Имя);
	
КонецФункции // АдресЛокальногоПодключения()

// Получить иадрес агента на текущем компьютере
//
// Параметры:
//  АдресЛокальногоПодключения - Строка, см. АдресЛокальногоПодключения()
//
// Возвращаемое значение:
//  Строка - уникальное имя агента на этом компьютере
//
Функция ЛокальныйАдресАгента(АдресЛокальногоПодключения) Экспорт
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = Формат(КипВнешнийКомпонент.НомерСессии(Инструменты), "ЧГ=0");
	Возврат "AGENT_" + НомерСессии + "_" + АдресЛокальногоПодключения + "_" + ВРег(ИмяКомпьютера);
	
КонецФункции // ЛокальныйАдресАгента()

// Получить адрес ВРМ на текущем компьютере
//
// Параметры:
//  АдресЛокальногоПодключения - Строка, см. АдресЛокальногоПодключения()
//  Ссылка - СправочникСсылка.ТЦВРМ, ссылка на ВРМ
//
// Возвращаемое значение:
//  Строка - уникальное имя агента на этом компьютере
//
Функция ЛокальныйАдресВРМ(АдресЛокальногоПодключения, Ссылка) Экспорт
	
	Адрес = ТЦСервер.СсылкуВСтроку(Ссылка);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	НомерСессии = Формат(КипВнешнийКомпонент.НомерСессии(Инструменты), "ЧГ=0");
	Возврат "VW_" + НомерСессии + "_" + АдресЛокальногоПодключения + "_" + Адрес;
	
КонецФункции // ЛокальныйАдресВРМ()

// Создать параметры запуска ВРМ
//
// Возвращаемое значение:
//  Структура:
//    Пользователь - Строка, имя пользователя
//    Пароль - Строка, пароль пользователя
//    Количество - Число, количество таких пользователей
//
Функция ПараметрыЗапускаВРМ() Экспорт
	
	Возврат Новый Структура("Пользователь, Пароль, Количество");
	
КонецФункции // ПараметрыЗапускаВРМ()

&НаКлиенте
// Подключить механизм локальных сообщений
//
// Параметры:
//  Сообщения - Объект работы с локальными сообщениями
//  Адрес - Строка, адрес по которому принимаются сообщения
//
Процедура ПодключитьЛокальныеСообщения(Сообщения, Адрес) Экспорт
	
	Если Сообщения = Неопределено Тогда
		Сообщения = КипВнешнийКомпонент.ПолучитьОбработчикСообщений();
		КипВнешнийКомпонент.ПодключитьСообщения(Сообщения, Адрес);
	КонецЕсли; 
	
КонецПроцедуры // ПодключитьЛокальныеСообщения()

&НаКлиенте
// Отключить механизм локальных сообщений
//
// Параметры:
//  Сообщения - Объект работы с локальными сообщениями
//
Процедура ОтключитьЛокальныеСообщения(Сообщения) Экспорт
	
	Если Сообщения <> Неопределено Тогда
		КипВнешнийКомпонент.ОтключитьСообщения(Сообщения);
		Сообщения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ОтключитьЛокальныеСообщения()


///////////////////////////////////////////////////////////////////////////////
// ИНТЕРФЕЙС ПОЛЬЗОВАТЕЛЯ

// Получить основное окно приложения
//
// Возвращаемое значение:
//  ОкноКлиентскогоПриложения - основное окно
//
Функция ОсновноеОкно() Экспорт
	
	Окна = ПолучитьОкна();
	
	Для каждого Окно Из Окна Цикл
		Если Окно.Основное Тогда
			Возврат Окно;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ОсновноеОкно()

// Отобразить информацию об ошибке в специализированном диалоговом окне
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке
//
Процедура СообщитьОбОшибке(Ошибка, ДатаНачала, ДатаОкончания) Экспорт
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Ошибка) = Тип("ИнформацияОбОшибке") Тогда
		Параметры.Вставить("Ошибка", ТЦОбщий.ИнформациюОбОшибкеВСтруктуру(Ошибка));
	Иначе
		Параметры.Вставить("Ошибка", Ошибка);
	КонецЕсли;
	
	Параметры.Вставить("ДатаНачала", ДатаНачала);
	Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	ОткрытьФормуМодально("ОбщаяФорма.ТЦОшибка", Параметры);
	
КонецПроцедуры // СообщитьОбОшибке()

// Получить имя формы тестовой обработки
//
// Параметры:
//  ТестоваяОбработка - СправочникСсылка.ТЦОбработки
//
// Возвращаемое значение:
//  Строка - строка с именем формы тестовой обработки
//
Функция ПолучитьИмяФормыОбработки(ТестоваяОбработка) Экспорт
	
	ТипВнешняя = ПредопределенноеЗначение("Перечисление.ТЦТипОбработки.Внешняя");
	ТипВнутреняя = ПредопределенноеЗначение("Перечисление.ТЦТипОбработки.Внутренняя");
	Реквизиты = ТЦСервер.РеквизитыОбъектаПоСсылке(ТестоваяОбработка);
	ИмяФормы = ".Форма.ТЦФорма";
	
	Если Реквизиты.Тип = ТипВнешняя Тогда
		Путь = ПолучитьНавигационнуюСсылку(ТестоваяОбработка, "Файл");
		ИмяОбработки = ТЦСервер.ПодключитьОбработку(Путь);
		ИмяФормы = "ВнешняяОбработка." + ИмяОбработки + ИмяФормы;
	ИначеЕсли Реквизиты.Тип = ТипВнутреняя Тогда
		ИмяФормы = "Обработка." + Реквизиты.ИмяОбработки + ИмяФормы;
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции // ПолучитьИмяФормыОбработки()

// Задать вопрос о необходимости закрытия формы состояния выполнения теста
//
// Возвращаемое значение:
//  Булево - Истина, закрыть окно, Ложь, не закрывать
//
Функция ЗакрытьОкноСостоянияВыполненияТеста() Экспорт
	
	Текст =
		"Закрытие окна состояния выполнения теста не завершит выполнение "
		"процесса тестирования, который будет продолжаться на стороне "
		"сервера в отдельном фоновом задании. Если тестирование все еще "
		"будет выполняться во время повторного открытия окна состояния "
		"выполнения теста, то будет отображен текущий процесс тестирования.
		|
		|Продолжить?";
	РезультатВопроса = Вопрос(
		Текст,
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет,
		"Тест-центр");
		
	Возврат РезультатВопроса = КодВозвратаДиалога.Да;
	
КонецФункции // ЗакрытьОкноСостоянияВыполненияТеста()


///////////////////////////////////////////////////////////////////////////////
// КЛИЕНТЫ

// Запустить клиента от имени указанного пользователя
//
// Параметры:
//  Клиент - СправочникСсылка.ТЦКлиент
//  Пользователь - СправочникСсылка.ТЦПользователь
//  Ид - Строка, уникальный идентификатор нового ВРМ
//
Процедура ЗапуститьКлиента(Клиент, Пользователь, Ид) Экспорт
	
	ПараметрыПользователя = ТЦСервер.ПараметрыПользователя(Пользователь);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоLinux = СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86
	       Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ПараметрыПользователя.ТипАутентификации = ПредопределенноеЗначение("Перечисление.ТЦТипАутентификации.АутентификацияОС") Тогда
		КипВнешнийКомпонент.ЗапуститьПрограмму(
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux),
			ПараметрыПользователя.Имя,
			ПараметрыПользователя.Домен,
			ПараметрыПользователя.Пароль);
	Иначе
		КипВнешнийКомпонент.ЗапуститьПрограмму(
			Инструменты,
			ТЦСервер.ПолнаяСтрокаЗапуска(Клиент, Пользователь, Ид, ЭтоLinux));
	КонецЕсли;
	
КонецПроцедуры // ЗапуститьКлиента()


///////////////////////////////////////////////////////////////////////////////
// ВИРТУАЛЬНОЕ РАБОЧЕЕ МЕСТО

// Создать контекст выполнения ВРМ
//
// Возвращаемое значение:
//  Структура
//    Адрес - Строка, адрес на который ВРм принимает локальные сообщения
//    Номер - Число, порядковый номер ВРМ относительно теста
//    Сообщения - ВнешнийКомпонент, рассылка и прием локальных сообщений
//    Сценарий - СправочникСсылка.ТЦСценарии
//    ФормаОбработки - УправляемаяФорма, форма тестовой обработки
//
Функция СоздатьКонтекстВРМ(Клиент, Пользователь, ВРМ) Экспорт
	
	Перем Сообщения;
	
	Контекст = Новый Структура("Адрес, ВРМ, Клиент, Номер, Перечисления, Пользователь, Сообщения, Сценарий, ФормаОбработки");
	Контекст.ВРМ = ВРМ;
	Контекст.Клиент = Клиент;
	Контекст.Пользователь = Пользователь;
	Контекст.Перечисления = ТЦСервер.ПолучитьПеречисления();
	ЛокальныйАдрес = ТЦКлиент.АдресЛокальногоПодключения();
	Контекст.Адрес = ТЦКлиент.ЛокальныйАдресВРМ(ЛокальныйАдрес, ВРМ);
	ТЦКлиент.ПодключитьЛокальныеСообщения(Сообщения, Контекст.Адрес);
	Контекст.Сообщения = Сообщения;
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	Клон = ТЦСервер.ПользовательИБПоИмени(ИмяПользователя());
	ТЦСервер.СоздатьВРМ(ТЦКлиент.ПолучитьИмяВРМ(Пользователь), Клиент, НомерСессии, Пользователь, Клон, ВРМ);
	
	ТЦКлиент.ОтправитьАгенту(
		Контекст,
		Контекст.Перечисления.ТЦСообщение.ГотовКработе,
		ТЦКлиент.ПараметрыОтветаВРМ(ВРМ));
	
	Возврат Контекст;
	
КонецФункции // СоздатьКонтекстВРМ()

// Удалить контекст выполнения ВРМ
//
// Параметры:
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//
Процедура УдалитьКонтекстВРМ(Контекст) Экспорт
	
	ТЦКлиент.ОтключитьЛокальныеСообщения(Контекст.Сообщения);
	ТЦСервер.УдалитьВРМ(Контекст.ВРМ);
	
КонецПроцедуры // УдалитьКонтекстВРМ()

// Создать параметры ответа ВРМ
//
// Параметры:
//  СсылкаВРМ - СправочникСсылка.ТЦВП
//
// Возвращаемое значение:
//  Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Результат - Произвольный
//
Функция ПараметрыОтветаВРМ(СсылкаВРМ) Экспорт
	
	ПараметрыОтвета= Новый Структура;
	ПараметрыОтвета.Вставить("ВРМ", СсылкаВРМ);
	ПараметрыОтвета.Вставить("Результат");
	ПараметрыОтвета.Вставить("РезультатВыполнения");
	
	Возврат ПараметрыОтвета;
	
КонецФункции // ПараметрыОтветаВРМ()

// Отправить локальное сообщение Агенту от ВРМ
//
// Параметры:
//  Контекст - Структура (см. СоздатьКонтекстВРМ())
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//  Параметры - Произвольный
//
Процедура ОтправитьАгенту(Контекст, Сообщение, Параметры = Неопределено) Экспорт
	
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(Контекст.Адрес, Сообщение, Параметры);
	ЛокальныйАдрес = ТЦКлиент.АдресЛокальногоПодключения();
	АдресАгента = ТЦКлиент.ЛокальныйАдресАгента(ЛокальныйАдрес);
	КипВнешнийКомпонент.ОтправитьСообщение(Контекст.Сообщения, АдресАгента, Пакет);
	
КонецПроцедуры // ОтправитьЛокальноеСообщениеАгенту()

// Получить наименование ВРМ
//
// Параметры:
//  НомерВРМ - Число, порядковый номер ВРМ
//
// Возвращаемое значение:
//  Строка - наименование ВРМ
//
Функция ПолучитьИмяВРМ(Пользователь, НомерВРМ = Неопределено) Экспорт
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ИмяПользователя = ТЦСервер.ИмяПользователяИБ(Пользователь);
	Номер = ?(НомерВРМ = Неопределено, "", "." + Формат(НомерВРМ, "ЧГ=0"));
	Возврат ИмяКомпьютера + "." + ИмяПользователя + Номер;
	
КонецФункции // ПолучитьИмяВРМ()

// Контекст
//
// Параметры:
//  
//
Функция ОбработатьСообщениеВРМ(Контекст, Данные) Экспорт
	
	ОбновитьВРМ = Ложь;
	ОтветноеСообщение = Неопределено;
	ПараметрыОтвета = ТЦКлиент.ПараметрыОтветаВРМ(Контекст.ВРМ);
	Пакет = ТЦСервер.РаспаковатьЛокальноеСообщение(Данные);
	Сообщение = Пакет.Сообщение;
	Отправитель = Пакет.Отправитель;
	ОбновитьВРМ = Ложь;
	
	Если Сообщение = Контекст.Перечисления.ТЦСообщение.ПроверкаАктивности Тогда
		ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ГотовКработе;
	ИначеЕсли Сообщение = Контекст.Перечисления.ТЦСообщение.Выполнить Тогда
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		КипВнешнийКомпонент.НачатьВыполнение(Инструменты);
		Состояние = Пакет.Параметры.Состояние;
		ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ВыполненоУспешно;
		
		Если Состояние = Контекст.Перечисления.ТЦСостояние.Подготовка Тогда
			Контекст.Номер = Пакет.Параметры.Параметры.НомерВРМ;
			ИмяВРМ = ТЦКлиент.ПолучитьИмяВРМ(Контекст.Пользователь, Контекст.Номер);
			ТЦСервер.ИзменитьИмяВРМ(ИмяВРМ, Контекст.Номер, Контекст.ВРМ);
			Контекст.Сценарий = Пакет.Параметры.Параметры.Сценарий;
			ЗагрузитьВРМ(Контекст);
			ОбновитьВРМ = Истина;
			ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Успешно;
		ИначеЕсли Состояние = Контекст.Перечисления.ТЦСостояние.Инициализация Тогда
			ОтветноеСообщение = ВыполнитьМетодОбработки(
				Контекст,
				"ТЦИнициализировать",
				ПараметрыОтвета,
				"Ошибка инициализации");
		ИначеЕсли Состояние = Контекст.Перечисления.ТЦСостояние.Выполнение Тогда
			ОтветноеСообщение = ВыполнитьМетодОбработки(
				Контекст,
				"ТЦВыполнить",
				ПараметрыОтвета,
				"Ошибка выполнения действия пользователя");
		ИначеЕсли Состояние = Контекст.Перечисления.ТЦСостояние.ЗаписьРезультатов Тогда
			ПараметрыОтвета.Результат = Контекст.ФормаОбработки.ТЦПолучитьРезультат();
			ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Успешно;
		ИначеЕсли Состояние = Контекст.Перечисления.ТЦСостояние.УдалениеДанных Тогда
			ОтветноеСообщение = ВыполнитьМетодОбработки(
				Контекст,
				"ТЦУдалитьДанные",
				ПараметрыОтвета,
				"Ошибка удаления данных");
		КонецЕсли;
		
		Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
			ОтветноеСообщение = Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
		КонецЕсли;
	ИначеЕсли Сообщение = Контекст.Перечисления.ТЦСообщение.ЗавершитьРаботу Тогда
		ТЦКлиент.УдалитьКонтекстВРМ(Контекст);
		ЗавершитьРаботуСистемы(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветноеСообщение) Тогда
		ТЦКлиент.ОтправитьАгенту(Контекст, ОтветноеСообщение, ПараметрыОтвета);
	КонецЕсли;
	
	Возврат ОбновитьВРМ;
	
КонецФункции // ОбработатьСообщениеВРМ()

// Выполнить метод внешней обработки
//
// Параметры:
//  Контекст - Структура, контекст выполнения
//  Метод - Строка, имя выполняемого метода
//
// Возвращаемое значение:
//  Перечисление.ТЦРезультатВыполнения
//
Функция ВыполнитьМетодОбработки(Контекст, Метод, ПараметрыОтвета, Ошибка)
	
	Попытка
		ПараметрыОтвета.РезультатВыполнения = Вычислить("Контекст.ФормаОбработки." + Метод + "()");
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "ВРМ");
		ПараметрыОтвета.Результат = Ошибка + ":" + Символы.ПС + ОписаниеОшибки();
		Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
	КонецПопытки;
	
	Если ПараметрыОтвета.РезультатВыполнения = Контекст.Перечисления.ТЦРезультатВыполнения.Ошибка Тогда
		ПараметрыОтвета.Результат = Ошибка;
		Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоСОшибкой;
	КонецЕсли;
	
	Возврат Контекст.Перечисления.ТЦСообщение.ВыполненоУспешно;
	
КонецФункции // ВыполнитьМетодОбработки()

// Загрузить ВРМ
//
Процедура ЗагрузитьВРМ(Контекст)
	
	Параметры = ТЦСервер.ПолучитьПараметрыЗагрузкиВРМ(Контекст.ВРМ);
	ИмяФормыОбработки = ТЦКлиент.ПолучитьИмяФормыОбработки(Параметры.Обработка);
	Контекст.ФормаОбработки = ПолучитьФорму(ИмяФормыОбработки);
	Контекст.ФормаОбработки.ТЦЗагрузить(Параметры.ПараметрыОбработки);
	
	ВРМ = Контекст.ФормаОбработки.ТЦКонтекст().ВРМ;
	ВРМ.Номер = Контекст.Номер;
	ВРМ.Сценарий = Контекст.Сценарий;
	ВРМ.Роль = Параметры.Роль;
	ВРМ.ИмяРоли = Параметры.ИмяРоли;
	ВРМ.Компьютер = Параметры.ИмяКомпьютера;
	ВРМ.Пользователь = Параметры.ИмяПользователя;
	
КонецПроцедуры // ЗагрузитьВРМ()

// Добавить результат теста
//
// Параметры:
//  Контекст - Структура, контекст тестирования отдельного ВРМ
//             (см. СоздатьКонтекстВыполненияОбработки())
//  Показатель - Строка, имя показателя
//  Значение - Число, новое значение показателя
//
Процедура ДобавитьРезультат(Контекст, Показатель, Значение) Экспорт
	
	Значения = Контекст.Результаты[Показатель];
	
	Если Значения = Неопределено Тогда
		Значения = Новый Массив;
		Контекст.Результаты[Показатель] = Значения;
	КонецЕсли;
	
	Значения.Добавить(Значение);
	
КонецПроцедуры // ДобавитьРезультат()
