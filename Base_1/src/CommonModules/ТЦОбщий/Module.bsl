///////////////////////////////////////////////////////////////////////////////
// ФОРМАТИРОВАНИЕ

// Разделить строку на составляющие по разделителю и поместить
// части строки в массив
//
// Параметры:
//  РазделяемаяСтрока - Строка, которую нужно разделить
//  Разделитель - Строка, символ разделяющий части строки
//  ПустыеСтроки - Булево, Истина - включать пустые строки в результат,
//                 Ложь - не включать пустые строки в результат
//
// Возвращаемое значение:
//  Массив - части строк
//
Функция РазделитьСтроку(ИсходнаяСтрока, Разделитель, ПустыеСтроки = Ложь) Экспорт
	
	Результат = Новый Массив;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	ТекущаяСтрока = "";
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ИсходнаяСтрока, Сч, 1);
		
		Если ТекущийСимвол = Разделитель Тогда
			
			ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
			
			Если Не ПустаяСтрока(ОбработаннаяСтрока) Или ПустыеСтроки Тогда
				Результат.Добавить(ОбработаннаяСтрока);
			КонецЕсли;
			
			ТекущаяСтрока = "";
			
		Иначе
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработаннаяСтрока = СокрЛП(ТекущаяСтрока);
	
	Если Не ПустаяСтрока(ОбработаннаяСтрока) Тогда
		Результат.Добавить(ОбработаннаяСтрока);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // РазделитьСтроку()

// Удалить ограничивающие строку кавычки
//
// Параметры:
//  ИсходнаяСтрока - Строка, для которой нужно удалить кавычки
//
// Возвращаемое значение:
//  Строка - строка без ограничивающих ее кавычек
//
Функция УдалитьКавычки(ИсходнаяСтрока) Экспорт
	
	Результат = СокрЛП(ИсходнаяСтрока);
	
	Если Лев(Результат, 1) <> """" Или Прав(Результат, 1) <> """" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Сред(Результат, 2, СтрДлина(Результат) - 2);
	
КонецФункции // УдалитьКавычки()

// Преобразовать массив в строку
//
// Параметры:
//  Массив - исходный массив
//
// Возвращаемое значение:
//  Строка элементов массива, перечисленные через запятую
//
Функция МассивВСтроку(Массив, Разделитель = ", ", ПередПервым = Ложь) Экспорт
	
	Результат = "";
	
	Для каждого Элемент Из Массив Цикл
		Если ПустаяСтрока(Результат) Тогда
			Если ПередПервым Тогда
				Результат = Разделитель;
			КонецЕсли;
		Иначе
			Результат = Результат + Разделитель;
		КонецЕсли;
		
		Результат = Результат + Элемент;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // МассивВСтроку()

// Получить структурированные параметры подключения к информационной базе
// на основе строки подключения к ней
//
// Параметры:
//  СтрокаПодключения - Строка, строка подключения к информационной базе
//
// Возвращаемое значение:
//  Структура - результат анализа строки подключения
//
Функция ПолучитьПараметрыПодключения(СтрокаПодключения) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	// Разделить строку подключения по точке с запятой ";"
	Фрагменты = РазделитьСтроку(СтрокаПодключения, ";");
	
	// Для каждой комбинации параметра и значения
	Для Каждого Фрагмент Из Фрагменты Цикл
		// Отделить имена параметров от их значений
		Параметры = РазделитьСтроку(Фрагмент, "=");
		
		// Сохранить параметры
		ИмяПараметра = Параметры[0];
		ЗначениеПараметра = ?(Параметры.Количество() > 1, Параметры[1], "");
		
		// Разобрать имя сервера
		Если ВРег(Лев(ИмяПараметра, 4)) = "SRVR" Тогда
			КомпонентыИмениСервера = РазделитьСтроку(УдалитьКавычки(ЗначениеПараметра), ":");
			СтруктураПараметров.Вставить("ИмяСервера", КомпонентыИмениСервера[0]);
			Если КомпонентыИмениСервера.Количество() > 1 Тогда
				ПортКластера = Число(КомпонентыИмениСервера[1]);
			Иначе
				ПортКластера = 1541;
			КонецЕсли;
			СтруктураПараметров.Вставить("ПортКластера", ПортКластера);
		КонецЕсли;
		
		СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыПодключения()

// Получить имя файла из имени пути
//
// Параметры:
//  Путь - Строка, полный путь
//
// Возвращаемое значение:
//  Строка - имя каталога
//
Функция ИмяФайла(Путь) Экспорт
	
	Длина = СтрДлина(Путь);
	Позиция = Длина;
	
	Пока Позиция > 0 Цикл
		
		ТекущийСимвол = Сред(Путь, Позиция, 1);
		
		Если ТекущийСимвол = "/" Или ТекущийСимвол = "\" Тогда
			Возврат Прав(Путь, Длина - Позиция);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции // ИмяФайла()

// Получить имя каталога из имени пути
//
// Параметры:
//  Путь - Строка, полный путь
//
// Возвращаемое значение:
//  Строка - имя каталога
//
Функция ИмяКаталога(Путь) Экспорт
	
	Позиция = СтрДлина(Путь);
	
	Пока Позиция > 0 Цикл
		
		ТекущийСимвол = Сред(Путь, Позиция, 1);
		
		Если ТекущийСимвол = "/" Или ТекущийСимвол = "\" Тогда
			Возврат Лев(Путь, Позиция - 1);
		КонецЕсли;
		
		Позиция = Позиция - 1;
		
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции // ИмяКаталога()

// Получить символ разделителя пути к объекту файловой системы
//
// Параметры:
//  Путь - Строка, путь, содержащий разделитель. Если разделителя нет, то "\"
//
// Возвращаемое значение:
//  Строка - символ разделения элементов пути
//
Функция ОпределитьРазделительПути(Путь) Экспорт
	
	Разделитель = "\";
	
	Если Найти(Путь, "/") <> 0 Тогда
		Разделитель = "/";
	КонецЕсли;
	
	Возврат Разделитель;
	
КонецФункции // ОпределитьРазделительПути()

// Проверить путь на наличие завершающего слеша и если он есть, удалить его
//
// Параметры:
//  Путь - Строка, путь
//
// Возвращаемое значение:
//  Путь - Строка, обработанный путь
//
Функция СкорректироватьПуть(Путь) Экспорт
	
	Перем Разделитель;
	
	ДлинаПути = СтрДлина(Путь);
	
	Если ДлинаПути = 0 Тогда
		Возврат Путь;
	КонецЕсли;
	
	Если Найти(Путь, "/") <> 0 Тогда
		Разделитель = "/";
	ИначеЕсли Найти(Путь, "\") <> 0 Тогда
		Разделитель = "\";
	Иначе
		Возврат Путь;
	КонецЕсли;
	
	Пока ДлинаПути > 0 И Прав(Путь, 1) = Разделитель Цикл
		Путь = Лев(Путь, ДлинаПути - 1);
		ДлинаПути = СтрДлина(Путь);
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции // СкорректироватьПуть()

// Добавить параметр к строке адреса в формате URL
//
// Параметры:
//  Адрес - Строка, в формате URL, уже содержащая "?"
//  Параметр - Строка, имя параметра
//  Значение - Строка, значение параметра
//
// Возвращаемое значение:
//  Строка - адрес, к которому добавлен указанный параметр
//
Функция ДобавитьПараметрURL(Знач Адрес, Параметр, Значение = Неопределено) Экспорт
	
	ЕстьВопрос = Прав(Адрес, 1) = "?";
	ПервыйПараметр = ЕстьВопрос Или Найти(Адрес, "?") = 0;
	
	Если ЕстьВопрос Тогда
		Адрес = Лев(Адрес, СтрДлина(Адрес) - 1);
	КонецЕсли;
	
	Результат = Адрес + ?(ПервыйПараметр, "?", "&") + Параметр;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Результат = Результат + "=""" + ЭкранироватьСтрокуURL(Значение) + """";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДобавитьПараметрURL()

// Добавить параметр командной строки
//
// Параметры:
//  Команда - Строка, команда, к которой добавляется параметр
//  Параметр - Строка, имя параметра
//  Значение - Строка, значение параметра
//
// Возвращаемое значение:
//  Строка - Команда, содержащая указанный параметр
//
Функция ДобавитьПараметрКоманднойСтроки(Команда, Параметр = Неопределено, Значение = Неопределено) Экспорт
	
	Результат = Команда;
	
	Если ЗначениеЗаполнено(Параметр) Тогда
		Результат = Результат + " /" + Параметр;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Результат = Результат + " " + ЭкранироватьСтроку(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДобавитьПараметрКоманднойСтроки()

// Добавить параметр к строке запуска клиента
//
// Параметры:
//  ТипКлиента - ПеречислениеСсылка.ТЦТипКлиента
//  Команда - Строка, команда, к которой добавляется параметр
//  Параметр - Строка, имя параметра
//  Значение - Строка, значение параметра
//
// Возвращаемое значение:
//  Строка - Команда, содержащая указанный параметр
//
Функция ДобавитьПараметрКлиента(ТипКлиента, Команда, Параметр, Значение = Неопределено) Экспорт
	
	ВебКлиент = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Веб");
	
	Если ТипКлиента = ВебКлиент Тогда
		Возврат ДобавитьПараметрURL(Команда, Параметр, Значение);
	Иначе
		Возврат ДобавитьПараметрКоманднойСтроки(Команда, Параметр, Значение);
	КонецЕсли;
	
КонецФункции // ДобавитьПараметр()

// Окружить строку кавычками, если она содержит пробелы
//
// Параметры:
//  Текст - Строка, исходная строка
//
// Возвращаемое значение:
//  Строка
//
Функция ЭкранироватьСтроку(Текст) Экспорт
	
	Если Найти(Текст, " ") <> 0 Или Найти(Текст, Символы.НПП) <> 0 Тогда
		Возврат """" + Текст + """";
	Иначе
		Возврат Текст;
	КонецЕсли;
	
КонецФункции // ЭкранироватьСтроку()

// Заменить спецсимволы в строке, для возможности использования в URL
//
// Параметры:
//  Текст - Строка, исходная строка
//
// Возвращаемое значение:
//  Строка
//
Функция ЭкранироватьСтрокуURL(Текст) Экспорт
	
	Возврат СтрЗаменить(Текст, " ", "%20");
	
КонецФункции // ЭкранироватьСтрокуURL()

// Заменить спецсимволы в строке, для возможности использования в Linux
//
// Параметры:
//  Текст - Строка, исходная строка
//
// Возвращаемое значение:
//  Строка
//
Функция ЭкранироватьСтрокуLinux(Текст) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоLinux = СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86
	     Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
	Если ЭтоLinux Тогда
		Результат = СтрЗаменить(Текст, """", "\""");
		Результат = СтрЗаменить(Результат, ";", "\;");
		Результат = СтрЗаменить(Результат, "&", "\&");
		Возврат Результат;
	Иначе
		Возврат Текст;
	КонецЕсли;
	
КонецФункции // ЭкранироватьСтрокуLinux()

// Записать сообщение
//
// Параметры:
//  
//
Процедура ЗаписатьВЖурнал(Сообщение,
                          Событие = Неопределено,
                          Важность = Неопределено) Экспорт
	
	ЭтоОшибка = ТипЗнч(Сообщение) = Тип("ИнформацияОбОшибке")
	        Или ТипЗнч(Сообщение) = Тип("Структура");
	
	Если ЭтоОшибка Тогда
		ТекстОшибки = ТЦОбщий.ИнформациюОбОшибкеВСтроку(Сообщение);
	Иначе
		ТекстОшибки = Сообщение;
	КонецЕсли;
	
	ТЦСервер.ЗаписатьВЖурнал(
		ТекстОшибки,
		Событие,
		Важность,
		ЭтоОшибка);
	
КонецПроцедуры // ЗаписатьВЖурнал()

// Преобразовать объект типа ИнформацияОбОшибке в строку
//
// Параметры:
//  Ошибка - ИнформацияОбОшибке
//
// Возвращаемое значение:
//  Строка - Строковое предстваление ошибки
//
Функция ИнформациюОбОшибкеВСтроку(Ошибка, НомерПричины = 0) Экспорт
	
	ТекстОшибки = "";
	
	Если Не ПустаяСтрока(Ошибка.ИмяМодуля) Тогда
		ТекстОшибки = ТекстОшибки + "{"
			+ Ошибка.ИмяМодуля + "("
			+ Ошибка.НомерСтроки + ")}: ";
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибки
		+ Ошибка.Описание + "
		|" + Ошибка.ИсходнаяСтрока;
	
	Если Ошибка.Причина <> Неопределено Тогда
		ТекстОшибки = ТекстОшибки + "
			|
			|ПРИЧИНА №" + Формат(НомерПричины + 1, "ЧГ=0") + "
			|" + ИнформациюОбОшибкеВСтроку(Ошибка.Причина, НомерПричины + 1);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ИнформациюОбОшибкеВСтроку()

// Преобразовать ИнформацияОбОшибке в Структуру для возможности сохранения
//
// Параметры:
//  Ошибка - ИнформацияОбОшибке
//
// Возвращаемое значение:
//  Структура - полностью соответствует структуре ИнформацияОбОшибке
//
Функция ИнформациюОбОшибкеВСтруктуру(Ошибка) Экспорт
	
	СтруктураОшибки = Новый Структура;
	СтруктураОшибки.Вставить("ИмяМодуля", Ошибка.ИмяМодуля);
	СтруктураОшибки.Вставить("ИсходнаяСтрока", Ошибка.ИсходнаяСтрока);
	СтруктураОшибки.Вставить("НомерСтроки", Ошибка.НомерСтроки);
	СтруктураОшибки.Вставить("Описание", Ошибка.Описание);
	СтруктураОшибки.Вставить("Причина",
		?(Ошибка.Причина <> Неопределено,
			ИнформациюОбОшибкеВСтруктуру(Ошибка.Причина),
			Неопределено));
	Возврат СтруктураОшибки;
	
КонецФункции // ИнформациюОбОшибкеВСтруктуру()

// Получить имя клонированного пользователя
//
// Параметры:
//  ИмяОригинала - Строка, имя оригинальной учетной записи
//  Номер - Число, порядковый номер клона
//
// Возвращаемое значение:
//  Строка - имя клонированного пользователя
//
Функция ИмяКлона(ИмяОригинала, Номер) Экспорт
	
	Возврат ИмяОригинала + "_ТЦ_" + Формат(Номер, "ЧЦ=9; ЧВН=; ЧГ=0");
	
КонецФункции // ИмяКлона()

// Получить имя оригинального пользователя
//
// Параметры:
//  ИмяКлона - Строка, имя клонированной учетной записи
//
// Возвращаемое значение:
//  Строка - имя оригинального пользователя
//
Функция ИмяОригинала(ИмяКлона) Экспорт
	
	ПозицияСуффикса = Найти(ИмяКлона, "_ТЦ_");
		
	Если ПозицияСуффикса > 0 Тогда
		Возврат Лев(ИмяКлона, ПозицияСуффикса - 1);
	Иначе
		Возврат ИмяКлона;
	КонецЕсли;
	
КонецФункции // ИмяКлона()

// Функция возвращает имя подсистемы управления доступом БСП
//
// Возвращаемое значение:
//  Строка - имя подсистемы управления доступом
//
Функция БСПИмяПодсистемыУправленияДоступом() Экспорт
	
	Возврат "УправлениеДоступом";
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// МАТЕМАТИКА

// Округлить число вверх, т.е. 1.1 до 2.0
//
// Параметры:
//  Значение - Число, округляемое значение
//
// Возвращаемое значение:
//  Число - округленное число
//
Функция ОкрВверх(Значение) Экспорт
	
	Целое = Цел(Значение);
	Возврат Целое + ?(Значение - Целое > 0, 1, 0);
	
КонецФункции // ОкрВверх()
