
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	
	
	Если Параметры.Ключ.Пустая() Тогда 
		ЕстьПравоРедактирования = Истина;
		ПодготовитьФормуНаСервере();
	Иначе 
		
		// Установим доступность
		// ... формы в целом 
		ЕстьПравоРедактирования   = ПравоДоступа("Изменение", Метаданные.Справочники.Организации);
		ЭтотОбъект.ТолькоПросмотр = Не ЕстьПравоРедактирования;
		
		// ... поля картинки и кнопок его панели
		ЕстьПравоРедактированияКартинки = ПравоДоступа("Редактирование", Метаданные.Справочники.Организации.Реквизиты.ФайлЛоготипа);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "АдресЛоготипа",
		"Доступность", ЕстьПравоРедактированияКартинки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодготовитьФормуНаСервере();
	
	Если Не Объект.ФайлЛоготипа.Пустая() Тогда
		АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготипа, УникальныйИдентификатор)
	Иначе
		АдресЛоготипа = "";
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Справочники.Организации.ЗаписатьКонтрагентаОрганизации(ТекущийОбъект.Ссылка, КонтрагентОрганизации, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
	ПрочитатьОсновнойБанковскийСчет();
	ПрочитатьОсновнуюКассу();
	
	ОбновитьОтборыДинамическихСписков(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	ПараметрыЗаписиОрганизации = Новый Структура();
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") Тогда
		ПараметрыЗаписиОрганизации.Вставить("ЭтоНовый", ПараметрыЗаписи.ЭтоНовый);
	КонецЕсли;
	ОповеститьВФорме("Запись_Организации", ПараметрыЗаписиОрганизации, Объект.Ссылка);
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" Тогда 
		Если Источник = Объект.ОсновнойВидДеятельности Тогда
			ОбновитьПредставлениеВидаДеятельности();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.ФайлЛоготипа = СсылкаНаФайл;
			АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготипа, УникальныйИдентификатор);
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);
				
				ОповеститьВФорме("УстановкаОсновногоБанковскогоСчетаВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать(); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновнойКассы"
		ИЛИ ИмяСобытия = "УстановкаОсновнойКассыПриЗаписи" Тогда
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнуюКассу(Параметр.ОсновнаяКасса);
				
				ОповеститьВФорме("УстановкаОсновнойКассыВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать(); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ОрганизацияИзменилась_БанковскийСчет" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.ОсновнойБанковскийСчет = Параметр.БанковскийСчет Тогда
				
				Объект.ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ОрганизацияИзменилась_Касса" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.ОсновнаяКасса = Параметр.Касса Тогда
				
				Объект.ОсновнаяКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
				
				УправлениеФормой(ЭтотОбъект);
				
				Записать();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр)Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ОрганизацииПрисоединенныеФайлы") Тогда
		ВыбратьЛоготипИзПрисоединенныхФайловЗавершение(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства 
	
	Если Объект.УчетПоМестнымБюджетам И НЕ ЗначениеЗаполнено(Объект.МестныйБюджет) Тогда
		ОбщегоНазначения.СообщитьПользователю(Нстр("ru = 'Не заполнен аппарат акима для форм налоговой отчетности'"),,"Объект.МестныйБюджет",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	ИндивидуальныйПредпринимательПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификационныйНомерПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "БИН");
КонецПроцедуры

&НаКлиенте
Процедура РННПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "РНН");
КонецПроцедуры

&НаКлиенте
Процедура КБЕПриИзменении(Элемент)
	ПроверитьРегламентированныеДанные(ЭтотОбъект, "КБЕ");
КонецПроцедуры

&НаКлиенте
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьРеквизитыГоловнойОрганизацииВСчетеФактуреПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидДеятельностиПриИзменении(Элемент)
	
	ОбновитьПредставлениеВидаДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для продолжения элемент необходимо записать. 
		|Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтрагентаПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе 
		СоздатьКонтрагентаЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлЛоготипа = ПредопределенноеЗначение("Справочник.ОрганизацииПрисоединенныеФайлы.ПустаяСсылка");
	АдресЛоготипа = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготипа) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлЛоготипа);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутстует изображение для редактирования'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЛоготипИзПрисоединенныхФайлов(Команда)
	
	ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтаФорма);
	
	//ПараметрыВыбора = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе", Объект.Ссылка, Истина);
	//ОткрытьФорму("ОбщаяФорма.ВыборПрисоединенныхФайлов", ПараметрыВыбора,,,,, Новый ОписаниеОповещения("ВыбратьЛоготипИзПрисоединенныхФайловЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
     ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
     ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
 
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
     ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
     ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// Управление формой

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	КонтрагентОрганизации = Справочники.Организации.КонтрагентСоответствующийОрганизации(Объект.Ссылка);
	
	ОбновитьОтборыДинамическихСписков(ЭтотОбъект);
	
	ПроверитьРегламентированныеДанные(ЭтотОбъект);
	
	ОбновитьПредставлениеВидаДеятельности();
	
	ВидимостьБанковскогоСчета = ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета);
	Элементы.ОсновнойБанковскийСчет.Видимость = ВидимостьБанковскогоСчета;
	
	ВидимостьКассы = ПравоДоступа("Просмотр", Метаданные.Справочники.Кассы);
	Элементы.ОсновнаяКасса.Видимость = ВидимостьКассы;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо = Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	Элементы.ИндивидуальныйПредприниматель.Видимость      = НЕ ЭтоЮрЛицо;
	Элементы.ГруппаИностраннаяОрганизацияОтступ.Видимость = ЭтоЮрЛицо;
	Элементы.ГруппаИностраннаяОрганизация.Видимость       = ЭтоЮрЛицо И Объект.ИностраннаяОрганизация;
	Элементы.РНН.Доступность 							  = ЭтоЮрЛицо;
	Элементы.ИдентификационныйНомер.Доступность 		  = ЭтоЮрЛицо;
	
	Элементы.МестныйБюджет.Видимость = Объект.УчетПоМестнымБюджетам;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтборыДинамическихСписков(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.БанковскиеСчета, 
	"Владелец", 
	Форма.Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	НСтр("ru = 'Отбор по владельцу'"),
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Кассы, 
	"Владелец", 
	Форма.Объект.Ссылка, 
	ВидСравненияКомпоновкиДанных.Равно,
	НСтр("ru = 'Отбор по владельцу'"),
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьРегламентированныеДанные(Форма, ПроверяемыеДанные = "БИН, РНН, КБЕ")
	
	МассивПроверяемыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПроверяемыеДанные, ",", , Истина);
	Для Каждого Элемент Из МассивПроверяемыхДанных Цикл
		ИмяЭлементаНадписи = "НадписьПоясненияНекорректного" + Элемент;
		ТекстСообщения     = "";
		Если Форма.Элементы.Найти(ИмяЭлементаНадписи) <> Неопределено Тогда 
			Если Элемент = "БИН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.ИдентификационныйНомер) 
					ИЛИ РегламентированныеДанныеКлиентСервер.ИИНБИНСоответствуетТребованиям(Форма.Объект.ИдентификационныйНомер, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			ИначеЕсли Элемент = "РНН" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.РНН) 
					ИЛИ РегламентированныеДанныеКлиентСервер.РННСоответствуетТребованиям(Форма.Объект.РНН, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			ИначеЕсли Элемент = "КБЕ" Тогда 
				Если НЕ ЗначениеЗаполнено(Форма.Объект.КБЕ) 
					ИЛИ РегламентированныеДанныеКлиентСервер.КБеСоответствуетТребованиям(Форма.Объект.КБЕ, ТекстСообщения) Тогда 
					ТекстСообщения = "";
				КонецЕсли;
			КонецЕсли;
			Форма[ИмяЭлементаНадписи] = ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При изменении реквизитов (служебные)

&НаСервере
Процедура ИндивидуальныйПредпринимательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ИндивидуальныйПредприниматель, "ИдентификационныйКодЛичности, РНН");
		Объект.ИдентификационныйНомер = ЗначенияРеквизитов.ИдентификационныйКодЛичности;
		Объект.РНН = ЗначенияРеквизитов.РНН;
	Иначе 
		Объект.ИдентификационныйНомер = "";
		Объект.РНН = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВидаДеятельности()
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойВидДеятельности) Тогда
		КодОКЭД = НСтр("ru = '<укажите вид деятельности>'");
		НаименованиеОКЭД = НСтр("ru = '<укажите вид деятельности>'");
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОсновнойВидДеятельности, "КодОКЭД, ПолноеНаименование");
		
		КодОКЭД = ?(НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.КодОКЭД), НСтр("ru = '<не указан код ОКЭД для вида деятельности>'"),ЗначенияРеквизитов.КодОКЭД);
		НаименованиеОКЭД = ?(НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ПолноеНаименование), НСтр("ru = '<не указано полное наименование вида деятельности>'"),ЗначенияРеквизитов.ПолноеНаименование);
	КонецЕсли;	
КонецПроцедуры

// Обработка завершения интерактивных действий пользователя

&НаКлиенте
Процедура СоздатьКонтрагентаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.Записать() Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКонтрагентаЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаЗавершение()
	
	Если ЗначениеЗаполнено(КонтрагентОрганизации) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Контрагент уже выбран'"),
		,
		"КонтрагентОрганизации",
		,
		);
		Возврат;
	КонецЕсли;
	
	МассивКонтрагентов = НайтиКонтрагентовПоНаименованиюБИНилиРНН(Объект.Наименование, Объект.ИдентификационныйНомер, Объект.РНН);
	Если МассивКонтрагентов.Количество() <> 0 Тогда 
		СписокКонтрагентов = Новый СписокЗначений;
		СписокКонтрагентов.ЗагрузитьЗначения(МассивКонтрагентов);
		СписокКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), НСтр("ru = 'Создать нового контрагента'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКонтрагентаОбработкаВыбораЗначения", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокКонтрагентов);
	Иначе 
		ДанныеОбъекта = Новый Структура("Ссылка, ОсновнойБанковскийСчет", Объект.Ссылка, Объект.ОсновнойБанковскийСчет);
		КонтрагентОрганизации = СоздатьКонтрагентаНаСервере(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), ДанныеОбъекта);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаОбработкаВыбораЗначения(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйЭлемент.Значение) Тогда 
		ДанныеОбъекта = Новый Структура("Ссылка, ОсновнойБанковскийСчет", Объект.Ссылка, Объект.ОсновнойБанковскийСчет);
		КонтрагентОрганизации = СоздатьКонтрагентаНаСервере(ВыбранныйЭлемент.Значение, ДанныеОбъекта);
	Иначе 
		КонтрагентОрганизации = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Служебные процедуры и функции

&НаСервереБезКонтекста
Функция СоздатьКонтрагентаНаСервере(ВыбранныйКонтрагент, Объект)
	
	НачатьТранзакцию();
	
	НовыйКонтрагент = ВыбранныйКонтрагент;
	Если НЕ ЗначениеЗаполнено(НовыйКонтрагент) Тогда
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.Заполнить(Объект.Ссылка);
		
		НоваяСсылкаКонтрагента = Справочники.Контрагенты.ПолучитьСсылку();
		НовыйКонтрагент.УстановитьСсылкуНового(НоваяСсылкаКонтрагента);
		
	КонецЕсли;
	
	ДоговорСсылкаНового = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку();
	БанковскийСчетСсылкаНового = Справочники.БанковскиеСчета.ПолучитьСсылку();
	
	НовыйКонтрагент.ОсновнойДоговорКонтрагента = ДоговорСсылкаНового;
	НовыйКонтрагент.ОсновнойБанковскийСчет = БанковскийСчетСсылкаНового;
	
	НовыйКонтрагент.Записать();
	
	СоздатьОсновнойДоговор(НовыйКонтрагент.Ссылка, Объект.Ссылка, ДоговорСсылкаНового);
	СоздатьОсновнойБанковскийСчет(НовыйКонтрагент.Ссылка, Объект, БанковскийСчетСсылкаНового);
	
	ЗафиксироватьТранзакцию();
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОсновнойДоговор(КонтрагентДоговора, Организация, СсылкаНового)
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.Наименование          = "Основной (" + СокрЛП(Организация) + ", " + СокрЛП(Константы.ВалютаРегламентированногоУчета.Получить()) + ")";
	НовыйДоговор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
	
	НовыйДоговор.ВалютаВзаиморасчетов = ОбщегоНазначенияБКВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	НовыйДоговор.Организация = Организация;
	
	НовыйДоговор.Владелец    = КонтрагентДоговора;
	НовыйДоговор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	НовыйДоговор.УстановитьСсылкуНового(СсылкаНового);
	
	СсылкаНовогоДоговора = Неопределено;
	Попытка
		НовыйДоговор.Записать();
		СсылкаНовогоДоговора = НовыйДоговор.Ссылка;
	Исключение
	КонецПопытки;
	
	Возврат СсылкаНовогоДоговора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьОсновнойБанковскийСчет(КонтрагентБанковскогоСчета, Объект, СсылкаНового)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйБанковскийСчет = Объект.ОсновнойБанковскийСчет.Скопировать();
	
	НовыйБанковскийСчет.Владелец = КонтрагентБанковскогоСчета;
	
	НовыйБанковскийСчет.УстановитьСсылкуНового(СсылкаНового);
	
	НовыйБанковскийСчет.Записать();
	
	Возврат НовыйБанковскийСчет.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиКонтрагентовПоНаименованиюБИНилиРНН(Наименование, БИН, РНН)
	
	Возврат Справочники.Контрагенты.НайтиКонтрагентовПоНаименованиюБИНилиРНН(Наименование, БИН, РНН);
	
КонецФункции

// Присоединенные файлы

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе 
		Возврат
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
	
	ВыборИзображения = Истина;
	ИдентификаторФайла = Новый УникальныйИдентификатор;
	
	ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);
	ВыборИзображения = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПослеОтветаНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе 
		Возврат
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготипа) Тогда
		
		ПросмотретьПрисоединенныйФайл();
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ЕстьПравоРедактирования Тогда
			
			ТекстИсключения = НСтр("ru = 'Нарушение прав доступа!'");
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ВыборИзображения = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		+ "|Все файлы(*.*)|*.*"
		+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		+ "|Формат GIF(*.gif*)|*.gif"
		+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		+ "|Формат PNG(*.png*)|*.png"
		+ "|Формат TIFF(*.tif)|*.tif"
		+ "|Формат icon(*.ico)|*.ico"
		+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, Фильтр);
		ВыборИзображения = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл()
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлЛоготипа) Тогда
		
		ДанныеФайла = ПрисоединенныеФайлыКлиент.ПолучитьДанныеФайла(ЭтаФорма.Объект.ФайлЛоготипа, УникальныйИдентификатор);
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Отсутстует изображение для просмотра'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "АдресЛоготипа");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьЛоготипИзПрисоединенныхФайловЗавершение(ПрисоединенныйФайл) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		
		Объект.ФайлЛоготипа = ПрисоединенныйФайл;
		АдресЛоготипа = НавигационнаяСсылкаКартинки(Объект.ФайлЛоготипа, УникальныйИдентификатор)
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства 

&НаКлиенте
Процедура УчетПоМестнымБюджетамПриИзменении(Элемент)
	
	Если НЕ Объект.УчетПоМестнымБюджетам Тогда
		Объект.МестныйБюджет = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьВФорме(ИмяСобытия, Параметр = Неопределено, Источник = Неопределено) 
	
	// +++ Проверка заполненности реквизитов организации (банковский счет)
	РассылкаОповещенияИзТекущейФормы = Истина;
	Оповестить(ИмяСобытия, Параметр, Источник);
	РассылкаОповещенияИзТекущейФормы = Ложь;
	// --- Проверка заполненности реквизитов организации (банковский счет)
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
	
	// Если основным назначен другой банковский счет, то разблокируем предыдущий основной
	Если Объект.ОсновнойБанковскийСчет <> ОсновнойБанковскийСчет
		И БанковскийСчетЗаблокирован Тогда
		
		РазблокироватьРеквизитПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
		БанковскийСчетЗаблокирован = Ложь;
		
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюКассу(ОсновнаяКасса)
	
	Прочитать();
	
	// Если основным назначена другая касса, то разблокируем предыдущую основную
	Если Объект.ОсновнаяКасса <> ОсновнаяКасса
		И КассаЗаблокирована Тогда
		
		РазблокироватьРеквизитПриРедактированииНаСервере(Объект.ОсновнаяКасса, УникальныйИдентификатор);
		КассаРазблокирована = Ложь;
		
	КонецЕсли;
	
	Объект.ОсновнаяКасса = ОсновнаяКасса;
	
	ПрочитатьОсновнуюКассу();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазблокироватьРеквизитПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнуюКассу()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.Кассы) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнаяКасса) Тогда
		ОсновнаяКассаОбъект = Объект.ОсновнаяКасса.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.Кассы) Тогда
		ОсновнаяКассаОбъект = Справочники.Кассы.СоздатьЭлемент();
	Иначе
		ОсновнаяКассаОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры