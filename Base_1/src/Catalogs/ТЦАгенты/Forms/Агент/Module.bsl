&НаКлиенте
Перем мТаймаутПодключения;     // Время отведенное на подключение Агента
&НаКлиенте
Перем мНачалоПодключения;      // Время начала подключения
&НаКлиенте
Перем мАктивныйАгент;          // Ссылка на Агент, активность которого проверяется
&НаКлиенте
Перем мСсылка;                 // Ссылка на Агента
&НаКлиенте
Перем мЗапускОтменен;          // Состояние запуска
&НаКлиенте
Перем мАдресАгента;            // Адрес Агента для локальных сообщений
&НаКлиенте
Перем мЛокальныеСообщения;     // Очередь локальных сообщений
&НаКлиенте
Перем мНачалоОперации;         // Время начала текущей операции
&НаКлиенте
Перем мДлительностьВыполнения; // Длительность выполнения сценария
&НаКлиенте
Перем мТаймаутОбработкиВРМ;    // Максимальное время выполнения операции
&НаКлиенте
Перем мПараметрыОперации;      // Данные текущей операции
&НаКлиенте
Перем мСостояние;              // Текущее состояние тестирования
&НаКлиенте
Перем мСостояниеЗадания;       // Текущее состояние задания
&НаКлиенте
Перем мИмяСостояния;           // Текущее состояние тестирования в виде строки
&НаКлиенте
Перем мОперацияВРМ;            // Текущее состояние тестирования в виде строки
&НаКлиенте
Перем мСостоянияВРМ;           // Список ВРМ, которые ответили, что активны
&НаКлиенте
Перем мТест;
&НаКлиенте
Перем мСценарий;
// DEL: &НаКлиенте
// DEL: Перем мПервыеНомераВРМ;
&НаКлиенте
Перем мНомераВРМ;
&НаКлиенте
Перем мВРМСценария;
&НаКлиенте
Перем мЗапущенныеВРМ;
&НаКлиенте
Перем мКонтекстПользователей;
&НаКлиенте
Перем кСтруктураВыполнения;
&НаКлиенте
Перем кПроверкаАктивности;
&НаКлиенте
Перем кПодготовка;
&НаКлиенте
Перем кИнициализация;
&НаКлиенте
Перем кВыполнение;
&НаКлиенте
Перем кЗаписьРезультатов;
&НаКлиенте
Перем кУдалениеДанных;
&НаКлиенте
Перем кЗапуститьВРМ;
&НаКлиенте
Перем кВРМЗапущены;
&НаКлиенте
Перем кГотовКработе;
&НаКлиенте
Перем кЗавершитьРаботу;
&НаКлиенте
Перем кОжидениеОтветаВРМ;
&НаКлиенте
Перем кОтключениеНерабочихВРМ;
&НаКлиенте
Перем кВыполнить;
&НаКлиенте
Перем кОтменить;
&НаКлиенте
Перем кВыполненоУспешно;
&НаКлиенте
Перем кВыполненоСОшибкой;
&НаКлиенте
Перем кВключен;
&НаКлиенте
Перем мПредыдущаяФорма;
&НаКлиенте
Перем мПредыдущаяФормаОткрыта;


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
// Обработчик открытия формы агента Тест-центра
//
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ИмяЗапуститьВРМ = "Перечисление.ТЦСообщение.ЗапуститьВРМ";
		кЗапуститьВРМ = ПредопределенноеЗначение(ИмяЗапуститьВРМ);
		ИмяВРМЗапущены = "Перечисление.ТЦСообщение.ВРМЗапущены";
		кВРМЗапущены = ПредопределенноеЗначение(ИмяВРМЗапущены);
		ИмяПроверкаАктивности = "Перечисление.ТЦСообщение.ПроверкаАктивности";
		кПроверкаАктивности = ПредопределенноеЗначение(ИмяПроверкаАктивности);
		ИмяГотовКработе = "Перечисление.ТЦСообщение.ГотовКработе";
		кГотовКработе = ПредопределенноеЗначение(ИмяГотовКработе);
		ИмяЗавершитьРаботу = "Перечисление.ТЦСообщение.ЗавершитьРаботу";
		кЗавершитьРаботу = ПредопределенноеЗначение(ИмяЗавершитьРаботу);
		
		ИмяВыполнить = "Перечисление.ТЦСообщение.Выполнить";
		кВыполнить = ПредопределенноеЗначение(ИмяВыполнить);
		ИмяОтменить = "Перечисление.ТЦСообщение.Отменить";
		кОтменить = ПредопределенноеЗначение(ИмяОтменить);
		ИмяВыполненоУспешно = "Перечисление.ТЦСообщение.ВыполненоУспешно";
		кВыполненоУспешно = ПредопределенноеЗначение(ИмяВыполненоУспешно);
		ИмяВыполненоСОшибкой = "Перечисление.ТЦСообщение.ВыполненоСОшибкой";
		кВыполненоСОшибкой = ПредопределенноеЗначение(ИмяВыполненоСОшибкой);
		
		ИмяПодготовка = "Перечисление.ТЦСостояние.Подготовка";
		кПодготовка = ПредопределенноеЗначение(ИмяПодготовка);
		ИмяИнициализация = "Перечисление.ТЦСостояние.Инициализация";
		кИнициализация = ПредопределенноеЗначение(ИмяИнициализация);
		ИмяВыполнение = "Перечисление.ТЦСостояние.Выполнение";
		кВыполнение = ПредопределенноеЗначение(ИмяВыполнение);
		ИмяЗаписьРезультатов = "Перечисление.ТЦСостояние.ЗаписьРезультатов";
		кЗаписьРезультатов = ПредопределенноеЗначение(ИмяЗаписьРезультатов);
		ИмяУдалениеДанных = "Перечисление.ТЦСостояние.УдалениеДанных";
		кУдалениеДанных = ПредопределенноеЗначение(ИмяУдалениеДанных);
		мПредыдущаяФорма = Параметры.ПредыдущаяФорма;
		мПредыдущаяФормаОткрыта = Ложь;
		
		кОжидениеОтветаВРМ = 1;
		
		Начало = ТекущаяДата();
		кВключен = Ложь;
		ВключитьРежимАгента();
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка, "Агент");
		ТЦКлиент.СообщитьОбОшибке(Ошибка, Начало, ТекущаяДата());
		ЗакрытьФормуАгента();
	КонецПопытки;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Закрыть форму Агента
//
// Параметры:
//  Команда - необязательный
//
Процедура ЗакрытьФормуАгента(Команда = Неопределено)
	
	Если ЗакрыватьАгента() Тогда
		мПредыдущаяФормаОткрыта = Истина;
		ОткрытьФорму(мПредыдущаяФорма,,,, ТЦКлиент.ОсновноеОкно());
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьФормуАгента()

&НаКлиенте
// Проверить необходимость закрытия формы Агента
//
// Возвращаемое значение:
//  Булево - Истина, закрывать агента, ложь - не закрывать.
//
Функция ЗакрыватьАгента()
	
	Если кВключен Тогда
		Текст = "Выполнение этой команды приведет к отключению режима Агента," +
				" завершению работы ВРМ Агента и завершению тестирования, в котором участвует Агент.
				|
				|Продолжить?";
		
		РезультатВопроса = Вопрос(
			Текст,
			РежимДиалогаВопрос.ДаНет,,
			КодВозвратаДиалога.Нет,
			"Тест-центр");
			
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			Попытка
				ЗакрытьАгента();
			Исключение
				ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
			КонецПопытки;
			
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЗакрыватьАгента()

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Не мПредыдущаяФормаОткрыта Тогда
		Попытка
			ОсновноеОкно = ТЦКлиент.ОсновноеОкно();
			ОткрытьФорму(мПредыдущаяФорма,,,, ОсновноеОкно);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Обработчик перед закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если кВключен Тогда
		Отказ = Не ЗакрыватьАгента();
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработка сообщений, адресуемых Агенту
// Обработка выполняется каждую секунду
//
Процедура ОбработкаСообщений()
	
	Попытка
		Пока Истина Цикл
			Пакет = ТЦСервер.ПолучитьСообщение(Объект.Ссылка);
			
			Если Пакет = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Сообщение = Пакет.Сообщение;
			
			Если Сообщение = кВыполнить Тогда
				мСостояние = Пакет.Параметры.Состояние;
				мИмяСостояния = ТЦСервер.ИмяПеречисления(мСостояние);
				РезультатВычисления = Вычислить(мИмяСостояния + "Выполнить(Пакет.Параметры)");
			ИначеЕсли Сообщение = кОтменить Тогда
				ЗавершитьРаботуВРМ();
				РезультатВычисления = Вычислить(мИмяСостояния + "Отменить(Пакет.Параметры)");
			ИначеЕсли Сообщение = кЗавершитьРаботу Тогда
				ЗавершитьРаботу(Пакет.Параметры);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агенту не удалось обработать сообщение от Тест-центра");
	КонецПопытки;
	
КонецПроцедуры // ОбработкаСообщений()

&НаКлиенте
// Обработчик приема локальных сообщений
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Попытка
		Пакет = ТЦСервер.РаспаковатьЛокальноеСообщение(Данные);
		Сообщение = Пакет.Сообщение;
		
		Если Сообщение = кГотовКработе Или Сообщение = кВыполненоУспешно Тогда
			Если мСостояниеЗадания = кОжидениеОтветаВРМ Тогда
				ВРМ = Пакет.Параметры.ВРМ;
				ОписаниеВРМ = мСостоянияВРМ[ВРМ];
				
				Если ОписаниеВРМ <> Неопределено Тогда
					Если Сообщение = кГотовКработе Тогда
						мЗапущенныеВРМ.Вставить(ВРМ);
						
						Если ОписаниеВРМ.Свойство("Запуск") Тогда
							ТЦСервер.ОтметитьЗапускВыполнен(ОписаниеВРМ.Запуск);
						КонецЕсли;
					КонецЕсли;
					
					ОписаниеВРМ.Выполнено = Истина;
					ОписаниеВРМ.Результат = Пакет.Параметры.Результат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Сообщение = кВыполненоСОшибкой Тогда
			ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, Пакет.Параметры.Результат);
		КонецЕсли;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агенту не удалось обработать локальное сообщение ВРМ");
	КонецПопытки;
	
КонецПроцедуры // ВнешнееСобытие()

&НаКлиенте
// Обработка завершения ожидания проверки работоспособности Агента
// Обработка выполняется каждую секунду
//
Процедура ОжиданиеОтветаАктивногоАгента()
	
	Попытка
		Сообщение = ТЦСервер.ПолучитьСообщение(мАктивныйАгент, мСсылка, Ложь);
	
		Если Сообщение = Неопределено Тогда
			ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
			Состояние = "Агент уже запущен. Запуск отменен.";
			Элементы.Завершено.Видимость = Ложь;
			мЗапускОтменен = Истина;
		Иначе
			Если ТекущаяДата() - мНачалоПодключения > мТаймаутПодключения Тогда
				ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
				ТЦСервер.ПолучитьСообщение(мАктивныйАгент, мСсылка);
				ДеактивироватьАгента(мАктивныйАгент);
				кВключен = Ложь;
				ВключитьРежимАгента();
			Иначе
				Завершено = Завершено + 1;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ОтключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агенту не удалось инициализироваться");
	КонецПопытки;
	
КонецПроцедуры // ОжиданиеОтветаАктивногоАгента()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С АГЕНТОМ

&НаКлиенте
// Закрыть Агента
//
// Параметры:
//  
//
Процедура ЗакрытьАгента()
	
	Если Не мЗапускОтменен Тогда
		ЗавершитьРаботу(ТЦСервер.СоответствиеВМассив(мЗапущенныеВРМ));
		ОтключитьРежимАгента();
		ТЦКлиент.ОтключитьЛокальныеСообщения(мЛокальныеСообщения);
		кВключен = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗакрытьАгента()

&НаСервере
// Инициализировать Агента
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором запускается Агент
//
// Возвращаемое значение:
//  СправочникСсылка.ТЦАгенты - ссылка на создаваемый агент
//
Функция Инициализировать(ИмяКомпьютера, НомерСессии)
	
	ТекущийОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ТЦАгенты"));
	ТекущийОбъект.Наименование = ИмяКомпьютера + "." + Формат(НомерСессии, "ЧГ=0");
	ТекущийОбъект.Компьютер = ТЦСервер.НайтиКомпьютер(ИмяКомпьютера);
	ТекущийОбъект.НомерСессии = НомерСессии;
	Ссылка = Справочники.ТЦАгенты.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ТекущийОбъект.УстановитьСсылкуНового(Ссылка);
	ЗначениеВДанныеФормы(ТекущийОбъект, Объект);
	Возврат Ссылка;
	
КонецФункции // Инициализировать()

&НаКлиенте
// Зарегистрировать Агента в информационной базе
//
Процедура ЗарегистрироватьАгента()
	
	Записать();
	ПодключитьОбработчикОжидания("ОбработкаСообщений", 3);
	Состояние = "Подключен";
	Элементы.Завершено.Видимость = Ложь;
	Завершено = 0;
	АдресПодключения = ТЦКлиент.АдресЛокальногоПодключения();
	мАдресАгента = ТЦКлиент.ЛокальныйАдресАгента(АдресПодключения);
	ТЦКлиент.ПодключитьЛокальныеСообщения(мЛокальныеСообщения, мАдресАгента);
	мЗапущенныеВРМ = Новый Соответствие;
	кВключен = Истина;
	
КонецПроцедуры // ЗарегистрироватьАгента()

&НаСервере
// Удалить регистрацию Агента из справочника
//
// Параметры:
//  СправочникСсылка.ТЦАгенты - ссылка на удаляемого Агента
//
Процедура ДеактивироватьАгента(Агент)
	
	ТекущийОбъект = Агент.ПолучитьОбъект();
	
	Если ТекущийОбъект <> Неопределено Тогда
		ТЦСервер.УдалитьСообщенияАдресата(ТекущийОбъект.Ссылка);
		ТекущийОбъект.Удалить();
	КонецЕсли;
	
КонецПроцедуры // ДеактивироватьАгента()

&НаКлиенте
// Включить режим агента в текущем клиенте
//
Процедура ВключитьРежимАгента()
	
	мТаймаутПодключения = 5;
	мЗапускОтменен = Ложь;
	Элементы.Завершено.МаксимальноеЗначение = мТаймаутПодключения;
	Элементы.Завершено.Видимость = Истина;
	Завершено = 0;
	Состояние = "Подключение...";
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	мСсылка = Инициализировать(ИмяКомпьютера, НомерСессии);
	мНачалоПодключения = ТекущаяДата();
	
	мАктивныйАгент = ТЦСервер.АгентЗапущен(ИмяКомпьютера, НомерСессии);
	
	Если мАктивныйАгент <> Неопределено Тогда
		ИмяЗначения = "Перечисление.ТЦСообщение.ПроверкаАктивности";
		Сообщение = ПредопределенноеЗначение(ИмяЗначения);
		ТЦСервер.ОтправитьСообщение(мАктивныйАгент, мСсылка, Сообщение);
		ПодключитьОбработчикОжидания("ОжиданиеОтветаАктивногоАгента", 3);
	Иначе
		ЗарегистрироватьАгента();
	КонецЕсли;
	
КонецПроцедуры // ВключитьРежимАгента()

&НаСервере
// Отключить режим агента в текущем клиенте
//
Процедура ОтключитьРежимАгента()
	
	ДеактивироватьАгента(Объект.Ссылка);
	
КонецПроцедуры // ВключитьРежимАгента()


///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРМ

&НаКлиенте
// Завершить работу ВРМ или Агента
//
// Параметры:
//  СписокВРМ
//
Процедура ЗавершитьРаботу(СписокВРМ)
	
	Если СписокВРМ = Неопределено Тогда
		// Завершить работу Агента
		ЗакрытьАгента();
		ЗавершитьРаботуСистемы(Ложь);
	Иначе
		// Завершить работу ВРМ
		АдресПодключения = ТЦКлиент.АдресЛокальногоПодключения();
		Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(мАдресАгента, кЗавершитьРаботу);
		
		Для каждого ВРМ Из СписокВРМ Цикл
			Адрес = ТЦКлиент.ЛокальныйАдресВРМ(АдресПодключения, ВРМ);
			
			Попытка
				Если ТЦСервер.ВыгрузитьВРМ(ВРМ) Тогда
					КипВнешнийКомпонент.ОтправитьСообщение(мЛокальныеСообщения, Адрес, Пакет);
					мЗапущенныеВРМ.Удалить(ВРМ);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗавершитьРаботу()

&НаКлиенте
// Выполнить подготовку ВРМ
//
// Параметры:
//  Параметры - Структура
//
Функция ПодготовкаВыполнить(ПараметрыСообщения)
	
	мСценарий = ПараметрыСообщения.Сценарий;
	мТест = ПараметрыСообщения.Тест;
	мДлительностьВыполнения = ДлительностьВыполнения(мТест);
	мКонтекстПользователей = Неопределено;
	мНомераВРМ = Новый Соответствие;
	// DEL: мПервыеНомераВРМ = ПараметрыСообщения.НомераВРМ[Объект.Ссылка];
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	ЗапущенныеВРМ = ТЦСервер.ЗапущенныеВРМ(ИмяКомпьютера, НомерСессии);
	// DEL: ТЦСервер.ДеактивироватьВРМ(ИмяКомпьютера, НомерСессии);
	ОбработатьВРМ(ЗапущенныеВРМ, "ОпросВРМ",, ТаймаутОпросаКлиента(мТест));
	
КонецФункции // ПодготовкаВыполнить()

&НаКлиенте
// Отменить подготовку ВРМ
//
// Параметры:
//  Параметры - Структура
//
Функция ПодготовкаОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ПодготовкаОтменить()

&НаКлиенте
// Отправить сообщение ВРМ с параметрами
//
// Параметры:
//  ВРМ - СправочникСсылка.ТЦВП
//  Сообщение - ПеречислениеСсылка.ТЦСообщение
//
Процедура ОтправитьСообщениеВРМ(ВРМ, Сообщение, Параметры = Неопределено)
	
	АдресПодключения = ТЦКлиент.АдресЛокальногоПодключения();
	Пакет = ТЦСервер.ЗапаковатьЛокальноеСообщение(мАдресАгента, Сообщение, Параметры);
	Адрес = ТЦКлиент.ЛокальныйАдресВРМ(АдресПодключения, ВРМ);
	
	Попытка
		КипВнешнийКомпонент.ОтправитьСообщение(мЛокальныеСообщения, Адрес, Пакет);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОтправитьСообщениеВРМ()

&НаКлиенте
// Выполнить опрос ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ОпросВРМ(ПараметрыОпроса)
	
	ОтправитьСообщениеВРМ(ПараметрыОпроса.ВРМ, кПроверкаАктивности);
	
КонецФункции // ОпросВРМ()

&НаКлиенте
// Обработчик выполнения опроса ВРМ
//
Функция ОпросВРМВыполнено()
	
	ПодготовитьКлиентыВРМ();
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ОпросВРМВыполнено()

&НаКлиенте
// Обработчик выполнения опроса ВРМ
//
Функция ОпросВРМТаймаут()
	
	Для каждого ВРМ Из мСостоянияВРМ Цикл
		Если Не ВРМ.Значение.Выполнено Тогда
			ТЦСервер.УдалитьВРМ(ВРМ.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	ПодготовитьКлиентыВРМ();
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ОпросВРМТаймаут()

&НаКлиенте
// Запустить ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ЗапускВРМ(ПараметрыЗапуска)
	
	ВРМ = ПараметрыЗапуска.ВРМ;
	Ид = Строка(ВРМ.УникальныйИдентификатор());
	ПараметрыВРМ = ПараметрыЗапуска.Параметры[ВРМ];
	ТЦКлиент.ЗапуститьКлиента(ПараметрыВРМ.Клиент, ПараметрыВРМ.ПользовательЗапуска, Ид);
	
КонецФункции // ЗапускВРМ()

&НаКлиенте
// Запустить ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ЗапускВРМВыполнено()
	
	Для каждого СостояниеВРМ Из мСостоянияВРМ Цикл
		ТЦСервер.АктивироватьВРМ(СостояниеВРМ.Ключ);
	КонецЦикла;
	
	ЗапуститьКлиентыВРМ();
	
КонецФункции // ЗапускВРМВыполнено()

&НаСервере
// Формирование описания таймаута ВРМ
//
// Параметры:
//  СостоянияВРМ - Соответствие
//  Тест - ДокументСсылка.ТЦТест
//  Сообщение - Строка
//  ИмяКомпьютераАгента - Строка
//
// Возвращаемое значение:
//  Строка - описание таймаута и списка ВРМ
//
Функция ОписаниеТаймаутаВРМ(СостоянияВРМ, Тест, Знач Сообщение, ИмяКомпьютераАгента)
	
	Таблица = Новый ТаблицаЗначений;
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.ТЦВП"));
	ТипСсылки = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить("ВРМ", ТипСсылки);
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.ТЦПользователи"));
	ТипСсылки = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить("Пользователь", ТипСсылки);
	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	ТипСсылки = Новый ОписаниеТипов(Типы);
	Таблица.Колонки.Добавить("НомерВРМ", ТипСсылки);
	
	Для каждого СостояниеВРМ Из СостоянияВРМ Цикл
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ВРМ = СостояниеВРМ.Ключ;
		СостояниеВРМ.Значение.Свойство("Пользователь", СтрокаТаблицы.Пользователь);
		СостоянияВРМ[СтрокаТаблицы.ВРМ].Свойство("НомерВРМ", СтрокаТаблицы.НомерВРМ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВРМ", Таблица);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаСсылокВРМ.ВРМ КАК ВРМ,
		|	ТаблицаСсылокВРМ.Пользователь КАК Пользователь,
		|	ТаблицаСсылокВРМ.НомерВРМ КАК НомерВРМ
		|ПОМЕСТИТЬ
		|	ТаблицаВРМ
		|ИЗ
		|	&ТаблицаВРМ КАК ТаблицаСсылокВРМ;
		|
		|ВЫБРАТЬ
		|	ВРМ КАК ВРМ,
		|	ПРЕДСТАВЛЕНИЕ(
		|		ВЫБОР
		|			КОГДА Пользователь = ЗНАЧЕНИЕ(Справочник.ТЦПользователи.ПустаяСсылка) ТОГДА
		|				ВРМ.Пользователь
		|			ИНАЧЕ
		|				Пользователь
		|		КОНЕЦ
		|	) КАК Пользователь
		|ИЗ
		|	ТаблицаВРМ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВРМ = СостоянияВРМ[Выборка.ВРМ];
		Если Не ВРМ.Выполнено Тогда
			Сообщение = Сообщение + "
				| - " + ИмяКомпьютераАгента + "." + Выборка.Пользователь + "." + ВРМ.НомерВРМ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сообщение;
	
КонецФункции // ОписаниеТаймаутаВРМ()

&НаКлиенте
// Запустить ВРМ
//
// Параметры:
//  ПараметрыОпроса - Структура
//    ВРМ - СправочникСсылка.ТЦВП
//    Параметры - Произвольный
//
Функция ЗапускВРМТаймаут()
	
	Сообщение = "Следующие ВРМ не удалось запустить до истечения таймаута запуска клиента (" + ТаймаутЗапускаКлиента(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // ЗапускВРМТаймаут()

&НаКлиенте
// Загрузить сценарий для ВРМ
//
// Параметры:
//  
//
Функция ЗагрузкаВРМ(ПараметрыЗагрузки)
	
	ПараметрыВРМ = Новый Структура;
	ПараметрыВРМ.Вставить("НомерВРМ", мНомераВРМ[ПараметрыЗагрузки.ВРМ]);
	ПараметрыВРМ.Вставить("Сценарий", мСценарий);
	ПараметрыСообщения = ПараметрыСообщенияДляВРМ(кПодготовка, ПараметрыВРМ);
	ОтправитьСообщениеВРМ(ПараметрыЗагрузки.ВРМ, кВыполнить, ПараметрыСообщения);
	
КонецФункции // ЗагрузкаВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗагрузкаВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ЗагрузкаВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗагрузкаВРМТаймаут()
	
	Сообщение = "Следующие ВРМ не удалось настроить до истечения таймаута загрузки сценария клиентом (" + ТаймаутЗагрузкиСценарияКлиентом(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // ЗагрузкаВРМТаймаут()

&НаКлиенте
// Выполнить инициализацию ВП
//
// Параметры:
//  Параметры - Структура
//
Функция ИнициализацияВыполнить(ПараметрыСообщения)
	
	ОбработатьВРМ(мВРМСценария, "ИнициализироватьВРМ",, ТаймаутИнициализации(мТест));
	
КонецФункции // ВыполнитьИнициализацию()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМ(ПараметрыИнициализации)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кИнициализация);
	ОтправитьСообщениеВРМ(ПараметрыИнициализации.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ИнициализироватьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ИнициализироватьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ИнициализироватьВРМТаймаут()
	
	Сообщение = "Следующие ВРМ не удалось инициализировать до истечения таймаута инициализации (" + ТаймаутИнициализации(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // ИнициализироватьВРМТаймаут()

&НаКлиенте
// Отменить инициализацию ВП
//
// Параметры:
//  Параметры - Структура
//
Функция ИнициализацияОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ИнициализацияОтменить()

&НаКлиенте
// Выполнить процесс тестирования
//
// Параметры:
//  Параметры - Структура
//
Функция ВыполнениеВыполнить(ПараметрыВыполнения)
	
	ОбработатьВРМ(мВРМСценария, "ВыполнитьВРМ",, ТаймаутВыполнения(мТест));
	
КонецФункции // ВыполнениеВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМ(ПараметрыВыполнения)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кВыполнение);
	ОтправитьСообщениеВРМ(ПараметрыВыполнения.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ВыполнитьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // ВыполнитьВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ВыполнитьВРМТаймаут()
	
	Сообщение = "Следующим ВРМ не удалось выполнить действия до истечения таймаута выполнения (" + ТаймаутВыполнения(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // ВыполнитьВРМТаймаут()

&НаКлиенте
// Отменить процесс тестирования
//
// Параметры:
//  Параметры - Структура
//
Функция ВыполнениеОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ВыполнениеОтменить()

&НаКлиенте
// Выполнить запись результатов
//
// Параметры:
//  Параметры - Структура
//
Функция ЗаписьРезультатовВыполнить(ПараметрыСообщения)
	
	ОбработатьВРМ(мВРМСценария, "ЗаписатьВРМ",, ТаймаутЗаписиРезультатов(мТест));
	
КонецФункции // ЗаписьРезультатовВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМ(ПараметрыЗаписи)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кЗаписьРезультатов);
	ОтправитьСообщениеВРМ(ПараметрыЗаписи.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // ЗаписатьВРМ()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно, мСостоянияВРМ);
	
КонецФункции // ЗаписатьВРМВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция ЗаписатьВРМТаймаут()
	
	Сообщение = "Следующим ВРМ не удалось записать результаты до истечения таймаута записи результатов (" + ТаймаутЗаписиРезультатов(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // ЗаписатьВРМТаймаут()

&НаКлиенте
// Отменить запись  результатов
//
// Параметры:
//  Параметры - Структура
//
Функция ЗаписьРезультатовОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // ЗаписьРезультатовОтменить()

&НаКлиенте
// Выполнить удаление ранее созданных данных
//
// Параметры:
//  Параметры - Структура
//
Функция УдалениеДанныхВыполнить(ПараметрыСообщения)
	
	ОбработатьВРМ(мВРМСценария, "УдалитьДанные",, ТаймаутУдаленияДанных(мТест));
	
КонецФункции // УдалениеДанныхВыполнить()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанные(ПараметрыУдаления)
	
	ПараметрыВРМ = ПараметрыСообщенияДляВРМ(кУдалениеДанных);
	ОтправитьСообщениеВРМ(ПараметрыУдаления.ВРМ, кВыполнить, ПараметрыВРМ);
	
КонецФункции // УдалитьДанные()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанныеВыполнено()
	
	ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоУспешно);
	
КонецФункции // УдалитьДанныеВыполнено()

&НаКлиенте
// 
//
// Параметры:
//  
//
Функция УдалитьДанныеТаймаут()
	
	Сообщение = "Следующим ВРМ не удалось удалить данные до истечения таймаута удаления данных (" + ТаймаутУдаленияДанных(мТест) + " сек.):";
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	ВызватьИсключение ОписаниеТаймаутаВРМ(мСостоянияВРМ, мТест, Сообщение, ИмяКомпьютера);
	
КонецФункции // УдалитьДанныеТаймаут()

&НаКлиенте
// Отменить удаление ранее созданных данных
//
// Параметры:
//  Параметры - Структура
//
Функция УдалениеДанныхОтменить(ПараметрыСообщения)
	
	
	
КонецФункции // УдалениеДанныхОтменить()

&НаСервереБезКонтекста
// Получить длительность выполнения сценария
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - длительность выполнения сценария
//
Функция ДлительностьВыполнения(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ДлительностьВыполнения;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ДлительностьВыполнения()

&НаСервереБезКонтекста
// Получить таймаут подготовки из настроек теста
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут подготовки
//
Функция ТаймаутЗапускаКлиента(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗапускаКлиента;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗапускаКлиента()

&НаСервереБезКонтекста
// Получить таймаут опроса клиента
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут опроса
//
Функция ТаймаутОпросаКлиента(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутОпросаКлиента;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутОпросаКлиента()

&НаСервереБезКонтекста
// Получить таймаут загрузки сценария клиентом
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутЗагрузкиСценарияКлиентом(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗагрузкиСценарияКлиентом;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗагрузкиСценарияКлиентом()

&НаСервереБезКонтекста
// Получить таймаут инициализации
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутИнициализации(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутИнициализации;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутИнициализации()

&НаСервереБезКонтекста
// Получить таймаут выполнения
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутВыполнения(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутВыполнения;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутВыполнения()

&НаСервереБезКонтекста
// Получить таймаут записи результатов
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутЗаписиРезультатов(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутЗаписиРезультатов;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутЗаписиРезультатов()

&НаСервереБезКонтекста
// Получить таймаут удаления данных
//
// Параметры:
//  Тест
//
// Возвращаемое значение:
//  Число - таймаут загрузки сценария
//
Функция ТаймаутУдаленияДанных(Тест)
	
	НачатьТранзакцию();
	Значение = Тест.ТаймаутУдаленияДанных;
	ЗафиксироватьТранзакцию();
	Возврат Значение;
	
КонецФункции // ТаймаутУдаленияДанных()

&НаКлиенте
// Подготовить виртуальных пользователей к запуску
//
Процедура ПодготовитьКлиентыВРМ()
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Компьютер = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	
	// Получить список неподходящих ВРМ и выгрузить их
	ВыгружаемыеВРМ = ТЦСервер.ВРМВнеСценария(Компьютер, НомерСессии);
	ЗавершитьРаботу(ВыгружаемыеВРМ);
	
	// Получить список подходящих ВРМ и отметить, как уже запущенные
	мНомераВРМ = ТЦСервер.ПереиспользоватьВРМ(Компьютер, НомерСессии);
	
КонецПроцедуры // ПодготовитьКлиентыВРМ()

&НаКлиенте
// Запустить клиентские приложения ВРМ
//
// Параметры:
//  
//
Процедура ЗапуститьКлиентыВРМ()
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяЭтогоКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	НеобходимыеВРМ = ТЦСервер.НеЗапущенныеВРМ(ИмяЭтогоКомпьютера, НомерСессии, 10);
	
	// Если все ВРМ запущены и отвечают
	Если НеобходимыеВРМ.Количество() = 0 Тогда
		ЗагрузитьВРМ();
		Возврат;
	КонецЕсли;
	
	СписокВРМ = Новый Массив;
	ПараметрыЗапуска = Новый Соответствие;
	
	Для каждого ВРМ Из НеобходимыеВРМ Цикл
		Ид = Строка(Новый УникальныйИдентификатор);
		Ссылка = ТЦСервер.СсылкаПоИдентификатору(Ид, "Справочники", "ТЦВП");
		СписокВРМ.Добавить(Ссылка);
		мНомераВРМ[Ссылка] = ВРМ.Номер;
		
		ОписаниеПараметров = Новый Структура;
		ОписаниеПараметров.Вставить("Клиент", ВРМ.Клиент);
		ОписаниеПараметров.Вставить("Пользователь", ВРМ.Пользователь);
		ОписаниеПараметров.Вставить("ПользовательЗапуска", ВРМ.Клон);
		ОписаниеПараметров.Вставить("Запуск", ВРМ.Запуск);
		ПараметрыЗапуска.Вставить(Ссылка, ОписаниеПараметров);
	КонецЦикла;
	
	ОбработатьВРМ(СписокВРМ, "ЗапускВРМ", ПараметрыЗапуска, ТаймаутЗапускаКлиента(мТест));
	
КонецПроцедуры // ЗапуститьКлиентыВРМ()

&НаКлиенте
// Загрузить ВРМ сценария
//
Процедура ЗагрузитьВРМ()
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
	НомерСессии = КипВнешнийКомпонент.НомерСессии(Инструменты);
	мВРМСценария = ТЦСервер.ЗапущенныеВРМ(ИмяКомпьютера, НомерСессии);
	
	// DEL: Для каждого ВРМ Из мВРМСценария Цикл
	// DEL: 	ТЦСервер.АктивироватьВРМ(ВРМ);
	// DEL: КонецЦикла;
	
	ТЦСервер.ЗагрузитьВРМ(ИмяКомпьютера, НомерСессии);
	// DEL: мВРМСценария = ТЦСервер.ПодготавливающиесяВРМ(ИмяКомпьютера, НомерСессии);
	ОбработатьВРМ(мВРМСценария, "ЗагрузкаВРМ",, ТаймаутЗагрузкиСценарияКлиентом(мТест));
	
КонецПроцедуры // ЗагрузитьВРМ()

&НаКлиенте
// Для каждого ВРМ выполнить указанную операцию
//
// Параметры:
//  СписокВРМ - Массив (СправочникСсылка.ТЦВП)
//  ОперацияВРМ - Строка, наименование операции
//  ПараметрыОперацииВРМ - Произвольный
//  ТаймаутОбработкиВРМ - Число, максимальное время ожидания ответа
//
Процедура ОбработатьВРМ(СписокВРМ,
                        ОперацияВРМ,
                        ПараметрыОперацииВРМ = Неопределено,
                        ТаймаутОбработкиВРМ)
	
	мСостоянияВРМ = Новый Соответствие;
	// DEL: НомераВРМ = Новый Соответствие;
	
	// DEL: Доработать
	// DEL: Для каждого ОписаниеНомера из мПервыеНомераВРМ Цикл
	// DEL: 	НомераВРМ[ОписаниеНомера.Ключ] = ОписаниеНомера.Значение.Начало;
	// DEL: КонецЦикла;
	
	// DEL: РолиВРМ = ТЦСервер.РолиВРМ(СписокВРМ);
	
	Для каждого ВРМ Из СписокВРМ Цикл
		// DEL: Роль = РолиВРМ[ВРМ];
		// DEL: НомерВРМ = НомераВРМ[Роль];
		ПараметрыВызова = Новый Структура;
		ПараметрыВызова.Вставить("ВРМ", ВРМ);
		ПараметрыВызова.Вставить("Параметры", ПараметрыОперацииВРМ);
		// DEL: ПараметрыВызова.Вставить("НомерВРМ", НомерВРМ);
		
		РезультатВычисления = Вычислить(ОперацияВРМ + "(ПараметрыВызова)");
		
		СостояниеВРМ = Новый Структура;
		СостояниеВРМ.Вставить("Выполнено", Ложь);
		СостояниеВРМ.Вставить("Результат");
		СостояниеВРМ.Вставить("НомерВРМ", мНомераВРМ[ВРМ]);
		
		Если ОперацияВРМ = "ЗапускВРМ" Тогда
			СостояниеВРМ.Вставить("Пользователь", ПараметрыОперацииВРМ[ВРМ].Пользователь);
			СостояниеВРМ.Вставить("Запуск", ПараметрыОперацииВРМ[ВРМ].Запуск);
		КонецЕсли;
		
		мСостоянияВРМ.Вставить(ВРМ, СостояниеВРМ);
		
		// DEL: Если НомераВРМ[Роль] <> Неопределено Тогда
		// DEL: 	НомераВРМ[Роль] = НомераВРМ[Роль] + 1;
		// DEL: КонецЕсли;
	КонецЦикла;
	
	мНачалоОперации = ТекущаяДата();
	мТаймаутОбработкиВРМ = ТаймаутОбработкиВРМ;
	мОперацияВРМ = ОперацияВРМ;
	мСостояниеЗадания = кОжидениеОтветаВРМ;
	ПодключитьОбработчикОжидания("ОжиданиеОтветаВРМ", 1);
	
КонецПроцедуры // ОбработатьВРМ()

&НаКлиенте
// Сообщить всем ВРМ о необходимости завершить работу
//
Процедура ЗавершитьРаботуВРМ()
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	АдресПодключения = ТЦКлиент.АдресЛокальногоПодключения();
	
	Для каждого ВРМ Из мВРМСценария Цикл
		Адрес = ТЦКлиент.ЛокальныйАдресВРМ(АдресПодключения, ВРМ);
		Попытка
			КипВнешнийКомпонент.ЗавершитьВыполнение(Инструменты, Адрес);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ЗавершитьРаботуВРМ()

&НаКлиенте
// Ожидать ответа от ВРМ на посланное ранее сообщение
//
Процедура ОжиданиеОтветаВРМ()
	
	Попытка
		Если ВсеВРМОтветили(мСостоянияВРМ) Тогда
			ОтключитьОбработчикОжидания("ОжиданиеОтветаВРМ");
			мСостояниеЗадания = Неопределено;
			РезультатВычисления = Вычислить(мОперацияВРМ + "Выполнено()");
		Иначе
			Если мДлительностьВыполнения > 0 Тогда
				Если ТекущаяДата() - мНачалоОперации > мДлительностьВыполнения Тогда
					ЗавершитьРаботуВРМ();
					мДлительностьВыполнения = 0;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяДата() - мНачалоОперации > мТаймаутОбработкиВРМ Тогда
				ОтключитьОбработчикОжидания("ОжиданиеОтветаВРМ");
				мСостояниеЗадания = Неопределено;
				РезультатВычисления = Вычислить(мОперацияВРМ + "Таймаут()");
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТЦОбщий.ЗаписатьВЖурнал(ИнформацияОбОшибке(), "Агент");
		ОтключитьОбработчикОжидания("ОжиданиеОтветаВРМ");
		ТЦСервер.ОтправитьСообщение(мТест, Объект.Ссылка, кВыполненоСОшибкой, "Агент не смог получить ответ ВРМ");
	КонецПопытки;
	
КонецПроцедуры // ОжиданиеОтветаВРМ()

&НаКлиенте
// Определить, все ли ВРМ ответили на сообщение
//
// Параметры:
//  СписокВРМ - Массив, список результатов ответов ВРМ
//
// Возвращаемое значение:
//  Булево - Истина, если все ВРМ ответили
//
Функция ВсеВРМОтветили(СписокВРМ)
	
	Для каждого ВРМ Из СписокВРМ Цикл
		Если ВРМ.Значение.Выполнено = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВсеВРМОтветили()

&НаКлиенте
// 
//
// Параметры:
//  
//
// Возвращаемое значение:
//  
//
Функция ПараметрыСообщенияДляВРМ(Состояние, ПараметрыВРМ = Неопределено)
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Состояние", Состояние);
	ПараметрыСообщения.Вставить("Параметры", ПараметрыВРМ);
	
	Возврат ПараметрыСообщения;
	
КонецФункции // ПараметрыСообщенияДляВРМ()
