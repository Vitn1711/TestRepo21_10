&НаКлиенте
Перем кКлиентТонкий1С;
&НаКлиенте
Перем кКлиентТонкийВеб;
&НаКлиенте
Перем кКлиентТолстыйУправляемый;
&НаКлиенте
Перем кКлиентТолстыйОбычный;
&НаКлиенте
Перем кКлиентВеб;
&НаКлиенте
Перем кБраузерПоУмолчанию;
&НаКлиенте
Перем кБраузерInternetExplorer;
&НаКлиенте
Перем кБраузерFirefox;
&НаКлиенте
Перем кПроксиРучной;
&НаКлиенте
Перем кПроксиАвто;
&НаКлиенте
Перем кПроксиНеИспользовать;
&НаКлиенте
Перем мЭтоВыбранныйКомпьютер;
&НаКлиенте
Перем кПараметрыАгента;
&НаКлиенте
Перем кСобственныеПараметры;
&НаКлиенте
Перем кТипВебИмяИПароль;
&НаКлиенте
Перем мОбновлятьСтрокуЗапуска;


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

&НаКлиенте
// Обработчик открытия формы
//
Процедура ПриОткрытии(Отказ)
	
	Попытка
		ДатаНачала = ТекущаяДата();
		кКлиентТонкий1С = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Тонкий1С");
		кКлиентТонкийВеб = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТонкийВеб");
		кКлиентТолстыйУправляемый = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйУправляемый");
		кКлиентТолстыйОбычный = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.ТолстыйОбычный");
		кКлиентВеб = ПредопределенноеЗначение("Перечисление.ТЦТипКлиента.Веб");
		кБраузерПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.ПоУмолчанию");
		кБраузерInternetExplorer = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.InternetExplorer");
		кБраузерFirefox = ПредопределенноеЗначение("Перечисление.ТЦТипБраузера.Firefox");
		кПроксиРучной = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.УказатьНастройки");
		кПроксиАвто = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.АвтоОпределение");
		кПроксиНеИспользовать = ПредопределенноеЗначение("Перечисление.ТЦТипПрокси.НеИспользовать");
		кПараметрыАгента = ПредопределенноеЗначение("Перечисление.ТЦТипЗапускаКлиента.ПараметрыАгента");
		кСобственныеПараметры = ПредопределенноеЗначение("Перечисление.ТЦТипЗапускаКлиента.СобственныеПараметры");
		кТипВебИмяИПароль = кСобственныеПараметры = ПредопределенноеЗначение("Перечисление.ТЦТипАутентификацииВеб.ИмяПароль");
		мОбновлятьСтрокуЗапуска = Истина;
		
		УстановитьДоступность();
		ОбновитьСтрокуЗапуска();
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка);
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ДатаНачала, ТекущаяДата());
	КонецПопытки;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик изменения типа клиента
//
Процедура ТипКлиентаПриИзменении(Элемент)
	
	ЭтоТонкий = Объект.ТипКлиента = кКлиентТонкий1С Или Объект.ТипКлиента = кКлиентТонкийВеб;
	ЭтоТолстый = Объект.ТипКлиента = кКлиентТолстыйОбычный Или Объект.ТипКлиента = кКлиентТолстыйУправляемый;
	
	Если ЭтоТонкий Тогда
		Объект.ИмяФайла = "1cv8c.exe";
	ИначеЕсли ЭтоТолстый Тогда
		Объект.ИмяФайла = "1cv8.exe";
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры // ТипКлиентаПриИзменении()

&НаКлиенте
// Обработчик изменения типа браузера
//
Процедура ТипБраузераПриИзменении(Элемент)
	
	Если Объект.ТипБраузера = кБраузерПоУмолчанию Тогда
		Объект.ИмяФайла = "";
	ИначеЕсли Объект.ТипБраузера = кБраузерInternetExplorer Тогда
		Объект.ИмяФайла = "iexplore";
	ИначеЕсли Объект.ТипБраузера = кБраузерFirefox Тогда
		Объект.ИмяФайла = "firefox";
	КонецЕсли;
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры // ТипБраузераПриИзменении()

&НаКлиенте
// Закрыть форму и вернуть строку запуска
//
Процедура ОК(Команда)
	
	Попытка
		ДатаНачала = ТекущаяДата();
		Если ПроверитьЗаполнение() Тогда
			Закрыть(СобратьСтрокуЗапуска());
		КонецЕсли;
	Исключение
		Ошибка = ИнформацияОбОшибке();
		ТЦОбщий.ЗаписатьВЖурнал(Ошибка);
		ТЦКлиент.СообщитьОбОшибке(Ошибка, ДатаНачала, ТекущаяДата());
	КонецПопытки;
	
КонецПроцедуры // ОК()

&НаСервере
// Обработчик проверки заполнения реквизитов
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЭтоВеб = Объект.ТипКлиента = Перечисления.ТЦТипКлиента.Веб;
	ЭтоТонкийВеб = Объект.ТипКлиента = Перечисления.ТЦТипКлиента.ТонкийВеб;
	БраузерПоУмолчанию = Объект.ТипБраузера = Перечисления.ТЦТипБраузера.ПоУмолчанию;
	ПроксиРучной = Объект.ТипПрокси = Перечисления.ТЦТипПрокси.УказатьНастройки;
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.Наименование),
		"Объект.Наименование",
		"Не указано наименование.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.Компьютер),
		"Объект.Компьютер",
		"Не указан компьютер.");
	
	//Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
	//	Не ЗначениеЗаполнено(Объект.ТипЗапускаКлиента),
	//	"Объект.ТипЗапускаКлиента",
	//	"Не указаны параметры запуска.");
	
	//Если Объект.ТипЗапускаКлиента <> Перечисления.ТЦТипЗапускаКлиента.СобственныеПараметры Тогда
	//	Возврат;
	//КонецЕсли;
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоВеб И Не ЗначениеЗаполнено(Объект.ТипБраузера),
		"Объект.ТипБраузера",
		"Не указан тип браузера.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не ЗначениеЗаполнено(Объект.ТипКлиента),
		"Объект.ТипКлиента",
		"Не указан тип клиента.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Не Объект.АвтоПуть И ЭтоВеб И Не ЗначениеЗаполнено(Объект.ИмяФайла) И Не БраузерПоУмолчанию,
		"Объект.ИмяФайла",
		"Не указано имя исполняемого файла клиента.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		(ЭтоВеб Или ЭтоТонкийВеб) И Не ЗначениеЗаполнено(Объект.АдресБраузера),
		"Объект.АдресБраузера",
		"Не указана строка адреса информационной базы.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		Объект.НачинатьОтладку И Не ЗначениеЗаполнено(Объект.АдресОтладчика),
		"Объект.АдресОтладчика",
		"Не указана строка адреса отладчика.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И Не ЗначениеЗаполнено(Объект.ТипПрокси),
		"Объект.ТипПрокси",
		"Не указан вариант использования прокси.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И ПроксиРучной И Не ЗначениеЗаполнено(Объект.АдресПрокси),
		"Объект.АдресПрокси",
		"Не указан адрес прокси сервера.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		ЭтоТонкийВеб И ПроксиРучной И Не ЗначениеЗаполнено(Объект.ПортПрокси),
		"Объект.ПортПрокси",
		"Не указан порт прокси сервера.");
	
	Отказ = Отказ Или ТЦСервер.РеквизитЗаполнен(
		(ЭтоВеб Или ЭтоТонкийВеб) И Не ЗначениеЗаполнено(Объект.ТипАутентификацииВеб),
		"Объект.ТипАутентификацииВеб",
		"Не указан способ аутентификации пользователя веб-сервера.");
	
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
// Обработчик выбора каталога исполняемого файла
//
Процедура ИмяКаталогаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = Объект.ИмяКаталога;
	
	Если Диалог.Выбрать() Тогда
		Объект.ИмяКаталога = Диалог.Каталог;
		ОбновитьСтрокуЗапуска();
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаНачалоВыбора()

&НаКлиенте
// Обработчик выбора имени исполняемого файла
//
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Разделитель = ТЦОбщий.ОпределитьРазделительПути(Объект.ИмяКаталога);
	Диалог.ПолноеИмяФайла = ТЦОбщий.СкорректироватьПуть(Объект.ИмяКаталога) + Разделитель + Объект.ИмяФайла;
	
	Если Диалог.Выбрать() Тогда
		КорректныйКаталог = ТЦОбщий.СкорректироватьПуть(Объект.ИмяКаталога);
		Объект.ИмяФайла = ТЦОбщий.ИмяФайла(Диалог.ПолноеИмяФайла);
		КорректныйКаталогФайла = ТЦОбщий.СкорректироватьПуть(ТЦОбщий.ИмяКаталога(Диалог.ПолноеИмяФайла));
		ВрегИмяКаталога = ВРег(КорректныйКаталог);
		ВрегИмяКаталогаФайла = ВРег(КорректныйКаталогФайла);
		
		Если ВрегИмяКаталога <> ВрегИмяКаталогаФайла Тогда
			Разделитель = ТЦОбщий.ОпределитьРазделительПути(Объект.ИмяФайла);
			Объект.ИмяКаталога = КорректныйКаталогФайла;
			ОбновитьСтрокуЗапуска();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаНачалоВыбора()

&НаКлиенте
// Обработчик выбора файла служебных сообщений
//
Процедура ФайлСообщенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.ПолноеИмяФайла = Объект.ФайлСообщений;
	
	Если Диалог.Выбрать() Тогда
		ФайлСообщений = Диалог.ПолноеИмяФайла;
		УстановитьДоступность();
		ОбновитьСтрокуЗапуска();
	КонецЕсли;
	
КонецПроцедуры // ФайлСообщенийНачалоВыбора()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Установить доступность элементов управления
//
Процедура УстановитьДоступность()
	
	ЭтоВеб = Объект.ТипКлиента = кКлиентВеб;
	ЭтоТонкийВеб = Объект.ТипКлиента = кКлиентТонкийВеб;
	ЭтоТонкий = ЭтоТонкийВеб Или Объект.ТипКлиента = кКлиентТонкий1С;
	ПроксиРучной = Объект.ТипПрокси = кПроксиРучной;
	
	Элементы.ТипБраузера.Доступность = ЭтоВеб;
	Элементы.АдресБраузера.Доступность = ЭтоВеб Или ЭтоТонкийВеб;
	Элементы.НачинатьОтладку.Доступность = Объект.РазрешатьОтладку;
	Элементы.ИмяКаталога.Доступность = Не Объект.АвтоПуть;
	Элементы.ИмяФайла.Доступность = Не Объект.АвтоПуть И ЭтоВеб;
	Элементы.ИмитироватьЗадержку.Доступность = Не ЭтоВеб;
	Элементы.ЗадержкаВызова.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.ЗадержкаПередачи.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.ЗадержкаПолучения.Доступность = Не ЭтоВеб И Объект.ИмитироватьЗадержку;
	Элементы.АдресОтладчика.Доступность = Объект.НачинатьОтладку И Объект.РазрешатьОтладку;
	Элементы.ФайлСообщений.Доступность = Не ЭтоВеб;
	Элементы.НеОчищатьСлужебныеСообщения.Доступность = Не ЭтоВеб;
	Элементы.ИмяКаталога.КнопкаВыбора = ЭтоВыбранныйКомпьютер();
	Элементы.ИмяФайла.КнопкаВыбора = ЭтоВыбранныйКомпьютер();
	Элементы.ФайлСообщений.КнопкаВыбора = ЭтоВыбранныйКомпьютер();
	Элементы.НеОчищатьСлужебныеСообщения.Доступность = ЗначениеЗаполнено(Объект.ФайлСообщений);
	Элементы.ТипПрокси.Доступность = ЭтоТонкийВеб;
	Элементы.АдресПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПользовательПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПортПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ПарольПрокси.Доступность = ЭтоТонкийВеб И ПроксиРучной;
	Элементы.ТипАутентификацииВеб.Доступность = ЭтоТонкийВеб Или ЭтоВеб;
	Элементы.НизкаяСкоростьСоединения.Доступность = ЭтоВеб Или ЭтоТонкий;
	Элементы.ОтображатьВсеФункции.Доступность = Объект.ТипКлиента <> кКлиентТолстыйОбычный;
	Элементы.ОтображатьПоказатели.Доступность = Объект.ТипКлиента <> кКлиентТолстыйОбычный;
	
	//Элементы.ЗакладкаОсновные.Доступность = Объект.ТипЗапускаКлиента = кСобственныеПараметры;
	//Элементы.ЗакладкаДополнительные.Доступность = Объект.ТипЗапускаКлиента = кСобственныеПараметры;
	
КонецПроцедуры // УстановитьДоступность()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СТРОКИ ЗАПУСКА

&НаКлиенте
// Собрать строку запуска из значений реквизитов
//
// Возвращаемое значение:
//  Строка - строка запуска клиента
//
Функция СобратьСтрокуЗапуска()
	
	СтрокаЗапуска = "%EXE%";
	
	Если Не Объект.АвтоПуть Тогда
		КорректноеИмяКаталога = ТЦОбщий.СкорректироватьПуть(Объект.ИмяКаталога);
		
		Если ЗначениеЗаполнено(КорректноеИмяКаталога) Тогда
			РазделительПути = ТЦОбщий.ОпределитьРазделительПути(Объект.ИмяКаталога);
		Иначе
			РазделительПути = "";
		КонецЕсли; 
		
		Путь = КорректноеИмяКаталога + РазделительПути + Объект.ИмяФайла;
		СтрокаЗапуска = СтрЗаменить(СтрокаЗапуска, "%EXE%", ТЦОбщий.ЭкранироватьСтроку(Путь));
	КонецЕсли;
	
	Если Объект.ТипКлиента = кКлиентТолстыйУправляемый Или Объект.ТипКлиента = кКлиентТолстыйОбычный Тогда
		СтрокаЗапуска = СтрокаЗапуска + " ENTERPRISE";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДополниьельныеПараметры) Тогда
		СтрокаЗапуска = СтрокаЗапуска + " " + Объект.ДополниьельныеПараметры;
	КонецЕсли;
	
	Если Объект.ТипКлиента = кКлиентТолстыйОбычный Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "RunModeOrdinaryApplication");
	ИначеЕсли Объект.ТипКлиента = кКлиентТолстыйУправляемый Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "RunModeManagedApplication");
	ИначеЕсли Объект.ТипКлиента = кКлиентВеб Тогда
		Если Объект.ТипБраузера = кБраузерПоУмолчанию Тогда
			СтрокаЗапуска = "";
		КонецЕсли;
		
		Разделитель = ?(ПустаяСтрока(СтрокаЗапуска), "", " ");
		СтрокаЗапуска = СтрокаЗапуска + Разделитель + ТЦОбщий.ЭкранироватьСтрокуURL(Объект.АдресБраузера);
	КонецЕсли;
	
	Если Объект.НеПредупреждать Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "DisableStartupMessages");
	КонецЕсли;
	
	Если Объект.РазрешатьОтладку Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "Debug");
	КонецЕсли;
	
	Если Объект.НачинатьОтладку Тогда
		Если ЗначениеЗаполнено(Объект.АдресОтладчика) Тогда
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
				Объект.ТипКлиента, СтрокаЗапуска, "DebuggerURL", Объект.АдресОтладчика);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипКлиента <> кКлиентТолстыйОбычный И Объект.ОтображатьПоказатели Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "DisplayPerformance");
	КонецЕсли;
	
	Если Объект.ТипКлиента <> кКлиентТолстыйОбычный И Объект.ОтображатьВсеФункции Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "DisplayAllFunctions");
	КонецЕсли;
	
	ЭтоВеб = Объект.ТипКлиента = кКлиентВеб;
	ЭтоТонкий1С = Объект.ТипКлиента = кКлиентТонкий1С;
	ЭтоТонкийВеб = Объект.ТипКлиента = кКлиентТонкийВеб;
	ЭтоТонкий = ЭтоТонкий1С Или ЭтоТонкийВеб;
	
	Если (ЭтоВеб Или ЭтоТонкий) И Объект.НизкаяСкоростьСоединения Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "O", "Low");
	КонецЕсли;
	
	Если Объект.ИмитироватьЗадержку И Объект.ТипКлиента <> кКлиентВеб Тогда
		ФорматЧисла = "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "SimulateServerCallDelay");
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска,, "-Call" + Формат(Объект.ЗадержкаВызова, ФорматЧисла));
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска,, "-Send" + Формат(Объект.ЗадержкаПередачи, ФорматЧисла));
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска,, "-Receive" + Формат(Объект.ЗадержкаПолучения, ФорматЧисла));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПараметрЗапуска) Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "C", Объект.ПараметрЗапуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Язык) Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "L", Объект.Язык);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КодЛокализации) Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "VL", Объект.КодЛокализации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФайлСообщений) И Объект.ТипКлиента <> кКлиентВеб Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "Out", Объект.ФайлСообщений);
		
		Если Объект.НеОчищатьСлужебныеСообщения Тогда
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
				Объект.ТипКлиента, СтрокаЗапуска,, "-NoTruncate");
		КонецЕсли;
	КонецЕсли;
		
	Если Объект.ТипКлиента = кКлиентТонкийВеб Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "WS", Объект.АдресБраузера);
	КонецЕсли;
	
	Если Объект.ТипКлиента = кКлиентТонкийВеб И Объект.ТипПрокси = кПроксиНеИспользовать Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "NoProxy");
	КонецЕсли;
	
	Если Объект.ТипКлиента = кКлиентТонкийВеб И Объект.ТипПрокси = кПроксиРучной Тогда
		ЕстьАдрес = ЗначениеЗаполнено(Объект.АдресПрокси);
		ЕстьПорт = ЗначениеЗаполнено(Объект.ПортПрокси);
		ЕстьПользователь = ЗначениеЗаполнено(Объект.ПользовательПрокси);
		ЕстьПароль = ЗначениеЗаполнено(Объект.ПарольПрокси);
		
		Если ЕстьАдрес И ЕстьПорт Тогда
			СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
				Объект.ТипКлиента, СтрокаЗапуска, "Proxy");
			
			Если ЕстьАдрес Тогда
				СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
					Объект.ТипКлиента, СтрокаЗапуска,, "-PSrv" + Объект.АдресПрокси);
			КонецЕсли;
			
			Если ЕстьПорт Тогда
				СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
					Объект.ТипКлиента, СтрокаЗапуска,, "-PPort" + Формат(Объект.ПортПрокси, "ЧГ=0"));
			КонецЕсли;
			
			Если ЕстьПользователь Тогда
				СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
					Объект.ТипКлиента, СтрокаЗапуска,, "-PUser" + Объект.ПользовательПрокси);
			КонецЕсли;
			
			Если ЕстьПароль Тогда
				СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
					Объект.ТипКлиента, СтрокаЗапуска,, "-PPasswd" + Объект.ПарольПрокси);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если (ЭтоВеб Или ЭтоТонкийВеб) И Объект.ТипАутентификацииВеб = кТипВебИмяИПароль Тогда
		СтрокаЗапуска = ТЦОбщий.ДобавитьПараметрКлиента(
			Объект.ТипКлиента, СтрокаЗапуска, "WSA-");
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
	
КонецФункции // СобратьСтрокуЗапуска()

&НаКлиенте
Процедура ИзменитьДопПараметры(Команда)
	
	ТекстВопроса =
		"Редактировать дополнительные параметры в большинстве случаев не нужно, т.к. большинство параметров можно редактировать, используя графический интерфейс пользователя. Необходимость в редактировании дополнительных параметров может возникнуть, если требуется передать параметры клиенту, отличному от 1С:Предприятия (например, веб-браузеру).
		|
		|Вы уверены, что хотите изменить дополнительные параметры?";
	Выбор = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
	Если Выбор = КодВозвратаДиалога.Да Тогда
		Элементы.ДопПараметры.Доступность = Истина;
		Элементы.ИзменитьДопПараметры.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпьютерПриИзменении(Элемент)
	
	мЭтоВыбранныйКомпьютер = Неопределено;
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
// Определить, является ли выбранный компьютер текущим
// Вариант вызова с кешированием результата
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором сейчас выполняется работа
//
// Возвращаемое значение:
//  Булево - Истина, работа выполняется на выбранном компьютере
//
Функция ЭтоВыбранныйКомпьютер()
	
	Если мЭтоВыбранныйКомпьютер = Неопределено Тогда
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		ИмяКомпьютера = КипВнешнийКомпонент.ИмяЭтогоКомпьютера(Инструменты);
		мЭтоВыбранныйКомпьютер = ЭтоВыбранныйКомпьютерНаСервере(ИмяКомпьютера);
	КонецЕсли;
	
	Возврат мЭтоВыбранныйКомпьютер;
	
КонецФункции // ЭтоВыбранныйКомпьютер()

&НаСервере
// Определить, является ли выбранный компьютер текущим
//
// Параметры:
//  ИмяКомпьютера - Строка, имя компьютера на котором сейчас выполняется работа
//
// Возвращаемое значение:
//  Булево - Истина, работа выполняется на выбранном компьютере
//
Функция ЭтоВыбранныйКомпьютерНаСервере(ИмяКомпьютера)
	
	ИмяВыбранногоКомпьютера = ВРег(Объект.Компьютер.Наименование);
	ИмяЭтогоКомпьютера = ВРег(ИмяКомпьютера);
	
	Возврат ИмяВыбранногоКомпьютера = ИмяЭтогоКомпьютера;
	
КонецФункции // ЭтоВыбранныйКомпьютерНаСервере()

&НаКлиенте
// 
//
// Параметры:
//  
//
Процедура ОбновитьСтрокуЗапуска()
	
	Если мОбновлятьСтрокуЗапуска Тогда
		Объект.СтрокаЗапуска = СобратьСтрокуЗапуска();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСтрокуЗапуска()

&НаКлиенте
Процедура ПриИзмененииОбновитьСтрокуЗапуска(Элемент)
	
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбновитьСтрокуЗапускаИДоступность(Элемент)
	
	УстановитьДоступность();
	ОбновитьСтрокуЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РеквизитФормыВЗначение("Объект").ЭтоНовый() Тогда
		Объект.ЗадержкаВызова = 1.45;
		Объект.ЗадержкаПередачи = 0.45;
		Объект.ЗадержкаПолучения = 0.15;
		//Объект.АвтоПуть = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()
