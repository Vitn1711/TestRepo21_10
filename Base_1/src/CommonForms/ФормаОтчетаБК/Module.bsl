///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбработчикПослеФормированияНаКлиенте Экспорт;
&НаКлиенте
Перем ВыполнятьЗамеры;
&НаКлиенте
Перем ИдентификаторЗамера;
&НаКлиенте
Перем Непосредственно;
&НаКлиенте
Перем ФормированиеПриОткрытии;
&НаКлиенте
Перем ИнтервалОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОпределитьПоведениеВМобильномКлиенте();
	
	// Определение ключевых параметров отчета.
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	ОтчетОбъект     = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ОтчетОбъект.СхемаКомпоновкиДанных <> Неопределено Тогда
		Для Каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
			ПредопределенныеВарианты.Добавить(Вариант.Имя, Вариант.Представление);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ПредопределенныеВарианты);
	
	// Предварительная инициализация компоновщика (если требуется).
	АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "АдресСхемы");
	Если РежимРасшифровки И ТипЗнч(Параметры.Расшифровка) = Тип("ОписаниеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		НовыеНастройкиКД = ПолучитьИзВременногоХранилища(Параметры.Расшифровка.Данные).Настройки;
		АдресСхемы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "АдресСхемы");
	КонецЕсли;
	Если ТипЗнч(АдресСхемы) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресСхемы) Тогда
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемы);
		Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
			АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
			Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		Иначе
			АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	// Сохранение параметров открытия формы.
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	// Определение настроек отчета.
	ТипОтчетаСтрокой = ВариантыОтчетов.ТипОтчетаСтрокой(Параметры.Отчет);
	Если ТипОтчетаСтрокой = Неопределено Тогда
		Информация      = ВариантыОтчетов.ИнформацияОбОтчете(ОтчетПолноеИмя, Истина);
		Параметры.Отчет = Информация.Отчет;
	КонецЕсли;
	НастройкиОтчета = ВариантыОтчетов.НастройкиФормыОтчета(Параметры.Отчет, КлючТекущегоВарианта, ОтчетОбъект);
	НастройкиОтчета.Вставить("РазрешеноВыбиратьВарианты", Истина);
	НастройкиОтчета.Вставить("СхемаМодифицирована", Ложь);
	НастройкиОтчета.Вставить("ПредопределенныеВарианты", ПредопределенныеВарианты);
	НастройкиОтчета.Вставить("АдресСхемы",   АдресСхемы);
	НастройкиОтчета.Вставить("КлючСхемы",    "");
	НастройкиОтчета.Вставить("Контекстный",  ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0);
	НастройкиОтчета.Вставить("ПолноеИмя",    ОтчетПолноеИмя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	
	РежимВариантаОтчетаБК = ПолучитьРежимВыполненияОтчета();	
	ОткрытИзРассылки = Параметры.Свойство("ОткрытИзРассылки");
	Если ОткрытИзРассылки Тогда
		НастройкиОтчета.Вставить("ОткрытИзРассылки", Истина);
		Если Параметры.Свойство("ПользовательскиеНастройки") Тогда
			НастройкиОтчета.Вставить("ПользовательскиеНастройки", Параметры.ПользовательскиеНастройки);
		КонецЕсли;
		Если Параметры.Свойство("ИдентификаторСтрокиОтчета") Тогда
			НастройкиОтчета.Вставить("ИдентификаторСтрокиОтчета", Параметры.ИдентификаторСтрокиОтчета);
		КонецЕсли;
		Если Параметры.Свойство("ИдентификаторФормыРассылки") Тогда
			НастройкиОтчета.Вставить("ИдентификаторФормыРассылки", Параметры.ИдентификаторФормыРассылки);
		КонецЕсли;
		НастройкиОтчета.Вставить("АдресНастроекОтчета", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	КонецЕсли;
	Если НЕ РежимВариантаОтчетаБК Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета.Вставить("ОтчетСсылка",  Параметры.Отчет);
	НастройкиОтчета.Вставить("Подсистема",   ФормаПараметры.Подсистема);
	НастройкиОтчета.Вставить("Внешний",      ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",   БезопасныйРежим() <> Ложь);
	ОбновитьИнформациюОВариантеОтчета();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета, ВариантыОтчетов.ПараметрыКлиента());
	
	НастройкиОтчета.Вставить("ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек", Истина);
	Если Параметры.Свойство("СформироватьПриОткрытии") И Параметры.СформироватьПриОткрытии = Истина Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
		Элементы.ФормироватьСразу.Пометка = Истина;
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда 
		Элементы.ПредварительныйПросмотр.Видимость = Ложь;
	КонецЕсли;
	
	// Параметры по умолчанию.
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОтчета, "ВыводитьСуммуВыделенныхЯчеек", Истина) Тогда
		Элементы.ГруппаПоказатель.Видимость = Ложь;
		Элементы.ОбластьПоказателей.Видимость = Ложь;
		Элементы.КомандыВидовПоказателейЕще.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов.
	ВидимостьКомандВариантовОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ВидимостьКомандВариантовОтчетов");	
	
	Если ВидимостьКомандВариантовОтчетов = Ложь Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиОтчета.РазрешеноИзменятьВарианты И Не ВариантыОтчетовПовтИсп.ПравоДобавления() Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Ложь;
	КонецЕсли;
	
	РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);
	
	Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
		НастройкиОтчета.РазрешеноИзменятьВарианты = Истина;
		НастройкиОтчета.РазрешеноВыбиратьВарианты = Истина;
		ВариантМодифицирован                      = Ложь;
		Если ПустаяСтрока(КлючНазначенияИспользования) Тогда
			КлючНазначенияИспользования = Параметры.КлючВарианта;
			ФормаПараметры.КлючНазначенияИспользования = КлючНазначенияИспользования;
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	Если Не РежимВариантаОтчета() Тогда 
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// Тесная интеграция с почтой и рассылкой.
	ДоступнаОтправкаПисем = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		ДоступнаОтправкаПисем = МодульРаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
	КонецЕсли;
	Если ДоступнаОтправкаПисем Тогда
		Если НастройкиОтчета.РазрешеноИзменятьВарианты
			И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов")
			И Не НастройкиОтчета.СкрытьКомандыРассылки Тогда
			МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
			МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		Иначе // Если в подменю одна команда, то выпадающий список не отображается.
			Элементы.ОтправитьПоПочте.Заголовок = Элементы.ГруппаОтправить.Заголовок + "...";
			Элементы.Переместить(Элементы.ОтправитьПоПочте, Элементы.ГруппаОтправить.Родитель, Элементы.ГруппаОтправить);
		КонецЕсли;
	Иначе
		Элементы.ГруппаОтправить.Видимость = Ложь;
	КонецЕсли;
	
	// Определение, что отчет может содержать некорректные данные.
	Если Не Элементы.ФормироватьСразу.Пометка Тогда
		Попытка
			ИспользуемыеТаблицы = ВариантыОтчетов.ИспользуемыеТаблицы(ОтчетОбъект.СхемаКомпоновкиДанных);
			ИспользуемыеТаблицы.Добавить(НастройкиОтчета.ПолноеИмя);
			Если НастройкиОтчета.События.ПриОпределенииИспользуемыхТаблиц Тогда
				ОтчетОбъект.ПриОпределенииИспользуемыхТаблиц(КлючТекущегоВарианта, ИспользуемыеТаблицы);
			КонецЕсли;
			ВариантыОтчетов.ПроверитьИспользуемыеТаблицы(ИспользуемыеТаблицы);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось определить используемые таблицы:'");
			ТекстОшибки = ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Ошибка, ТекстОшибки, НастройкиОтчета.ВариантСсылка);
		КонецПопытки;
	КонецЕсли;
	
	ОтобразитьСостояниеОтчета(НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'"));
	
	ИнтеграцияПодсистемБСП.ПриСозданииНаСервереВариантыОтчетов(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ОтчетыПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	СоответствиеПараметров = Новый Структура;
	
	ПоддержкаРаботыСоСтруктурнымиПодразделениями = ПолучитьФункциональнуюОпцию("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
	ОсновнаяОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
	ВыборСтруктурныхПодразделений = ПоддержкаРаботыСоСтруктурнымиПодразделениями;
	Налогоплательщик = ОсновнаяОрганизация;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПредставлениеСпискаОрганизаций", ОтчетМетаданные)
		ИЛИ ОбщегоНазначения.ЕстьРеквизитОбъекта("ПредставлениеСпискаСтруктурныхЕдиниц", ОтчетМетаданные) Тогда
		
		СписокСтруктурныхЕдиниц.Очистить();
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Налогоплательщик", ОтчетМетаданные)
			И ЗначениеЗаполнено(Налогоплательщик) Тогда
			
			Если НЕ ЗначениеЗаполнено(ПеречислениеРазделыНалоговогоУчета) Тогда
				ПеречислениеРазделыНалоговогоУчета = Неопределено;
			КонецЕсли;
			
			СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПеречислениеРазделыНалоговогоУчета,, Налогоплательщик);
			
		Иначе
			СписокСтруктурныхЕдиниц.Добавить(ОсновнаяОрганизация);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПредставлениеСпискаПодразделений", ОтчетМетаданные) Тогда
		Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
			СписокПодразделений.Очистить();
			СтруктурноеПодразделение = ПользователиБКВызовСервераПовтИсп.ПолучитьЗначениеПоУмолчанию(Пользователи.ТекущийПользователь(), "ОсновноеСтруктурноеПодразделениеОрганизации");
			Если ТипЗнч(СтруктурноеПодразделение) = Тип("СправочникСсылка.Организации") Тогда 
				СтруктурноеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			КонецЕсли;
			Если СтруктурноеПодразделение <> Неопределено Тогда
				СписокПодразделений.Добавить(СтруктурноеПодразделение);
			КонецЕсли;
		КонецЕсли;
		Если СписокПодразделений.НайтиПоЗначению(Справочники.ПодразделенияОрганизаций.ПустаяСсылка()) <> Неопределено
			И СписокСтруктурныхЕдиниц.Количество() > 0 Тогда
			СписокВладельцевГоловныхПодразделений.Добавить(СписокСтруктурныхЕдиниц[0].Значение);
		КонецЕсли;
	Иначе
		ВыборСтруктурныхПодразделений = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Отказ = Истина;
		ОткрытьОбычнуюФормуОтчета();
		Возврат;
	КонецЕсли;
	
	ВыполнятьЗамеры = Ложь;
	
	// В безопасном режиме доп. отчеты формируются непосредственно,
	// т.к. они не могут подключать себя и использовать собственные методы в фоновых заданиях.
	Непосредственно = НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный;
	ФормированиеПриОткрытии = Ложь;
	ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
	
	Если Элементы.ФормироватьСразу.Пометка Тогда
		ФормированиеПриОткрытии = Истина;
		ПодключитьОбработчикОжидания("СФормировать", 0.1, Истина);
	КонецЕсли;
	
	ИзмененыНастройкиБК = Ложь;
	
	ПредставлениеСпискаОрганизаций       = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
	
	Для Каждого ЭлементСписка Из СписокПодразделений Цикл
		Если ЭлементСписка.Значение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка") Тогда 
			ЭлементСписка.Представление = "Головное подразделение";
		КонецЕсли;				
	КонецЦикла;
	
	ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);
	
	Элементы.ПредставлениеСпискаПодразделений.Видимость = СписокПодразделений.Количество() > 0;
	
	Элементы.ВыводитьПодписиРуководителей.Доступность = ВыводитьПодписи;
	
	Элементы.РежимВариантаОтчетаБК.Доступность =  Не РежимРасшифровки И НЕ ОткрытИзРассылки;
	
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы, РазвернутьОбластьПоказателей);
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", ОсновнойПоказатель);
	
	// Если компоновщик до сих пор не инициализирован то нужно это сделать
	// серверный вызов
	Если Не КомпоновщикИнициализирован И Интервалы.Количество() > 0 Тогда
		ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ПодчиненнаяФорма)
	РезультатОбработан = Ложь;
	
	// Приемка результата из стандартных форм.
	Если ТипЗнч(ПодчиненнаяФорма) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИмяПодчиненнойФормы = ПодчиненнаяФорма.ИмяФормы;
		Если ИмяПодчиненнойФормы = "ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.НастройкиОтчета"
			Или ПодчиненнаяФорма.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
			РезультатОбработан = Истина; // См. ВсеНастройкиЗавершение.
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
			ПозицияТочки = СтрДлина(ИмяПодчиненнойФормы);
			Пока КодСимвола(ИмяПодчиненнойФормы, ПозицияТочки) <> 46 Цикл // Не точка.
				ПозицияТочки = ПозицияТочки - 1;
			КонецЦикла;
			СуффиксФормыИсточника = ВРег(Сред(ИмяПодчиненнойФормы, ПозицияТочки + 1));
			Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаНастроек")
				Или СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
				Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
				
				ОбновитьЭлементыФормыНастроек(Результат);
				РезультатОбработан = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПодчиненнаяФорма) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		Если ТипЗнч(Результат) = Тип("СхемаКомпоновкиДанных") Тогда
			НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
			
			Путь = ПолучитьИмяВременногоФайла();
			
			ЗаписьXML = Новый ЗаписьXML; 
			ЗаписьXML.ОткрытьФайл(Путь, "UTF-8");
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Результат, "dataCompositionSchema", "http://v8.1c.ru/8.1/data-composition-system/schema"); 
			ЗаписьXML.Закрыть();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(Путь);
			НачатьУдалениеФайлов(, Путь);
			
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
			Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован",  Ложь);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
			ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
			ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
			
			ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
		КонецЕсли;
#КонецЕсли
	КонецЕсли;
	
	// Механизмы расширения.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	КонецЕсли;
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	ОтчетыКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, Результат, ПодчиненнаяФорма, РезультатОбработан);
	БухгалтерскиеОтчетыКлиент.ОтправитьОтчетыПоПочтеОбработкаВыбора(Результат, ПодчиненнаяФорма, ЭтотОбъект, "ОтчетТабличныйДокумент");
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда 
		
		ОповещениеОбработано = Истина;
		ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
		
	ИначеЕсли ИмяСобытия = ВариантыОтчетовКлиент.ИмяСобытияИзменениеВарианта() Тогда 
		
		ОповещениеОбработано = Истина;
		КлючВарианта = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда 
			Параметр.Свойство("КлючВарианта", КлючВарианта);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючВарианта) Тогда 
			УстановитьТекущийВариант(КлючВарианта);
		Иначе
			ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяДействияПрименитьПереданныеНастройки() Тогда 
		
		ОповещениеОбработано = Истина;
		ПрименитьПереданныеНастройки(Параметр);
		
	ИначеЕсли ИмяСобытия = "НастроеныИнтервалы"	Тогда
		Если Параметр.Свойство("Интервалы") Тогда
			ОбработкаОповещенияНастроеныИнтервалыНаСервере(Параметр);
		КонецЕсли;	
		
	КонецЕсли;
	
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если НовыеНастройкиКД = Неопределено Или Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Если ОткрытИзРассылки Тогда
			НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ОткрытИзРассылки", Истина);
			НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗаполнения", Параметры.ПропуститьПроверкуЗаполнения);
		КонецЕсли;
		НовыеНастройкиКД.Отбор.ИдентификаторПользовательскойНастройки              = "Отбор";
		НовыеНастройкиКД.Порядок.ИдентификаторПользовательскойНастройки            = "Порядок";
		НовыеНастройкиКД.УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		Возврат;
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Подготовка к вызову события переинициализации.
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеНастройкиКД);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	// Ничего не делать если отчет не на СКД и никаких настроек не загружено.
	Если Не РежимВариантаОтчета() И НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		ОтчетНаименованиеТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "ВариантНаименование");
		
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
		
		Если КлючТекущегоВарианта = Неопределено Тогда
			КлючТекущегоВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НовыеНастройкиКД.ДополнительныеСвойства, "КлючВарианта");
		КонецЕсли;
	КонецЕсли;
	
	ХранилищеСвойств = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "НастройкиОтчета");
	Если ХранилищеСвойств <> Неопределено Тогда
		ДополнительныеНастройки = ХранилищеСвойств.Значение.Получить();
		Если ДополнительныеНастройки <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеНастройки,, "Интервалы");
			Если ДополнительныеНастройки.Свойство("Интервалы") Тогда
				ЗаполнитьТаблицуИнтервалов(Интервалы, ДополнительныеНастройки.Интервалы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетОбъект 	= РеквизитФормыВЗначение("Отчет");
	ОтчетОбъектИмя 	= ОтчетОбъект.Метаданные().Имя;

	Если ОтчетОбъектИмя = "ЗадолженностьПокупателейПоСрокамДолга" 
			ИЛИ ОтчетОбъектИмя = "ЗадолженностьПоставщикамПоСрокамДолга" Тогда
		Если Интервалы.Количество() > 0 Тогда
			НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
			НастройкиОтчета.СхемаМодифицирована = Истина;
			ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	ИзмененыНастройкиБК = Ложь;
	
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которых не переопределялись.
	Если ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	// Обновление ссылки варианта отчета.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ОбновитьИнформациюОВариантеОтчета();
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда
		// Подготовка к переинициализации.
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	КонецЕсли;
	
	ДополнительныеСвойства  = НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства;
	ПараметрНастройкиОтчета = Неопределено;
	ДополнительныеСвойства.Свойство("НастройкиОтчета", ПараметрНастройкиОтчета);
	Если ТипЗнч(ПараметрНастройкиОтчета) = Тип("ХранилищеЗначения") Тогда
		ПараметрНастройкиОтчета = ПараметрНастройкиОтчета.Получить();
	КонецЕсли;
	
	Если НЕ РежимРасшифровки И ТипЗнч(ПараметрНастройкиОтчета) = Тип("Структура") Тогда
		
		НастройкиОтчетаБК = ПараметрНастройкиОтчета;
		
		Если ОткрытИзРассылки Тогда
			ПараметрПериод = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(НовыеПользовательскиеНастройкиКД, "ПериодОтчета");
			Если ПараметрПериод <> Неопределено И ПараметрПериод.Использование
				И ТипЗнч(ПараметрПериод.Значение) = Тип("СтандартныйПериод") Тогда
				НастройкиОтчетаБК.Вставить("ПериодОтчета",  ПараметрПериод.Значение);
				НастройкиОтчетаБК.Вставить("НачалоПериода", ПараметрПериод.Значение.ДатаНачала);
				НастройкиОтчетаБК.Вставить("КонецПериода",  ПараметрПериод.Значение.ДатаОкончания);
				НастройкиОтчетаБК.Вставить("Период",        ПараметрПериод.Значение.ДатаОкончания);
			КонецЕсли;
		КонецЕсли;
		
		РеквизитыФормыБК = ПолучитьСписокРеквизитовФормыБК(Ложь);
		Для Каждого РеквизитБК Из РеквизитыФормыБК Цикл
			
			Если НастройкиОтчетаБК.Свойство(РеквизитБК) Тогда
				
				Если РеквизитБК = "Интервалы" Тогда
					ЗаполнитьТаблицуИнтервалов(Интервалы, НастройкиОтчетаБК[РеквизитБК]);
				ИначеЕсли РеквизитБК = "ИзмененыНастройкиВариант" Тогда
					ПользовательскиеНастройкиМодифицированы = НастройкиОтчетаБК[РеквизитБК];
					
				Иначе
					ЭтотОбъект[РеквизитБК] = НастройкиОтчетаБК[РеквизитБК];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Интервалы.Количество() > 0 Тогда
		НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Отчет").СхемаКомпоновкиДанных, УникальныйИдентификатор);
		НастройкиОтчета.СхемаМодифицирована = Истина;
		ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере(Ложь);
	КонецЕсли;
	
	Элементы.ВыводитьПодписиРуководителей.Доступность = ВыводитьПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимВариантаОтчетаБК Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбновления = Новый Структура("ИмяСобытия", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
 	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыНастроек = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого ЭлементНастройки Из ЭлементыНастроек Цикл
		Если ТипЗнч(ЭлементНастройки) <> Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			Или ТипЗнч(ЭлементНастройки.Значение) <> Тип("СтандартныйПериод")
			Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонИмени = "КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + ЭлементыНастроек.Индекс(ЭлементНастройки);
		
		ДатаНачала = Элементы.Найти(ШаблонИмени + "ДатаНачала");
		ДатаОкончания = Элементы.Найти(ШаблонИмени + "ДатаОкончания");
		Если ДатаНачала = Неопределено Или ДатаОкончания = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Значение = ЭлементНастройки.Значение;
		Если ДатаНачала.АвтоОтметкаНезаполненного = Истина
			И Не ЗначениеЗаполнено(Значение.ДатаНачала)
			И Не ЗначениеЗаполнено(Значение.ДатаОкончания) Тогда
			ТекстОшибки = НСтр("ru = 'Не указан период'");
			ПутьКДанным = ДатаНачала.ПутьКДанным;
		ИначеЕсли Значение.ДатаНачала > Значение.ДатаОкончания Тогда
			ТекстОшибки = НСтр("ru = 'Конец периода должен быть больше начала'");
			ПутьКДанным = ДатаОкончания.ПутьКДанным;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ПутьКДанным,, Отказ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(НастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройкиКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ОтчетыКлиентСервер.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек, НовыеНастройкиКД);
	НастройкиКД.ДополнительныеСвойства.Вставить("Адрес", ПоместитьВоВременноеХранилище(НовыеНастройкиКД));
	НастройкиКД = НовыеНастройкиКД;
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
	ОбновитьИнформациюОВариантеОтчета();
	УстановитьВидимостьДоступность(Истина);
	НастройкиКД.ДополнительныеСвойства.Вставить("ВидРегистраОтчета", ВидРегистраОтчета);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	Если Не РежимВариантаОтчета() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимРасшифровки Тогда
		
		НастройкиОтчетаБК = Новый Структура;
		
		РеквизитыФормыБК = ПолучитьСписокРеквизитовФормыБК(Ложь);
		Для Каждого РеквизитБК Из РеквизитыФормыБК Цикл
				
			Если РеквизитБК = "Интервалы" Тогда
				
				ТЗИнтервалы = ДанныеФормыВЗначение(Интервалы, Тип("ТаблицаЗначений"));
				ТЗИнтервалы.Сортировать("Значение");
				
				МассивИнтервалы = ТЗИнтервалы.ВыгрузитьКолонку("Значение");
				
				НастройкиОтчетаБК.Вставить(РеквизитБК, МассивИнтервалы);
				
			ИначеЕсли РеквизитБК = "ИзмененыНастройкиВариант" Тогда
				НастройкиОтчетаБК.Вставить(РеквизитБК, (НЕ ИзмененыНастройкиБК) ИЛИ ВариантМодифицирован);				
			Иначе
				НастройкиОтчетаБК.Вставить(РеквизитБК, ЭтотОбъект[РеквизитБК]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОткрытИзРассылки Тогда
			ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("НастройкиОтчета", НастройкиОтчетаБК);
			ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ВидРегистраОтчета", ВидРегистраОтчета);
		Иначе
			КомпоновщикНастроекКД = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(НастройкиОтчета.АдресСхемы));
			
			КомпоновщикНастроекКД.ЗагрузитьНастройки(Отчет.КомпоновщикНастроек.ПолучитьНастройки());

			// Перенос пользовательских настроек в основные
			КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
			КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НастройкиОтчета", НастройкиОтчетаБК);
			КомпоновщикНастроекКД.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидРегистраОтчета", ВидРегистраОтчета);
		
		    НастройкиОтчета.АдресНастроекОтчета = ПоместитьВоВременноеХранилище(КомпоновщикНастроекКД.ПользовательскиеНастройки);
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ОткрытИзРассылки Тогда
		ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	КонецЕсли;
	
	ОбновитьКомандыВыбораВариантов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтандартнаяОбработка Тогда
		ИнтеграцияПодсистемБСПКлиент.ПриОбработкеВыбораТабличногоДокумента(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
		ОтчетыКлиентПереопределяемый.ОбработкаВыбораТабличногоДокумента(ЭтотОбъект, Элемент, Область, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка И ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Если ПерейтиПоСсылке(Область.Текст) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Попытка
			ЗначениеРасшифровки = Область.Расшифровка;
		Исключение
			ЗначениеРасшифровки = Неопределено;
			// Для некоторых типов областей табличного документа (свойство ТипОбласти)
			// чтение расшифровки недоступно, поэтому делается попытка-исключение.
		КонецПопытки;
		
		Если ЗначениеРасшифровки <> Неопределено И ПерейтиПоСсылке(ЗначениеРасшифровки) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если ПерейтиПоСсылке(Область.Маска) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.АнализЖурналаРегистрации") Тогда
		МодульАнализЖурналаРегистрацииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("АнализЖурналаРегистрацииКлиент");
		МодульАнализЖурналаРегистрацииКлиент.ФормаОтчетаОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
	ИнтеграцияПодсистемБСПКлиент.ПриОбработкеДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизации(Элемент)
	ПодключитьОбработчикОжидания("РассчитатьПоказателиДинамически", 0.2, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_ПриИзменении(Элемент)
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Индекс = ПутьКДаннымЭлементов.ПоИмени[Элемент.Имя];
	Если Индекс = Неопределено Тогда 
		Индекс = ОтчетыКлиентСервер.ИндексЭлементаНастройкиПоПути(Элемент.Имя);
	КонецЕсли;
	
	ЭлементНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы[Индекс];
	
	ЭтоФлажок = СтрНачинаетсяС(Элемент.Имя, "Флажок") Или СтрЗаканчиваетсяНа(Элемент.Имя, "Флажок");
	Если ЭтоФлажок Тогда 
		ЭлементНастройки.Значение = ЭтотОбъект[Элемент.Имя];
	КонецЕсли;
	
	Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
		И НастройкиОтчета.ЗагрузитьНастройкиПриИзмененииПараметров.Найти(ЭлементНастройки.Параметр) <> Неопределено Тогда 
		
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		
		ПараметрыОбновления = Новый Структура;
		ПараметрыОбновления.Вставить("КомпоновщикНастроекКД", КомпоновщикНастроек);
		ПараметрыОбновления.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		
		ОбновитьЭлементыФормыНастроек(ПараметрыОбновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНастройки_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Период_ПриИзменении(Элемент)
	ОтчетыКлиент.УстановитьПериод(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Имя = НастройкиОтчета.ПолноеИмя + ".ФормаНастроек";
	
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("КлючВарианта", Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("ВариантНаименование", Строка(ОтчетНаименованиеТекущегоВарианта));
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Обработчик = Новый ОписаниеОповещения("ВсеНастройкиЗавершение", ЭтотОбъект);
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.ЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Настройки",
			Ложь, Ложь);
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, НастройкиОтчета.ПрефиксЗамеров);
	КонецЕсли;
	
	ОткрытьФорму(Имя, ПараметрыФормы, ЭтотОбъект, , , , Обработчик, Режим);
	
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗавершение(Результат, ПараметрыВыполнения) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтчета.Вставить("РезультатНастройки", Результат);
	ПодключитьОбработчикОжидания("ОбновитьЭлементыФормыНастроекОтложенно", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	ПараметрыФормы = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта", Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта", Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "НастройкиПоУмолчанию");
	
	Если ВариантМодифицирован Тогда
		ПараметрыЗаполнения.Вставить("СброситьНастройкиВарианта", Истина);
		ПараметрыЗаполнения.Вставить("ВариантМодифицирован", Ложь);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СброситьПользовательскиеНастройки", Истина);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("СформироватьПередОтправкойПоПочте", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ОчиститьСообщения();
	Сформировать();
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСразу(Команда)
	ФормироватьСразу = Не Элементы.ФормироватьСразу.Пометка;
	Элементы.ФормироватьСразу.Пометка = ФормироватьСразу;
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ФормироватьСразу", ФормироватьСразу);
	ПользовательскиеНастройкиМодифицированы = Истина;
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
КонецПроцедуры

&НаКлиенте
Процедура ДругиеОтчеты(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВариантСсылка", НастройкиОтчета.ВариантСсылка);
	ПараметрыФормы.Вставить("ОтчетСсылка", НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормы.Вставить("ПодсистемаСсылка", ФормаПараметры.Подсистема);
	ПараметрыФормы.Вставить("ОтчетНаименование", НастройкиОтчета.Наименование);
	
	Блокировать = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.ПанельДругихОтчетов", ПараметрыФормы, ЭтотОбъект, Истина, , , , Блокировать);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСхему(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьСхемуПослеПомещенияФайла", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Файлы XML (*.xml) |*.xml'");
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(ОписаниеОповещения, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСхему(Команда)
#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	Если СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ДополнительныеСвойства.Свойство("СхемаКомпоновкиДанных") Тогда
		СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ДополнительныеСвойства.СхемаКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);
	Конструктор.Редактировать(ЭтотОбъект);
#Иначе
	ПоказатьПредупреждение(, (НСтр("ru = 'Для того чтобы редактировать схему компоновки, необходимо запустить приложение в режиме толстого клиента.'")));
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСтандартнуюСхему(Команда)
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Очистить();
	
	ПараметрыДанных = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ИменаПараметровКОчистке = СтрРазделить("ТипОбъектаМетаданных, ИмяОбъектаМетаданных, ИмяТаблицы", ", ", Ложь);
	Для Каждого ИмяПараметра Из ИменаПараметровКОчистке Цикл 
		НайденныйПараметр = ПараметрыДанных.Найти(ИмяПараметра);
		Если НайденныйПараметр <> Неопределено Тогда 
			НайденныйПараметр.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд обмена настройками (основными и пользовательскими).

&НаКлиенте
Процедура СохранитьВариантОтчетаВФайл(Команда)
	ПараметрыСохранения = Новый Структура(ВариантыОтчетовКлиентСервер.СвойстваСохраненияВариантаОтчета());
	ЗаполнитьЗначенияСвойств(ПараметрыСохранения, ЭтотОбъект);
	
	ПараметрыСохранения.ВариантОтчета = НастройкиОтчета.ВариантСсылка;
	ПараметрыСохранения.ИмяОтчета = НастройкиОтчета.ПолноеИмя;
	ПараметрыСохранения.НастройкиВариантаОтчета = Отчет.КомпоновщикНастроек.Настройки;
	
	ОткрытьФорму(
		"ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.СохранениеВариантаОтчетаВФайл",
		ПараметрыСохранения,
		ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВариантОтчетаИзФайла(Команда)
	СвойстваВариантаОтчета = ВариантыОтчетовКлиент.СвойстваВариантаОтчетаОснования();
	СвойстваВариантаОтчета.Ссылка = НастройкиОтчета.ВариантСсылка;
	СвойстваВариантаОтчета.ИмяОтчета = НастройкиОтчета.ПолноеИмя;
	СвойстваВариантаОтчета.ПредставлениеВарианта = ПредставлениеТекущегоВарианта;
	
	Обработчик = Новый ОписаниеОповещения(
		"ОбновитьВариантОтчетаИзФайла", ВариантыОтчетовКлиент, СвойстваВариантаОтчета);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Архив ZIP (*.zip)|*.zip'");
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяНастройками(Команда)
	ОписаниеНастроек = Новый Структура();
	ОписаниеНастроек.Вставить("ВариантОтчета", НастройкиОтчета.ВариантСсылка);
	ОписаниеНастроек.Вставить("КлючОбъекта", НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта);
	ОписаниеНастроек.Вставить("КлючНастроек", КлючТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Представление", ПредставлениеТекущихПользовательскихНастроек);
	ОписаниеНастроек.Вставить("Настройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ОписаниеНастроек.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	
	ВариантыОтчетовКлиент.ПоделитьсяПользовательскимиНастройками(ОписаниеНастроек);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики команд расчета показателей.

&НаКлиенте
Процедура РассчитатьСумму(Команда)
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличество(Команда)
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСреднее(Команда)
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМинимум(Команда)
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаксимум(Команда)
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент", Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВсеПоказатели(Команда)
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(
		Элементы, Не Элементы.РассчитатьВсеПоказатели.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПоказатели(Команда)
	ОбщегоНазначенияСлужебныйКлиент.УстановитьВидимостьПанелиПоказателей(Элементы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ИнтеграцияПодсистемБСПКлиент.ПриОбработкеКоманды(ЭтотОбъект, Команда, Ложь);
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьВариантОтчета(Команда)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	Если Найденные.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета не найден.'"));
		Возврат;
	КонецЕсли;
	
	ВариантФормы = Найденные[0];
	НастройкиОтчета.Удалить("ФормаНастроекРасширенныйРежим");
	
	ЗагрузитьВариант(ВариантФормы.КлючВарианта);
	
	КлючУникальности = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, ВариантФормы.КлючВарианта);
	
	Если Элементы.ФормироватьСразу.Пометка Тогда
		ПодключитьОбработчикОжидания("Сформировать", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипФормыВладельца", ТипФормыОтчета);
	ПараметрыФормы.Вставить("НастройкиОтчета", НастройкиОтчета);
	ПараметрыФормы.Вставить("КомпоновщикНастроек", Отчет.КомпоновщикНастроек);
	Обработчик = Новый ОписаниеОповещения("ИзменитьУсловияОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("ХранилищеНастроек.ХранилищеВариантовОтчетов.Форма.УсловияОтборовОтчета", ПараметрыФормы, ЭтотОбъект, Истина,,, Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУсловияОтборовЗавершение(УсловияОтборов, Контекст) Экспорт
	Если УсловияОтборов = Неопределено
		Или УсловияОтборов = КодВозвратаДиалога.Отмена
		Или УсловияОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяСобытия", "ИзменитьУсловияОтборов");
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("УсловияОтборов", УсловияОтборов);
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроек(ПараметрыОбновления)
	ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления);
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь) Тогда
		ОчиститьСообщения();
		Сформировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыНастроекОтложенно()
	
	ОбновитьЭлементыФормыНастроек(НастройкиОтчета.РезультатНастройки);
	НастройкиОтчета.Удалить("РезультатНастройки");
	
КонецПроцедуры

#Область ФормированиеСОтправкойПоПочте

&НаКлиенте
Процедура СформироватьПередОтправкойПоПочте(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоПочтеПослеФормирования", ЭтотОбъект);
		ОтчетыКлиент.СформироватьОтчет(ЭтотОбъект, Обработчик);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоПочтеПослеФормирования(ТабличныйДокументСформирован, ДополнительныеПараметры) Экспорт
	Если ТабличныйДокументСформирован Тогда
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Формирование

&НаКлиенте
Процедура Сформировать()
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		Комментарий = НастройкиОтчета.ПрефиксЗамеров + "; " + НСтр("ru = 'Непосредственно:'") + " " + Строка(Непосредственно);
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		ИдентификаторЗамера = МодульОценкаПроизводительностиКлиент.ЗамерВремени(
			НастройкиОтчета.КлючЗамеров + ".Формирование",
			Ложь, Ложь);
		МодульОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(ИдентификаторЗамера, Комментарий);
	КонецЕсли;
	
	Если Не КомпоновщикИнициализирован И Интервалы.Количество() > 0 Тогда
		ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере();
	КонецЕсли;
	
	Результат = РезультатФормированияОтчета(ФормированиеПриОткрытии, НастройкиОтчета.Внешний Или НастройкиОтчета.Безопасный);
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполняется" Тогда 
		ПослеФормирования(Результат, Ложь);
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеФормирования", ЭтотОбъект, Истина);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, Обработчик, ПараметрыОжидания);
КонецПроцедуры

&НаКлиенте
Процедура ПослеФормирования(Результат, ЗагрузитьРезультатФормированияОтчета) Экспорт 
	Если Результат = Неопределено Тогда 
		ПоказатьОшибкиФормирования(НСтр("ru = 'Формирование отчета прервано администратором'"));
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован'"),, Заголовок);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда 
		Если ЗагрузитьРезультатФормированияОтчета Тогда
			ЗагрузитьРезультатФормированияОтчета();
		КонецЕсли;
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"),, Заголовок);
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиФормирования(Результат.КраткоеПредставлениеОшибки);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет не сформирован'"),, Заголовок);
	КонецЕсли;
	
	ФормированиеПриОткрытии = Ложь;
	
	ВыполнятьЗамеры = НастройкиОтчета.ВыполнятьЗамеры И ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров);
	Если ВыполнятьЗамеры Тогда
		МодульОценкаПроизводительностиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОценкаПроизводительностиКлиент");
		МодульОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	КонецЕсли;
	
	ОтчетСформирован = ?(Результат = Неопределено, Ложь, Результат.Статус = "Выполнено");
	
	Если ОтчетСформирован Тогда
		
		НастройкиОтчетаБК = Неопределено;
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("НастройкиОтчета", НастройкиОтчетаБК);
		
		Если НастройкиОтчетаБК <> Неопределено Тогда
			Если НастройкиОтчетаБК.Свойство("ИспользоватьПослеВыводаРезультата") Тогда
				ПослеВыводаРезультата(НастройкиОтчетаБК, ОтчетТабличныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияПодсистемБСПКлиент.ПослеФормирования(ЭтотОбъект, ОтчетСформирован);
	ОтчетыКлиентПереопределяемый.ПослеФормирования(ЭтотОбъект, ОтчетСформирован);
КонецПроцедуры

&НаСервере
Функция РезультатФормированияОтчета(Знач ФормированиеПриОткрытии, Непосредственно)
	
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("НачалоПериода", НачалоДня(НачалоПериода));
	ДополнительныеНастройки.Вставить("КонецПериода" , КонецДня(КонецПериода));
	ДополнительныеНастройки.Вставить("Период"       , КонецДня(Период));
	ДополнительныеНастройки.Вставить("СписокСтруктурныхЕдиниц", СписокСтруктурныхЕдиниц);
	ДополнительныеНастройки.Вставить("СписокПодразделений"    , СписокПодразделений);
	ДополнительныеНастройки.Вставить("СписокВладельцевГоловныхПодразделений"       , СписокВладельцевГоловныхПодразделений);
	ДополнительныеНастройки.Вставить("ПоддержкаРаботыСоСтруктурнымиПодразделениями", ПоддержкаРаботыСоСтруктурнымиПодразделениями);
	ДополнительныеНастройки.Вставить("ПеречислениеРазделыНалоговогоУчета"          , ПеречислениеРазделыНалоговогоУчета);
	ДополнительныеНастройки.Вставить("КоличествоВыводимыхЗаписейВДиаграмме"        , КоличествоВыводимыхЗаписейВДиаграмме);
	ДополнительныеНастройки.Вставить("Дата2"     , Дата2);
	ДополнительныеНастройки.Вставить("Дата3"     , Дата3);
	ДополнительныеНастройки.Вставить("ТипЗадолженности"   , ТипЗадолженности);
	ДополнительныеНастройки.Вставить("Периодичность"      , Периодичность);
	ДополнительныеНастройки.Вставить("Налогоплательщик"   , Налогоплательщик);
	ДополнительныеНастройки.Вставить("ИдентификаторОтчета", СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1]);
	ДополнительныеНастройки.Вставить("ВидРегистраОтчета"  , ВидРегистраОтчета);
	ДополнительныеНастройки.Вставить("ВыводитьЗаголовок"  , ВыводитьЗаголовок);
	ДополнительныеНастройки.Вставить("ВыводитьПодписи"    , ВыводитьПодписи);
	ДополнительныеНастройки.Вставить("ВыводитьПодписиРуководителей" , ВыводитьПодписиРуководителей);
	ДополнительныеНастройки.Вставить("ИзмененыНастройкиВариант"     , ПользовательскиеНастройкиМодифицированы ИЛИ ВариантМодифицирован);
	
	ТЗИнтервалы = ДанныеФормыВЗначение(Интервалы, Тип("ТаблицаЗначений"));
	ТЗИнтервалы.Сортировать("Значение");
	МассивИнтервалы = ТЗИнтервалы.ВыгрузитьКолонку("Значение");
	
	ДополнительныеНастройки.Вставить("Интервалы", МассивИнтервалы);
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("НастройкиОтчета", ДополнительныеНастройки);
	
	ХранилищеСвойств = Новый ХранилищеЗначения(ДополнительныеНастройки);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек, "НастройкиОтчета", ХранилищеСвойств);
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Если ФормированиеПриОткрытии Тогда
			ТекстОшибки = "";
			Сообщения = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из Сообщения Цикл
				ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ";" + Символы.ПС + Символы.ПС) + Сообщение.Текст;
			КонецЦикла;
			ПоказатьОшибкиФормирования(ТекстОшибки);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОтчета = СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1];
	ПараметрыФормирования = ПараметрыФормированияОтчета(ИмяОтчета, Непосредственно);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнение отчета: %1'"),
		ИмяОтчета);
	ПараметрыВыполнения.ЗапуститьНеВФоне = Непосредственно;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ВариантыОтчетов.СформироватьОтчетВФоне",
		ПараметрыФормирования,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеИдентификатор = Результат.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = Результат.АдресРезультата;
	
	Если Результат.Статус <> "Выполняется" Тогда
		ЗагрузитьРезультатФормированияОтчета();
	Иначе	
		ОтобразитьСостояниеОтчета(НСтр("ru = 'Отчет формируется...'"), БиблиотекаКартинок.ДлительнаяОперация48);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияОтчета(ИмяОтчета, Непосредственно)
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("СсылкаОтчета", НастройкиОтчета.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("СсылкаВарианта", НастройкиОтчета.ВариантСсылка);
	ПараметрыФормированияОтчета.Вставить("КлючВарианта", КлючТекущегоВарианта);
	ПараметрыФормированияОтчета.Вставить("НастройкиКД", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройкиКД", Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройкиКД", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормированияОтчета.Вставить("СхемаМодифицирована", НастройкиОтчета.СхемаМодифицирована);
	ПараметрыФормированияОтчета.Вставить("КлючСхемы", НастройкиОтчета.КлючСхемы);
	ПараметрыФормированияОтчета.Вставить("ИмяКлючевойОперации");
	ПараметрыФормированияОтчета.Вставить("КомментарийКлючевойОперации");
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, ПараметрыЗамеровФормированияОтчета(ИмяОтчета));
	
	Если Непосредственно Тогда
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
		КонецЕсли;
		ПараметрыФормированияОтчета.Вставить("Объект", РеквизитФормыВЗначение("Отчет"));
		ПараметрыФормированияОтчета.Вставить("ПолноеИмя", НастройкиОтчета.ПолноеИмя);
	Иначе
		Если НастройкиОтчета.СхемаМодифицирована Тогда
			ПараметрыФормированияОтчета.Вставить("СхемаКД", ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормированияОтчета;
КонецФункции

&НаСервере
Функция ПараметрыЗамеровФормированияОтчета(ИмяОтчета)
	ПараметрыЗамеров = Новый Структура("ИмяКлючевойОперации, КомментарийКлючевойОперации");
	
	Если Не НастройкиОтчета.ВыполнятьЗамеры
		Или Не ЗначениеЗаполнено(НастройкиОтчета.КлючЗамеров) Тогда
		Возврат ПараметрыЗамеров;
	КонецЕсли;
	
	КомментарийКлючевойОперации = Новый Соответствие;
	КомментарийКлючевойОперации.Вставить("ИмяОтчета", ИмяОтчета);
	КомментарийКлючевойОперации.Вставить("ИмяИсходногоВарианта", НастройкиОтчета.ИмяИсходногоВарианта);
	КомментарийКлючевойОперации.Вставить("Внешний", Число(НастройкиОтчета.Внешний));
	КомментарийКлючевойОперации.Вставить("Пользовательский", Число(НастройкиОтчета.Пользовательский));
	КомментарийКлючевойОперации.Вставить("Расшифровка", Число(РежимРасшифровки));
	КомментарийКлючевойОперации.Вставить("Модифицирован", Число(ВариантМодифицирован));
	
	ПараметрыЗамеров.ИмяКлючевойОперации = НастройкиОтчета.КлючЗамеров + ".Формирование";
	ПараметрыЗамеров.КомментарийКлючевойОперации = КомментарийКлючевойОперации;
	
	Возврат ПараметрыЗамеров;
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатФормированияОтчета()
	Если Не ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресХранилища) Тогда 
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не удалось сформировать отчет'"));
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
	Если Результат = Неопределено Тогда 
		ПоказатьОшибкиФормирования(НСтр("ru = 'Не удалось сформировать отчет (пустой результат)'"));
		Возврат;
	КонецЕсли;
	
	Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "Успех");
	Если Успех <> Истина Тогда
		ПоказатьОшибкиФормирования(Результат.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеЕщеОбновляются = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ДанныеЕщеОбновляются", Ложь);
	Если ДанныеЕщеОбновляются Тогда
		ОбщегоНазначения.СообщитьПользователю(ВариантыОтчетов.СообщениеДанныеЕщеОбновляются());
	КонецЕсли;
	
	ОтобразитьСостояниеОтчета();
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент); // Сохранение настроек печати.
	
	Если ВыводитьПодписи Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		Попытка
			ОтчетОбъект.ВывестиПодписи(Результат.ТабличныйДокумент);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ОтчетТабличныйДокумент = Результат.ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать); // Восстановление.
	
	Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
		УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
	КонецЕсли;
	ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(Результат.Расшифровка, УникальныйИдентификатор);
	
	Если Не Результат.ВариантМодифицирован
		И Не Результат.ПользовательскиеНастройкиМодифицированы Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("ИмяСобытия", "ПослеФормирования");
	Результат.Вставить("Непосредственно", Ложь);
	ОбновитьЭлементыФормыНастроекНаСервере(Результат);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	//Вложение = Новый Структура;
	//Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ОтчетТабличныйДокумент, УникальныйИдентификатор));
	//Вложение.Вставить("Представление", ОтчетНаименованиеТекущегоВарианта);
	//
	//СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	//
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
	//	МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
	//	ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
	//	ПараметрыОтправки.Тема = ОтчетНаименованиеТекущегоВарианта;
	//	ПараметрыОтправки.Вложения = СписокВложений;
	//	МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	//КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтчетыПоПочтеНастройкаУчетнойЗаписиПредложена", БухгалтерскиеОтчетыКлиент, ЭтотОбъект);

	РаботаСПочтовымиСообщениямиКлиент.ПроверитьНаличиеУчетнойЗаписиДляОтправкиПочты(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Сведения = ОтчетыКлиент.СведенияОЭлементеНастройки(Отчет.КомпоновщикНастроек, Элемент.Имя);
	ОписаниеНастроек = Сведения.Описание;
	
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	ПараметрыВыбора = ОтчетыКлиентСервер.ПараметрыВыбора(
		Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент);
	
	Элемент.ДоступныеТипы = ОтчетыКлиент.ТипЗначенияОграниченныйСвязьюПоТипу(
		Сведения.Настройки, ПользовательскиеНастройки, Сведения.Элемент, ОписаниеНастроек);
	
	Если ТипЗнч(Сведения.ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
		ТекущееЗначение = Сведения.ЭлементПользовательскойНастройки.Значение;
	Иначе
		ТекущееЗначение = Сведения.ЭлементПользовательскойНастройки.ПравоеЗначение;
	КонецЕсли;
	
	ДоступныеЗначения = ?(ОписаниеНастроек = Неопределено, Неопределено, ОписаниеНастроек.ДоступныеЗначения);
	
	Условие = ОтчетыКлиентСервер.УсловиеЭлементаНастройки(Сведения.ЭлементПользовательскойНастройки, ОписаниеНастроек);
	ВыборГруппИЭлементов = ОтчетыКлиент.ЗначениеТипаИспользованиеГруппИЭлементов(
		?(ОписаниеНастроек = Неопределено, Неопределено, ОписаниеНастроек.ВыборГруппИЭлементов), Условие);
	
	ЗначенияДляВыбора = ЗначенияДляВыбора(
		Элемент.СписокВыбора,
		Сведения.ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки,
		Элемент.ДоступныеТипы);
	
	ОграничиватьВыборУказаннымиЗначениями = ДоступныеЗначения <> Неопределено;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отмеченные", ОтчетыКлиентСервер.ЗначенияСписком(ТекущееЗначение));
	ПараметрыОткрытия.Вставить("ОписаниеТипов", Элемент.ДоступныеТипы);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбора", ЗначенияДляВыбора);
	ПараметрыОткрытия.Вставить("ЗначенияДляВыбораЗаполнены", Элемент.СписокВыбора.Количество() > 0);
	ПараметрыОткрытия.Вставить("ОграничиватьВыборУказаннымиЗначениями", ОграничиватьВыборУказаннымиЗначениями);
	ПараметрыОткрытия.Вставить("Представление", Элемент.Заголовок);
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Массив(ПараметрыВыбора));
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ВыборГруппИЭлементов);
	ПараметрыОткрытия.Вставить("БыстрыйВыбор", ?(ОписаниеНастроек = Неопределено, Ложь, ОписаниеНастроек.БыстрыйВыбор));
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ЭлементПользовательскойНастройки", Сведения.ЭлементПользовательскойНастройки);
	ПараметрыОбработчика.Вставить("ОграничиватьВыборУказаннымиЗначениями", ОграничиватьВыборУказаннымиЗначениями);
	ПараметрыОбработчика.Вставить("ИмяЭлемента", Элемент.Имя);
	
	Обработчик = Новый ОписаниеОповещения("ЗавершитьВыборИзСписка", ЭтотОбъект, ПараметрыОбработчика);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыОткрытия, ЭтотОбъект,,,, Обработчик, Режим);
КонецПроцедуры

&НаКлиенте
Функция ЗначенияДляВыбора(СписокВыбора, ИдентификаторПользовательскойНастройки, ТипЗначения)
	ЗначенияДляВыбора = СписокВыбора;
	Если Не ЗначениеЗаполнено(ИдентификаторПользовательскойНастройки) Тогда 
		Возврат ЗначенияДляВыбора;
	КонецЕсли;
	
	ЗначенияДляВыбора.ТипЗначения = ТипЗначения;
	
	КэшЗначенийОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "КэшЗначенийОтборов");
	Если КэшЗначенийОтборов = Неопределено Тогда 
		Возврат ЗначенияДляВыбора;
	КонецЕсли;
	
	ЗначениеОтбора = КэшЗначенийОтборов.Получить(ИдентификаторПользовательскойНастройки);
	Если ЗначениеОтбора <> Неопределено Тогда 
		ОтчетыКлиентСервер.ДополнитьСписок(ЗначенияДляВыбора, ЗначениеОтбора);
	КонецЕсли;
	
	Возврат ЗначенияДляВыбора;
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборИзСписка(Список, ПараметрыВыбора) Экспорт
	Если ТипЗнч(Список) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеЗначения = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Список Цикл 
		Если ЭлементСписка.Пометка Тогда 
			ЗаполнитьЗначенияСвойств(ВыбранныеЗначения.Добавить(), ЭлементСписка);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементПользовательскойНастройки = ПараметрыВыбора.ЭлементПользовательскойНастройки;
	ЭлементПользовательскойНастройки.Использование = Истина;
	
	Если ТипЗнч(ЭлементПользовательскойНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
		ЭлементПользовательскойНастройки.Значение = ВыбранныеЗначения;
	Иначе
		ЭлементПользовательскойНастройки.ПравоеЗначение = ВыбранныеЗначения;
	КонецЕсли;
	
	Если Не ПараметрыВыбора.ОграничиватьВыборУказаннымиЗначениями Тогда 
		Элемент = Элементы.Найти(ПараметрыВыбора.ИмяЭлемента);
		
		Если Элемент <> Неопределено Тогда 
			Элемент.СписокВыбора.Очистить();
			
			Для Каждого ЭлементСписка Из Список Цикл 
				ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыКлиент.КэшироватьЗначениеОтбора(
		Список, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки, Отчет.КомпоновщикНастроек);
КонецПроцедуры

&НаКлиенте
Функция ПерейтиПоСсылке(АдресСсылки)
	Если ПустаяСтрока(АдресСсылки) Тогда
		Возврат Ложь;
	КонецЕсли;
	АдресСсылкиВРег = ВРег(АдресСсылки);
	Если СтрНачинаетсяС(АдресСсылкиВРег, ВРег("http://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("https://"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1cib/"))
		Или СтрНачинаетсяС(АдресСсылкиВРег, ВРег("e1c://")) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресСсылки);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСхемуПослеПомещенияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранныеФайлы.Хранение);
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Очистить();
	ДополнительныеСвойства.Вставить("СхемаКомпоновкиДанных", ДвоичныеДанные);
	ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	ПараметрыЗаполнения.Вставить("КомпоновщикНастроекКД", Отчет.КомпоновщикНастроек);
	
	ОбновитьЭлементыФормыНастроек(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПереданныеНастройки(ОписаниеНастроек)
	Если ВариантМодифицирован Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Вариант отчета был изменен.
			|Сохраните изменения перед применением настроек.'"));
		Возврат;
	КонецЕсли;
	
	КлючТекущихПользовательскихНастроек = ОписаниеНастроек.КлючНастроек;
	ПредставлениеТекущихПользовательскихНастроек = ОписаниеНастроек.Представление;
	
	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОписаниеНастроек.Настройки);
	Сформировать();
КонецПроцедуры

// Выполняет расчет и вывод показателей выделенной области ячеек.
// См. обработчик события ОтчетТабличныйДокументПриАктивизацииОбласти.
//
&НаКлиенте
Процедура РассчитатьПоказателиДинамически()
	ОбщегоНазначенияСлужебныйКлиент.РассчитатьПоказатели(ЭтотОбъект, "ОтчетТабличныйДокумент");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСохраненииВарианта = Ложь)
	ПоказыватьКомандыВыбораВариантов = РежимВариантаОтчета() И НастройкиОтчета.РазрешеноВыбиратьВарианты;
	
	Если Не ПриСохраненииВарианта Тогда
		ПоказыватьКомандыИзмененияВарианта = ПоказыватьКомандыВыбораВариантов И НастройкиОтчета.РазрешеноИзменятьВарианты;
		РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			НастройкиОтчета, "РазрешеноВыбиратьИНастраиватьВариантыБезСохранения", Ложь);
		КоличествоДоступныхНастроек = ОтчетыСервер.КоличествоДоступныхНастроек(Отчет.КомпоновщикНастроек);
		
		Элементы.ВсеНастройки.Видимость = ПоказыватьКомандыИзмененияВарианта Или КоличествоДоступныхНастроек.Обычных > 0;
		Элементы.ВсеНастройкиЕще.Видимость = Элементы.ВсеНастройки.Видимость;
		Элементы.ГруппаВариантыОтчета.Видимость = ПоказыватьКомандыВыбораВариантов;
		
		РазрешеноСохранятьВариант = ПоказыватьКомандыИзмененияВарианта
			И Не РазрешеноВыбиратьИНастраиватьВариантыБезСохранения;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьВариант", "Видимость", РазрешеноСохранятьВариант);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьВариантЕще", "Видимость", РазрешеноСохранятьВариант);
		
		Элементы.ДругиеОтчеты.Видимость = НастройкиОтчета.Подсистема <> Неопределено
			И НастройкиОтчета.РазрешеноВыбиратьВарианты;
		Элементы.ДругиеОтчетыЕще.Видимость = Элементы.ДругиеОтчеты.Видимость;
		
		Элементы.ИзменитьВариант.Видимость = ПоказыватьКомандыИзмененияВарианта;
		Элементы.ВыбратьВариант.Видимость = ПоказыватьКомандыВыбораВариантов;
		
		РазрешеноИспользоватьНастройки =
			ПоказыватьКомандыВыбораВариантов
			И КоличествоДоступныхНастроек.Итог > 0
			И ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы, "ВыбратьНастройки", "Видимость");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ВыбратьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "СохранитьНастройки", "Видимость", РазрешеноИспользоватьНастройки);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ПоделитьсяНастройками", "Видимость", РазрешеноИспользоватьНастройки);
		
		Элементы.ИзменитьУсловияОтборов.Видимость = КоличествоДоступныхНастроек.Итог > 0 И РежимВариантаОтчета();
		
		Если РазрешеноВыбиратьИНастраиватьВариантыБезСохранения Тогда
			ВариантМодифицирован = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Команды выбора вариантов.
	Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
		ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
		
		Если ПоказыватьКомандыВыбораВариантов Тогда
			ОбновитьКомандыВыбораВариантов();
		КонецЕсли;
		
		Если ПравоВывода Тогда
			КлючСохраненияПоложенияОкна = ОтчетыКлиентСервер.КлючУникальности(НастройкиОтчета.ПолноеИмя, КлючТекущегоВарианта);
			НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", КлючСохраненияПоложенияОкна);
			ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
		КонецЕсли;
		
		НавигационнаяСсылка = "";
		Если ЗначениеЗаполнено(НастройкиОтчета.ВариантСсылка)
			И Не НастройкиОтчета.Внешний
			И Не НастройкиОтчета.Контекстный Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(НастройкиОтчета.ВариантСсылка);
		КонецЕсли;
	КонецЕсли;
	
	// Команды модификации Схемы.
	Элементы.РедактироватьСхему.Видимость = НастройкиОтчета.РазрешеноРедактироватьСхему;
	Элементы.ВосстановитьСтандартнуюСхему.Видимость = НастройкиОтчета.РазрешеноВосстанавливатьСтандартнуюСхему;
	Элементы.ЗагрузитьСхему.Видимость = НастройкиОтчета.РазрешеноЗагружатьСхему
		// В модели сервиса загрузка произвольной СКД недоступна с точки зрения безопасности.
		И Не ОбщегоНазначения.РазделениеВключено();
	
	// Заголовок.
	ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
	Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
		Заголовок = ОтчетНаименованиеТекущегоВарианта;
	Иначе
		Заголовок = НастройкиОтчета.Наименование;
	КонецЕсли;
	
	Если РежимРасшифровки Тогда
		Заголовок = Заголовок + " (" + НСтр("ru = 'Расшифровка'") + ")";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВариант(КлючВарианта)
	Если Не РежимРасшифровки И Не ВариантМодифицирован Тогда
		// Сохранение текущих пользовательских настроек.
		ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
			НастройкиОтчета.ПолноеИмя + "/" + КлючТекущегоВарианта + "/ТекущиеПользовательскиеНастройки",
			"",
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
	РежимРасшифровки = Ложь;
	ВариантМодифицирован = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Истина;
	
	УстановитьТекущийВариант(КлючВарианта);
	ОтобразитьСостояниеОтчета(НСтр("ru = 'Выбран другой вариант отчета. Нажмите ""Сформировать"" для получения отчета.'"),
		БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеОтчета(Знач ТекстСостояния = "", Знач КартинкаСостояния = Неопределено)
	
	ОтображатьСостояние = Не ПустаяСтрока(ТекстСостояния);
	Если КартинкаСостояния = Неопределено Или Не ОтображатьСостояние Тогда 
		КартинкаСостояния = Новый Картинка;
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = ОтображатьСостояние;
	ОтображениеСостояния.ДополнительныйРежимОтображения = 
		?(ОтображатьСостояние, ДополнительныйРежимОтображения.Неактуальность, ДополнительныйРежимОтображения.НеИспользовать);
	ОтображениеСостояния.Картинка = КартинкаСостояния;
	ОтображениеСостояния.Текст = ТекстСостояния;

	Элементы.ОтчетТабличныйДокумент.ТолькоПросмотр = ОтображатьСостояние 
		Или Элементы.ОтчетТабличныйДокумент.Вывод = ИспользованиеВывода.Запретить;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ОпределитьПоведениеВМобильномКлиенте()
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.КомандыИПоказатели.Заголовок = НСтр("ru = 'показатели'");
	Элементы.ГруппаНастройкиОтчета.Видимость = Ложь;
	Элементы.ГруппаРаботаВТаблице.Видимость = Ложь;
	Элементы.ГруппаВывод.Видимость = Ложь;
	Элементы.Редактирование.Видимость = Ложь;
	
	Элементы.ГруппаПоказатель.РастягиватьПоГоризонтали = Неопределено;
	Элементы.Показатель.Ширина = 0;
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючТекущегоВарианта(ОтчетПолноеИмя, ПредопределенныеВарианты)
	ВариантыПанелиКлючТекущегоВарианта = ПустойКлючВарианта();
	
	Если ЗначениеЗаполнено(Параметры.КлючВарианта) Тогда
		КлючТекущегоВарианта = Параметры.КлючВарианта;
	Иначе
		Если Параметры.Свойство("ПараметрКоманды")
			И ОбщегоНазначения.ЗначениеСсылочногоТипа(Параметры.ПараметрКоманды) Тогда 
			
			ВладелецПолноеИмя = Параметры.ПараметрКоманды.Метаданные().ПолноеИмя();
			КлючОбъекта = ОтчетПолноеИмя + "/" + ВладелецПолноеИмя + "/КлючТекущегоВарианта";
		Иначе
			КлючОбъекта = ОтчетПолноеИмя + "/КлючТекущегоВарианта";
		КонецЕсли;
		
		КлючТекущегоВарианта = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(КлючОбъекта, "");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючТекущегоВарианта)
		И ПредопределенныеВарианты.Количество() > 0 Тогда
		
		КлючТекущегоВарианта = ПредопределенныеВарианты[0].Значение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормыНастроекНаСервере(ПараметрыОбновления = Неопределено)
	ЗагрузитьНастройкиВКомпоновщик(ПараметрыОбновления);
	
	ОтчетыСервер.ОбновитьЭлементыФормыНастроек(
		ЭтотОбъект, Элементы.КомпоновщикНастроекПользовательскиеНастройки, ПараметрыОбновления);
	
	Если ПараметрыОбновления.ИмяСобытия <> "ПослеФормирования" Тогда
		Переформировать = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбновления, "Переформировать", Ложь);
		
		Если Переформировать
			И Не ПроверитьЗаполнение() Тогда 
			
			ПараметрыОбновления.Переформировать = Ложь;
			
		ИначеЕсли Переформировать Тогда
			
			ОтобразитьСостояниеОтчета(НСтр("ru = 'Отчет формируется...'"), БиблиотекаКартинок.ДлительнаяОперация48);
			
		ИначеЕсли ПараметрыОбновления.ВариантМодифицирован
			Или ПараметрыОбновления.ПользовательскиеНастройкиМодифицированы Тогда
			
			ОтобразитьСостояниеОтчета(НСтр("ru = 'Изменились настройки. Нажмите ""Сформировать"" для получения отчета.'"));
		КонецЕсли;
	КонецЕсли;
	
	// Стандартный диалог не показывается если пользователю запрещено изменять варианты этого отчета.
	Если Не НастройкиОтчета.РазрешеноИзменятьВарианты Тогда
		ВариантМодифицирован = Ложь;
	КонецЕсли;
	
	ОтчетыСервер.ВосстановитьЗначенияОтборов(ЭтотОбъект);
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВКомпоновщик(ПараметрыЗагрузки)
	ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки);
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	Если НастройкиОтчета.События.ПередЗаполнениемПанелиБыстрыхНастроек Тогда
		ОтчетОбъект.ПередЗаполнениемПанелиБыстрыхНастроек(ЭтотОбъект, ПараметрыЗагрузки);
	КонецЕсли;
	
	ДоступныеНастройки = ОтчетыСервер.ДоступныеНастройки(ПараметрыЗагрузки, НастройкиОтчета);
	
	СброситьНастройкиВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗагрузки, "СброситьНастройкиВарианта", Ложь);
	Если СброситьНастройкиВарианта Тогда
		ЗагрузитьВариант(КлючТекущегоВарианта);
	КонецЕсли;
	
	ОтчетыСервер.СброситьПользовательскиеНастройки(ДоступныеНастройки, ПараметрыЗагрузки);
	
	Если НастройкиОтчета.События.ПередЗагрузкойНастроекВКомпоновщик Тогда 
		ОтчетОбъект.ПередЗагрузкойНастроекВКомпоновщик(
			ЭтотОбъект,
			НастройкиОтчета.КлючСхемы,
			КлючТекущегоВарианта,
			ДоступныеНастройки.Настройки,
			ДоступныеНастройки.ПользовательскиеНастройки);
	КонецЕсли;
	
	НастройкиЗагружены = ОтчетыКлиентСервер.ЗагрузитьНастройки(
		Отчет.КомпоновщикНастроек,
		ДоступныеНастройки.Настройки,
		ДоступныеНастройки.ПользовательскиеНастройки,
		ДоступныеНастройки.ФиксированныеНастройки);
	
	// Установка фиксированных отборов выполняется через компоновщик, т.к. в нем наиболее полная коллекция настроек.
	// В ПередЗагрузкой в параметрах могут отсутствовать те параметры, настройки которые не переопределялись.
	Если НастройкиЗагружены И ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") Тогда
		ОтчетыСервер.УстановитьФиксированныеОтборы(ФормаПараметры.Отбор, Отчет.КомпоновщикНастроек.Настройки, НастройкиОтчета);
	КонецЕсли;
	
	Если ФормаПараметры.Свойство("ФиксированныеНастройки") Тогда 
		ФормаПараметры.ФиксированныеНастройки = Отчет.КомпоновщикНастроек.ФиксированныеНастройки;
	КонецЕсли;
	
	ОтчетыСервер.УстановитьДоступныеЗначения(ОтчетОбъект, ЭтотОбъект);
	ОтчетыСервер.ИнициализироватьПредопределенныеПараметрыВывода(НастройкиОтчета, Отчет.КомпоновщикНастроек.Настройки);
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	// Подготовка к предварительной инициализации компоновщика (используется при расшифровке).
	Если НастройкиОтчета.СхемаМодифицирована Тогда
		ДополнительныеСвойства.Вставить("АдресСхемы", НастройкиОтчета.АдресСхемы);
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ФормаНастроекРасширенныйРежим") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекРасширенныйРежим", ПараметрыЗагрузки.ФормаНастроекРасширенныйРежим);
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ФормаНастроекИмяСтраницы") Тогда
		НастройкиОтчета.Вставить("ФормаНастроекИмяСтраницы", ПараметрыЗагрузки.ФормаНастроекИмяСтраницы);
	КонецЕсли;
	
	УстановитьУсловияОтборов(ПараметрыЗагрузки);
	
	Если ПараметрыЗагрузки.ВариантМодифицирован Тогда
		ВариантМодифицирован = Истина;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.ПользовательскиеНастройкиМодифицированы Тогда
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	Если НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек Тогда
		НастройкиОтчета.ПрочитатьФлажокФормироватьСразуИзПользовательскихНастроек = Ложь;
		Элементы.ФормироватьСразу.Пометка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеСвойства,
			"ФормироватьСразу",
			НастройкиОтчета.ФормироватьСразу);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьПараметрыЗагрузки(ПараметрыЗагрузки)
	Если ТипЗнч(ПараметрыЗагрузки) <> Тип("Структура") Тогда 
		ПараметрыЗагрузки = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ИмяСобытия") Тогда
		ПараметрыЗагрузки.Вставить("ИмяСобытия", "");
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ВариантМодифицирован") Тогда
		ПараметрыЗагрузки.Вставить("ВариантМодифицирован", ВариантМодифицирован);
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		ПараметрыЗагрузки.Вставить("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы);
	КонецЕсли;
	
	Если Не ПараметрыЗагрузки.Свойство("Результат") Тогда
		ПараметрыЗагрузки.Вставить("Результат", Новый Структура);
	КонецЕсли;
	
	ПараметрыЗагрузки.Вставить("ОтчетОбъектИлиПолноеИмя", НастройкиОтчета.ПолноеИмя);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловияОтборов(ПараметрыЗагрузки)
	УсловияОтборов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗагрузки, "УсловияОтборов");
	Если УсловияОтборов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = Отчет.КомпоновщикНастроек.Настройки;
	ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого Условие Из УсловияОтборов Цикл
		ЭлементПользовательскойНастройки = ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Условие.Ключ);
		ЭлементПользовательскойНастройки.ВидСравнения = Условие.Значение;
		
		Если ОтчетыКлиентСервер.ЭтоВидСравненияСписка(ЭлементПользовательскойНастройки.ВидСравнения)
			И ТипЗнч(ЭлементПользовательскойНастройки.ПравоеЗначение) <> Тип("СписокЗначений") Тогда 
			
			ЭлементПользовательскойНастройки.ПравоеЗначение = ОтчетыКлиентСервер.ЗначенияСписком(
				ЭлементПользовательскойНастройки.ПравоеЗначение);
		КонецЕсли;
		
		ЭлементНастройки = ОтчетыКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(
			Настройки, ЭлементПользовательскойНастройки.ИдентификаторПользовательскойНастройки,, ПользовательскиеНастройки);
		
		ЗаполнитьЗначенияСвойств(ЭлементНастройки, ЭлементПользовательскойНастройки, "ВидСравнения, ПравоеЗначение");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при формировании:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	
	ОтобразитьСостояниеОтчета(ОписаниеОшибки);
	Если Не ПустаяСтрока(ПодробноеПредставлениеОшибки) Тогда
		ВариантыОтчетов.ЗаписатьВЖурнал(УровеньЖурналаРегистрации.Предупреждение, ПодробноеПредставлениеОшибки, НастройкиОтчета.ВариантСсылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыВыбораВариантов()
	ВариантыФормы = РеквизитФормыВЗначение("ДобавленныеВарианты");
	ВариантыФормы.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Отчеты", ОтчетыСервер.ЗначениеВМассив(НастройкиОтчета.ОтчетСсылка));
	ПараметрыПоиска.Вставить("ТолькоЛичные", Истина);
	ТаблицаВариантов = ВариантыОтчетов.ТаблицаВариантовОтчетов(ПараметрыПоиска);
	Если НастройкиОтчета.Внешний Тогда // Добавить предопределенные варианты внешнего отчета в таблицу вариантов.
		Для Каждого ЭлементСписка Из НастройкиОтчета.ПредопределенныеВарианты Цикл
			СтрокаТаблицы = ТаблицаВариантов.Добавить();
			СтрокаТаблицы.Наименование = ЭлементСписка.Представление;
			СтрокаТаблицы.КлючВарианта = ЭлементСписка.Значение;
		КонецЦикла;
	КонецЕсли;
	ТаблицаВариантов.Свернуть("Ссылка, КлючВарианта, Наименование, Автор, ТолькоДляАвтора");
	ТаблицаВариантов.Сортировать("Наименование Возр, КлючВарианта Возр");
	
	ГраницаМеню = ВариантыФормы.Количество() - 1;
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		Если СтрокаТаблицы.ТолькоДляАвтора = Истина
			И СтрокаТаблицы.Автор <> АвторизованныйПользователь Тогда
			Продолжить;
		КонецЕсли;
		Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("КлючВарианта, Найден", СтрокаТаблицы.КлючВарианта, Ложь));
		Если Найденные.Количество() = 1 Тогда
			ВариантФормы = Найденные[0];
			ВариантФормы.Найден = Истина;
			
			Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(Кнопка, Элементы.ГруппаВариантыОтчета);
			
			// Подменю Еще (Все действия).
			КнопкаЕще = Элементы.Найти(ВариантФормы.ИмяКоманды + "Еще");
			КнопкаЕще.Видимость = Истина;
			КнопкаЕще.Заголовок = СтрокаТаблицы.Наименование;
			Элементы.Переместить(КнопкаЕще, Элементы.ГруппаВариантыОтчетаЕще);
		Иначе
			ГраницаМеню = ГраницаМеню + 1;
			ВариантФормы = ВариантыФормы.Добавить();
			ЗаполнитьЗначенияСвойств(ВариантФормы, СтрокаТаблицы);
			ВариантФормы.Найден = Истина;
			ВариантФормы.ИмяКоманды = "ВыбратьВариант_" + Формат(ГраницаМеню, "ЧН=0; ЧГ=");
			
			Команда = Команды.Добавить(ВариантФормы.ИмяКоманды);
			Команда.Действие = "Подключаемый_ЗагрузитьВариантОтчета";
			
			Кнопка = Элементы.Добавить(ВариантФормы.ИмяКоманды, Тип("КнопкаФормы"), Элементы.ГруппаВариантыОтчета);
			Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			Кнопка.ИмяКоманды = ВариантФормы.ИмяКоманды;
			Кнопка.Заголовок = СтрокаТаблицы.Наименование;
			
			// Подменю Еще (Все действия).
			КнопкаЕще = Элементы.Добавить(ВариантФормы.ИмяКоманды + "Еще", Тип("КнопкаФормы"), Элементы.ГруппаВариантыОтчетаЕще);
			КнопкаЕще.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаЕще.ИмяКоманды = ВариантФормы.ИмяКоманды;
			КнопкаЕще.Заголовок = СтрокаТаблицы.Наименование;
			
			ПостоянныеКоманды.Добавить(ВариантФормы.ИмяКоманды);
		КонецЕсли;
		
		Кнопка.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
		Кнопка.ТолькоВоВсехДействиях = Ложь;
		
		КнопкаЕще.Пометка = (КлючТекущегоВарианта = СтрокаТаблицы.КлючВарианта);
		КнопкаЕще.ТолькоВоВсехДействиях = Истина;
	КонецЦикла;
	
	Найденные = ВариантыФормы.НайтиСтроки(Новый Структура("Найден", Ложь));
	Для Каждого ВариантФормы Из Найденные Цикл
		Кнопка = Элементы.Найти(ВариантФормы.ИмяКоманды);
		Кнопка.Видимость = Ложь;
		
		// Подменю Еще (Все действия).
		КнопкаЕще = Элементы.Найти(ВариантФормы.ИмяКоманды + "Еще");
		КнопкаЕще.Видимость = Ложь;
	КонецЦикла;
	
	ВариантыФормы.Колонки.Удалить("Найден");
	ЗначениеВРеквизитФормы(ВариантыФормы, "ДобавленныеВарианты");
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	ДополнительныеСвойства.Вставить("ВариантНаименование", ОтчетНаименованиеТекущегоВарианта);
	
	НастройкиОтчета.Вставить("ВариантСсылка", Неопределено);
	НастройкиОтчета.Вставить("КлючЗамеров", Неопределено);
	НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
	НастройкиОтчета.Вставить("ИмяИсходногоВарианта", Неопределено);
	НастройкиОтчета.Вставить("Пользовательский", Ложь);
	НастройкиОтчета.Вставить("ТипОтчета", Неопределено);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|			ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|		ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВариантыОтчетов.ТипОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|");
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗамеров = Выборка.КлючЗамеров;
	Если Не ЗначениеЗаполнено(КлючЗамеров) Тогда 
		КлючЗамеров = ОбщегоНазначения.СократитьСтрокуКонтрольнойСуммой(
			НастройкиОтчета.ПолноеИмя + "." + КлючТекущегоВарианта, 135);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтчета, Выборка);
	
	НастройкиОтчета.КлючЗамеров = КлючЗамеров;
	НастройкиОтчета.ИмяИсходногоВарианта = ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта);
КонецПроцедуры

&НаСервере
Функция РежимВариантаОтчета()
	Возврат ТипЗнч(КлючТекущегоВарианта) = Тип("Строка") И Не ПустаяСтрока(КлючТекущегоВарианта);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустойКлючВарианта()
	Возврат " - ";
КонецФункции

#КонецОбласти

#Область ПроцедурыФункцииБК

&НаКлиенте
Процедура ВыбратьПериодБК(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
	ИзмененыНастройкиБК = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитБКПриИзменении(Элемент)
	
	ИзмененыНастройкиБК = Истина;
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокСтруктурныхЕдиниц"              , СписокСтруктурныхЕдиниц);
	ДополнительныеПараметры.Вставить("СписокПодразделений"                  , СписокПодразделений);
	ДополнительныеПараметры.Вставить("СписокВладельцевГоловныхПодразделений", СписокВладельцевГоловныхПодразделений);
	ДополнительныеПараметры.Вставить("ВыборСтруктурныхПодразделений"        , ПоддержкаРаботыСоСтруктурнымиПодразделениями И ВыборСтруктурныхПодразделений); 
	
	БухгалтерскиеОтчетыКлиент.ПредставлениеСпискаОрганизацийНачалоВыбора(ЭтаФорма, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаОрганизацийОчистка(Элемент, СтандартнаяОбработка)
	
	СписокПодразделений.Очистить();
	СписокСтруктурныхЕдиниц.Очистить();
	СписокВладельцевГоловныхПодразделений.Очистить();
	
	ПредставлениеСпискаОрганизаций   = "";
	ПредставлениеСпискаПодразделений = "";
	
	Элементы.ПредставлениеСпискаПодразделений.Видимость = СписокПодразделений.Количество() > 0;
	
	ИзмененыНастройкиБК = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСтруктурногоПодразделения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		СписокСтруктурныхЕдиниц = РезультатВыбора.СписокСтруктурныхЕдиниц;
		ПредставлениеСпискаОрганизаций = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
		БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, ПредставлениеСпискаОрганизаций);
		
		СписокПодразделений = РезультатВыбора.СписокПодразделений;
		СписокВладельцевГоловныхПодразделений = РезультатВыбора.СписокВладельцевГоловныхПодразделений;
		
		ПредставлениеСпискаПодразделений = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокПодразделений);
		БухгалтерскиеОтчетыКлиент.ПодразделениеПриИзменении(ЭтотОбъект, ПредставлениеСпискаПодразделений);
	
		Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
		КонецЕсли;
		
		ИзмененыНастройкиБК = Истина;
		
	КонецЕсли;
	
	Элементы.ПредставлениеСпискаПодразделений.Видимость = СписокПодразделений.Количество() > 0;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаРасчетовНажатие(Элемент)
	
	Если ТипЗадолженности = 3 Тогда
		БухгалтерскиеОтчетыКлиент.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ЭтаФорма, ТипЗадолженности,,,, СписокСчетовРасчета);
	Иначе
		БухгалтерскиеОтчетыКлиент.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ЭтаФорма, ТипЗадолженности);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоследнийЭлементСтруктуры(НастройкиКД, Строки = Истина)
	
	Структура = НастройкиКД.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат НастройкиКД;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

&НаКлиенте
Процедура НалогоплательщикПриИзменении(Элемент)
	
	СписокСтруктурныхЕдиниц.Очистить();
	ПредставлениеСпискаСтруктурныхЕдиниц = "";
	
	// переформируем список структурных единиц
	Если ПоддержкаРаботыСоСтруктурнымиПодразделениями Тогда
		СписокСтруктурныхЕдиниц = ПроцедурыНалоговогоУчетаВызовСервераПовтИсп.СформироватьСписокСтруктурныхЕдиниц(ПеречислениеРазделыНалоговогоУчета,, Налогоплательщик);
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
    Иначе
		СписокСтруктурныхЕдиниц.Добавить(Налогоплательщик);
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(СписокСтруктурныхЕдиниц);
    КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
	Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
	
	ИзмененыНастройкиБК = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.НачалоВыбораСпискаСтруктурныхЕдиниц(
		СписокСтруктурныхЕдиниц, ЭтаФорма, СтандартнаяОбработка, РежимВыбораСтруктурныхЕдиниц, Налогоплательщик,, ПеречислениеРазделыНалоговогоУчета, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСпискаСтруктурныхЕдиницОчистка(Элемент, СтандартнаяОбработка)
	
	ИзмененыНастройкиБК = Истина;
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСпискаСтруктурныхЕдиниц(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		СписокСтруктурныхЕдиниц = Результат;
		ПредставлениеСпискаСтруктурныхЕдиниц = БухгалтерскиеОтчетыКлиентСервер.ВыгрузитьСписокВСтроку(Результат);
		
		Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
		КонецЕсли;
		
		ИзмененыНастройкиБК = Истина;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	// Обработка шапки таблицы
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		ШапкаТаблицыВерх = 1;
		ШапкаТаблицыНиз  = ПараметрыОтчета.ВысотаШапки;
	Иначе
		ШапкаТаблицыВерх = Результат.Области.Заголовок.Низ + 1;
		ШапкаТаблицыНиз  = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	Результат.ФиксацияСверху = ШапкаТаблицыНиз;
	Результат.ФиксацияСлева  = 2;
	
	ШиринаТаблицы = Результат.ШиринаТаблицы;
	
	Для Колонка = 1 По ШиринаТаблицы Цикл
		ОбластьШапка = Результат.Область("R" + ШапкаТаблицыВерх + "C" + Колонка);
		ОбластьШапка.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		ОбластьШапка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ИнтервалыПриИзменении(Элемент)
	
	Интервалы.Сортировать("Значение Возр");
	
	ПерваяСтрока = Истина;
	ПредыдущееЗначение = 0;
	Для Каждого Интервал Из Интервалы Цикл
		Если ПерваяСтрока Тогда
			Интервал.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'До %1 дней'"), Интервал.Значение);
			ПредыдущееЗначение = Интервал.Значение;
			ПерваяСтрока = Ложь;
		Иначе
			Интервал.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'От %1 до %2 дней'"), ПредыдущееЗначение + 1, Интервал.Значение);
			ПредыдущееЗначение = Интервал.Значение;
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере();
	
	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
	ИзмененыНастройкиБК = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере(ОчиститьНастройки = Истина)
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Интервалы", Интервалы.Выгрузить());
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	Схема = ПолучитьИзВременногоХранилища(НастройкиОтчета.АдресСхемы);
	
	ОтчетОбъектИмя = ОтчетОбъект.Метаданные().Имя;

	Если ОтчетОбъектИмя = "ЗадолженностьПокупателейПоСрокамДолга" ИЛИ ОтчетОбъектИмя = "ЗадолженностьПоставщикамПоСрокамДолга" Тогда
		Отчеты[ОтчетОбъектИмя].ЗаполнитьПоляВСоответствииСоСпискомИнтервалов(
			ПараметрыОтчета, Схема, Отчет.КомпоновщикНастроек, ОчиститьНастройки);
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, СхемаКомпоновкиДанных);		
		
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикИнициализирован = Истина;
	
	ИзмененыНастройкиБК = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаСрокаОплатыНажатие(Элемент)
	
	ФормаНастроек = ПолучитьФорму("ОбщаяФорма.НастройкаПараметровУчета");
	
	ЭлементыФормы = ФормаНастроек.Элементы;
	ФормаНастроек.ТекущийЭлемент = ЭлементыФормы.СтраницаАналитическийУчетРасчетовСКонтрагентами;
	
	ФормаНастроек.Открыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокРеквизитовФормыБК(ВсеРеквизиты = Истина)
	
	МассивРеквизитовБК = Новый Массив;
	
	МассивРеквизитовБК.Добавить("НачалоПериода");
	МассивРеквизитовБК.Добавить("КонецПериода");
	МассивРеквизитовБК.Добавить("Период");
	МассивРеквизитовБК.Добавить("СписокСтруктурныхЕдиниц");
	МассивРеквизитовБК.Добавить("СписокПодразделений");
	МассивРеквизитовБК.Добавить("СписокВладельцевГоловныхПодразделений");
	МассивРеквизитовБК.Добавить("ТипЗадолженности");
	МассивРеквизитовБК.Добавить("КоличествоВыводимыхЗаписейВДиаграмме");
	МассивРеквизитовБК.Добавить("Периодичность");
	МассивРеквизитовБК.Добавить("Налогоплательщик");
	МассивРеквизитовБК.Добавить("ПеречислениеРазделыНалоговогоУчета");
	МассивРеквизитовБК.Добавить("Дата2");
	МассивРеквизитовБК.Добавить("Дата3");
	МассивРеквизитовБК.Добавить("Интервалы");
	МассивРеквизитовБК.Добавить("ВидРегистраОтчета");
	МассивРеквизитовБК.Добавить("ВыводитьЗаголовок");
	МассивРеквизитовБК.Добавить("ВыводитьПодписи");
	МассивРеквизитовБК.Добавить("ВыводитьПодписиРуководителей");
	МассивРеквизитовБК.Добавить("ИзмененыНастройкиВариант");
	
	Если ВсеРеквизиты Тогда
		МассивРеквизитовБК.Добавить("ПоддержкаРаботыСоСтруктурнымиПодразделениями");
		МассивРеквизитовБК.Добавить("ИдентификаторОтчета");
	КонецЕсли;
	
	Возврат МассивРеквизитовБК;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТаблицуИнтервалов(ТаблицаИнтервалов, ЗначенияИнтервалов)
	
	Если ТипЗнч(ЗначенияИнтервалов) = Тип("Массив")
		И ЗначенияИнтервалов.Количество() > 0 Тогда
		
		ТаблицаИнтервалов.Очистить();
		
		ПерваяСтрока = Истина;
		ПредыдущееЗначение = 0;
		
		Для Каждого ЗначениеИнтервала Из ЗначенияИнтервалов Цикл
			Если ПерваяСтрока Тогда
				Интервал = ТаблицаИнтервалов.Добавить();
				Интервал.Значение = ЗначениеИнтервала;
				Интервал.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'До %1 дней'"), ЗначениеИнтервала);
				ПредыдущееЗначение = ЗначениеИнтервала;
				ПерваяСтрока = Ложь;
			Иначе
				Интервал = ТаблицаИнтервалов.Добавить();
				Интервал.Значение = ЗначениеИнтервала;
				Интервал.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'От %1 до %2 дней'"), ПредыдущееЗначение + 1, ЗначениеИнтервала);
				ПредыдущееЗначение = ЗначениеИнтервала;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПодписиПриИзменении(Элемент)
	
	ВыводитьПодписиРуководителей = Ложь;
	Элементы.ВыводитьПодписиРуководителей.Доступность = ВыводитьПодписи;

	Если Не ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
	ИзмененыНастройкиБК = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РежимВариантаОтчетаБКПриИзменении(Элемент)
	
	Если НЕ РежимВариантаОтчетаБК И УдалитьРежимВыполненияОтчета() Тогда
		ОткрытьОбычнуюФормуОтчета();
		Закрыть();
	Иначе
		РежимВариантаОтчетаБК = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРежимВыполненияОтчета()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	СписокОтчетов = Новый СписокЗначений;
	ОтчетыВызовСервераБК.СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов);
	Если СписокОтчетов.НайтиПоЗначению(ОтчетМетаданные.Имя) = Неопределено Тогда
		// Открывается другой отчет
		Элементы.ГруппаБыстрыеОтборыБК.Видимость  = Ложь;
		Элементы.ГруппаЗаголовокПодписи.Видимость = Ложь;
	    Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетыВРежимеВариантыОтчетов.Отчет,
		|	ОтчетыВРежимеВариантыОтчетов.Пользователь
		|ИЗ
		|	РегистрСведений.ОтчетыВРежимеВариантыОтчетов КАК ОтчетыВРежимеВариантыОтчетов
		|ГДЕ
		|	ОтчетыВРежимеВариантыОтчетов.Отчет = &Отчет
		|	И ОтчетыВРежимеВариантыОтчетов.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Отчет", ОтчетМетаданные.ПолноеИмя());
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УдалитьРежимВыполненияОтчета()
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
		
	ОтчетРежим = РегистрыСведений.ОтчетыВРежимеВариантыОтчетов.СоздатьМенеджерЗаписи();
 	ОтчетРежим.Отчет = ОтчетМетаданные.ПолноеИмя();
 	ОтчетРежим.Пользователь = Пользователи.ТекущийПользователь();
	ОтчетРежим.Прочитать();

	Попытка
		ОтчетРежим.Удалить();
		Возврат Истина;
	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена'");
		Комментарий = НСтр("ru = 'При удалении записи в регистре сведений ""Отчеты в режиме ""Варианты отчетов"""" произошла ошибка:
		|%1'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Комментарий, ПодробноеПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, Комментарий);				
		ОбщегоНазначения.СообщитьПользователю(Комментарий);
		Возврат Ложь;
	КонецПопытки; 			
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОбычнуюФормуОтчета()
	
	ПараметрыФормы = Новый Структура("КлючВарианта", СтрРазделить(НастройкиОтчета.ПолноеИмя, ".")[1]);
	Если ОткрытИзРассылки Тогда
		ПараметрыФормы.Вставить("ОтчетТабличныйДокумент", ОтчетТабличныйДокумент);
		ПараметрыФормы.Вставить("ОткрытИзРассылки", ОткрытИзРассылки);
		Если НастройкиОтчета.Свойство("ПользовательскиеНастройки") Тогда
			ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкиОтчета.ПользовательскиеНастройки);
		КонецЕсли;
		Если НастройкиОтчета.Свойство("ИдентификаторСтрокиОтчета") Тогда
			ПараметрыФормы.Вставить("ИдентификаторСтрокиОтчета", НастройкиОтчета.ИдентификаторСтрокиОтчета);
		КонецЕсли;
		Если НастройкиОтчета.Свойство("ИдентификаторФормыРассылки") Тогда
			ПараметрыФормы.Вставить("ИдентификаторФормыРассылки", НастройкиОтчета.ИдентификаторФормыРассылки);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму(НастройкиОтчета.ПолноеИмя + ".Форма.ФормаОтчета", ПараметрыФормы, ВладелецФормы, Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивИнтерваловНаСервере()
	ТЗИнтервалы = ДанныеФормыВЗначение(Интервалы, Тип("ТаблицаЗначений"));
	ТЗИнтервалы.Сортировать("Значение");
	Возврат ТЗИнтервалы.ВыгрузитьКолонку("Значение");
КонецФункции
	
&НаКлиенте
Процедура НастройкаИнтерваловНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Интервалы", ПолучитьМассивИнтерваловНаСервере());
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиИнтервалов",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытИзРассылки Тогда
		Если ПользовательскиеНастройкиМодифицированы ИЛИ ИзмененыНастройкиБК Тогда
			ПользовательскиеНастройкиМодифицированы = Ложь;
			ИзмененыНастройкиБК = Ложь;
			ПриСохраненииПользовательскихНастроекНаСервере(Неопределено);
			РассылкаОтчетовБККлиент.ПередЗакрытием(ЭтаФорма);
		КонецЕсли;
	ИначеЕсли НЕ ПользовательскиеНастройкиМодифицированы И ИзмененыНастройкиБК Тогда
        ПользовательскиеНастройкиМодифицированы = Истина;
    ИначеЕсли ПользовательскиеНастройкиМодифицированы Тогда
        ИзмененыНастройкиБК = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура  ОбработкаОповещенияНастроеныИнтервалыНаСервере(Параметр)
	ЗаполнитьТаблицуИнтервалов(Интервалы,Параметр.Интервалы);
	НастройкиОтчета.АдресСхемы = ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Отчет").СхемаКомпоновкиДанных, УникальныйИдентификатор);
	НастройкиОтчета.СхемаМодифицирована = Истина;
	ЗаполнитьПоляВСоответствииСоСпискомИнтерваловНаСервере();
	
КонецПроцедуры

#КонецОбласти

